/*! For license information please see main.b7e0ecc802e002026aec.js.LICENSE.txt */
(()=>{var t={151:()=>{const t=document.querySelector("form"),e=document.getElementById("emailInput");t.addEventListener("submit",(t=>{t.preventDefault(),function(){const t=`${e.value}`;Email.send({Host:"smtp.elasticemail.com",Username:"ruggeri.telecomunicaciones@gmail.com",Password:"8246E6D32DE4F94769BA445ECCA285F246EC",To:"ruggeri.telecomunicaciones@gmail.com",From:"ruggeri.telecomunicaciones@gmail.com",Subject:"Nueva Suscripción",Body:t}).then((()=>alert("Su correo ha sido enviado con éxito")))}()}))},703:(t,e,r)=>{"use strict";r.d(e,{A:()=>a});var n=r(354),i=r.n(n),s=r(314),o=r.n(s)()(i());o.push([t.id,"// extracted by mini-css-extract-plugin\nexport {};","",{version:3,sources:["webpack://./src/css/contacto.css"],names:[],mappings:"AAAA;QACQ,CAAA",sourcesContent:["// extracted by mini-css-extract-plugin\nexport {};"],sourceRoot:""}]);const a=o},721:(t,e,r)=>{"use strict";r.d(e,{A:()=>a});var n=r(354),i=r.n(n),s=r(314),o=r.n(s)()(i());o.push([t.id,"// extracted by mini-css-extract-plugin\nexport {};","",{version:3,sources:["webpack://./src/css/footer.css"],names:[],mappings:"AAAA;QACQ,CAAA",sourcesContent:["// extracted by mini-css-extract-plugin\nexport {};"],sourceRoot:""}]);const a=o},749:(t,e,r)=>{"use strict";r.d(e,{A:()=>a});var n=r(354),i=r.n(n),s=r(314),o=r.n(s)()(i());o.push([t.id,"// extracted by mini-css-extract-plugin\nexport {};","",{version:3,sources:["webpack://./src/css/home.css"],names:[],mappings:"AAAA;QACQ,CAAA",sourcesContent:["// extracted by mini-css-extract-plugin\nexport {};"],sourceRoot:""}]);const a=o},153:(t,e,r)=>{"use strict";r.d(e,{A:()=>a});var n=r(354),i=r.n(n),s=r(314),o=r.n(s)()(i());o.push([t.id,"// extracted by mini-css-extract-plugin\nexport {};","",{version:3,sources:["webpack://./src/css/nav.css"],names:[],mappings:"AAAA;QACQ,CAAA",sourcesContent:["// extracted by mini-css-extract-plugin\nexport {};"],sourceRoot:""}]);const a=o},155:(t,e,r)=>{"use strict";r.d(e,{A:()=>a});var n=r(354),i=r.n(n),s=r(314),o=r.n(s)()(i());o.push([t.id,"// extracted by mini-css-extract-plugin\nexport {};","",{version:3,sources:["webpack://./src/css/nosotros.css"],names:[],mappings:"AAAA;QACQ,CAAA",sourcesContent:["// extracted by mini-css-extract-plugin\nexport {};"],sourceRoot:""}]);const a=o},280:(t,e,r)=>{"use strict";r.d(e,{A:()=>a});var n=r(354),i=r.n(n),s=r(314),o=r.n(s)()(i());o.push([t.id,"// extracted by mini-css-extract-plugin\nexport {};","",{version:3,sources:["webpack://./src/css/preloader.css"],names:[],mappings:"AAAA;QACQ,CAAA",sourcesContent:["// extracted by mini-css-extract-plugin\nexport {};"],sourceRoot:""}]);const a=o},753:(t,e,r)=>{"use strict";r.d(e,{A:()=>a});var n=r(354),i=r.n(n),s=r(314),o=r.n(s)()(i());o.push([t.id,"// extracted by mini-css-extract-plugin\nexport {};","",{version:3,sources:["webpack://./src/css/servicios.css"],names:[],mappings:"AAAA;QACQ,CAAA",sourcesContent:["// extracted by mini-css-extract-plugin\nexport {};"],sourceRoot:""}]);const a=o},189:(t,e,r)=>{"use strict";r.d(e,{A:()=>a});var n=r(354),i=r.n(n),s=r(314),o=r.n(s)()(i());o.push([t.id,"// extracted by mini-css-extract-plugin\nexport {};","",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAAA;QACQ,CAAA",sourcesContent:["// extracted by mini-css-extract-plugin\nexport {};"],sourceRoot:""}]);const a=o},314:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r="",n=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),n&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=t(e),n&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(t,r,n,i,s){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(n)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(o[l]=!0)}for(var u=0;u<t.length;u++){var c=[].concat(t[u]);n&&o[c[0]]||(void 0!==s&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=s),r&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=r):c[2]=r),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),e.push(c))}},e}},354:t=>{"use strict";t.exports=function(t){var e=t[1],r=t[3];if(!r)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),s="/*# ".concat(i," */");return[e].concat([s]).join("\n")}return[e].join("\n")}},72:t=>{"use strict";var e=[];function r(t){for(var r=-1,n=0;n<e.length;n++)if(e[n].identifier===t){r=n;break}return r}function n(t,n){for(var s={},o=[],a=0;a<t.length;a++){var l=t[a],u=n.base?l[0]+n.base:l[0],c=s[u]||0,h="".concat(u," ").concat(c);s[u]=c+1;var f=r(h),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==f)e[f].references++,e[f].updater(p);else{var d=i(p,n);n.byIndex=a,e.splice(a,0,{identifier:h,updater:d,references:1})}o.push(h)}return o}function i(t,e){var r=e.domAPI(e);r.update(t);return function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;r.update(t=e)}else r.remove()}}t.exports=function(t,i){var s=n(t=t||[],i=i||{});return function(t){t=t||[];for(var o=0;o<s.length;o++){var a=r(s[o]);e[a].references--}for(var l=n(t,i),u=0;u<s.length;u++){var c=r(s[u]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}s=l}}},659:t=>{"use strict";var e={};t.exports=function(t,r){var n=function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},540:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,r)=>{"use strict";t.exports=function(t){var e=r.nc;e&&t.setAttribute("nonce",e)}},825:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(r){!function(t,e,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var i=void 0!==r.layer;i&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,i&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var s=r.sourceMap;s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var s=e[n]={id:n,exports:{}};return t[n](s,s.exports,r),s.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.nc=void 0,(()=>{"use strict";var t=r(72),e=r.n(t),n=r(825),i=r.n(n),s=r(659),o=r.n(s),a=r(56),l=r.n(a),u=r(540),c=r.n(u),h=r(113),f=r.n(h),p=r(280),d={};d.styleTagTransform=f(),d.setAttributes=l(),d.insert=o().bind(null,"head"),d.domAPI=i(),d.insertStyleElement=c();e()(p.A,d);p.A&&p.A.locals&&p.A.locals;var m=r(189),g={};g.styleTagTransform=f(),g.setAttributes=l(),g.insert=o().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=c();e()(m.A,g);m.A&&m.A.locals&&m.A.locals;var v=r(153),_={};_.styleTagTransform=f(),_.setAttributes=l(),_.insert=o().bind(null,"head"),_.domAPI=i(),_.insertStyleElement=c();e()(v.A,_);v.A&&v.A.locals&&v.A.locals;var y=r(749),b={};b.styleTagTransform=f(),b.setAttributes=l(),b.insert=o().bind(null,"head"),b.domAPI=i(),b.insertStyleElement=c();e()(y.A,b);y.A&&y.A.locals&&y.A.locals;var x=r(155),w={};w.styleTagTransform=f(),w.setAttributes=l(),w.insert=o().bind(null,"head"),w.domAPI=i(),w.insertStyleElement=c();e()(x.A,w);x.A&&x.A.locals&&x.A.locals;var T=r(753),S={};S.styleTagTransform=f(),S.setAttributes=l(),S.insert=o().bind(null,"head"),S.domAPI=i(),S.insertStyleElement=c();e()(T.A,S);T.A&&T.A.locals&&T.A.locals;var A=r(703),M={};M.styleTagTransform=f(),M.setAttributes=l(),M.insert=o().bind(null,"head"),M.domAPI=i(),M.insertStyleElement=c();e()(A.A,M);A.A&&A.A.locals&&A.A.locals;var C=r(721),k={};k.styleTagTransform=f(),k.setAttributes=l(),k.insert=o().bind(null,"head"),k.domAPI=i(),k.insertStyleElement=c();e()(C.A,k);C.A&&C.A.locals&&C.A.locals;function E(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function O(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}var P,R,z,D,L,I,F,N,B,Y,X,W,H,U,q,j,V,Q={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},G={duration:.5,overwrite:!1,delay:0},$=1e8,Z=1e-8,K=2*Math.PI,J=K/4,tt=0,et=Math.sqrt,rt=Math.cos,nt=Math.sin,it=function(t){return"string"==typeof t},st=function(t){return"function"==typeof t},ot=function(t){return"number"==typeof t},at=function(t){return void 0===t},lt=function(t){return"object"==typeof t},ut=function(t){return!1!==t},ct=function(){return"undefined"!=typeof window},ht=function(t){return st(t)||it(t)},ft="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},pt=Array.isArray,dt=/(?:-?\.?\d|\.)+/gi,mt=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,gt=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,vt=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,_t=/[+-]=-?[.\d]+/,yt=/[^,'"\[\]\s]+/gi,bt=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,xt={},wt={},Tt=function(t){return(wt=Kt(t,xt))&&Jr},St=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},At=function(t,e){return!e&&console.warn(t)},Mt=function(t,e){return t&&(xt[t]=e)&&wt&&(wt[t]=e)||xt},Ct=function(){return 0},kt={suppressEvents:!0,isStart:!0,kill:!1},Et={suppressEvents:!0,kill:!1},Ot={suppressEvents:!0},Pt={},Rt=[],zt={},Dt={},Lt={},It=30,Ft=[],Nt="",Bt=function(t){var e,r,n=t[0];if(lt(n)||st(n)||(t=[t]),!(e=(n._gsap||{}).harness)){for(r=Ft.length;r--&&!Ft[r].targetTest(n););e=Ft[r]}for(r=t.length;r--;)t[r]&&(t[r]._gsap||(t[r]._gsap=new pr(t[r],e)))||t.splice(r,1);return t},Yt=function(t){return t._gsap||Bt(Oe(t))[0]._gsap},Xt=function(t,e,r){return(r=t[e])&&st(r)?t[e]():at(r)&&t.getAttribute&&t.getAttribute(e)||r},Wt=function(t,e){return(t=t.split(",")).forEach(e)||t},Ht=function(t){return Math.round(1e5*t)/1e5||0},Ut=function(t){return Math.round(1e7*t)/1e7||0},qt=function(t,e){var r=e.charAt(0),n=parseFloat(e.substr(2));return t=parseFloat(t),"+"===r?t+n:"-"===r?t-n:"*"===r?t*n:t/n},jt=function(t,e){for(var r=e.length,n=0;t.indexOf(e[n])<0&&++n<r;);return n<r},Vt=function(){var t,e,r=Rt.length,n=Rt.slice(0);for(zt={},Rt.length=0,t=0;t<r;t++)(e=n[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},Qt=function(t,e,r,n){Rt.length&&!R&&Vt(),t.render(e,r,n||R&&e<0&&(t._initted||t._startAt)),Rt.length&&!R&&Vt()},Gt=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(yt).length<2?e:it(t)?t.trim():t},$t=function(t){return t},Zt=function(t,e){for(var r in e)r in t||(t[r]=e[r]);return t},Kt=function(t,e){for(var r in e)t[r]=e[r];return t},Jt=function t(e,r){for(var n in r)"__proto__"!==n&&"constructor"!==n&&"prototype"!==n&&(e[n]=lt(r[n])?t(e[n]||(e[n]={}),r[n]):r[n]);return e},te=function(t,e){var r,n={};for(r in t)r in e||(n[r]=t[r]);return n},ee=function(t){var e,r=t.parent||D,n=t.keyframes?(e=pt(t.keyframes),function(t,r){for(var n in r)n in t||"duration"===n&&e||"ease"===n||(t[n]=r[n])}):Zt;if(ut(t.inherit))for(;r;)n(t,r.vars.defaults),r=r.parent||r._dp;return t},re=function(t,e,r,n,i){void 0===r&&(r="_first"),void 0===n&&(n="_last");var s,o=t[n];if(i)for(s=e[i];o&&o[i]>s;)o=o._prev;return o?(e._next=o._next,o._next=e):(e._next=t[r],t[r]=e),e._next?e._next._prev=e:t[n]=e,e._prev=o,e.parent=e._dp=t,e},ne=function(t,e,r,n){void 0===r&&(r="_first"),void 0===n&&(n="_last");var i=e._prev,s=e._next;i?i._next=s:t[r]===e&&(t[r]=s),s?s._prev=i:t[n]===e&&(t[n]=i),e._next=e._prev=e.parent=null},ie=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove&&t.parent.remove(t),t._act=0},se=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var r=t;r;)r._dirty=1,r=r.parent;return t},oe=function(t,e,r,n){return t._startAt&&(R?t._startAt.revert(Et):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(e,!0,n))},ae=function t(e){return!e||e._ts&&t(e.parent)},le=function(t){return t._repeat?ue(t._tTime,t=t.duration()+t._rDelay)*t:0},ue=function(t,e){var r=Math.floor(t/=e);return t&&r===t?r-1:r},ce=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},he=function(t){return t._end=Ut(t._start+(t._tDur/Math.abs(t._ts||t._rts||Z)||0))},fe=function(t,e){var r=t._dp;return r&&r.smoothChildTiming&&t._ts&&(t._start=Ut(r._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),he(t),r._dirty||se(r,t)),t},pe=function(t,e){var r;if((e._time||!e._dur&&e._initted||e._start<t._time&&(e._dur||!e.add))&&(r=ce(t.rawTime(),e),(!e._dur||Ae(0,e.totalDuration(),r)-e._tTime>Z)&&e.render(r,!0)),se(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(r=t;r._dp;)r.rawTime()>=0&&r.totalTime(r._tTime),r=r._dp;t._zTime=-1e-8}},de=function(t,e,r,n){return e.parent&&ie(e),e._start=Ut((ot(r)?r:r||t!==D?we(t,r,e):t._time)+e._delay),e._end=Ut(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),re(t,e,"_first","_last",t._sort?"_start":0),_e(e)||(t._recent=e),n||pe(t,e),t._ts<0&&fe(t,t._tTime),t},me=function(t,e){return(xt.ScrollTrigger||St("scrollTrigger",e))&&xt.ScrollTrigger.create(e,t)},ge=function(t,e,r,n,i){return xr(t,e,i),t._initted?!r&&t._pt&&!R&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&B!==tr.frame?(Rt.push(t),t._lazy=[i,n],1):void 0:1},ve=function t(e){var r=e.parent;return r&&r._ts&&r._initted&&!r._lock&&(r.rawTime()<0||t(r))},_e=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},ye=function(t,e,r,n){var i=t._repeat,s=Ut(e)||0,o=t._tTime/t._tDur;return o&&!n&&(t._time*=s/t._dur),t._dur=s,t._tDur=i?i<0?1e10:Ut(s*(i+1)+t._rDelay*i):s,o>0&&!n&&fe(t,t._tTime=t._tDur*o),t.parent&&he(t),r||se(t.parent,t),t},be=function(t){return t instanceof mr?se(t):ye(t,t._dur)},xe={_start:0,endTime:Ct,totalDuration:Ct},we=function t(e,r,n){var i,s,o,a=e.labels,l=e._recent||xe,u=e.duration()>=$?l.endTime(!1):e._dur;return it(r)&&(isNaN(r)||r in a)?(s=r.charAt(0),o="%"===r.substr(-1),i=r.indexOf("="),"<"===s||">"===s?(i>=0&&(r=r.replace(/=/,"")),("<"===s?l._start:l.endTime(l._repeat>=0))+(parseFloat(r.substr(1))||0)*(o?(i<0?l:n).totalDuration()/100:1)):i<0?(r in a||(a[r]=u),a[r]):(s=parseFloat(r.charAt(i-1)+r.substr(i+1)),o&&n&&(s=s/100*(pt(n)?n[0]:n).totalDuration()),i>1?t(e,r.substr(0,i-1),n)+s:u+s)):null==r?u:+r},Te=function(t,e,r){var n,i,s=ot(e[1]),o=(s?2:1)+(t<2?0:1),a=e[o];if(s&&(a.duration=e[1]),a.parent=r,t){for(n=a,i=r;i&&!("immediateRender"in n);)n=i.vars.defaults||{},i=ut(i.vars.inherit)&&i.parent;a.immediateRender=ut(n.immediateRender),t<2?a.runBackwards=1:a.startAt=e[o-1]}return new Mr(e[0],a,e[o+1])},Se=function(t,e){return t||0===t?e(t):e},Ae=function(t,e,r){return r<t?t:r>e?e:r},Me=function(t,e){return it(t)&&(e=bt.exec(t))?e[1]:""},Ce=[].slice,ke=function(t,e){return t&&lt(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&lt(t[0]))&&!t.nodeType&&t!==L},Ee=function(t,e,r){return void 0===r&&(r=[]),t.forEach((function(t){var n;return it(t)&&!e||ke(t,1)?(n=r).push.apply(n,Oe(t)):r.push(t)}))||r},Oe=function(t,e,r){return z&&!e&&z.selector?z.selector(t):!it(t)||r||!I&&er()?pt(t)?Ee(t,r):ke(t)?Ce.call(t,0):t?[t]:[]:Ce.call((e||F).querySelectorAll(t),0)},Pe=function(t){return t=Oe(t)[0]||At("Invalid scope")||{},function(e){var r=t.current||t.nativeElement||t;return Oe(e,r.querySelectorAll?r:r===t?At("Invalid scope")||F.createElement("div"):t)}},Re=function(t){return t.sort((function(){return.5-Math.random()}))},ze=function(t){if(st(t))return t;var e=lt(t)?t:{each:t},r=lr(e.ease),n=e.from||0,i=parseFloat(e.base)||0,s={},o=n>0&&n<1,a=isNaN(n)||o,l=e.axis,u=n,c=n;return it(n)?u=c={center:.5,edges:.5,end:1}[n]||0:!o&&a&&(u=n[0],c=n[1]),function(t,o,h){var f,p,d,m,g,v,_,y,b,x=(h||e).length,w=s[x];if(!w){if(!(b="auto"===e.grid?0:(e.grid||[1,$])[1])){for(_=-$;_<(_=h[b++].getBoundingClientRect().left)&&b<x;);b<x&&b--}for(w=s[x]=[],f=a?Math.min(b,x)*u-.5:n%b,p=b===$?0:a?x*c/b-.5:n/b|0,_=0,y=$,v=0;v<x;v++)d=v%b-f,m=p-(v/b|0),w[v]=g=l?Math.abs("y"===l?m:d):et(d*d+m*m),g>_&&(_=g),g<y&&(y=g);"random"===n&&Re(w),w.max=_-y,w.min=y,w.v=x=(parseFloat(e.amount)||parseFloat(e.each)*(b>x?x-1:l?"y"===l?x/b:b:Math.max(b,x/b))||0)*("edges"===n?-1:1),w.b=x<0?i-x:i,w.u=Me(e.amount||e.each)||0,r=r&&x<0?or(r):r}return x=(w[t]-w.min)/w.max||0,Ut(w.b+(r?r(x):x)*w.v)+w.u}},De=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(r){var n=Ut(Math.round(parseFloat(r)/t)*t*e);return(n-n%1)/e+(ot(r)?0:Me(r))}},Le=function(t,e){var r,n,i=pt(t);return!i&&lt(t)&&(r=i=t.radius||$,t.values?(t=Oe(t.values),(n=!ot(t[0]))&&(r*=r)):t=De(t.increment)),Se(e,i?st(t)?function(e){return n=t(e),Math.abs(n-e)<=r?n:e}:function(e){for(var i,s,o=parseFloat(n?e.x:e),a=parseFloat(n?e.y:0),l=$,u=0,c=t.length;c--;)(i=n?(i=t[c].x-o)*i+(s=t[c].y-a)*s:Math.abs(t[c]-o))<l&&(l=i,u=c);return u=!r||l<=r?t[u]:e,n||u===e||ot(e)?u:u+Me(e)}:De(t))},Ie=function(t,e,r,n){return Se(pt(t)?!e:!0===r?!!(r=0):!n,(function(){return pt(t)?t[~~(Math.random()*t.length)]:(r=r||1e-5)&&(n=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((t-r/2+Math.random()*(e-t+.99*r))/r)*r*n)/n}))},Fe=function(t,e,r){return Se(r,(function(r){return t[~~e(r)]}))},Ne=function(t){for(var e,r,n,i,s=0,o="";~(e=t.indexOf("random(",s));)n=t.indexOf(")",e),i="["===t.charAt(e+7),r=t.substr(e+7,n-e-7).match(i?yt:dt),o+=t.substr(s,e-s)+Ie(i?r:+r[0],i?0:+r[1],+r[2]||1e-5),s=n+1;return o+t.substr(s,t.length-s)},Be=function(t,e,r,n,i){var s=e-t,o=n-r;return Se(i,(function(e){return r+((e-t)/s*o||0)}))},Ye=function(t,e,r){var n,i,s,o=t.labels,a=$;for(n in o)(i=o[n]-e)<0==!!r&&i&&a>(i=Math.abs(i))&&(s=n,a=i);return s},Xe=function(t,e,r){var n,i,s,o=t.vars,a=o[e],l=z,u=t._ctx;if(a)return n=o[e+"Params"],i=o.callbackScope||t,r&&Rt.length&&Vt(),u&&(z=u),s=n?a.apply(i,n):a.call(i),z=l,s},We=function(t){return ie(t),t.scrollTrigger&&t.scrollTrigger.kill(!!R),t.progress()<1&&Xe(t,"onInterrupt"),t},He=[],Ue=function(t){if(t)if(t=!t.name&&t.default||t,ct()||t.headless){var e=t.name,r=st(t),n=e&&!r&&t.init?function(){this._props=[]}:t,i={init:Ct,render:Lr,add:yr,kill:Fr,modifier:Ir,rawVars:0},s={targetTest:0,get:0,getSetter:Pr,aliases:{},register:0};if(er(),t!==n){if(Dt[e])return;Zt(n,Zt(te(t,i),s)),Kt(n.prototype,Kt(i,te(t,s))),Dt[n.prop=e]=n,t.targetTest&&(Ft.push(n),Pt[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}Mt(e,n),t.register&&t.register(Jr,n,Yr)}else He.push(t)},qe=255,je={aqua:[0,qe,qe],lime:[0,qe,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,qe],navy:[0,0,128],white:[qe,qe,qe],olive:[128,128,0],yellow:[qe,qe,0],orange:[qe,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[qe,0,0],pink:[qe,192,203],cyan:[0,qe,qe],transparent:[qe,qe,qe,0]},Ve=function(t,e,r){return(6*(t+=t<0?1:t>1?-1:0)<1?e+(r-e)*t*6:t<.5?r:3*t<2?e+(r-e)*(2/3-t)*6:e)*qe+.5|0},Qe=function(t,e,r){var n,i,s,o,a,l,u,c,h,f,p=t?ot(t)?[t>>16,t>>8&qe,t&qe]:0:je.black;if(!p){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),je[t])p=je[t];else if("#"===t.charAt(0)){if(t.length<6&&(n=t.charAt(1),i=t.charAt(2),s=t.charAt(3),t="#"+n+n+i+i+s+s+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(p=parseInt(t.substr(1,6),16))>>16,p>>8&qe,p&qe,parseInt(t.substr(7),16)/255];p=[(t=parseInt(t.substr(1),16))>>16,t>>8&qe,t&qe]}else if("hsl"===t.substr(0,3))if(p=f=t.match(dt),e){if(~t.indexOf("="))return p=t.match(mt),r&&p.length<4&&(p[3]=1),p}else o=+p[0]%360/360,a=+p[1]/100,n=2*(l=+p[2]/100)-(i=l<=.5?l*(a+1):l+a-l*a),p.length>3&&(p[3]*=1),p[0]=Ve(o+1/3,n,i),p[1]=Ve(o,n,i),p[2]=Ve(o-1/3,n,i);else p=t.match(dt)||je.transparent;p=p.map(Number)}return e&&!f&&(n=p[0]/qe,i=p[1]/qe,s=p[2]/qe,l=((u=Math.max(n,i,s))+(c=Math.min(n,i,s)))/2,u===c?o=a=0:(h=u-c,a=l>.5?h/(2-u-c):h/(u+c),o=u===n?(i-s)/h+(i<s?6:0):u===i?(s-n)/h+2:(n-i)/h+4,o*=60),p[0]=~~(o+.5),p[1]=~~(100*a+.5),p[2]=~~(100*l+.5)),r&&p.length<4&&(p[3]=1),p},Ge=function(t){var e=[],r=[],n=-1;return t.split(Ze).forEach((function(t){var i=t.match(gt)||[];e.push.apply(e,i),r.push(n+=i.length+1)})),e.c=r,e},$e=function(t,e,r){var n,i,s,o,a="",l=(t+a).match(Ze),u=e?"hsla(":"rgba(",c=0;if(!l)return t;if(l=l.map((function(t){return(t=Qe(t,e,1))&&u+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),r&&(s=Ge(t),(n=r.c).join(a)!==s.c.join(a)))for(o=(i=t.replace(Ze,"1").split(gt)).length-1;c<o;c++)a+=i[c]+(~n.indexOf(c)?l.shift()||u+"0,0,0,0)":(s.length?s:l.length?l:r).shift());if(!i)for(o=(i=t.split(Ze)).length-1;c<o;c++)a+=i[c]+l[c];return a+i[o]},Ze=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in je)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),Ke=/hsl[a]?\(/,Je=function(t){var e,r=t.join(" ");if(Ze.lastIndex=0,Ze.test(r))return e=Ke.test(r),t[1]=$e(t[1],e),t[0]=$e(t[0],e,Ge(t[1])),!0},tr=function(){var t,e,r,n,i,s,o=Date.now,a=500,l=33,u=o(),c=u,h=1e3/240,f=h,p=[],d=function r(d){var m,g,v,_,y=o()-c,b=!0===d;if((y>a||y<0)&&(u+=y-l),((m=(v=(c+=y)-u)-f)>0||b)&&(_=++n.frame,i=v-1e3*n.time,n.time=v/=1e3,f+=m+(m>=h?4:h-m),g=1),b||(t=e(r)),g)for(s=0;s<p.length;s++)p[s](v,i,_,d)};return n={time:0,frame:0,tick:function(){d(!0)},deltaRatio:function(t){return i/(1e3/(t||60))},wake:function(){N&&(!I&&ct()&&(L=I=window,F=L.document||{},xt.gsap=Jr,(L.gsapVersions||(L.gsapVersions=[])).push(Jr.version),Tt(wt||L.GreenSockGlobals||!L.gsap&&L||{}),He.forEach(Ue)),r="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame,t&&n.sleep(),e=r||function(t){return setTimeout(t,f-1e3*n.time+1|0)},X=1,d(2))},sleep:function(){(r?cancelAnimationFrame:clearTimeout)(t),X=0,e=Ct},lagSmoothing:function(t,e){a=t||1/0,l=Math.min(e||33,a)},fps:function(t){h=1e3/(t||240),f=1e3*n.time+h},add:function(t,e,r){var i=e?function(e,r,s,o){t(e,r,s,o),n.remove(i)}:t;return n.remove(t),p[r?"unshift":"push"](i),er(),i},remove:function(t,e){~(e=p.indexOf(t))&&p.splice(e,1)&&s>=e&&s--},_listeners:p},n}(),er=function(){return!X&&tr.wake()},rr={},nr=/^[\d.\-M][\d.\-,\s]/,ir=/["']/g,sr=function(t){for(var e,r,n,i={},s=t.substr(1,t.length-3).split(":"),o=s[0],a=1,l=s.length;a<l;a++)r=s[a],e=a!==l-1?r.lastIndexOf(","):r.length,n=r.substr(0,e),i[o]=isNaN(n)?n.replace(ir,"").trim():+n,o=r.substr(e+1).trim();return i},or=function(t){return function(e){return 1-t(1-e)}},ar=function t(e,r){for(var n,i=e._first;i;)i instanceof mr?t(i,r):!i.vars.yoyoEase||i._yoyo&&i._repeat||i._yoyo===r||(i.timeline?t(i.timeline,r):(n=i._ease,i._ease=i._yEase,i._yEase=n,i._yoyo=r)),i=i._next},lr=function(t,e){return t&&(st(t)?t:rr[t]||function(t){var e,r,n,i,s=(t+"").split("("),o=rr[s[0]];return o&&s.length>1&&o.config?o.config.apply(null,~t.indexOf("{")?[sr(s[1])]:(e=t,r=e.indexOf("(")+1,n=e.indexOf(")"),i=e.indexOf("(",r),e.substring(r,~i&&i<n?e.indexOf(")",n+1):n)).split(",").map(Gt)):rr._CE&&nr.test(t)?rr._CE("",t):o}(t))||e},ur=function(t,e,r,n){void 0===r&&(r=function(t){return 1-e(1-t)}),void 0===n&&(n=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var i,s={easeIn:e,easeOut:r,easeInOut:n};return Wt(t,(function(t){for(var e in rr[t]=xt[t]=s,rr[i=t.toLowerCase()]=r,s)rr[i+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=rr[t+"."+e]=s[e]})),s},cr=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},hr=function t(e,r,n){var i=r>=1?r:1,s=(n||(e?.3:.45))/(r<1?r:1),o=s/K*(Math.asin(1/i)||0),a=function(t){return 1===t?1:i*Math.pow(2,-10*t)*nt((t-o)*s)+1},l="out"===e?a:"in"===e?function(t){return 1-a(1-t)}:cr(a);return s=K/s,l.config=function(r,n){return t(e,r,n)},l},fr=function t(e,r){void 0===r&&(r=1.70158);var n=function(t){return t?--t*t*((r+1)*t+r)+1:0},i="out"===e?n:"in"===e?function(t){return 1-n(1-t)}:cr(n);return i.config=function(r){return t(e,r)},i};Wt("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var r=e<5?e+1:e;ur(t+",Power"+(r-1),e?function(t){return Math.pow(t,r)}:function(t){return t},(function(t){return 1-Math.pow(1-t,r)}),(function(t){return t<.5?Math.pow(2*t,r)/2:1-Math.pow(2*(1-t),r)/2}))})),rr.Linear.easeNone=rr.none=rr.Linear.easeIn,ur("Elastic",hr("in"),hr("out"),hr()),W=7.5625,q=2*(U=1/(H=2.75)),j=2.5*U,ur("Bounce",(function(t){return 1-V(1-t)}),V=function(t){return t<U?W*t*t:t<q?W*Math.pow(t-1.5/H,2)+.75:t<j?W*(t-=2.25/H)*t+.9375:W*Math.pow(t-2.625/H,2)+.984375}),ur("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),ur("Circ",(function(t){return-(et(1-t*t)-1)})),ur("Sine",(function(t){return 1===t?1:1-rt(t*J)})),ur("Back",fr("in"),fr("out"),fr()),rr.SteppedEase=rr.steps=xt.SteppedEase={config:function(t,e){void 0===t&&(t=1);var r=1/t,n=t+(e?0:1),i=e?1:0;return function(t){return((n*Ae(0,.99999999,t)|0)+i)*r}}},G.ease=rr["quad.out"],Wt("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return Nt+=t+","+t+"Params,"}));var pr=function(t,e){this.id=tt++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:Xt,this.set=e?e.getSetter:Pr},dr=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,ye(this,+t.duration,1,1),this.data=t.data,z&&(this._ctx=z,z.data.push(this)),X||tr.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,ye(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(er(),!arguments.length)return this._tTime;var r=this._dp;if(r&&r.smoothChildTiming&&this._ts){for(fe(this,t),!r._dp||r.parent||pe(r,this);r&&r.parent;)r.parent._time!==r._start+(r._ts>=0?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&de(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===Z||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),Qt(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+le(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.rawTime()>0?1:0},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+le(this),e):this.duration()?Math.min(1,this._time/this._dur):this.rawTime()>0?1:0},e.iteration=function(t,e){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*r,e):this._repeat?ue(this._tTime,r)+1:1},e.timeScale=function(t,e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var r=this.parent&&this._ts?ce(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,this.totalTime(Ae(-Math.abs(this._delay),this._tDur,r),!1!==e),he(this),function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t}(this)},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(er(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==Z&&(this._tTime-=Z)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&de(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(ut(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?ce(e.rawTime(t),this):this._tTime:this._tTime},e.revert=function(t){void 0===t&&(t=Ot);var e=R;return R=t,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(t),this.totalTime(-.01,t.suppressEvents)),"nested"!==this.data&&!1!==t.kill&&this.kill(),R=e,this},e.globalTime=function(t){for(var e=this,r=arguments.length?t:e.rawTime();e;)r=e._start+r/(Math.abs(e._ts)||1),e=e._dp;return!this.parent&&this._sat?this._sat.globalTime(t):r},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,be(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,be(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(we(this,t),ut(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,ut(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,r=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=r&&t<this.endTime(!0)-Z))},e.eventCallback=function(t,e,r){var n=this.vars;return arguments.length>1?(e?(n[t]=e,r&&(n[t+"Params"]=r),"onUpdate"===t&&(this._onUpdate=e)):delete n[t],this):n[t]},e.then=function(t){var e=this;return new Promise((function(r){var n=st(t)?t:$t,i=function(){var t=e.then;e.then=null,st(n)&&(n=n(e))&&(n.then||n===e)&&(e.then=t),r(n),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?i():e._prom=i}))},e.kill=function(){We(this)},t}();Zt(dr.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var mr=function(t){function e(e,r){var n;return void 0===e&&(e={}),(n=t.call(this,e)||this).labels={},n.smoothChildTiming=!!e.smoothChildTiming,n.autoRemoveChildren=!!e.autoRemoveChildren,n._sort=ut(e.sortChildren),D&&de(e.parent||D,E(n),r),e.reversed&&n.reverse(),e.paused&&n.paused(!0),e.scrollTrigger&&me(E(n),e.scrollTrigger),n}O(e,t);var r=e.prototype;return r.to=function(t,e,r){return Te(0,arguments,this),this},r.from=function(t,e,r){return Te(1,arguments,this),this},r.fromTo=function(t,e,r,n){return Te(2,arguments,this),this},r.set=function(t,e,r){return e.duration=0,e.parent=this,ee(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new Mr(t,e,we(this,r),1),this},r.call=function(t,e,r){return de(this,Mr.delayedCall(0,t,e),r)},r.staggerTo=function(t,e,r,n,i,s,o){return r.duration=e,r.stagger=r.stagger||n,r.onComplete=s,r.onCompleteParams=o,r.parent=this,new Mr(t,r,we(this,i)),this},r.staggerFrom=function(t,e,r,n,i,s,o){return r.runBackwards=1,ee(r).immediateRender=ut(r.immediateRender),this.staggerTo(t,e,r,n,i,s,o)},r.staggerFromTo=function(t,e,r,n,i,s,o,a){return n.startAt=r,ee(n).immediateRender=ut(n.immediateRender),this.staggerTo(t,e,n,i,s,o,a)},r.render=function(t,e,r){var n,i,s,o,a,l,u,c,h,f,p,d,m=this._time,g=this._dirty?this.totalDuration():this._tDur,v=this._dur,_=t<=0?0:Ut(t),y=this._zTime<0!=t<0&&(this._initted||!v);if(this!==D&&_>g&&t>=0&&(_=g),_!==this._tTime||r||y){if(m!==this._time&&v&&(_+=this._time-m,t+=this._time-m),n=_,h=this._start,l=!(c=this._ts),y&&(v||(m=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(p=this._yoyo,a=v+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*a+t,e,r);if(n=Ut(_%a),_===g?(o=this._repeat,n=v):((o=~~(_/a))&&o===_/a&&(n=v,o--),n>v&&(n=v)),f=ue(this._tTime,a),!m&&this._tTime&&f!==o&&this._tTime-f*a-this._dur<=0&&(f=o),p&&1&o&&(n=v-n,d=1),o!==f&&!this._lock){var b=p&&1&f,x=b===(p&&1&o);if(o<f&&(b=!b),m=b?0:_%v?v:_,this._lock=1,this.render(m||(d?0:Ut(o*a)),e,!v)._lock=0,this._tTime=_,!e&&this.parent&&Xe(this,"onRepeat"),this.vars.repeatRefresh&&!d&&(this.invalidate()._lock=1),m&&m!==this._time||l!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(v=this._dur,g=this._tDur,x&&(this._lock=2,m=b?v:-1e-4,this.render(m,!0),this.vars.repeatRefresh&&!d&&this.invalidate()),this._lock=0,!this._ts&&!l)return this;ar(this,d)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(u=function(t,e,r){var n;if(r>e)for(n=t._first;n&&n._start<=r;){if("isPause"===n.data&&n._start>e)return n;n=n._next}else for(n=t._last;n&&n._start>=r;){if("isPause"===n.data&&n._start<e)return n;n=n._prev}}(this,Ut(m),Ut(n)),u&&(_-=n-(n=u._start))),this._tTime=_,this._time=n,this._act=!c,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,m=0),!m&&n&&!e&&!o&&(Xe(this,"onStart"),this._tTime!==_))return this;if(n>=m&&t>=0)for(i=this._first;i;){if(s=i._next,(i._act||n>=i._start)&&i._ts&&u!==i){if(i.parent!==this)return this.render(t,e,r);if(i.render(i._ts>0?(n-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(n-i._start)*i._ts,e,r),n!==this._time||!this._ts&&!l){u=0,s&&(_+=this._zTime=-1e-8);break}}i=s}else{i=this._last;for(var w=t<0?t:n;i;){if(s=i._prev,(i._act||w<=i._end)&&i._ts&&u!==i){if(i.parent!==this)return this.render(t,e,r);if(i.render(i._ts>0?(w-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(w-i._start)*i._ts,e,r||R&&(i._initted||i._startAt)),n!==this._time||!this._ts&&!l){u=0,s&&(_+=this._zTime=w?-1e-8:Z);break}}i=s}}if(u&&!e&&(this.pause(),u.render(n>=m?0:-1e-8)._zTime=n>=m?1:-1,this._ts))return this._start=h,he(this),this.render(t,e,r);this._onUpdate&&!e&&Xe(this,"onUpdate",!0),(_===g&&this._tTime>=this.totalDuration()||!_&&m)&&(h!==this._start&&Math.abs(c)===Math.abs(this._ts)||this._lock||((t||!v)&&(_===g&&this._ts>0||!_&&this._ts<0)&&ie(this,1),e||t<0&&!m||!_&&!m&&g||(Xe(this,_===g&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(_<g&&this.timeScale()>0)&&this._prom())))}return this},r.add=function(t,e){var r=this;if(ot(e)||(e=we(this,e,t)),!(t instanceof dr)){if(pt(t))return t.forEach((function(t){return r.add(t,e)})),this;if(it(t))return this.addLabel(t,e);if(!st(t))return this;t=Mr.delayedCall(0,t)}return this!==t?de(this,t,e):this},r.getChildren=function(t,e,r,n){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===r&&(r=!0),void 0===n&&(n=-$);for(var i=[],s=this._first;s;)s._start>=n&&(s instanceof Mr?e&&i.push(s):(r&&i.push(s),t&&i.push.apply(i,s.getChildren(!0,e,r)))),s=s._next;return i},r.getById=function(t){for(var e=this.getChildren(1,1,1),r=e.length;r--;)if(e[r].vars.id===t)return e[r]},r.remove=function(t){return it(t)?this.removeLabel(t):st(t)?this.killTweensOf(t):(ne(this,t),t===this._recent&&(this._recent=this._last),se(this))},r.totalTime=function(e,r){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=Ut(tr.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,r),this._forcing=0,this):this._tTime},r.addLabel=function(t,e){return this.labels[t]=we(this,e),this},r.removeLabel=function(t){return delete this.labels[t],this},r.addPause=function(t,e,r){var n=Mr.delayedCall(0,e||Ct,r);return n.data="isPause",this._hasPause=1,de(this,n,we(this,t))},r.removePause=function(t){var e=this._first;for(t=we(this,t);e;)e._start===t&&"isPause"===e.data&&ie(e),e=e._next},r.killTweensOf=function(t,e,r){for(var n=this.getTweensOf(t,r),i=n.length;i--;)gr!==n[i]&&n[i].kill(t,e);return this},r.getTweensOf=function(t,e){for(var r,n=[],i=Oe(t),s=this._first,o=ot(e);s;)s instanceof Mr?jt(s._targets,i)&&(o?(!gr||s._initted&&s._ts)&&s.globalTime(0)<=e&&s.globalTime(s.totalDuration())>e:!e||s.isActive())&&n.push(s):(r=s.getTweensOf(i,e)).length&&n.push.apply(n,r),s=s._next;return n},r.tweenTo=function(t,e){e=e||{};var r,n=this,i=we(n,t),s=e,o=s.startAt,a=s.onStart,l=s.onStartParams,u=s.immediateRender,c=Mr.to(n,Zt({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:i,overwrite:"auto",duration:e.duration||Math.abs((i-(o&&"time"in o?o.time:n._time))/n.timeScale())||Z,onStart:function(){if(n.pause(),!r){var t=e.duration||Math.abs((i-(o&&"time"in o?o.time:n._time))/n.timeScale());c._dur!==t&&ye(c,t,0,1).render(c._time,!0,!0),r=1}a&&a.apply(c,l||[])}},e));return u?c.render(0):c},r.tweenFromTo=function(t,e,r){return this.tweenTo(e,Zt({startAt:{time:we(this,t)}},r))},r.recent=function(){return this._recent},r.nextLabel=function(t){return void 0===t&&(t=this._time),Ye(this,we(this,t))},r.previousLabel=function(t){return void 0===t&&(t=this._time),Ye(this,we(this,t),1)},r.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+Z)},r.shiftChildren=function(t,e,r){void 0===r&&(r=0);for(var n,i=this._first,s=this.labels;i;)i._start>=r&&(i._start+=t,i._end+=t),i=i._next;if(e)for(n in s)s[n]>=r&&(s[n]+=t);return se(this)},r.invalidate=function(e){var r=this._first;for(this._lock=0;r;)r.invalidate(e),r=r._next;return t.prototype.invalidate.call(this,e)},r.clear=function(t){void 0===t&&(t=!0);for(var e,r=this._first;r;)e=r._next,this.remove(r),r=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),se(this)},r.totalDuration=function(t){var e,r,n,i=0,s=this,o=s._last,a=$;if(arguments.length)return s.timeScale((s._repeat<0?s.duration():s.totalDuration())/(s.reversed()?-t:t));if(s._dirty){for(n=s.parent;o;)e=o._prev,o._dirty&&o.totalDuration(),(r=o._start)>a&&s._sort&&o._ts&&!s._lock?(s._lock=1,de(s,o,r-o._delay,1)._lock=0):a=r,r<0&&o._ts&&(i-=r,(!n&&!s._dp||n&&n.smoothChildTiming)&&(s._start+=r/s._ts,s._time-=r,s._tTime-=r),s.shiftChildren(-r,!1,-Infinity),a=0),o._end>i&&o._ts&&(i=o._end),o=e;ye(s,s===D&&s._time>i?s._time:i,1,1),s._dirty=0}return s._tDur},e.updateRoot=function(t){if(D._ts&&(Qt(D,ce(t,D)),B=tr.frame),tr.frame>=It){It+=Q.autoSleep||120;var e=D._first;if((!e||!e._ts)&&Q.autoSleep&&tr._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||tr.sleep()}}},e}(dr);Zt(mr.prototype,{_lock:0,_hasPause:0,_forcing:0});var gr,vr,_r=function(t,e,r,n,i,s,o){var a,l,u,c,h,f,p,d,m=new Yr(this._pt,t,e,0,1,Dr,null,i),g=0,v=0;for(m.b=r,m.e=n,r+="",(p=~(n+="").indexOf("random("))&&(n=Ne(n)),s&&(s(d=[r,n],t,e),r=d[0],n=d[1]),l=r.match(vt)||[];a=vt.exec(n);)c=a[0],h=n.substring(g,a.index),u?u=(u+1)%5:"rgba("===h.substr(-5)&&(u=1),c!==l[v++]&&(f=parseFloat(l[v-1])||0,m._pt={_next:m._pt,p:h||1===v?h:",",s:f,c:"="===c.charAt(1)?qt(f,c)-f:parseFloat(c)-f,m:u&&u<4?Math.round:0},g=vt.lastIndex);return m.c=g<n.length?n.substring(g,n.length):"",m.fp=o,(_t.test(n)||p)&&(m.e=0),this._pt=m,m},yr=function(t,e,r,n,i,s,o,a,l,u){st(n)&&(n=n(i||0,t,s));var c,h=t[e],f="get"!==r?r:st(h)?l?t[e.indexOf("set")||!st(t["get"+e.substr(3)])?e:"get"+e.substr(3)](l):t[e]():h,p=st(h)?l?Er:kr:Cr;if(it(n)&&(~n.indexOf("random(")&&(n=Ne(n)),"="===n.charAt(1)&&((c=qt(f,n)+(Me(f)||0))||0===c)&&(n=c)),!u||f!==n||vr)return isNaN(f*n)||""===n?(!h&&!(e in t)&&St(e,n),_r.call(this,t,e,f,n,p,a||Q.stringFilter,l)):(c=new Yr(this._pt,t,e,+f||0,n-(f||0),"boolean"==typeof h?zr:Rr,0,p),l&&(c.fp=l),o&&c.modifier(o,this,t),this._pt=c)},br=function(t,e,r,n,i,s){var o,a,l,u;if(Dt[t]&&!1!==(o=new Dt[t]).init(i,o.rawVars?e[t]:function(t,e,r,n,i){if(st(t)&&(t=Tr(t,i,e,r,n)),!lt(t)||t.style&&t.nodeType||pt(t)||ft(t))return it(t)?Tr(t,i,e,r,n):t;var s,o={};for(s in t)o[s]=Tr(t[s],i,e,r,n);return o}(e[t],n,i,s,r),r,n,s)&&(r._pt=a=new Yr(r._pt,i,t,0,1,o.render,o,0,o.priority),r!==Y))for(l=r._ptLookup[r._targets.indexOf(i)],u=o._props.length;u--;)l[o._props[u]]=a;return o},xr=function t(e,r,n){var i,s,o,a,l,u,c,h,f,p,d,m,g,v=e.vars,_=v.ease,y=v.startAt,b=v.immediateRender,x=v.lazy,w=v.onUpdate,T=v.runBackwards,S=v.yoyoEase,A=v.keyframes,M=v.autoRevert,C=e._dur,k=e._startAt,E=e._targets,O=e.parent,z=O&&"nested"===O.data?O.vars.targets:E,L="auto"===e._overwrite&&!P,I=e.timeline;if(I&&(!A||!_)&&(_="none"),e._ease=lr(_,G.ease),e._yEase=S?or(lr(!0===S?_:S,G.ease)):0,S&&e._yoyo&&!e._repeat&&(S=e._yEase,e._yEase=e._ease,e._ease=S),e._from=!I&&!!v.runBackwards,!I||A&&!v.stagger){if(m=(h=E[0]?Yt(E[0]).harness:0)&&v[h.prop],i=te(v,Pt),k&&(k._zTime<0&&k.progress(1),r<0&&T&&b&&!M?k.render(-1,!0):k.revert(T&&C?Et:kt),k._lazy=0),y){if(ie(e._startAt=Mr.set(E,Zt({data:"isStart",overwrite:!1,parent:O,immediateRender:!0,lazy:!k&&ut(x),startAt:null,delay:0,onUpdate:w&&function(){return Xe(e,"onUpdate")},stagger:0},y))),e._startAt._dp=0,e._startAt._sat=e,r<0&&(R||!b&&!M)&&e._startAt.revert(Et),b&&C&&r<=0&&n<=0)return void(r&&(e._zTime=r))}else if(T&&C&&!k)if(r&&(b=!1),o=Zt({overwrite:!1,data:"isFromStart",lazy:b&&!k&&ut(x),immediateRender:b,stagger:0,parent:O},i),m&&(o[h.prop]=m),ie(e._startAt=Mr.set(E,o)),e._startAt._dp=0,e._startAt._sat=e,r<0&&(R?e._startAt.revert(Et):e._startAt.render(-1,!0)),e._zTime=r,b){if(!r)return}else t(e._startAt,Z,Z);for(e._pt=e._ptCache=0,x=C&&ut(x)||x&&!C,s=0;s<E.length;s++){if(c=(l=E[s])._gsap||Bt(E)[s]._gsap,e._ptLookup[s]=p={},zt[c.id]&&Rt.length&&Vt(),d=z===E?s:z.indexOf(l),h&&!1!==(f=new h).init(l,m||i,e,d,z)&&(e._pt=a=new Yr(e._pt,l,f.name,0,1,f.render,f,0,f.priority),f._props.forEach((function(t){p[t]=a})),f.priority&&(u=1)),!h||m)for(o in i)Dt[o]&&(f=br(o,i,e,d,l,z))?f.priority&&(u=1):p[o]=a=yr.call(e,l,o,"get",i[o],d,z,0,v.stringFilter);e._op&&e._op[s]&&e.kill(l,e._op[s]),L&&e._pt&&(gr=e,D.killTweensOf(l,p,e.globalTime(r)),g=!e.parent,gr=0),e._pt&&x&&(zt[c.id]=1)}u&&Br(e),e._onInit&&e._onInit(e)}e._onUpdate=w,e._initted=(!e._op||e._pt)&&!g,A&&r<=0&&I.render($,!0,!0)},wr=function(t,e,r,n){var i,s,o=e.ease||n||"power1.inOut";if(pt(e))s=r[t]||(r[t]=[]),e.forEach((function(t,r){return s.push({t:r/(e.length-1)*100,v:t,e:o})}));else for(i in e)s=r[i]||(r[i]=[]),"ease"===i||s.push({t:parseFloat(t),v:e[i],e:o})},Tr=function(t,e,r,n,i){return st(t)?t.call(e,r,n,i):it(t)&&~t.indexOf("random(")?Ne(t):t},Sr=Nt+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",Ar={};Wt(Sr+",id,stagger,delay,duration,paused,scrollTrigger",(function(t){return Ar[t]=1}));var Mr=function(t){function e(e,r,n,i){var s;"number"==typeof r&&(n.duration=r,r=n,n=null);var o,a,l,u,c,h,f,p,d=(s=t.call(this,i?r:ee(r))||this).vars,m=d.duration,g=d.delay,v=d.immediateRender,_=d.stagger,y=d.overwrite,b=d.keyframes,x=d.defaults,w=d.scrollTrigger,T=d.yoyoEase,S=r.parent||D,A=(pt(e)||ft(e)?ot(e[0]):"length"in r)?[e]:Oe(e);if(s._targets=A.length?Bt(A):At("GSAP target "+e+" not found. https://gsap.com",!Q.nullTargetWarn)||[],s._ptLookup=[],s._overwrite=y,b||_||ht(m)||ht(g)){if(r=s.vars,(o=s.timeline=new mr({data:"nested",defaults:x||{},targets:S&&"nested"===S.data?S.vars.targets:A})).kill(),o.parent=o._dp=E(s),o._start=0,_||ht(m)||ht(g)){if(u=A.length,f=_&&ze(_),lt(_))for(c in _)~Sr.indexOf(c)&&(p||(p={}),p[c]=_[c]);for(a=0;a<u;a++)(l=te(r,Ar)).stagger=0,T&&(l.yoyoEase=T),p&&Kt(l,p),h=A[a],l.duration=+Tr(m,E(s),a,h,A),l.delay=(+Tr(g,E(s),a,h,A)||0)-s._delay,!_&&1===u&&l.delay&&(s._delay=g=l.delay,s._start+=g,l.delay=0),o.to(h,l,f?f(a,h,A):0),o._ease=rr.none;o.duration()?m=g=0:s.timeline=0}else if(b){ee(Zt(o.vars.defaults,{ease:"none"})),o._ease=lr(b.ease||r.ease||"none");var M,C,k,O=0;if(pt(b))b.forEach((function(t){return o.to(A,t,">")})),o.duration();else{for(c in l={},b)"ease"===c||"easeEach"===c||wr(c,b[c],l,b.easeEach);for(c in l)for(M=l[c].sort((function(t,e){return t.t-e.t})),O=0,a=0;a<M.length;a++)(k={ease:(C=M[a]).e,duration:(C.t-(a?M[a-1].t:0))/100*m})[c]=C.v,o.to(A,k,O),O+=k.duration;o.duration()<m&&o.to({},{duration:m-o.duration()})}}m||s.duration(m=o.duration())}else s.timeline=0;return!0!==y||P||(gr=E(s),D.killTweensOf(A),gr=0),de(S,E(s),n),r.reversed&&s.reverse(),r.paused&&s.paused(!0),(v||!m&&!b&&s._start===Ut(S._time)&&ut(v)&&ae(E(s))&&"nested"!==S.data)&&(s._tTime=-1e-8,s.render(Math.max(0,-g)||0)),w&&me(E(s),w),s}O(e,t);var r=e.prototype;return r.render=function(t,e,r){var n,i,s,o,a,l,u,c,h,f=this._time,p=this._tDur,d=this._dur,m=t<0,g=t>p-Z&&!m?p:t<Z?0:t;if(d){if(g!==this._tTime||!t||r||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==m){if(n=g,c=this.timeline,this._repeat){if(o=d+this._rDelay,this._repeat<-1&&m)return this.totalTime(100*o+t,e,r);if(n=Ut(g%o),g===p?(s=this._repeat,n=d):((s=~~(g/o))&&s===Ut(g/o)&&(n=d,s--),n>d&&(n=d)),(l=this._yoyo&&1&s)&&(h=this._yEase,n=d-n),a=ue(this._tTime,o),n===f&&!r&&this._initted&&s===a)return this._tTime=g,this;s!==a&&(c&&this._yEase&&ar(c,l),this.vars.repeatRefresh&&!l&&!this._lock&&this._time!==o&&this._initted&&(this._lock=r=1,this.render(Ut(o*s),!0).invalidate()._lock=0))}if(!this._initted){if(ge(this,m?t:n,r,e,g))return this._tTime=0,this;if(!(f===this._time||r&&this.vars.repeatRefresh&&s!==a))return this;if(d!==this._dur)return this.render(t,e,r)}if(this._tTime=g,this._time=n,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=u=(h||this._ease)(n/d),this._from&&(this.ratio=u=1-u),n&&!f&&!e&&!s&&(Xe(this,"onStart"),this._tTime!==g))return this;for(i=this._pt;i;)i.r(u,i.d),i=i._next;c&&c.render(t<0?t:c._dur*c._ease(n/this._dur),e,r)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(m&&oe(this,t,0,r),Xe(this,"onUpdate")),this._repeat&&s!==a&&this.vars.onRepeat&&!e&&this.parent&&Xe(this,"onRepeat"),g!==this._tDur&&g||this._tTime!==g||(m&&!this._onUpdate&&oe(this,t,0,!0),(t||!d)&&(g===this._tDur&&this._ts>0||!g&&this._ts<0)&&ie(this,1),e||m&&!f||!(g||f||l)||(Xe(this,g===p?"onComplete":"onReverseComplete",!0),this._prom&&!(g<p&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,r,n){var i,s,o,a=t.ratio,l=e<0||!e&&(!t._start&&ve(t)&&(t._initted||!_e(t))||(t._ts<0||t._dp._ts<0)&&!_e(t))?0:1,u=t._rDelay,c=0;if(u&&t._repeat&&(c=Ae(0,t._tDur,e),s=ue(c,u),t._yoyo&&1&s&&(l=1-l),s!==ue(t._tTime,u)&&(a=1-l,t.vars.repeatRefresh&&t._initted&&t.invalidate())),l!==a||R||n||t._zTime===Z||!e&&t._zTime){if(!t._initted&&ge(t,e,n,r,c))return;for(o=t._zTime,t._zTime=e||(r?Z:0),r||(r=e&&!o),t.ratio=l,t._from&&(l=1-l),t._time=0,t._tTime=c,i=t._pt;i;)i.r(l,i.d),i=i._next;e<0&&oe(t,e,0,!0),t._onUpdate&&!r&&Xe(t,"onUpdate"),c&&t._repeat&&!r&&t.parent&&Xe(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===l&&(l&&ie(t,1),r||R||(Xe(t,l?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,r);return this},r.targets=function(){return this._targets},r.invalidate=function(e){return(!e||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(e),t.prototype.invalidate.call(this,e)},r.resetTo=function(t,e,r,n,i){X||tr.wake(),this._ts||this.play();var s=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||xr(this,s),function(t,e,r,n,i,s,o,a){var l,u,c,h,f=(t._pt&&t._ptCache||(t._ptCache={}))[e];if(!f)for(f=t._ptCache[e]=[],c=t._ptLookup,h=t._targets.length;h--;){if((l=c[h][e])&&l.d&&l.d._pt)for(l=l.d._pt;l&&l.p!==e&&l.fp!==e;)l=l._next;if(!l)return vr=1,t.vars[e]="+=0",xr(t,o),vr=0,a?At(e+" not eligible for reset"):1;f.push(l)}for(h=f.length;h--;)(l=(u=f[h])._pt||u).s=!n&&0!==n||i?l.s+(n||0)+s*l.c:n,l.c=r-l.s,u.e&&(u.e=Ht(r)+Me(u.e)),u.b&&(u.b=l.s+Me(u.b))}(this,t,e,r,n,this._ease(s/this._dur),s,i)?this.resetTo(t,e,r,n,1):(fe(this,0),this.parent||re(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},r.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?We(this):this;if(this.timeline){var r=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,gr&&!0!==gr.vars.overwrite)._first||We(this),this.parent&&r!==this.timeline.totalDuration()&&ye(this,this._dur*this.timeline._tDur/r,0,1),this}var n,i,s,o,a,l,u,c=this._targets,h=t?Oe(t):c,f=this._ptLookup,p=this._pt;if((!e||"all"===e)&&function(t,e){for(var r=t.length,n=r===e.length;n&&r--&&t[r]===e[r];);return r<0}(c,h))return"all"===e&&(this._pt=0),We(this);for(n=this._op=this._op||[],"all"!==e&&(it(e)&&(a={},Wt(e,(function(t){return a[t]=1})),e=a),e=function(t,e){var r,n,i,s,o=t[0]?Yt(t[0]).harness:0,a=o&&o.aliases;if(!a)return e;for(n in r=Kt({},e),a)if(n in r)for(i=(s=a[n].split(",")).length;i--;)r[s[i]]=r[n];return r}(c,e)),u=c.length;u--;)if(~h.indexOf(c[u]))for(a in i=f[u],"all"===e?(n[u]=e,o=i,s={}):(s=n[u]=n[u]||{},o=e),o)(l=i&&i[a])&&("kill"in l.d&&!0!==l.d.kill(a)||ne(this,l,"_pt"),delete i[a]),"all"!==s&&(s[a]=1);return this._initted&&!this._pt&&p&&We(this),this},e.to=function(t,r){return new e(t,r,arguments[2])},e.from=function(t,e){return Te(1,arguments)},e.delayedCall=function(t,r,n,i){return new e(r,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:r,onReverseComplete:r,onCompleteParams:n,onReverseCompleteParams:n,callbackScope:i})},e.fromTo=function(t,e,r){return Te(2,arguments)},e.set=function(t,r){return r.duration=0,r.repeatDelay||(r.repeat=0),new e(t,r)},e.killTweensOf=function(t,e,r){return D.killTweensOf(t,e,r)},e}(dr);Zt(Mr.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),Wt("staggerTo,staggerFrom,staggerFromTo",(function(t){Mr[t]=function(){var e=new mr,r=Ce.call(arguments,0);return r.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,r)}}));var Cr=function(t,e,r){return t[e]=r},kr=function(t,e,r){return t[e](r)},Er=function(t,e,r,n){return t[e](n.fp,r)},Or=function(t,e,r){return t.setAttribute(e,r)},Pr=function(t,e){return st(t[e])?kr:at(t[e])&&t.setAttribute?Or:Cr},Rr=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},zr=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},Dr=function(t,e){var r=e._pt,n="";if(!t&&e.b)n=e.b;else if(1===t&&e.e)n=e.e;else{for(;r;)n=r.p+(r.m?r.m(r.s+r.c*t):Math.round(1e4*(r.s+r.c*t))/1e4)+n,r=r._next;n+=e.c}e.set(e.t,e.p,n,e)},Lr=function(t,e){for(var r=e._pt;r;)r.r(t,r.d),r=r._next},Ir=function(t,e,r,n){for(var i,s=this._pt;s;)i=s._next,s.p===n&&s.modifier(t,e,r),s=i},Fr=function(t){for(var e,r,n=this._pt;n;)r=n._next,n.p===t&&!n.op||n.op===t?ne(this,n,"_pt"):n.dep||(e=1),n=r;return!e},Nr=function(t,e,r,n){n.mSet(t,e,n.m.call(n.tween,r,n.mt),n)},Br=function(t){for(var e,r,n,i,s=t._pt;s;){for(e=s._next,r=n;r&&r.pr>s.pr;)r=r._next;(s._prev=r?r._prev:i)?s._prev._next=s:n=s,(s._next=r)?r._prev=s:i=s,s=e}t._pt=n},Yr=function(){function t(t,e,r,n,i,s,o,a,l){this.t=e,this.s=n,this.c=i,this.p=r,this.r=s||Rr,this.d=o||this,this.set=a||Cr,this.pr=l||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,r){this.mSet=this.mSet||this.set,this.set=Nr,this.m=t,this.mt=r,this.tween=e},t}();Wt(Nt+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return Pt[t]=1})),xt.TweenMax=xt.TweenLite=Mr,xt.TimelineLite=xt.TimelineMax=mr,D=new mr({sortChildren:!1,defaults:G,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),Q.stringFilter=Je;var Xr=[],Wr={},Hr=[],Ur=0,qr=0,jr=function(t){return(Wr[t]||Hr).map((function(t){return t()}))},Vr=function(){var t=Date.now(),e=[];t-Ur>2&&(jr("matchMediaInit"),Xr.forEach((function(t){var r,n,i,s,o=t.queries,a=t.conditions;for(n in o)(r=L.matchMedia(o[n]).matches)&&(i=1),r!==a[n]&&(a[n]=r,s=1);s&&(t.revert(),i&&e.push(t))})),jr("matchMediaRevert"),e.forEach((function(t){return t.onMatch(t,(function(e){return t.add(null,e)}))})),Ur=t,jr("matchMedia"))},Qr=function(){function t(t,e){this.selector=e&&Pe(e),this.data=[],this._r=[],this.isReverted=!1,this.id=qr++,t&&this.add(t)}var e=t.prototype;return e.add=function(t,e,r){st(t)&&(r=e,e=t,t=st);var n=this,i=function(){var t,i=z,s=n.selector;return i&&i!==n&&i.data.push(n),r&&(n.selector=Pe(r)),z=n,t=e.apply(n,arguments),st(t)&&n._r.push(t),z=i,n.selector=s,n.isReverted=!1,t};return n.last=i,t===st?i(n,(function(t){return n.add(null,t)})):t?n[t]=i:i},e.ignore=function(t){var e=z;z=null,t(this),z=e},e.getTweens=function(){var e=[];return this.data.forEach((function(r){return r instanceof t?e.push.apply(e,r.getTweens()):r instanceof Mr&&!(r.parent&&"nested"===r.parent.data)&&e.push(r)})),e},e.clear=function(){this._r.length=this.data.length=0},e.kill=function(t,e){var r=this;if(t?function(){for(var e,n=r.getTweens(),i=r.data.length;i--;)"isFlip"===(e=r.data[i]).data&&(e.revert(),e.getChildren(!0,!0,!1).forEach((function(t){return n.splice(n.indexOf(t),1)})));for(n.map((function(t){return{g:t._dur||t._delay||t._sat&&!t._sat.vars.immediateRender?t.globalTime(0):-1/0,t}})).sort((function(t,e){return e.g-t.g||-1/0})).forEach((function(e){return e.t.revert(t)})),i=r.data.length;i--;)(e=r.data[i])instanceof mr?"nested"!==e.data&&(e.scrollTrigger&&e.scrollTrigger.revert(),e.kill()):!(e instanceof Mr)&&e.revert&&e.revert(t);r._r.forEach((function(e){return e(t,r)})),r.isReverted=!0}():this.data.forEach((function(t){return t.kill&&t.kill()})),this.clear(),e)for(var n=Xr.length;n--;)Xr[n].id===this.id&&Xr.splice(n,1)},e.revert=function(t){this.kill(t||{})},t}(),Gr=function(){function t(t){this.contexts=[],this.scope=t,z&&z.data.push(this)}var e=t.prototype;return e.add=function(t,e,r){lt(t)||(t={matches:t});var n,i,s,o=new Qr(0,r||this.scope),a=o.conditions={};for(i in z&&!o.selector&&(o.selector=z.selector),this.contexts.push(o),e=o.add("onMatch",e),o.queries=t,t)"all"===i?s=1:(n=L.matchMedia(t[i]))&&(Xr.indexOf(o)<0&&Xr.push(o),(a[i]=n.matches)&&(s=1),n.addListener?n.addListener(Vr):n.addEventListener("change",Vr));return s&&e(o,(function(t){return o.add(null,t)})),this},e.revert=function(t){this.kill(t||{})},e.kill=function(t){this.contexts.forEach((function(e){return e.kill(t,!0)}))},t}(),$r={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];e.forEach((function(t){return Ue(t)}))},timeline:function(t){return new mr(t)},getTweensOf:function(t,e){return D.getTweensOf(t,e)},getProperty:function(t,e,r,n){it(t)&&(t=Oe(t)[0]);var i=Yt(t||{}).get,s=r?$t:Gt;return"native"===r&&(r=""),t?e?s((Dt[e]&&Dt[e].get||i)(t,e,r,n)):function(e,r,n){return s((Dt[e]&&Dt[e].get||i)(t,e,r,n))}:t},quickSetter:function(t,e,r){if((t=Oe(t)).length>1){var n=t.map((function(t){return Jr.quickSetter(t,e,r)})),i=n.length;return function(t){for(var e=i;e--;)n[e](t)}}t=t[0]||{};var s=Dt[e],o=Yt(t),a=o.harness&&(o.harness.aliases||{})[e]||e,l=s?function(e){var n=new s;Y._pt=0,n.init(t,r?e+r:e,Y,0,[t]),n.render(1,n),Y._pt&&Lr(1,Y)}:o.set(t,a);return s?l:function(e){return l(t,a,r?e+r:e,o,1)}},quickTo:function(t,e,r){var n,i=Jr.to(t,Kt(((n={})[e]="+=0.1",n.paused=!0,n),r||{})),s=function(t,r,n){return i.resetTo(e,t,r,n)};return s.tween=i,s},isTweening:function(t){return D.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=lr(t.ease,G.ease)),Jt(G,t||{})},config:function(t){return Jt(Q,t||{})},registerEffect:function(t){var e=t.name,r=t.effect,n=t.plugins,i=t.defaults,s=t.extendTimeline;(n||"").split(",").forEach((function(t){return t&&!Dt[t]&&!xt[t]&&At(e+" effect requires "+t+" plugin.")})),Lt[e]=function(t,e,n){return r(Oe(t),Zt(e||{},i),n)},s&&(mr.prototype[e]=function(t,r,n){return this.add(Lt[e](t,lt(r)?r:(n=r)&&{},this),n)})},registerEase:function(t,e){rr[t]=lr(e)},parseEase:function(t,e){return arguments.length?lr(t,e):rr},getById:function(t){return D.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var r,n,i=new mr(t);for(i.smoothChildTiming=ut(t.smoothChildTiming),D.remove(i),i._dp=0,i._time=i._tTime=D._time,r=D._first;r;)n=r._next,!e&&!r._dur&&r instanceof Mr&&r.vars.onComplete===r._targets[0]||de(i,r,r._start-r._delay),r=n;return de(D,i,0),i},context:function(t,e){return t?new Qr(t,e):z},matchMedia:function(t){return new Gr(t)},matchMediaRefresh:function(){return Xr.forEach((function(t){var e,r,n=t.conditions;for(r in n)n[r]&&(n[r]=!1,e=1);e&&t.revert()}))||Vr()},addEventListener:function(t,e){var r=Wr[t]||(Wr[t]=[]);~r.indexOf(e)||r.push(e)},removeEventListener:function(t,e){var r=Wr[t],n=r&&r.indexOf(e);n>=0&&r.splice(n,1)},utils:{wrap:function t(e,r,n){var i=r-e;return pt(e)?Fe(e,t(0,e.length),r):Se(n,(function(t){return(i+(t-e)%i)%i+e}))},wrapYoyo:function t(e,r,n){var i=r-e,s=2*i;return pt(e)?Fe(e,t(0,e.length-1),r):Se(n,(function(t){return e+((t=(s+(t-e)%s)%s||0)>i?s-t:t)}))},distribute:ze,random:Ie,snap:Le,normalize:function(t,e,r){return Be(t,e,0,1,r)},getUnit:Me,clamp:function(t,e,r){return Se(r,(function(r){return Ae(t,e,r)}))},splitColor:Qe,toArray:Oe,selector:Pe,mapRange:Be,pipe:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},unitize:function(t,e){return function(r){return t(parseFloat(r))+(e||Me(r))}},interpolate:function t(e,r,n,i){var s=isNaN(e+r)?0:function(t){return(1-t)*e+t*r};if(!s){var o,a,l,u,c,h=it(e),f={};if(!0===n&&(i=1)&&(n=null),h)e={p:e},r={p:r};else if(pt(e)&&!pt(r)){for(l=[],u=e.length,c=u-2,a=1;a<u;a++)l.push(t(e[a-1],e[a]));u--,s=function(t){t*=u;var e=Math.min(c,~~t);return l[e](t-e)},n=r}else i||(e=Kt(pt(e)?[]:{},e));if(!l){for(o in r)yr.call(f,e,o,"get",r[o]);s=function(t){return Lr(t,f)||(h?e.p:e)}}}return Se(n,s)},shuffle:Re},install:Tt,effects:Lt,ticker:tr,updateRoot:mr.updateRoot,plugins:Dt,globalTimeline:D,core:{PropTween:Yr,globals:Mt,Tween:Mr,Timeline:mr,Animation:dr,getCache:Yt,_removeLinkedListItem:ne,reverting:function(){return R},context:function(t){return t&&z&&(z.data.push(t),t._ctx=z),z},suppressOverwrites:function(t){return P=t}}};Wt("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return $r[t]=Mr[t]})),tr.add(mr.updateRoot),Y=$r.to({},{duration:0});var Zr=function(t,e){for(var r=t._pt;r&&r.p!==e&&r.op!==e&&r.fp!==e;)r=r._next;return r},Kr=function(t,e){return{name:t,rawVars:1,init:function(t,r,n){n._onInit=function(t){var n,i;if(it(r)&&(n={},Wt(r,(function(t){return n[t]=1})),r=n),e){for(i in n={},r)n[i]=e(r[i]);r=n}!function(t,e){var r,n,i,s=t._targets;for(r in e)for(n=s.length;n--;)(i=t._ptLookup[n][r])&&(i=i.d)&&(i._pt&&(i=Zr(i,r)),i&&i.modifier&&i.modifier(e[r],t,s[n],r))}(t,r)}}}},Jr=$r.registerPlugin({name:"attr",init:function(t,e,r,n,i){var s,o,a;for(s in this.tween=r,e)a=t.getAttribute(s)||"",(o=this.add(t,"setAttribute",(a||0)+"",e[s],n,i,0,0,s)).op=s,o.b=a,this._props.push(s)},render:function(t,e){for(var r=e._pt;r;)R?r.set(r.t,r.p,r.b,r):r.r(t,r.d),r=r._next}},{name:"endArray",init:function(t,e){for(var r=e.length;r--;)this.add(t,r,t[r]||0,e[r],0,0,0,0,0,1)}},Kr("roundProps",De),Kr("modifiers"),Kr("snap",Le))||$r;Mr.version=mr.version=Jr.version="3.12.5",N=1,ct()&&er();rr.Power0,rr.Power1,rr.Power2,rr.Power3,rr.Power4,rr.Linear,rr.Quad,rr.Cubic,rr.Quart,rr.Quint,rr.Strong,rr.Elastic,rr.Back,rr.SteppedEase,rr.Bounce,rr.Sine,rr.Expo,rr.Circ;var tn,en,rn,nn,sn,on,an,ln,un={},cn=180/Math.PI,hn=Math.PI/180,fn=Math.atan2,pn=/([A-Z])/g,dn=/(left|right|width|margin|padding|x)/i,mn=/[\s,\(]\S/,gn={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},vn=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},_n=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},yn=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},bn=function(t,e){var r=e.s+e.c*t;e.set(e.t,e.p,~~(r+(r<0?-.5:.5))+e.u,e)},xn=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},wn=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},Tn=function(t,e,r){return t.style[e]=r},Sn=function(t,e,r){return t.style.setProperty(e,r)},An=function(t,e,r){return t._gsap[e]=r},Mn=function(t,e,r){return t._gsap.scaleX=t._gsap.scaleY=r},Cn=function(t,e,r,n,i){var s=t._gsap;s.scaleX=s.scaleY=r,s.renderTransform(i,s)},kn=function(t,e,r,n,i){var s=t._gsap;s[e]=r,s.renderTransform(i,s)},En="transform",On=En+"Origin",Pn=function t(e,r){var n=this,i=this.target,s=i.style,o=i._gsap;if(e in un&&s){if(this.tfm=this.tfm||{},"transform"===e)return gn.transform.split(",").forEach((function(e){return t.call(n,e,r)}));if(~(e=gn[e]||e).indexOf(",")?e.split(",").forEach((function(t){return n.tfm[t]=Gn(i,t)})):this.tfm[e]=o.x?o[e]:Gn(i,e),e===On&&(this.tfm.zOrigin=o.zOrigin),this.props.indexOf(En)>=0)return;o.svg&&(this.svgo=i.getAttribute("data-svg-origin"),this.props.push(On,r,"")),e=En}(s||r)&&this.props.push(e,r,s[e])},Rn=function(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))},zn=function(){var t,e,r=this.props,n=this.target,i=n.style,s=n._gsap;for(t=0;t<r.length;t+=3)r[t+1]?n[r[t]]=r[t+2]:r[t+2]?i[r[t]]=r[t+2]:i.removeProperty("--"===r[t].substr(0,2)?r[t]:r[t].replace(pn,"-$1").toLowerCase());if(this.tfm){for(e in this.tfm)s[e]=this.tfm[e];s.svg&&(s.renderTransform(),n.setAttribute("data-svg-origin",this.svgo||"")),(t=an())&&t.isStart||i[En]||(Rn(i),s.zOrigin&&i[On]&&(i[On]+=" "+s.zOrigin+"px",s.zOrigin=0,s.renderTransform()),s.uncache=1)}},Dn=function(t,e){var r={target:t,props:[],revert:zn,save:Pn};return t._gsap||Jr.core.getCache(t),e&&e.split(",").forEach((function(t){return r.save(t)})),r},Ln=function(t,e){var r=en.createElementNS?en.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):en.createElement(t);return r&&r.style?r:en.createElement(t)},In=function t(e,r,n){var i=getComputedStyle(e);return i[r]||i.getPropertyValue(r.replace(pn,"-$1").toLowerCase())||i.getPropertyValue(r)||!n&&t(e,Nn(r)||r,1)||""},Fn="O,Moz,ms,Ms,Webkit".split(","),Nn=function(t,e,r){var n=(e||sn).style,i=5;if(t in n&&!r)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);i--&&!(Fn[i]+t in n););return i<0?null:(3===i?"ms":i>=0?Fn[i]:"")+t},Bn=function(){"undefined"!=typeof window&&window.document&&(tn=window,en=tn.document,rn=en.documentElement,sn=Ln("div")||{style:{}},Ln("div"),En=Nn(En),On=En+"Origin",sn.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",ln=!!Nn("perspective"),an=Jr.core.reverting,nn=1)},Yn=function t(e){var r,n=Ln("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),i=this.parentNode,s=this.nextSibling,o=this.style.cssText;if(rn.appendChild(n),n.appendChild(this),this.style.display="block",e)try{r=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(r=this._gsapBBox());return i&&(s?i.insertBefore(this,s):i.appendChild(this)),rn.removeChild(n),this.style.cssText=o,r},Xn=function(t,e){for(var r=e.length;r--;)if(t.hasAttribute(e[r]))return t.getAttribute(e[r])},Wn=function(t){var e;try{e=t.getBBox()}catch(r){e=Yn.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===Yn||(e=Yn.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+Xn(t,["x","cx","x1"])||0,y:+Xn(t,["y","cy","y1"])||0,width:0,height:0}},Hn=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!Wn(t))},Un=function(t,e){if(e){var r,n=t.style;e in un&&e!==On&&(e=En),n.removeProperty?("ms"!==(r=e.substr(0,2))&&"webkit"!==e.substr(0,6)||(e="-"+e),n.removeProperty("--"===r?e:e.replace(pn,"-$1").toLowerCase())):n.removeAttribute(e)}},qn=function(t,e,r,n,i,s){var o=new Yr(t._pt,e,r,0,1,s?wn:xn);return t._pt=o,o.b=n,o.e=i,t._props.push(r),o},jn={deg:1,rad:1,turn:1},Vn={grid:1,flex:1},Qn=function t(e,r,n,i){var s,o,a,l,u=parseFloat(n)||0,c=(n+"").trim().substr((u+"").length)||"px",h=sn.style,f=dn.test(r),p="svg"===e.tagName.toLowerCase(),d=(p?"client":"offset")+(f?"Width":"Height"),m=100,g="px"===i,v="%"===i;if(i===c||!u||jn[i]||jn[c])return u;if("px"!==c&&!g&&(u=t(e,r,n,"px")),l=e.getCTM&&Hn(e),(v||"%"===c)&&(un[r]||~r.indexOf("adius")))return s=l?e.getBBox()[f?"width":"height"]:e[d],Ht(v?u/s*m:u/100*s);if(h[f?"width":"height"]=m+(g?c:i),o=~r.indexOf("adius")||"em"===i&&e.appendChild&&!p?e:e.parentNode,l&&(o=(e.ownerSVGElement||{}).parentNode),o&&o!==en&&o.appendChild||(o=en.body),(a=o._gsap)&&v&&a.width&&f&&a.time===tr.time&&!a.uncache)return Ht(u/a.width*m);if(!v||"height"!==r&&"width"!==r)(v||"%"===c)&&!Vn[In(o,"display")]&&(h.position=In(e,"position")),o===e&&(h.position="static"),o.appendChild(sn),s=sn[d],o.removeChild(sn),h.position="absolute";else{var _=e.style[r];e.style[r]=m+i,s=e[d],_?e.style[r]=_:Un(e,r)}return f&&v&&((a=Yt(o)).time=tr.time,a.width=o[d]),Ht(g?s*u/m:s&&u?m/s*u:0)},Gn=function(t,e,r,n){var i;return nn||Bn(),e in gn&&"transform"!==e&&~(e=gn[e]).indexOf(",")&&(e=e.split(",")[0]),un[e]&&"transform"!==e?(i=oi(t,n),i="transformOrigin"!==e?i[e]:i.svg?i.origin:ai(In(t,On))+" "+i.zOrigin+"px"):(!(i=t.style[e])||"auto"===i||n||~(i+"").indexOf("calc("))&&(i=Jn[e]&&Jn[e](t,e,r)||In(t,e)||Xt(t,e)||("opacity"===e?1:0)),r&&!~(i+"").trim().indexOf(" ")?Qn(t,e,i,r)+r:i},$n=function(t,e,r,n){if(!r||"none"===r){var i=Nn(e,t,1),s=i&&In(t,i,1);s&&s!==r?(e=i,r=s):"borderColor"===e&&(r=In(t,"borderTopColor"))}var o,a,l,u,c,h,f,p,d,m,g,v=new Yr(this._pt,t.style,e,0,1,Dr),_=0,y=0;if(v.b=r,v.e=n,r+="","auto"===(n+="")&&(h=t.style[e],t.style[e]=n,n=In(t,e)||n,h?t.style[e]=h:Un(t,e)),Je(o=[r,n]),n=o[1],l=(r=o[0]).match(gt)||[],(n.match(gt)||[]).length){for(;a=gt.exec(n);)f=a[0],d=n.substring(_,a.index),c?c=(c+1)%5:"rgba("!==d.substr(-5)&&"hsla("!==d.substr(-5)||(c=1),f!==(h=l[y++]||"")&&(u=parseFloat(h)||0,g=h.substr((u+"").length),"="===f.charAt(1)&&(f=qt(u,f)+g),p=parseFloat(f),m=f.substr((p+"").length),_=gt.lastIndex-m.length,m||(m=m||Q.units[e]||g,_===n.length&&(n+=m,v.e+=m)),g!==m&&(u=Qn(t,e,h,m)||0),v._pt={_next:v._pt,p:d||1===y?d:",",s:u,c:p-u,m:c&&c<4||"zIndex"===e?Math.round:0});v.c=_<n.length?n.substring(_,n.length):""}else v.r="display"===e&&"none"===n?wn:xn;return _t.test(n)&&(v.e=0),this._pt=v,v},Zn={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},Kn=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var r,n,i,s=e.t,o=s.style,a=e.u,l=s._gsap;if("all"===a||!0===a)o.cssText="",n=1;else for(i=(a=a.split(",")).length;--i>-1;)r=a[i],un[r]&&(n=1,r="transformOrigin"===r?On:En),Un(s,r);n&&(Un(s,En),l&&(l.svg&&s.removeAttribute("transform"),oi(s,1),l.uncache=1,Rn(o)))}},Jn={clearProps:function(t,e,r,n,i){if("isFromStart"!==i.data){var s=t._pt=new Yr(t._pt,e,r,0,0,Kn);return s.u=n,s.pr=-10,s.tween=i,t._props.push(r),1}}},ti=[1,0,0,1,0,0],ei={},ri=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},ni=function(t){var e=In(t,En);return ri(e)?ti:e.substr(7).match(mt).map(Ht)},ii=function(t,e){var r,n,i,s,o=t._gsap||Yt(t),a=t.style,l=ni(t);return o.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(l=[(i=t.transform.baseVal.consolidate().matrix).a,i.b,i.c,i.d,i.e,i.f]).join(",")?ti:l:(l!==ti||t.offsetParent||t===rn||o.svg||(i=a.display,a.display="block",(r=t.parentNode)&&t.offsetParent||(s=1,n=t.nextElementSibling,rn.appendChild(t)),l=ni(t),i?a.display=i:Un(t,"display"),s&&(n?r.insertBefore(t,n):r?r.appendChild(t):rn.removeChild(t))),e&&l.length>6?[l[0],l[1],l[4],l[5],l[12],l[13]]:l)},si=function(t,e,r,n,i,s){var o,a,l,u=t._gsap,c=i||ii(t,!0),h=u.xOrigin||0,f=u.yOrigin||0,p=u.xOffset||0,d=u.yOffset||0,m=c[0],g=c[1],v=c[2],_=c[3],y=c[4],b=c[5],x=e.split(" "),w=parseFloat(x[0])||0,T=parseFloat(x[1])||0;r?c!==ti&&(a=m*_-g*v)&&(l=w*(-g/a)+T*(m/a)-(m*b-g*y)/a,w=w*(_/a)+T*(-v/a)+(v*b-_*y)/a,T=l):(w=(o=Wn(t)).x+(~x[0].indexOf("%")?w/100*o.width:w),T=o.y+(~(x[1]||x[0]).indexOf("%")?T/100*o.height:T)),n||!1!==n&&u.smooth?(y=w-h,b=T-f,u.xOffset=p+(y*m+b*v)-y,u.yOffset=d+(y*g+b*_)-b):u.xOffset=u.yOffset=0,u.xOrigin=w,u.yOrigin=T,u.smooth=!!n,u.origin=e,u.originIsAbsolute=!!r,t.style[On]="0px 0px",s&&(qn(s,u,"xOrigin",h,w),qn(s,u,"yOrigin",f,T),qn(s,u,"xOffset",p,u.xOffset),qn(s,u,"yOffset",d,u.yOffset)),t.setAttribute("data-svg-origin",w+" "+T)},oi=function(t,e){var r=t._gsap||new pr(t);if("x"in r&&!e&&!r.uncache)return r;var n,i,s,o,a,l,u,c,h,f,p,d,m,g,v,_,y,b,x,w,T,S,A,M,C,k,E,O,P,R,z,D,L=t.style,I=r.scaleX<0,F="px",N="deg",B=getComputedStyle(t),Y=In(t,On)||"0";return n=i=s=l=u=c=h=f=p=0,o=a=1,r.svg=!(!t.getCTM||!Hn(t)),B.translate&&("none"===B.translate&&"none"===B.scale&&"none"===B.rotate||(L[En]=("none"!==B.translate?"translate3d("+(B.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==B.rotate?"rotate("+B.rotate+") ":"")+("none"!==B.scale?"scale("+B.scale.split(" ").join(",")+") ":"")+("none"!==B[En]?B[En]:"")),L.scale=L.rotate=L.translate="none"),g=ii(t,r.svg),r.svg&&(r.uncache?(C=t.getBBox(),Y=r.xOrigin-C.x+"px "+(r.yOrigin-C.y)+"px",M=""):M=!e&&t.getAttribute("data-svg-origin"),si(t,M||Y,!!M||r.originIsAbsolute,!1!==r.smooth,g)),d=r.xOrigin||0,m=r.yOrigin||0,g!==ti&&(b=g[0],x=g[1],w=g[2],T=g[3],n=S=g[4],i=A=g[5],6===g.length?(o=Math.sqrt(b*b+x*x),a=Math.sqrt(T*T+w*w),l=b||x?fn(x,b)*cn:0,(h=w||T?fn(w,T)*cn+l:0)&&(a*=Math.abs(Math.cos(h*hn))),r.svg&&(n-=d-(d*b+m*w),i-=m-(d*x+m*T))):(D=g[6],R=g[7],E=g[8],O=g[9],P=g[10],z=g[11],n=g[12],i=g[13],s=g[14],u=(v=fn(D,P))*cn,v&&(M=S*(_=Math.cos(-v))+E*(y=Math.sin(-v)),C=A*_+O*y,k=D*_+P*y,E=S*-y+E*_,O=A*-y+O*_,P=D*-y+P*_,z=R*-y+z*_,S=M,A=C,D=k),c=(v=fn(-w,P))*cn,v&&(_=Math.cos(-v),z=T*(y=Math.sin(-v))+z*_,b=M=b*_-E*y,x=C=x*_-O*y,w=k=w*_-P*y),l=(v=fn(x,b))*cn,v&&(M=b*(_=Math.cos(v))+x*(y=Math.sin(v)),C=S*_+A*y,x=x*_-b*y,A=A*_-S*y,b=M,S=C),u&&Math.abs(u)+Math.abs(l)>359.9&&(u=l=0,c=180-c),o=Ht(Math.sqrt(b*b+x*x+w*w)),a=Ht(Math.sqrt(A*A+D*D)),v=fn(S,A),h=Math.abs(v)>2e-4?v*cn:0,p=z?1/(z<0?-z:z):0),r.svg&&(M=t.getAttribute("transform"),r.forceCSS=t.setAttribute("transform","")||!ri(In(t,En)),M&&t.setAttribute("transform",M))),Math.abs(h)>90&&Math.abs(h)<270&&(I?(o*=-1,h+=l<=0?180:-180,l+=l<=0?180:-180):(a*=-1,h+=h<=0?180:-180)),e=e||r.uncache,r.x=n-((r.xPercent=n&&(!e&&r.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-n)?-50:0)))?t.offsetWidth*r.xPercent/100:0)+F,r.y=i-((r.yPercent=i&&(!e&&r.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-i)?-50:0)))?t.offsetHeight*r.yPercent/100:0)+F,r.z=s+F,r.scaleX=Ht(o),r.scaleY=Ht(a),r.rotation=Ht(l)+N,r.rotationX=Ht(u)+N,r.rotationY=Ht(c)+N,r.skewX=h+N,r.skewY=f+N,r.transformPerspective=p+F,(r.zOrigin=parseFloat(Y.split(" ")[2])||!e&&r.zOrigin||0)&&(L[On]=ai(Y)),r.xOffset=r.yOffset=0,r.force3D=Q.force3D,r.renderTransform=r.svg?di:ln?pi:ui,r.uncache=0,r},ai=function(t){return(t=t.split(" "))[0]+" "+t[1]},li=function(t,e,r){var n=Me(e);return Ht(parseFloat(e)+parseFloat(Qn(t,"x",r+"px",n)))+n},ui=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,pi(t,e)},ci="0deg",hi="0px",fi=") ",pi=function(t,e){var r=e||this,n=r.xPercent,i=r.yPercent,s=r.x,o=r.y,a=r.z,l=r.rotation,u=r.rotationY,c=r.rotationX,h=r.skewX,f=r.skewY,p=r.scaleX,d=r.scaleY,m=r.transformPerspective,g=r.force3D,v=r.target,_=r.zOrigin,y="",b="auto"===g&&t&&1!==t||!0===g;if(_&&(c!==ci||u!==ci)){var x,w=parseFloat(u)*hn,T=Math.sin(w),S=Math.cos(w);w=parseFloat(c)*hn,x=Math.cos(w),s=li(v,s,T*x*-_),o=li(v,o,-Math.sin(w)*-_),a=li(v,a,S*x*-_+_)}m!==hi&&(y+="perspective("+m+fi),(n||i)&&(y+="translate("+n+"%, "+i+"%) "),(b||s!==hi||o!==hi||a!==hi)&&(y+=a!==hi||b?"translate3d("+s+", "+o+", "+a+") ":"translate("+s+", "+o+fi),l!==ci&&(y+="rotate("+l+fi),u!==ci&&(y+="rotateY("+u+fi),c!==ci&&(y+="rotateX("+c+fi),h===ci&&f===ci||(y+="skew("+h+", "+f+fi),1===p&&1===d||(y+="scale("+p+", "+d+fi),v.style[En]=y||"translate(0, 0)"},di=function(t,e){var r,n,i,s,o,a=e||this,l=a.xPercent,u=a.yPercent,c=a.x,h=a.y,f=a.rotation,p=a.skewX,d=a.skewY,m=a.scaleX,g=a.scaleY,v=a.target,_=a.xOrigin,y=a.yOrigin,b=a.xOffset,x=a.yOffset,w=a.forceCSS,T=parseFloat(c),S=parseFloat(h);f=parseFloat(f),p=parseFloat(p),(d=parseFloat(d))&&(p+=d=parseFloat(d),f+=d),f||p?(f*=hn,p*=hn,r=Math.cos(f)*m,n=Math.sin(f)*m,i=Math.sin(f-p)*-g,s=Math.cos(f-p)*g,p&&(d*=hn,o=Math.tan(p-d),i*=o=Math.sqrt(1+o*o),s*=o,d&&(o=Math.tan(d),r*=o=Math.sqrt(1+o*o),n*=o)),r=Ht(r),n=Ht(n),i=Ht(i),s=Ht(s)):(r=m,s=g,n=i=0),(T&&!~(c+"").indexOf("px")||S&&!~(h+"").indexOf("px"))&&(T=Qn(v,"x",c,"px"),S=Qn(v,"y",h,"px")),(_||y||b||x)&&(T=Ht(T+_-(_*r+y*i)+b),S=Ht(S+y-(_*n+y*s)+x)),(l||u)&&(o=v.getBBox(),T=Ht(T+l/100*o.width),S=Ht(S+u/100*o.height)),o="matrix("+r+","+n+","+i+","+s+","+T+","+S+")",v.setAttribute("transform",o),w&&(v.style[En]=o)},mi=function(t,e,r,n,i){var s,o,a=360,l=it(i),u=parseFloat(i)*(l&&~i.indexOf("rad")?cn:1)-n,c=n+u+"deg";return l&&("short"===(s=i.split("_")[1])&&(u%=a)!==u%180&&(u+=u<0?a:-360),"cw"===s&&u<0?u=(u+36e9)%a-~~(u/a)*a:"ccw"===s&&u>0&&(u=(u-36e9)%a-~~(u/a)*a)),t._pt=o=new Yr(t._pt,e,r,n,u,_n),o.e=c,o.u="deg",t._props.push(r),o},gi=function(t,e){for(var r in e)t[r]=e[r];return t},vi=function(t,e,r){var n,i,s,o,a,l,u,c=gi({},r._gsap),h=r.style;for(i in c.svg?(s=r.getAttribute("transform"),r.setAttribute("transform",""),h[En]=e,n=oi(r,1),Un(r,En),r.setAttribute("transform",s)):(s=getComputedStyle(r)[En],h[En]=e,n=oi(r,1),h[En]=s),un)(s=c[i])!==(o=n[i])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(i)<0&&(a=Me(s)!==(u=Me(o))?Qn(r,i,s,u):parseFloat(s),l=parseFloat(o),t._pt=new Yr(t._pt,n,i,a,l-a,vn),t._pt.u=u||0,t._props.push(i));gi(n,c)};Wt("padding,margin,Width,Radius",(function(t,e){var r="Top",n="Right",i="Bottom",s="Left",o=(e<3?[r,n,i,s]:[r+s,r+n,i+n,i+s]).map((function(r){return e<2?t+r:"border"+r+t}));Jn[e>1?"border"+t:t]=function(t,e,r,n,i){var s,a;if(arguments.length<4)return s=o.map((function(e){return Gn(t,e,r)})),5===(a=s.join(" ")).split(s[0]).length?s[0]:a;s=(n+"").split(" "),a={},o.forEach((function(t,e){return a[t]=s[e]=s[e]||s[(e-1)/2|0]})),t.init(e,a,i)}}));var _i,yi,bi,xi={name:"css",register:Bn,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,r,n,i){var s,o,a,l,u,c,h,f,p,d,m,g,v,_,y,b,x,w,T,S,A=this._props,M=t.style,C=r.vars.startAt;for(h in nn||Bn(),this.styles=this.styles||Dn(t),b=this.styles.props,this.tween=r,e)if("autoRound"!==h&&(o=e[h],!Dt[h]||!br(h,e,r,n,t,i)))if(u=typeof o,c=Jn[h],"function"===u&&(u=typeof(o=o.call(r,n,t,i))),"string"===u&&~o.indexOf("random(")&&(o=Ne(o)),c)c(this,t,h,o,r)&&(y=1);else if("--"===h.substr(0,2))s=(getComputedStyle(t).getPropertyValue(h)+"").trim(),o+="",Ze.lastIndex=0,Ze.test(s)||(f=Me(s),p=Me(o)),p?f!==p&&(s=Qn(t,h,s,p)+p):f&&(o+=f),this.add(M,"setProperty",s,o,n,i,0,0,h),A.push(h),b.push(h,0,M[h]);else if("undefined"!==u){if(C&&h in C?(s="function"==typeof C[h]?C[h].call(r,n,t,i):C[h],it(s)&&~s.indexOf("random(")&&(s=Ne(s)),Me(s+"")||"auto"===s||(s+=Q.units[h]||Me(Gn(t,h))||""),"="===(s+"").charAt(1)&&(s=Gn(t,h))):s=Gn(t,h),l=parseFloat(s),(d="string"===u&&"="===o.charAt(1)&&o.substr(0,2))&&(o=o.substr(2)),a=parseFloat(o),h in gn&&("autoAlpha"===h&&(1===l&&"hidden"===Gn(t,"visibility")&&a&&(l=0),b.push("visibility",0,M.visibility),qn(this,M,"visibility",l?"inherit":"hidden",a?"inherit":"hidden",!a)),"scale"!==h&&"transform"!==h&&~(h=gn[h]).indexOf(",")&&(h=h.split(",")[0])),m=h in un)if(this.styles.save(h),g||((v=t._gsap).renderTransform&&!e.parseTransform||oi(t,e.parseTransform),_=!1!==e.smoothOrigin&&v.smooth,(g=this._pt=new Yr(this._pt,M,En,0,1,v.renderTransform,v,0,-1)).dep=1),"scale"===h)this._pt=new Yr(this._pt,v,"scaleY",v.scaleY,(d?qt(v.scaleY,d+a):a)-v.scaleY||0,vn),this._pt.u=0,A.push("scaleY",h),h+="X";else{if("transformOrigin"===h){b.push(On,0,M[On]),w=void 0,T=void 0,S=void 0,w=(x=o).split(" "),T=w[0],S=w[1]||"50%","top"!==T&&"bottom"!==T&&"left"!==S&&"right"!==S||(x=T,T=S,S=x),w[0]=Zn[T]||T,w[1]=Zn[S]||S,o=w.join(" "),v.svg?si(t,o,0,_,0,this):((p=parseFloat(o.split(" ")[2])||0)!==v.zOrigin&&qn(this,v,"zOrigin",v.zOrigin,p),qn(this,M,h,ai(s),ai(o)));continue}if("svgOrigin"===h){si(t,o,1,_,0,this);continue}if(h in ei){mi(this,v,h,l,d?qt(l,d+o):o);continue}if("smoothOrigin"===h){qn(this,v,"smooth",v.smooth,o);continue}if("force3D"===h){v[h]=o;continue}if("transform"===h){vi(this,o,t);continue}}else h in M||(h=Nn(h)||h);if(m||(a||0===a)&&(l||0===l)&&!mn.test(o)&&h in M)a||(a=0),(f=(s+"").substr((l+"").length))!==(p=Me(o)||(h in Q.units?Q.units[h]:f))&&(l=Qn(t,h,s,p)),this._pt=new Yr(this._pt,m?v:M,h,l,(d?qt(l,d+a):a)-l,m||"px"!==p&&"zIndex"!==h||!1===e.autoRound?vn:bn),this._pt.u=p||0,f!==p&&"%"!==p&&(this._pt.b=s,this._pt.r=yn);else if(h in M)$n.call(this,t,h,s,d?d+o:o);else if(h in t)this.add(t,h,s||t[h],d?d+o:o,n,i);else if("parseTransform"!==h){St(h,o);continue}m||(h in M?b.push(h,0,M[h]):b.push(h,1,s||t[h])),A.push(h)}y&&Br(this)},render:function(t,e){if(e.tween._time||!an())for(var r=e._pt;r;)r.r(t,r.d),r=r._next;else e.styles.revert()},get:Gn,aliases:gn,getSetter:function(t,e,r){var n=gn[e];return n&&n.indexOf(",")<0&&(e=n),e in un&&e!==On&&(t._gsap.x||Gn(t,"x"))?r&&on===r?"scale"===e?Mn:An:(on=r||{})&&("scale"===e?Cn:kn):t.style&&!at(t.style[e])?Tn:~e.indexOf("-")?Sn:Pr(t,e)},core:{_removeProperty:Un,_getMatrix:ii}};Jr.utils.checkPrefix=Nn,Jr.core.getStyleSaver=Dn,bi=Wt((_i="x,y,z,scale,scaleX,scaleY,xPercent,yPercent")+","+(yi="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){un[t]=1})),Wt(yi,(function(t){Q.units[t]="deg",ei[t]=1})),gn[bi[13]]=_i+","+yi,Wt("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");gn[e[1]]=bi[e[0]]})),Wt("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){Q.units[t]="px"})),Jr.registerPlugin(xi);var wi=Jr.registerPlugin(xi)||Jr;wi.core.Tween;const Ti=window.matchMedia("(max-width: 1024px)"),Si=document.querySelector(".link-items"),Ai=document.querySelectorAll(".bar");window.addEventListener("click",(t=>{(t.target.matches(".hamburger-menu")||t.target.matches(".nav-link"))&&Ti.matches&&(Si.classList.contains("Open")?(Si.classList.remove("Open"),Ai.forEach(((t,e)=>{switch(t.setAttribute("id",t.className+e),t.id){case"bar0":wi.to("#bar0",{transform:"rotate(0deg)",duration:.5,ease:"expoScale"});case"bar1":wi.to("#bar1",{opacity:1,duration:.5,ease:"expoScale"});case"bar2":wi.to("#bar2",{transform:"rotate(0deg)",duration:.5,ease:"expoScale"})}})),wi.to(Si,{translateY:"-100%"})):(Si.classList.add("Open"),Ai.forEach(((t,e)=>{switch(t.setAttribute("id",t.className+e),t.id){case"bar0":wi.to("#bar0",{transform:"rotate(45deg)",translateY:"-0.7rem",duration:.5,ease:"expoScale"});case"bar1":wi.to("#bar1",{opacity:0,duration:.5,ease:"expoScale"});case"bar2":wi.to("#bar2",{transform:"rotate(-45deg)",duration:.5,ease:"expoScale"})}})),wi.to(Si,{translateY:"0%"})))}));r(151);document.querySelectorAll(".layer");const Mi=setInterval((()=>{wi.fromTo(".layer",{opacity:.1},{opacity:1,stagger:{each:.5,from:0}})}),1500);window.addEventListener("load",(function(){setTimeout((()=>{document.getElementById("preloader").style.display="none",document.getElementById("content").style.opacity="1",clearInterval(Mi)}),1500)}));var Ci=function(){return Ci=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},Ci.apply(this,arguments)};function ki(t,e,r){return Math.max(t,Math.min(e,r))}"function"==typeof SuppressedError&&SuppressedError;class Ei{advance(t){if(!this.isRunning)return;let e=!1;if(this.lerp)this.value=function(t,e,r,n){return function(t,e,r){return(1-r)*t+r*e}(t,e,1-Math.exp(-r*n))}(this.value,this.to,60*this.lerp,t),Math.round(this.value)===this.to&&(this.value=this.to,e=!0);else{this.currentTime+=t;const r=ki(0,this.currentTime/this.duration,1);e=r>=1;const n=e?1:this.easing(r);this.value=this.from+(this.to-this.from)*n}e&&this.stop(),this.onUpdate?.(this.value,e)}stop(){this.isRunning=!1}fromTo(t,e,{lerp:r=.1,duration:n=1,easing:i=(t=>t),onStart:s,onUpdate:o}){this.from=this.value=t,this.to=e,this.lerp=r,this.duration=n,this.easing=i,this.currentTime=0,this.isRunning=!0,s?.(),this.onUpdate=o}}class Oi{constructor({wrapper:t,content:e,autoResize:r=!0,debounce:n=250}={}){this.wrapper=t,this.content=e,r&&(this.debouncedResize=function(t,e){let r;return function(){let n=arguments,i=this;clearTimeout(r),r=setTimeout((function(){t.apply(i,n)}),e)}}(this.resize,n),this.wrapper===window?window.addEventListener("resize",this.debouncedResize,!1):(this.wrapperResizeObserver=new ResizeObserver(this.debouncedResize),this.wrapperResizeObserver.observe(this.wrapper)),this.contentResizeObserver=new ResizeObserver(this.debouncedResize),this.contentResizeObserver.observe(this.content)),this.resize()}destroy(){this.wrapperResizeObserver?.disconnect(),this.contentResizeObserver?.disconnect(),window.removeEventListener("resize",this.debouncedResize,!1)}resize=()=>{this.onWrapperResize(),this.onContentResize()};onWrapperResize=()=>{this.wrapper===window?(this.width=window.innerWidth,this.height=window.innerHeight):(this.width=this.wrapper.clientWidth,this.height=this.wrapper.clientHeight)};onContentResize=()=>{this.wrapper===window?(this.scrollHeight=this.content.scrollHeight,this.scrollWidth=this.content.scrollWidth):(this.scrollHeight=this.wrapper.scrollHeight,this.scrollWidth=this.wrapper.scrollWidth)};get limit(){return{x:this.scrollWidth-this.width,y:this.scrollHeight-this.height}}}class Pi{constructor(){this.events={}}emit(t,...e){let r=this.events[t]||[];for(let t=0,n=r.length;t<n;t++)r[t](...e)}on(t,e){return this.events[t]?.push(e)||(this.events[t]=[e]),()=>{this.events[t]=this.events[t]?.filter((t=>e!==t))}}off(t,e){this.events[t]=this.events[t]?.filter((t=>e!==t))}destroy(){this.events={}}}const Ri=100/6;class zi{constructor(t,{wheelMultiplier:e=1,touchMultiplier:r=1}){this.element=t,this.wheelMultiplier=e,this.touchMultiplier=r,this.touchStart={x:null,y:null},this.emitter=new Pi,window.addEventListener("resize",this.onWindowResize,!1),this.onWindowResize(),this.element.addEventListener("wheel",this.onWheel,{passive:!1}),this.element.addEventListener("touchstart",this.onTouchStart,{passive:!1}),this.element.addEventListener("touchmove",this.onTouchMove,{passive:!1}),this.element.addEventListener("touchend",this.onTouchEnd,{passive:!1})}on(t,e){return this.emitter.on(t,e)}destroy(){this.emitter.destroy(),window.removeEventListener("resize",this.onWindowResize,!1),this.element.removeEventListener("wheel",this.onWheel,{passive:!1}),this.element.removeEventListener("touchstart",this.onTouchStart,{passive:!1}),this.element.removeEventListener("touchmove",this.onTouchMove,{passive:!1}),this.element.removeEventListener("touchend",this.onTouchEnd,{passive:!1})}onTouchStart=t=>{const{clientX:e,clientY:r}=t.targetTouches?t.targetTouches[0]:t;this.touchStart.x=e,this.touchStart.y=r,this.lastDelta={x:0,y:0},this.emitter.emit("scroll",{deltaX:0,deltaY:0,event:t})};onTouchMove=t=>{const{clientX:e,clientY:r}=t.targetTouches?t.targetTouches[0]:t,n=-(e-this.touchStart.x)*this.touchMultiplier,i=-(r-this.touchStart.y)*this.touchMultiplier;this.touchStart.x=e,this.touchStart.y=r,this.lastDelta={x:n,y:i},this.emitter.emit("scroll",{deltaX:n,deltaY:i,event:t})};onTouchEnd=t=>{this.emitter.emit("scroll",{deltaX:this.lastDelta.x,deltaY:this.lastDelta.y,event:t})};onWheel=t=>{let{deltaX:e,deltaY:r,deltaMode:n}=t;e*=1===n?Ri:2===n?this.windowWidth:1,r*=1===n?Ri:2===n?this.windowHeight:1,e*=this.wheelMultiplier,r*=this.wheelMultiplier,this.emitter.emit("scroll",{deltaX:e,deltaY:r,event:t})};onWindowResize=()=>{this.windowWidth=window.innerWidth,this.windowHeight=window.innerHeight}}var Di=function(){function t(t){var e=void 0===t?{}:t,r=e.wrapper,n=void 0===r?window:r,i=e.content,s=void 0===i?document.documentElement:i,o=e.wheelEventsTarget,a=void 0===o?n:o,l=e.eventsTarget,u=void 0===l?a:l,c=e.smoothWheel,h=void 0===c||c,f=e.syncTouch,p=void 0!==f&&f,d=e.syncTouchLerp,m=void 0===d?.075:d,g=e.touchInertiaMultiplier,v=void 0===g?35:g,_=e.duration,y=e.easing,b=void 0===y?function(t){return Math.min(1,1.001-Math.pow(2,-10*t))}:y,x=e.lerp,w=void 0===x?!_&&.1:x,T=e.infinite,S=void 0!==T&&T,A=e.orientation,M=void 0===A?"vertical":A,C=e.gestureOrientation,k=void 0===C?"vertical":C,E=e.touchMultiplier,O=void 0===E?1:E,P=e.wheelMultiplier,R=void 0===P?1:P,z=e.autoResize,D=void 0===z||z,L=e.__experimental__naiveDimensions,I=void 0!==L&&L,F=this;this.__isSmooth=!1,this.__isScrolling=!1,this.__isStopped=!1,this.__isLocked=!1,this.onVirtualScroll=function(t){var e=t.deltaX,r=t.deltaY,n=t.event;if(!n.ctrlKey){var i=n.type.includes("touch"),s=n.type.includes("wheel");if(F.options.syncTouch&&i&&"touchstart"===n.type&&!F.isStopped&&!F.isLocked)F.reset();else{var o=0===e&&0===r,a="vertical"===F.options.gestureOrientation&&0===r||"horizontal"===F.options.gestureOrientation&&0===e;if(!o&&!a){var l=n.composedPath();if(!(l=l.slice(0,l.indexOf(F.rootElement))).find((function(t){var e,r,n,o,a;return(null===(e=t.hasAttribute)||void 0===e?void 0:e.call(t,"data-lenis-prevent"))||i&&(null===(r=t.hasAttribute)||void 0===r?void 0:r.call(t,"data-lenis-prevent-touch"))||s&&(null===(n=t.hasAttribute)||void 0===n?void 0:n.call(t,"data-lenis-prevent-wheel"))||(null===(o=t.classList)||void 0===o?void 0:o.contains("lenis"))&&!(null===(a=t.classList)||void 0===a?void 0:a.contains("lenis-stopped"))})))if(F.isStopped||F.isLocked)n.preventDefault();else{if(F.isSmooth=F.options.syncTouch&&i||F.options.smoothWheel&&s,!F.isSmooth)return F.isScrolling=!1,void F.animate.stop();n.preventDefault();var u=r;"both"===F.options.gestureOrientation?u=Math.abs(r)>Math.abs(e)?r:e:"horizontal"===F.options.gestureOrientation&&(u=e);var c=i&&F.options.syncTouch,h=i&&"touchend"===n.type&&Math.abs(u)>5;h&&(u=F.velocity*F.options.touchInertiaMultiplier),F.scrollTo(F.targetScroll+u,Ci({programmatic:!1},c?{lerp:h?F.options.syncTouchLerp:1}:{lerp:F.options.lerp,duration:F.options.duration,easing:F.options.easing}))}}}}},this.onNativeScroll=function(){if(!F.__preventNextScrollEvent&&!F.isScrolling){var t=F.animatedScroll;F.animatedScroll=F.targetScroll=F.actualScroll,F.velocity=0,F.direction=Math.sign(F.animatedScroll-t),F.emit()}},window.lenisVersion="1.0.45",n!==document.documentElement&&n!==document.body||(n=window),this.options={wrapper:n,content:s,wheelEventsTarget:a,eventsTarget:u,smoothWheel:h,syncTouch:p,syncTouchLerp:m,touchInertiaMultiplier:v,duration:_,easing:b,lerp:w,infinite:S,gestureOrientation:k,orientation:M,touchMultiplier:O,wheelMultiplier:R,autoResize:D,__experimental__naiveDimensions:I},this.animate=new Ei,this.emitter=new Pi,this.dimensions=new Oi({wrapper:n,content:s,autoResize:D}),this.toggleClassName("lenis",!0),this.velocity=0,this.isLocked=!1,this.isStopped=!1,this.isSmooth=p||h,this.isScrolling=!1,this.targetScroll=this.animatedScroll=this.actualScroll,this.options.wrapper.addEventListener("scroll",this.onNativeScroll,!1),this.virtualScroll=new zi(u,{touchMultiplier:O,wheelMultiplier:R}),this.virtualScroll.on("scroll",this.onVirtualScroll)}return t.prototype.destroy=function(){this.emitter.destroy(),this.options.wrapper.removeEventListener("scroll",this.onNativeScroll,!1),this.virtualScroll.destroy(),this.dimensions.destroy(),this.toggleClassName("lenis",!1),this.toggleClassName("lenis-smooth",!1),this.toggleClassName("lenis-scrolling",!1),this.toggleClassName("lenis-stopped",!1),this.toggleClassName("lenis-locked",!1)},t.prototype.on=function(t,e){return this.emitter.on(t,e)},t.prototype.off=function(t,e){return this.emitter.off(t,e)},t.prototype.setScroll=function(t){this.isHorizontal?this.rootElement.scrollLeft=t:this.rootElement.scrollTop=t},t.prototype.resize=function(){this.dimensions.resize()},t.prototype.emit=function(){this.emitter.emit("scroll",this)},t.prototype.reset=function(){this.isLocked=!1,this.isScrolling=!1,this.animatedScroll=this.targetScroll=this.actualScroll,this.velocity=0,this.animate.stop()},t.prototype.start=function(){this.isStopped&&(this.isStopped=!1,this.reset())},t.prototype.stop=function(){this.isStopped||(this.isStopped=!0,this.animate.stop(),this.reset())},t.prototype.raf=function(t){var e=t-(this.time||t);this.time=t,this.animate.advance(.001*e)},t.prototype.scrollTo=function(t,e){var r=this,n=void 0===e?{}:e,i=n.offset,s=void 0===i?0:i,o=n.immediate,a=void 0!==o&&o,l=n.lock,u=void 0!==l&&l,c=n.duration,h=void 0===c?this.options.duration:c,f=n.easing,p=void 0===f?this.options.easing:f,d=n.lerp,m=void 0===d?!h&&this.options.lerp:d,g=n.onComplete,v=n.force,_=void 0!==v&&v,y=n.programmatic,b=void 0===y||y;if(!this.isStopped&&!this.isLocked||_){if(["top","left","start"].includes(t))t=0;else if(["bottom","right","end"].includes(t))t=this.limit;else{var x=void 0;if("string"==typeof t?x=document.querySelector(t):(null==t?void 0:t.nodeType)&&(x=t),x){if(this.options.wrapper!==window){var w=this.options.wrapper.getBoundingClientRect();s-=this.isHorizontal?w.left:w.top}var T=x.getBoundingClientRect();t=(this.isHorizontal?T.left:T.top)+this.animatedScroll}}if("number"==typeof t){if(t+=s,t=Math.round(t),this.options.infinite?b&&(this.targetScroll=this.animatedScroll=this.scroll):t=ki(0,t,this.limit),a)return this.animatedScroll=this.targetScroll=t,this.setScroll(this.scroll),this.reset(),void(null==g||g(this));if(!b){if(t===this.targetScroll)return;this.targetScroll=t}this.animate.fromTo(this.animatedScroll,t,{duration:h,easing:p,lerp:m,onStart:function(){u&&(r.isLocked=!0),r.isScrolling=!0},onUpdate:function(t,e){r.isScrolling=!0,r.velocity=t-r.animatedScroll,r.direction=Math.sign(r.velocity),r.animatedScroll=t,r.setScroll(r.scroll),b&&(r.targetScroll=t),e||r.emit(),e&&(r.reset(),r.emit(),null==g||g(r),r.__preventNextScrollEvent=!0,requestAnimationFrame((function(){delete r.__preventNextScrollEvent})))}})}}},Object.defineProperty(t.prototype,"rootElement",{get:function(){return this.options.wrapper===window?document.documentElement:this.options.wrapper},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"limit",{get:function(){return this.options.__experimental__naiveDimensions?this.isHorizontal?this.rootElement.scrollWidth-this.rootElement.clientWidth:this.rootElement.scrollHeight-this.rootElement.clientHeight:this.dimensions.limit[this.isHorizontal?"x":"y"]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isHorizontal",{get:function(){return"horizontal"===this.options.orientation},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"actualScroll",{get:function(){return this.isHorizontal?this.rootElement.scrollLeft:this.rootElement.scrollTop},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"scroll",{get:function(){return this.options.infinite?function(t,e){return(t%e+e)%e}(this.animatedScroll,this.limit):this.animatedScroll},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"progress",{get:function(){return 0===this.limit?1:this.scroll/this.limit},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isSmooth",{get:function(){return this.__isSmooth},set:function(t){this.__isSmooth!==t&&(this.__isSmooth=t,this.toggleClassName("lenis-smooth",t))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isScrolling",{get:function(){return this.__isScrolling},set:function(t){this.__isScrolling!==t&&(this.__isScrolling=t,this.toggleClassName("lenis-scrolling",t))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isStopped",{get:function(){return this.__isStopped},set:function(t){this.__isStopped!==t&&(this.__isStopped=t,this.toggleClassName("lenis-stopped",t))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isLocked",{get:function(){return this.__isLocked},set:function(t){this.__isLocked!==t&&(this.__isLocked=t,this.toggleClassName("lenis-locked",t))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"className",{get:function(){var t="lenis";return this.isStopped&&(t+=" lenis-stopped"),this.isLocked&&(t+=" lenis-locked"),this.isScrolling&&(t+=" lenis-scrolling"),this.isSmooth&&(t+=" lenis-smooth"),t},enumerable:!1,configurable:!0}),t.prototype.toggleClassName=function(t,e){this.rootElement.classList.toggle(t,e),this.emitter.emit("className change",this)},t}();function Li(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var Ii,Fi,Ni,Bi,Yi,Xi,Wi,Hi,Ui,qi,ji,Vi,Qi,Gi=function(){return Ii||"undefined"!=typeof window&&(Ii=window.gsap)&&Ii.registerPlugin&&Ii},$i=1,Zi=[],Ki=[],Ji=[],ts=Date.now,es=function(t,e){return e},rs=function(t,e){return~Ji.indexOf(t)&&Ji[Ji.indexOf(t)+1][e]},ns=function(t){return!!~qi.indexOf(t)},is=function(t,e,r,n,i){return t.addEventListener(e,r,{passive:!1!==n,capture:!!i})},ss=function(t,e,r,n){return t.removeEventListener(e,r,!!n)},os="scrollLeft",as="scrollTop",ls=function(){return ji&&ji.isPressed||Ki.cache++},us=function(t,e){var r=function r(n){if(n||0===n){$i&&(Ni.history.scrollRestoration="manual");var i=ji&&ji.isPressed;n=r.v=Math.round(n)||(ji&&ji.iOS?1:0),t(n),r.cacheID=Ki.cache,i&&es("ss",n)}else(e||Ki.cache!==r.cacheID||es("ref"))&&(r.cacheID=Ki.cache,r.v=t());return r.v+r.offset};return r.offset=0,t&&r},cs={s:os,p:"left",p2:"Left",os:"right",os2:"Right",d:"width",d2:"Width",a:"x",sc:us((function(t){return arguments.length?Ni.scrollTo(t,hs.sc()):Ni.pageXOffset||Bi[os]||Yi[os]||Xi[os]||0}))},hs={s:as,p:"top",p2:"Top",os:"bottom",os2:"Bottom",d:"height",d2:"Height",a:"y",op:cs,sc:us((function(t){return arguments.length?Ni.scrollTo(cs.sc(),t):Ni.pageYOffset||Bi[as]||Yi[as]||Xi[as]||0}))},fs=function(t,e){return(e&&e._ctx&&e._ctx.selector||Ii.utils.toArray)(t)[0]||("string"==typeof t&&!1!==Ii.config().nullTargetWarn?console.warn("Element not found:",t):null)},ps=function(t,e){var r=e.s,n=e.sc;ns(t)&&(t=Bi.scrollingElement||Yi);var i=Ki.indexOf(t),s=n===hs.sc?1:2;!~i&&(i=Ki.push(t)-1),Ki[i+s]||is(t,"scroll",ls);var o=Ki[i+s],a=o||(Ki[i+s]=us(rs(t,r),!0)||(ns(t)?n:us((function(e){return arguments.length?t[r]=e:t[r]}))));return a.target=t,o||(a.smooth="smooth"===Ii.getProperty(t,"scrollBehavior")),a},ds=function(t,e,r){var n=t,i=t,s=ts(),o=s,a=e||50,l=Math.max(500,3*a),u=function(t,e){var l=ts();e||l-s>a?(i=n,n=t,o=s,s=l):r?n+=t:n=i+(t-i)/(l-o)*(s-o)};return{update:u,reset:function(){i=n=r?0:n,o=s=0},getVelocity:function(t){var e=o,a=i,c=ts();return(t||0===t)&&t!==n&&u(t),s===o||c-o>l?0:(n+(r?a:-a))/((r?c:s)-e)*1e3}}},ms=function(t,e){return e&&!t._gsapAllow&&t.preventDefault(),t.changedTouches?t.changedTouches[0]:t},gs=function(t){var e=Math.max.apply(Math,t),r=Math.min.apply(Math,t);return Math.abs(e)>=Math.abs(r)?e:r},vs=function(){var t,e,r,n;(Ui=Ii.core.globals().ScrollTrigger)&&Ui.core&&(t=Ui.core,e=t.bridge||{},r=t._scrollers,n=t._proxies,r.push.apply(r,Ki),n.push.apply(n,Ji),Ki=r,Ji=n,es=function(t,r){return e[t](r)})},_s=function(t){return Ii=t||Gi(),!Fi&&Ii&&"undefined"!=typeof document&&document.body&&(Ni=window,Bi=document,Yi=Bi.documentElement,Xi=Bi.body,qi=[Ni,Bi,Yi,Xi],Ii.utils.clamp,Qi=Ii.core.context||function(){},Hi="onpointerenter"in Xi?"pointer":"mouse",Wi=ys.isTouch=Ni.matchMedia&&Ni.matchMedia("(hover: none), (pointer: coarse)").matches?1:"ontouchstart"in Ni||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0?2:0,Vi=ys.eventTypes=("ontouchstart"in Yi?"touchstart,touchmove,touchcancel,touchend":"onpointerdown"in Yi?"pointerdown,pointermove,pointercancel,pointerup":"mousedown,mousemove,mouseup,mouseup").split(","),setTimeout((function(){return $i=0}),500),vs(),Fi=1),Fi};cs.op=hs,Ki.cache=0;var ys=function(){function t(t){this.init(t)}var e,r,n;return t.prototype.init=function(t){Fi||_s(Ii)||console.warn("Please gsap.registerPlugin(Observer)"),Ui||vs();var e=t.tolerance,r=t.dragMinimum,n=t.type,i=t.target,s=t.lineHeight,o=t.debounce,a=t.preventDefault,l=t.onStop,u=t.onStopDelay,c=t.ignore,h=t.wheelSpeed,f=t.event,p=t.onDragStart,d=t.onDragEnd,m=t.onDrag,g=t.onPress,v=t.onRelease,_=t.onRight,y=t.onLeft,b=t.onUp,x=t.onDown,w=t.onChangeX,T=t.onChangeY,S=t.onChange,A=t.onToggleX,M=t.onToggleY,C=t.onHover,k=t.onHoverEnd,E=t.onMove,O=t.ignoreCheck,P=t.isNormalizer,R=t.onGestureStart,z=t.onGestureEnd,D=t.onWheel,L=t.onEnable,I=t.onDisable,F=t.onClick,N=t.scrollSpeed,B=t.capture,Y=t.allowClicks,X=t.lockAxis,W=t.onLockAxis;this.target=i=fs(i)||Yi,this.vars=t,c&&(c=Ii.utils.toArray(c)),e=e||1e-9,r=r||0,h=h||1,N=N||1,n=n||"wheel,touch,pointer",o=!1!==o,s||(s=parseFloat(Ni.getComputedStyle(Xi).lineHeight)||22);var H,U,q,j,V,Q,G,$=this,Z=0,K=0,J=t.passive||!a,tt=ps(i,cs),et=ps(i,hs),rt=tt(),nt=et(),it=~n.indexOf("touch")&&!~n.indexOf("pointer")&&"pointerdown"===Vi[0],st=ns(i),ot=i.ownerDocument||Bi,at=[0,0,0],lt=[0,0,0],ut=0,ct=function(){return ut=ts()},ht=function(t,e){return($.event=t)&&c&&~c.indexOf(t.target)||e&&it&&"touch"!==t.pointerType||O&&O(t,e)},ft=function(){var t=$.deltaX=gs(at),r=$.deltaY=gs(lt),n=Math.abs(t)>=e,i=Math.abs(r)>=e;S&&(n||i)&&S($,t,r,at,lt),n&&(_&&$.deltaX>0&&_($),y&&$.deltaX<0&&y($),w&&w($),A&&$.deltaX<0!=Z<0&&A($),Z=$.deltaX,at[0]=at[1]=at[2]=0),i&&(x&&$.deltaY>0&&x($),b&&$.deltaY<0&&b($),T&&T($),M&&$.deltaY<0!=K<0&&M($),K=$.deltaY,lt[0]=lt[1]=lt[2]=0),(j||q)&&(E&&E($),q&&(m($),q=!1),j=!1),Q&&!(Q=!1)&&W&&W($),V&&(D($),V=!1),H=0},pt=function(t,e,r){at[r]+=t,lt[r]+=e,$._vx.update(t),$._vy.update(e),o?H||(H=requestAnimationFrame(ft)):ft()},dt=function(t,e){X&&!G&&($.axis=G=Math.abs(t)>Math.abs(e)?"x":"y",Q=!0),"y"!==G&&(at[2]+=t,$._vx.update(t,!0)),"x"!==G&&(lt[2]+=e,$._vy.update(e,!0)),o?H||(H=requestAnimationFrame(ft)):ft()},mt=function(t){if(!ht(t,1)){var e=(t=ms(t,a)).clientX,n=t.clientY,i=e-$.x,s=n-$.y,o=$.isDragging;$.x=e,$.y=n,(o||Math.abs($.startX-e)>=r||Math.abs($.startY-n)>=r)&&(m&&(q=!0),o||($.isDragging=!0),dt(i,s),o||p&&p($))}},gt=$.onPress=function(t){ht(t,1)||t&&t.button||($.axis=G=null,U.pause(),$.isPressed=!0,t=ms(t),Z=K=0,$.startX=$.x=t.clientX,$.startY=$.y=t.clientY,$._vx.reset(),$._vy.reset(),is(P?i:ot,Vi[1],mt,J,!0),$.deltaX=$.deltaY=0,g&&g($))},vt=$.onRelease=function(t){if(!ht(t,1)){ss(P?i:ot,Vi[1],mt,!0);var e=!isNaN($.y-$.startY),r=$.isDragging,n=r&&(Math.abs($.x-$.startX)>3||Math.abs($.y-$.startY)>3),s=ms(t);!n&&e&&($._vx.reset(),$._vy.reset(),a&&Y&&Ii.delayedCall(.08,(function(){if(ts()-ut>300&&!t.defaultPrevented)if(t.target.click)t.target.click();else if(ot.createEvent){var e=ot.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,Ni,1,s.screenX,s.screenY,s.clientX,s.clientY,!1,!1,!1,!1,0,null),t.target.dispatchEvent(e)}}))),$.isDragging=$.isGesturing=$.isPressed=!1,l&&r&&!P&&U.restart(!0),d&&r&&d($),v&&v($,n)}},_t=function(t){return t.touches&&t.touches.length>1&&($.isGesturing=!0)&&R(t,$.isDragging)},yt=function(){return($.isGesturing=!1)||z($)},bt=function(t){if(!ht(t)){var e=tt(),r=et();pt((e-rt)*N,(r-nt)*N,1),rt=e,nt=r,l&&U.restart(!0)}},xt=function(t){if(!ht(t)){t=ms(t,a),D&&(V=!0);var e=(1===t.deltaMode?s:2===t.deltaMode?Ni.innerHeight:1)*h;pt(t.deltaX*e,t.deltaY*e,0),l&&!P&&U.restart(!0)}},wt=function(t){if(!ht(t)){var e=t.clientX,r=t.clientY,n=e-$.x,i=r-$.y;$.x=e,$.y=r,j=!0,l&&U.restart(!0),(n||i)&&dt(n,i)}},Tt=function(t){$.event=t,C($)},St=function(t){$.event=t,k($)},At=function(t){return ht(t)||ms(t,a)&&F($)};U=$._dc=Ii.delayedCall(u||.25,(function(){$._vx.reset(),$._vy.reset(),U.pause(),l&&l($)})).pause(),$.deltaX=$.deltaY=0,$._vx=ds(0,50,!0),$._vy=ds(0,50,!0),$.scrollX=tt,$.scrollY=et,$.isDragging=$.isGesturing=$.isPressed=!1,Qi(this),$.enable=function(t){return $.isEnabled||(is(st?ot:i,"scroll",ls),n.indexOf("scroll")>=0&&is(st?ot:i,"scroll",bt,J,B),n.indexOf("wheel")>=0&&is(i,"wheel",xt,J,B),(n.indexOf("touch")>=0&&Wi||n.indexOf("pointer")>=0)&&(is(i,Vi[0],gt,J,B),is(ot,Vi[2],vt),is(ot,Vi[3],vt),Y&&is(i,"click",ct,!0,!0),F&&is(i,"click",At),R&&is(ot,"gesturestart",_t),z&&is(ot,"gestureend",yt),C&&is(i,Hi+"enter",Tt),k&&is(i,Hi+"leave",St),E&&is(i,Hi+"move",wt)),$.isEnabled=!0,t&&t.type&&gt(t),L&&L($)),$},$.disable=function(){$.isEnabled&&(Zi.filter((function(t){return t!==$&&ns(t.target)})).length||ss(st?ot:i,"scroll",ls),$.isPressed&&($._vx.reset(),$._vy.reset(),ss(P?i:ot,Vi[1],mt,!0)),ss(st?ot:i,"scroll",bt,B),ss(i,"wheel",xt,B),ss(i,Vi[0],gt,B),ss(ot,Vi[2],vt),ss(ot,Vi[3],vt),ss(i,"click",ct,!0),ss(i,"click",At),ss(ot,"gesturestart",_t),ss(ot,"gestureend",yt),ss(i,Hi+"enter",Tt),ss(i,Hi+"leave",St),ss(i,Hi+"move",wt),$.isEnabled=$.isPressed=$.isDragging=!1,I&&I($))},$.kill=$.revert=function(){$.disable();var t=Zi.indexOf($);t>=0&&Zi.splice(t,1),ji===$&&(ji=0)},Zi.push($),P&&ns(i)&&(ji=$),$.enable(f)},e=t,(r=[{key:"velocityX",get:function(){return this._vx.getVelocity()}},{key:"velocityY",get:function(){return this._vy.getVelocity()}}])&&Li(e.prototype,r),n&&Li(e,n),t}();ys.version="3.12.5",ys.create=function(t){return new ys(t)},ys.register=_s,ys.getAll=function(){return Zi.slice()},ys.getById=function(t){return Zi.filter((function(e){return e.vars.id===t}))[0]},Gi()&&Ii.registerPlugin(ys);var bs,xs,ws,Ts,Ss,As,Ms,Cs,ks,Es,Os,Ps,Rs,zs,Ds,Ls,Is,Fs,Ns,Bs,Ys,Xs,Ws,Hs,Us,qs,js,Vs,Qs,Gs,$s,Zs,Ks,Js,to,eo,ro,no,io=1,so=Date.now,oo=so(),ao=0,lo=0,uo=function(t,e,r){var n=So(t)&&("clamp("===t.substr(0,6)||t.indexOf("max")>-1);return r["_"+e+"Clamp"]=n,n?t.substr(6,t.length-7):t},co=function(t,e){return!e||So(t)&&"clamp("===t.substr(0,6)?t:"clamp("+t+")"},ho=function t(){return lo&&requestAnimationFrame(t)},fo=function(){return zs=1},po=function(){return zs=0},mo=function(t){return t},go=function(t){return Math.round(1e5*t)/1e5||0},vo=function(){return"undefined"!=typeof window},_o=function(){return bs||vo()&&(bs=window.gsap)&&bs.registerPlugin&&bs},yo=function(t){return!!~Ms.indexOf(t)},bo=function(t){return("Height"===t?$s:ws["inner"+t])||Ss["client"+t]||As["client"+t]},xo=function(t){return rs(t,"getBoundingClientRect")||(yo(t)?function(){return Da.width=ws.innerWidth,Da.height=$s,Da}:function(){return Vo(t)})},wo=function(t,e){var r=e.s,n=e.d2,i=e.d,s=e.a;return Math.max(0,(r="scroll"+n)&&(s=rs(t,r))?s()-xo(t)()[i]:yo(t)?(Ss[r]||As[r])-bo(n):t[r]-t["offset"+n])},To=function(t,e){for(var r=0;r<Ns.length;r+=3)(!e||~e.indexOf(Ns[r+1]))&&t(Ns[r],Ns[r+1],Ns[r+2])},So=function(t){return"string"==typeof t},Ao=function(t){return"function"==typeof t},Mo=function(t){return"number"==typeof t},Co=function(t){return"object"==typeof t},ko=function(t,e,r){return t&&t.progress(e?0:1)&&r&&t.pause()},Eo=function(t,e){if(t.enabled){var r=t._ctx?t._ctx.add((function(){return e(t)})):e(t);r&&r.totalTime&&(t.callbackAnimation=r)}},Oo=Math.abs,Po="left",Ro="right",zo="bottom",Do="width",Lo="height",Io="Right",Fo="Left",No="Top",Bo="Bottom",Yo="padding",Xo="margin",Wo="Width",Ho="Height",Uo="px",qo=function(t){return ws.getComputedStyle(t)},jo=function(t,e){for(var r in e)r in t||(t[r]=e[r]);return t},Vo=function(t,e){var r=e&&"matrix(1, 0, 0, 1, 0, 0)"!==qo(t)[Ds]&&bs.to(t,{x:0,y:0,xPercent:0,yPercent:0,rotation:0,rotationX:0,rotationY:0,scale:1,skewX:0,skewY:0}).progress(1),n=t.getBoundingClientRect();return r&&r.progress(0).kill(),n},Qo=function(t,e){var r=e.d2;return t["offset"+r]||t["client"+r]||0},Go=function(t){var e,r=[],n=t.labels,i=t.duration();for(e in n)r.push(n[e]/i);return r},$o=function(t){var e=bs.utils.snap(t),r=Array.isArray(t)&&t.slice(0).sort((function(t,e){return t-e}));return r?function(t,n,i){var s;if(void 0===i&&(i=.001),!n)return e(t);if(n>0){for(t-=i,s=0;s<r.length;s++)if(r[s]>=t)return r[s];return r[s-1]}for(s=r.length,t+=i;s--;)if(r[s]<=t)return r[s];return r[0]}:function(r,n,i){void 0===i&&(i=.001);var s=e(r);return!n||Math.abs(s-r)<i||s-r<0==n<0?s:e(n<0?r-t:r+t)}},Zo=function(t,e,r,n){return r.split(",").forEach((function(r){return t(e,r,n)}))},Ko=function(t,e,r,n,i){return t.addEventListener(e,r,{passive:!n,capture:!!i})},Jo=function(t,e,r,n){return t.removeEventListener(e,r,!!n)},ta=function(t,e,r){(r=r&&r.wheelHandler)&&(t(e,"wheel",r),t(e,"touchmove",r))},ea={startColor:"green",endColor:"red",indent:0,fontSize:"16px",fontWeight:"normal"},ra={toggleActions:"play",anticipatePin:0},na={top:0,left:0,center:.5,bottom:1,right:1},ia=function(t,e){if(So(t)){var r=t.indexOf("="),n=~r?+(t.charAt(r-1)+1)*parseFloat(t.substr(r+1)):0;~r&&(t.indexOf("%")>r&&(n*=e/100),t=t.substr(0,r-1)),t=n+(t in na?na[t]*e:~t.indexOf("%")?parseFloat(t)*e/100:parseFloat(t)||0)}return t},sa=function(t,e,r,n,i,s,o,a){var l=i.startColor,u=i.endColor,c=i.fontSize,h=i.indent,f=i.fontWeight,p=Ts.createElement("div"),d=yo(r)||"fixed"===rs(r,"pinType"),m=-1!==t.indexOf("scroller"),g=d?As:r,v=-1!==t.indexOf("start"),_=v?l:u,y="border-color:"+_+";font-size:"+c+";color:"+_+";font-weight:"+f+";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";return y+="position:"+((m||a)&&d?"fixed;":"absolute;"),(m||a||!d)&&(y+=(n===hs?Ro:zo)+":"+(s+parseFloat(h))+"px;"),o&&(y+="box-sizing:border-box;text-align:left;width:"+o.offsetWidth+"px;"),p._isStart=v,p.setAttribute("class","gsap-marker-"+t+(e?" marker-"+e:"")),p.style.cssText=y,p.innerText=e||0===e?t+"-"+e:t,g.children[0]?g.insertBefore(p,g.children[0]):g.appendChild(p),p._offset=p["offset"+n.op.d2],oa(p,0,n,v),p},oa=function(t,e,r,n){var i={display:"block"},s=r[n?"os2":"p2"],o=r[n?"p2":"os2"];t._isFlipped=n,i[r.a+"Percent"]=n?-100:0,i[r.a]=n?"1px":0,i["border"+s+Wo]=1,i["border"+o+Wo]=0,i[r.p]=e+"px",bs.set(t,i)},aa=[],la={},ua=function(){return so()-ao>34&&(to||(to=requestAnimationFrame(Ca)))},ca=function(){(!Ws||!Ws.isPressed||Ws.startX>As.clientWidth)&&(Ki.cache++,Ws?to||(to=requestAnimationFrame(Ca)):Ca(),ao||ga("scrollStart"),ao=so())},ha=function(){qs=ws.innerWidth,Us=ws.innerHeight},fa=function(){Ki.cache++,!Rs&&!Xs&&!Ts.fullscreenElement&&!Ts.webkitFullscreenElement&&(!Hs||qs!==ws.innerWidth||Math.abs(ws.innerHeight-Us)>.25*ws.innerHeight)&&Cs.restart(!0)},pa={},da=[],ma=function t(){return Jo(Xa,"scrollEnd",t)||Sa(!0)},ga=function(t){return pa[t]&&pa[t].map((function(t){return t()}))||da},va=[],_a=function(t){for(var e=0;e<va.length;e+=5)(!t||va[e+4]&&va[e+4].query===t)&&(va[e].style.cssText=va[e+1],va[e].getBBox&&va[e].setAttribute("transform",va[e+2]||""),va[e+3].uncache=1)},ya=function(t,e){var r;for(Ls=0;Ls<aa.length;Ls++)!(r=aa[Ls])||e&&r._ctx!==e||(t?r.kill(1):r.revert(!0,!0));Zs=!0,e&&_a(e),e||ga("revert")},ba=function(t,e){Ki.cache++,(e||!eo)&&Ki.forEach((function(t){return Ao(t)&&t.cacheID++&&(t.rec=0)})),So(t)&&(ws.history.scrollRestoration=Qs=t)},xa=0,wa=function(){As.appendChild(Gs),$s=!Ws&&Gs.offsetHeight||ws.innerHeight,As.removeChild(Gs)},Ta=function(t){return ks(".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end").forEach((function(e){return e.style.display=t?"none":"block"}))},Sa=function(t,e){if(!ao||t||Zs){wa(),eo=Xa.isRefreshing=!0,Ki.forEach((function(t){return Ao(t)&&++t.cacheID&&(t.rec=t())}));var r=ga("refreshInit");Bs&&Xa.sort(),e||ya(),Ki.forEach((function(t){Ao(t)&&(t.smooth&&(t.target.style.scrollBehavior="auto"),t(0))})),aa.slice(0).forEach((function(t){return t.refresh()})),Zs=!1,aa.forEach((function(t){if(t._subPinOffset&&t.pin){var e=t.vars.horizontal?"offsetWidth":"offsetHeight",r=t.pin[e];t.revert(!0,1),t.adjustPinSpacing(t.pin[e]-r),t.refresh()}})),Ks=1,Ta(!0),aa.forEach((function(t){var e=wo(t.scroller,t._dir),r="max"===t.vars.end||t._endClamp&&t.end>e,n=t._startClamp&&t.start>=e;(r||n)&&t.setPositions(n?e-1:t.start,r?Math.max(n?e:t.start+1,e):t.end,!0)})),Ta(!1),Ks=0,r.forEach((function(t){return t&&t.render&&t.render(-1)})),Ki.forEach((function(t){Ao(t)&&(t.smooth&&requestAnimationFrame((function(){return t.target.style.scrollBehavior="smooth"})),t.rec&&t(t.rec))})),ba(Qs,1),Cs.pause(),xa++,eo=2,Ca(2),aa.forEach((function(t){return Ao(t.vars.onRefresh)&&t.vars.onRefresh(t)})),eo=Xa.isRefreshing=!1,ga("refresh")}else Ko(Xa,"scrollEnd",ma)},Aa=0,Ma=1,Ca=function(t){if(2===t||!eo&&!Zs){Xa.isUpdating=!0,no&&no.update(0);var e=aa.length,r=so(),n=r-oo>=50,i=e&&aa[0].scroll();if(Ma=Aa>i?-1:1,eo||(Aa=i),n&&(ao&&!zs&&r-ao>200&&(ao=0,ga("scrollEnd")),Os=oo,oo=r),Ma<0){for(Ls=e;Ls-- >0;)aa[Ls]&&aa[Ls].update(0,n);Ma=1}else for(Ls=0;Ls<e;Ls++)aa[Ls]&&aa[Ls].update(0,n);Xa.isUpdating=!1}to=0},ka=[Po,"top",zo,Ro,Xo+Bo,Xo+Io,Xo+No,Xo+Fo,"display","flexShrink","float","zIndex","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","gridArea","justifySelf","alignSelf","placeSelf","order"],Ea=ka.concat([Do,Lo,"boxSizing","max"+Wo,"max"+Ho,"position",Xo,Yo,Yo+No,Yo+Io,Yo+Bo,Yo+Fo]),Oa=function(t,e,r,n){if(!t._gsap.swappedIn){for(var i,s=ka.length,o=e.style,a=t.style;s--;)o[i=ka[s]]=r[i];o.position="absolute"===r.position?"absolute":"relative","inline"===r.display&&(o.display="inline-block"),a[zo]=a[Ro]="auto",o.flexBasis=r.flexBasis||"auto",o.overflow="visible",o.boxSizing="border-box",o[Do]=Qo(t,cs)+Uo,o[Lo]=Qo(t,hs)+Uo,o[Yo]=a[Xo]=a.top=a[Po]="0",Ra(n),a[Do]=a["max"+Wo]=r[Do],a[Lo]=a["max"+Ho]=r[Lo],a[Yo]=r[Yo],t.parentNode!==e&&(t.parentNode.insertBefore(e,t),e.appendChild(t)),t._gsap.swappedIn=!0}},Pa=/([A-Z])/g,Ra=function(t){if(t){var e,r,n=t.t.style,i=t.length,s=0;for((t.t._gsap||bs.core.getCache(t.t)).uncache=1;s<i;s+=2)r=t[s+1],e=t[s],r?n[e]=r:n[e]&&n.removeProperty(e.replace(Pa,"-$1").toLowerCase())}},za=function(t){for(var e=Ea.length,r=t.style,n=[],i=0;i<e;i++)n.push(Ea[i],r[Ea[i]]);return n.t=t,n},Da={left:0,top:0},La=function(t,e,r,n,i,s,o,a,l,u,c,h,f,p){Ao(t)&&(t=t(a)),So(t)&&"max"===t.substr(0,3)&&(t=h+("="===t.charAt(4)?ia("0"+t.substr(3),r):0));var d,m,g,v=f?f.time():0;if(f&&f.seek(0),isNaN(t)||(t=+t),Mo(t))f&&(t=bs.utils.mapRange(f.scrollTrigger.start,f.scrollTrigger.end,0,h,t)),o&&oa(o,r,n,!0);else{Ao(e)&&(e=e(a));var _,y,b,x,w=(t||"0").split(" ");g=fs(e,a)||As,(_=Vo(g)||{})&&(_.left||_.top)||"none"!==qo(g).display||(x=g.style.display,g.style.display="block",_=Vo(g),x?g.style.display=x:g.style.removeProperty("display")),y=ia(w[0],_[n.d]),b=ia(w[1]||"0",r),t=_[n.p]-l[n.p]-u+y+i-b,o&&oa(o,b,n,r-b<20||o._isStart&&b>20),r-=r-b}if(p&&(a[p]=t||-.001,t<0&&(t=0)),s){var T=t+r,S=s._isStart;d="scroll"+n.d2,oa(s,T,n,S&&T>20||!S&&(c?Math.max(As[d],Ss[d]):s.parentNode[d])<=T+1),c&&(l=Vo(o),c&&(s.style[n.op.p]=l[n.op.p]-n.op.m-s._offset+Uo))}return f&&g&&(d=Vo(g),f.seek(h),m=Vo(g),f._caScrollDist=d[n.p]-m[n.p],t=t/f._caScrollDist*h),f&&f.seek(v),f?t:Math.round(t)},Ia=/(webkit|moz|length|cssText|inset)/i,Fa=function(t,e,r,n){if(t.parentNode!==e){var i,s,o=t.style;if(e===As){for(i in t._stOrig=o.cssText,s=qo(t))+i||Ia.test(i)||!s[i]||"string"!=typeof o[i]||"0"===i||(o[i]=s[i]);o.top=r,o.left=n}else o.cssText=t._stOrig;bs.core.getCache(t).uncache=1,e.appendChild(t)}},Na=function(t,e,r){var n=e,i=n;return function(e){var s=Math.round(t());return s!==n&&s!==i&&Math.abs(s-n)>3&&Math.abs(s-i)>3&&(e=s,r&&r()),i=n,n=e,e}},Ba=function(t,e,r){var n={};n[e.p]="+="+r,bs.set(t,n)},Ya=function(t,e){var r=ps(t,e),n="_scroll"+e.p2,i=function e(i,s,o,a,l){var u=e.tween,c=s.onComplete,h={};o=o||r();var f=Na(r,o,(function(){u.kill(),e.tween=0}));return l=a&&l||0,a=a||i-o,u&&u.kill(),s[n]=i,s.inherit=!1,s.modifiers=h,h[n]=function(){return f(o+a*u.ratio+l*u.ratio*u.ratio)},s.onUpdate=function(){Ki.cache++,e.tween&&Ca()},s.onComplete=function(){e.tween=0,c&&c.call(u)},u=e.tween=bs.to(t,s)};return t[n]=r,r.wheelHandler=function(){return i.tween&&i.tween.kill()&&(i.tween=0)},Ko(t,"wheel",r.wheelHandler),Xa.isTouch&&Ko(t,"touchmove",r.wheelHandler),i},Xa=function(){function t(e,r){xs||t.register(bs)||console.warn("Please gsap.registerPlugin(ScrollTrigger)"),Vs(this),this.init(e,r)}return t.prototype.init=function(e,r){if(this.progress=this.start=0,this.vars&&this.kill(!0,!0),lo){var n,i,s,o,a,l,u,c,h,f,p,d,m,g,v,_,y,b,x,w,T,S,A,M,C,k,E,O,P,R,z,D,L,I,F,N,B,Y,X,W,H,U,q=e=jo(So(e)||Mo(e)||e.nodeType?{trigger:e}:e,ra),j=q.onUpdate,V=q.toggleClass,Q=q.id,G=q.onToggle,$=q.onRefresh,Z=q.scrub,K=q.trigger,J=q.pin,tt=q.pinSpacing,et=q.invalidateOnRefresh,rt=q.anticipatePin,nt=q.onScrubComplete,it=q.onSnapComplete,st=q.once,ot=q.snap,at=q.pinReparent,lt=q.pinSpacer,ut=q.containerAnimation,ct=q.fastScrollEnd,ht=q.preventOverlaps,ft=e.horizontal||e.containerAnimation&&!1!==e.horizontal?cs:hs,pt=!Z&&0!==Z,dt=fs(e.scroller||ws),mt=bs.core.getCache(dt),gt=yo(dt),vt="fixed"===("pinType"in e?e.pinType:rs(dt,"pinType")||gt&&"fixed"),_t=[e.onEnter,e.onLeave,e.onEnterBack,e.onLeaveBack],yt=pt&&e.toggleActions.split(" "),bt="markers"in e?e.markers:ra.markers,xt=gt?0:parseFloat(qo(dt)["border"+ft.p2+Wo])||0,wt=this,Tt=e.onRefreshInit&&function(){return e.onRefreshInit(wt)},St=function(t,e,r){var n=r.d,i=r.d2,s=r.a;return(s=rs(t,"getBoundingClientRect"))?function(){return s()[n]}:function(){return(e?bo(i):t["client"+i])||0}}(dt,gt,ft),At=function(t,e){return!e||~Ji.indexOf(t)?xo(t):function(){return Da}}(dt,gt),Mt=0,Ct=0,kt=0,Et=ps(dt,ft);if(wt._startClamp=wt._endClamp=!1,wt._dir=ft,rt*=45,wt.scroller=dt,wt.scroll=ut?ut.time.bind(ut):Et,o=Et(),wt.vars=e,r=r||e.animation,"refreshPriority"in e&&(Bs=1,-9999===e.refreshPriority&&(no=wt)),mt.tweenScroll=mt.tweenScroll||{top:Ya(dt,hs),left:Ya(dt,cs)},wt.tweenTo=n=mt.tweenScroll[ft.p],wt.scrubDuration=function(t){(L=Mo(t)&&t)?D?D.duration(t):D=bs.to(r,{ease:"expo",totalProgress:"+=0",inherit:!1,duration:L,paused:!0,onComplete:function(){return nt&&nt(wt)}}):(D&&D.progress(1).kill(),D=0)},r&&(r.vars.lazy=!1,r._initted&&!wt.isReverted||!1!==r.vars.immediateRender&&!1!==e.immediateRender&&r.duration()&&r.render(0,!0,!0),wt.animation=r.pause(),r.scrollTrigger=wt,wt.scrubDuration(Z),R=0,Q||(Q=r.vars.id)),ot&&(Co(ot)&&!ot.push||(ot={snapTo:ot}),"scrollBehavior"in As.style&&bs.set(gt?[As,Ss]:dt,{scrollBehavior:"auto"}),Ki.forEach((function(t){return Ao(t)&&t.target===(gt?Ts.scrollingElement||Ss:dt)&&(t.smooth=!1)})),s=Ao(ot.snapTo)?ot.snapTo:"labels"===ot.snapTo?function(t){return function(e){return bs.utils.snap(Go(t),e)}}(r):"labelsDirectional"===ot.snapTo?(W=r,function(t,e){return $o(Go(W))(t,e.direction)}):!1!==ot.directional?function(t,e){return $o(ot.snapTo)(t,so()-Ct<500?0:e.direction)}:bs.utils.snap(ot.snapTo),I=ot.duration||{min:.1,max:2},I=Co(I)?Es(I.min,I.max):Es(I,I),F=bs.delayedCall(ot.delay||L/2||.1,(function(){var t=Et(),e=so()-Ct<500,i=n.tween;if(!(e||Math.abs(wt.getVelocity())<10)||i||zs||Mt===t)wt.isActive&&Mt!==t&&F.restart(!0);else{var o,a,c=(t-l)/g,h=r&&!pt?r.totalProgress():c,f=e?0:(h-z)/(so()-Os)*1e3||0,p=bs.utils.clamp(-c,1-c,Oo(f/2)*f/.185),d=c+(!1===ot.inertia?0:p),m=ot,v=m.onStart,_=m.onInterrupt,y=m.onComplete;if(o=s(d,wt),Mo(o)||(o=d),a=Math.round(l+o*g),t<=u&&t>=l&&a!==t){if(i&&!i._initted&&i.data<=Oo(a-t))return;!1===ot.inertia&&(p=o-c),n(a,{duration:I(Oo(.185*Math.max(Oo(d-h),Oo(o-h))/f/.05||0)),ease:ot.ease||"power3",data:Oo(a-t),onInterrupt:function(){return F.restart(!0)&&_&&_(wt)},onComplete:function(){wt.update(),Mt=Et(),r&&(D?D.resetTo("totalProgress",o,r._tTime/r._tDur):r.progress(o)),R=z=r&&!pt?r.totalProgress():wt.progress,it&&it(wt),y&&y(wt)}},t,p*g,a-t-p*g),v&&v(wt,n.tween)}}})).pause()),Q&&(la[Q]=wt),(X=(K=wt.trigger=fs(K||!0!==J&&J))&&K._gsap&&K._gsap.stRevert)&&(X=X(wt)),J=!0===J?K:fs(J),So(V)&&(V={targets:K,className:V}),J&&(!1===tt||tt===Xo||(tt=!(!tt&&J.parentNode&&J.parentNode.style&&"flex"===qo(J.parentNode).display)&&Yo),wt.pin=J,(i=bs.core.getCache(J)).spacer?v=i.pinState:(lt&&((lt=fs(lt))&&!lt.nodeType&&(lt=lt.current||lt.nativeElement),i.spacerIsNative=!!lt,lt&&(i.spacerState=za(lt))),i.spacer=b=lt||Ts.createElement("div"),b.classList.add("pin-spacer"),Q&&b.classList.add("pin-spacer-"+Q),i.pinState=v=za(J)),!1!==e.force3D&&bs.set(J,{force3D:!0}),wt.spacer=b=i.spacer,P=qo(J),M=P[tt+ft.os2],w=bs.getProperty(J),T=bs.quickSetter(J,ft.a,Uo),Oa(J,b,P),y=za(J)),bt){d=Co(bt)?jo(bt,ea):ea,f=sa("scroller-start",Q,dt,ft,d,0),p=sa("scroller-end",Q,dt,ft,d,0,f),x=f["offset"+ft.op.d2];var Ot=fs(rs(dt,"content")||dt);c=this.markerStart=sa("start",Q,Ot,ft,d,x,0,ut),h=this.markerEnd=sa("end",Q,Ot,ft,d,x,0,ut),ut&&(Y=bs.quickSetter([c,h],ft.a,Uo)),vt||Ji.length&&!0===rs(dt,"fixedMarkers")||(U=qo(H=gt?As:dt).position,H.style.position="absolute"===U||"fixed"===U?U:"relative",bs.set([f,p],{force3D:!0}),k=bs.quickSetter(f,ft.a,Uo),O=bs.quickSetter(p,ft.a,Uo))}if(ut){var Pt=ut.vars.onUpdate,Rt=ut.vars.onUpdateParams;ut.eventCallback("onUpdate",(function(){wt.update(0,0,1),Pt&&Pt.apply(ut,Rt||[])}))}if(wt.previous=function(){return aa[aa.indexOf(wt)-1]},wt.next=function(){return aa[aa.indexOf(wt)+1]},wt.revert=function(t,e){if(!e)return wt.kill(!0);var n=!1!==t||!wt.enabled,i=Rs;n!==wt.isReverted&&(n&&(N=Math.max(Et(),wt.scroll.rec||0),kt=wt.progress,B=r&&r.progress()),c&&[c,h,f,p].forEach((function(t){return t.style.display=n?"none":"block"})),n&&(Rs=wt,wt.update(n)),!J||at&&wt.isActive||(n?function(t,e,r){Ra(r);var n=t._gsap;if(n.spacerIsNative)Ra(n.spacerState);else if(t._gsap.swappedIn){var i=e.parentNode;i&&(i.insertBefore(t,e),i.removeChild(e))}t._gsap.swappedIn=!1}(J,b,v):Oa(J,b,qo(J),C)),n||wt.update(n),Rs=i,wt.isReverted=n)},wt.refresh=function(i,s,d,x){if(!Rs&&wt.enabled||s)if(J&&i&&ao)Ko(t,"scrollEnd",ma);else{!eo&&Tt&&Tt(wt),Rs=wt,n.tween&&!d&&(n.tween.kill(),n.tween=0),D&&D.pause(),et&&r&&r.revert({kill:!1}).invalidate(),wt.isReverted||wt.revert(!0,!0),wt._subPinOffset=!1;var T,M,k,O,P,R,z,L,I,Y,X,W,H,U=St(),q=At(),j=ut?ut.duration():wo(dt,ft),V=g<=.01,Q=0,G=x||0,Z=Co(d)?d.end:e.end,rt=e.endTrigger||K,nt=Co(d)?d.start:e.start||(0!==e.start&&K?J?"0 0":"0 100%":0),it=wt.pinnedContainer=e.pinnedContainer&&fs(e.pinnedContainer,wt),st=K&&Math.max(0,aa.indexOf(wt))||0,ot=st;for(bt&&Co(d)&&(W=bs.getProperty(f,ft.p),H=bs.getProperty(p,ft.p));ot--;)(R=aa[ot]).end||R.refresh(0,1)||(Rs=wt),!(z=R.pin)||z!==K&&z!==J&&z!==it||R.isReverted||(Y||(Y=[]),Y.unshift(R),R.revert(!0,!0)),R!==aa[ot]&&(st--,ot--);for(Ao(nt)&&(nt=nt(wt)),nt=uo(nt,"start",wt),l=La(nt,K,U,ft,Et(),c,f,wt,q,xt,vt,j,ut,wt._startClamp&&"_startClamp")||(J?-.001:0),Ao(Z)&&(Z=Z(wt)),So(Z)&&!Z.indexOf("+=")&&(~Z.indexOf(" ")?Z=(So(nt)?nt.split(" ")[0]:"")+Z:(Q=ia(Z.substr(2),U),Z=So(nt)?nt:(ut?bs.utils.mapRange(0,ut.duration(),ut.scrollTrigger.start,ut.scrollTrigger.end,l):l)+Q,rt=K)),Z=uo(Z,"end",wt),u=Math.max(l,La(Z||(rt?"100% 0":j),rt,U,ft,Et()+Q,h,p,wt,q,xt,vt,j,ut,wt._endClamp&&"_endClamp"))||-.001,Q=0,ot=st;ot--;)(z=(R=aa[ot]).pin)&&R.start-R._pinPush<=l&&!ut&&R.end>0&&(T=R.end-(wt._startClamp?Math.max(0,R.start):R.start),(z===K&&R.start-R._pinPush<l||z===it)&&isNaN(nt)&&(Q+=T*(1-R.progress)),z===J&&(G+=T));if(l+=Q,u+=Q,wt._startClamp&&(wt._startClamp+=Q),wt._endClamp&&!eo&&(wt._endClamp=u||-.001,u=Math.min(u,wo(dt,ft))),g=u-l||(l-=.01)&&.001,V&&(kt=bs.utils.clamp(0,1,bs.utils.normalize(l,u,N))),wt._pinPush=G,c&&Q&&((T={})[ft.a]="+="+Q,it&&(T[ft.p]="-="+Et()),bs.set([c,h],T)),!J||Ks&&wt.end>=wo(dt,ft)){if(K&&Et()&&!ut)for(M=K.parentNode;M&&M!==As;)M._pinOffset&&(l-=M._pinOffset,u-=M._pinOffset),M=M.parentNode}else T=qo(J),O=ft===hs,k=Et(),S=parseFloat(w(ft.a))+G,!j&&u>1&&(X={style:X=(gt?Ts.scrollingElement||Ss:dt).style,value:X["overflow"+ft.a.toUpperCase()]},gt&&"scroll"!==qo(As)["overflow"+ft.a.toUpperCase()]&&(X.style["overflow"+ft.a.toUpperCase()]="scroll")),Oa(J,b,T),y=za(J),M=Vo(J,!0),L=vt&&ps(dt,O?cs:hs)(),tt?((C=[tt+ft.os2,g+G+Uo]).t=b,(ot=tt===Yo?Qo(J,ft)+g+G:0)&&(C.push(ft.d,ot+Uo),"auto"!==b.style.flexBasis&&(b.style.flexBasis=ot+Uo)),Ra(C),it&&aa.forEach((function(t){t.pin===it&&!1!==t.vars.pinSpacing&&(t._subPinOffset=!0)})),vt&&Et(N)):(ot=Qo(J,ft))&&"auto"!==b.style.flexBasis&&(b.style.flexBasis=ot+Uo),vt&&((P={top:M.top+(O?k-l:L)+Uo,left:M.left+(O?L:k-l)+Uo,boxSizing:"border-box",position:"fixed"})[Do]=P["max"+Wo]=Math.ceil(M.width)+Uo,P[Lo]=P["max"+Ho]=Math.ceil(M.height)+Uo,P[Xo]=P[Xo+No]=P[Xo+Io]=P[Xo+Bo]=P[Xo+Fo]="0",P[Yo]=T[Yo],P[Yo+No]=T[Yo+No],P[Yo+Io]=T[Yo+Io],P[Yo+Bo]=T[Yo+Bo],P[Yo+Fo]=T[Yo+Fo],_=function(t,e,r){for(var n,i=[],s=t.length,o=r?8:0;o<s;o+=2)n=t[o],i.push(n,n in e?e[n]:t[o+1]);return i.t=t.t,i}(v,P,at),eo&&Et(0)),r?(I=r._initted,Ys(1),r.render(r.duration(),!0,!0),A=w(ft.a)-S+g+G,E=Math.abs(g-A)>1,vt&&E&&_.splice(_.length-2,2),r.render(0,!0,!0),I||r.invalidate(!0),r.parent||r.totalTime(r.totalTime()),Ys(0)):A=g,X&&(X.value?X.style["overflow"+ft.a.toUpperCase()]=X.value:X.style.removeProperty("overflow-"+ft.a));Y&&Y.forEach((function(t){return t.revert(!1,!0)})),wt.start=l,wt.end=u,o=a=eo?N:Et(),ut||eo||(o<N&&Et(N),wt.scroll.rec=0),wt.revert(!1,!0),Ct=so(),F&&(Mt=-1,F.restart(!0)),Rs=0,r&&pt&&(r._initted||B)&&r.progress()!==B&&r.progress(B||0,!0).render(r.time(),!0,!0),(V||kt!==wt.progress||ut||et)&&(r&&!pt&&r.totalProgress(ut&&l<-.001&&!kt?bs.utils.normalize(l,u,0):kt,!0),wt.progress=V||(o-l)/g===kt?0:kt),J&&tt&&(b._pinOffset=Math.round(wt.progress*A)),D&&D.invalidate(),isNaN(W)||(W-=bs.getProperty(f,ft.p),H-=bs.getProperty(p,ft.p),Ba(f,ft,W),Ba(c,ft,W-(x||0)),Ba(p,ft,H),Ba(h,ft,H-(x||0))),V&&!eo&&wt.update(),!$||eo||m||(m=!0,$(wt),m=!1)}},wt.getVelocity=function(){return(Et()-a)/(so()-Os)*1e3||0},wt.endAnimation=function(){ko(wt.callbackAnimation),r&&(D?D.progress(1):r.paused()?pt||ko(r,wt.direction<0,1):ko(r,r.reversed()))},wt.labelToScroll=function(t){return r&&r.labels&&(l||wt.refresh()||l)+r.labels[t]/r.duration()*g||0},wt.getTrailing=function(t){var e=aa.indexOf(wt),r=wt.direction>0?aa.slice(0,e).reverse():aa.slice(e+1);return(So(t)?r.filter((function(e){return e.vars.preventOverlaps===t})):r).filter((function(t){return wt.direction>0?t.end<=l:t.start>=u}))},wt.update=function(t,e,i){if(!ut||i||t){var s,c,h,p,d,m,v,x=!0===eo?N:wt.scroll(),w=t?0:(x-l)/g,C=w<0?0:w>1?1:w||0,P=wt.progress;if(e&&(a=o,o=ut?Et():x,ot&&(z=R,R=r&&!pt?r.totalProgress():C)),rt&&J&&!Rs&&!io&&ao&&(!C&&l<x+(x-a)/(so()-Os)*rt?C=1e-4:1===C&&u>x+(x-a)/(so()-Os)*rt&&(C=.9999)),C!==P&&wt.enabled){if(p=(d=(s=wt.isActive=!!C&&C<1)!==(!!P&&P<1))||!!C!=!!P,wt.direction=C>P?1:-1,wt.progress=C,p&&!Rs&&(c=C&&!P?0:1===C?1:1===P?2:3,pt&&(h=!d&&"none"!==yt[c+1]&&yt[c+1]||yt[c],v=r&&("complete"===h||"reset"===h||h in r))),ht&&(d||v)&&(v||Z||!r)&&(Ao(ht)?ht(wt):wt.getTrailing(ht).forEach((function(t){return t.endAnimation()}))),pt||(!D||Rs||io?r&&r.totalProgress(C,!(!Rs||!Ct&&!t)):(D._dp._time-D._start!==D._time&&D.render(D._dp._time-D._start),D.resetTo?D.resetTo("totalProgress",C,r._tTime/r._tDur):(D.vars.totalProgress=C,D.invalidate().restart()))),J)if(t&&tt&&(b.style[tt+ft.os2]=M),vt){if(p){if(m=!t&&C>P&&u+1>x&&x+1>=wo(dt,ft),at)if(t||!s&&!m)Fa(J,b);else{var L=Vo(J,!0),I=x-l;Fa(J,As,L.top+(ft===hs?I:0)+Uo,L.left+(ft===hs?0:I)+Uo)}Ra(s||m?_:y),E&&C<1&&s||T(S+(1!==C||m?0:A))}}else T(go(S+A*C));ot&&!n.tween&&!Rs&&!io&&F.restart(!0),V&&(d||st&&C&&(C<1||!Js))&&ks(V.targets).forEach((function(t){return t.classList[s||st?"add":"remove"](V.className)})),j&&!pt&&!t&&j(wt),p&&!Rs?(pt&&(v&&("complete"===h?r.pause().totalProgress(1):"reset"===h?r.restart(!0).pause():"restart"===h?r.restart(!0):r[h]()),j&&j(wt)),!d&&Js||(G&&d&&Eo(wt,G),_t[c]&&Eo(wt,_t[c]),st&&(1===C?wt.kill(!1,1):_t[c]=0),d||_t[c=1===C?1:3]&&Eo(wt,_t[c])),ct&&!s&&Math.abs(wt.getVelocity())>(Mo(ct)?ct:2500)&&(ko(wt.callbackAnimation),D?D.progress(1):ko(r,"reverse"===h?1:!C,1))):pt&&j&&!Rs&&j(wt)}if(O){var B=ut?x/ut.duration()*(ut._caScrollDist||0):x;k(B+(f._isFlipped?1:0)),O(B)}Y&&Y(-x/ut.duration()*(ut._caScrollDist||0))}},wt.enable=function(e,r){wt.enabled||(wt.enabled=!0,Ko(dt,"resize",fa),gt||Ko(dt,"scroll",ca),Tt&&Ko(t,"refreshInit",Tt),!1!==e&&(wt.progress=kt=0,o=a=Mt=Et()),!1!==r&&wt.refresh())},wt.getTween=function(t){return t&&n?n.tween:D},wt.setPositions=function(t,e,r,n){if(ut){var i=ut.scrollTrigger,s=ut.duration(),o=i.end-i.start;t=i.start+o*t/s,e=i.start+o*e/s}wt.refresh(!1,!1,{start:co(t,r&&!!wt._startClamp),end:co(e,r&&!!wt._endClamp)},n),wt.update()},wt.adjustPinSpacing=function(t){if(C&&t){var e=C.indexOf(ft.d)+1;C[e]=parseFloat(C[e])+t+Uo,C[1]=parseFloat(C[1])+t+Uo,Ra(C)}},wt.disable=function(e,r){if(wt.enabled&&(!1!==e&&wt.revert(!0,!0),wt.enabled=wt.isActive=!1,r||D&&D.pause(),N=0,i&&(i.uncache=1),Tt&&Jo(t,"refreshInit",Tt),F&&(F.pause(),n.tween&&n.tween.kill()&&(n.tween=0)),!gt)){for(var s=aa.length;s--;)if(aa[s].scroller===dt&&aa[s]!==wt)return;Jo(dt,"resize",fa),gt||Jo(dt,"scroll",ca)}},wt.kill=function(t,n){wt.disable(t,n),D&&!n&&D.kill(),Q&&delete la[Q];var s=aa.indexOf(wt);s>=0&&aa.splice(s,1),s===Ls&&Ma>0&&Ls--,s=0,aa.forEach((function(t){return t.scroller===wt.scroller&&(s=1)})),s||eo||(wt.scroll.rec=0),r&&(r.scrollTrigger=null,t&&r.revert({kill:!1}),n||r.kill()),c&&[c,h,f,p].forEach((function(t){return t.parentNode&&t.parentNode.removeChild(t)})),no===wt&&(no=0),J&&(i&&(i.uncache=1),s=0,aa.forEach((function(t){return t.pin===J&&s++})),s||(i.spacer=0)),e.onKill&&e.onKill(wt)},aa.push(wt),wt.enable(!1,!1),X&&X(wt),r&&r.add&&!g){var zt=wt.update;wt.update=function(){wt.update=zt,l||u||wt.refresh()},bs.delayedCall(.01,wt.update),g=.01,l=u=0}else wt.refresh();J&&function(){if(ro!==xa){var t=ro=xa;requestAnimationFrame((function(){return t===xa&&Sa(!0)}))}}()}else this.update=this.refresh=this.kill=mo},t.register=function(e){return xs||(bs=e||_o(),vo()&&window.document&&t.enable(),xs=lo),xs},t.defaults=function(t){if(t)for(var e in t)ra[e]=t[e];return ra},t.disable=function(t,e){lo=0,aa.forEach((function(r){return r[e?"kill":"disable"](t)})),Jo(ws,"wheel",ca),Jo(Ts,"scroll",ca),clearInterval(Ps),Jo(Ts,"touchcancel",mo),Jo(As,"touchstart",mo),Zo(Jo,Ts,"pointerdown,touchstart,mousedown",fo),Zo(Jo,Ts,"pointerup,touchend,mouseup",po),Cs.kill(),To(Jo);for(var r=0;r<Ki.length;r+=3)ta(Jo,Ki[r],Ki[r+1]),ta(Jo,Ki[r],Ki[r+2])},t.enable=function(){if(ws=window,Ts=document,Ss=Ts.documentElement,As=Ts.body,bs&&(ks=bs.utils.toArray,Es=bs.utils.clamp,Vs=bs.core.context||mo,Ys=bs.core.suppressOverwrites||mo,Qs=ws.history.scrollRestoration||"auto",Aa=ws.pageYOffset,bs.core.globals("ScrollTrigger",t),As)){lo=1,(Gs=document.createElement("div")).style.height="100vh",Gs.style.position="absolute",wa(),ho(),ys.register(bs),t.isTouch=ys.isTouch,js=ys.isTouch&&/(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent),Hs=1===ys.isTouch,Ko(ws,"wheel",ca),Ms=[ws,Ts,Ss,As],bs.matchMedia?(t.matchMedia=function(t){var e,r=bs.matchMedia();for(e in t)r.add(e,t[e]);return r},bs.addEventListener("matchMediaInit",(function(){return ya()})),bs.addEventListener("matchMediaRevert",(function(){return _a()})),bs.addEventListener("matchMedia",(function(){Sa(0,1),ga("matchMedia")})),bs.matchMedia("(orientation: portrait)",(function(){return ha(),ha}))):console.warn("Requires GSAP 3.11.0 or later"),ha(),Ko(Ts,"scroll",ca);var e,r,n=As.style,i=n.borderTopStyle,s=bs.core.Animation.prototype;for(s.revert||Object.defineProperty(s,"revert",{value:function(){return this.time(-.01,!0)}}),n.borderTopStyle="solid",e=Vo(As),hs.m=Math.round(e.top+hs.sc())||0,cs.m=Math.round(e.left+cs.sc())||0,i?n.borderTopStyle=i:n.removeProperty("border-top-style"),Ps=setInterval(ua,250),bs.delayedCall(.5,(function(){return io=0})),Ko(Ts,"touchcancel",mo),Ko(As,"touchstart",mo),Zo(Ko,Ts,"pointerdown,touchstart,mousedown",fo),Zo(Ko,Ts,"pointerup,touchend,mouseup",po),Ds=bs.utils.checkPrefix("transform"),Ea.push(Ds),xs=so(),Cs=bs.delayedCall(.2,Sa).pause(),Ns=[Ts,"visibilitychange",function(){var t=ws.innerWidth,e=ws.innerHeight;Ts.hidden?(Is=t,Fs=e):Is===t&&Fs===e||fa()},Ts,"DOMContentLoaded",Sa,ws,"load",Sa,ws,"resize",fa],To(Ko),aa.forEach((function(t){return t.enable(0,1)})),r=0;r<Ki.length;r+=3)ta(Jo,Ki[r],Ki[r+1]),ta(Jo,Ki[r],Ki[r+2])}},t.config=function(e){"limitCallbacks"in e&&(Js=!!e.limitCallbacks);var r=e.syncInterval;r&&clearInterval(Ps)||(Ps=r)&&setInterval(ua,r),"ignoreMobileResize"in e&&(Hs=1===t.isTouch&&e.ignoreMobileResize),"autoRefreshEvents"in e&&(To(Jo)||To(Ko,e.autoRefreshEvents||"none"),Xs=-1===(e.autoRefreshEvents+"").indexOf("resize"))},t.scrollerProxy=function(t,e){var r=fs(t),n=Ki.indexOf(r),i=yo(r);~n&&Ki.splice(n,i?6:2),e&&(i?Ji.unshift(ws,e,As,e,Ss,e):Ji.unshift(r,e))},t.clearMatchMedia=function(t){aa.forEach((function(e){return e._ctx&&e._ctx.query===t&&e._ctx.kill(!0,!0)}))},t.isInViewport=function(t,e,r){var n=(So(t)?fs(t):t).getBoundingClientRect(),i=n[r?Do:Lo]*e||0;return r?n.right-i>0&&n.left+i<ws.innerWidth:n.bottom-i>0&&n.top+i<ws.innerHeight},t.positionInViewport=function(t,e,r){So(t)&&(t=fs(t));var n=t.getBoundingClientRect(),i=n[r?Do:Lo],s=null==e?i/2:e in na?na[e]*i:~e.indexOf("%")?parseFloat(e)*i/100:parseFloat(e)||0;return r?(n.left+s)/ws.innerWidth:(n.top+s)/ws.innerHeight},t.killAll=function(t){if(aa.slice(0).forEach((function(t){return"ScrollSmoother"!==t.vars.id&&t.kill()})),!0!==t){var e=pa.killAll||[];pa={},e.forEach((function(t){return t()}))}},t}();Xa.version="3.12.5",Xa.saveStyles=function(t){return t?ks(t).forEach((function(t){if(t&&t.style){var e=va.indexOf(t);e>=0&&va.splice(e,5),va.push(t,t.style.cssText,t.getBBox&&t.getAttribute("transform"),bs.core.getCache(t),Vs())}})):va},Xa.revert=function(t,e){return ya(!t,e)},Xa.create=function(t,e){return new Xa(t,e)},Xa.refresh=function(t){return t?fa():(xs||Xa.register())&&Sa(!0)},Xa.update=function(t){return++Ki.cache&&Ca(!0===t?2:0)},Xa.clearScrollMemory=ba,Xa.maxScroll=function(t,e){return wo(t,e?cs:hs)},Xa.getScrollFunc=function(t,e){return ps(fs(t),e?cs:hs)},Xa.getById=function(t){return la[t]},Xa.getAll=function(){return aa.filter((function(t){return"ScrollSmoother"!==t.vars.id}))},Xa.isScrolling=function(){return!!ao},Xa.snapDirectional=$o,Xa.addEventListener=function(t,e){var r=pa[t]||(pa[t]=[]);~r.indexOf(e)||r.push(e)},Xa.removeEventListener=function(t,e){var r=pa[t],n=r&&r.indexOf(e);n>=0&&r.splice(n,1)},Xa.batch=function(t,e){var r,n=[],i={},s=e.interval||.016,o=e.batchMax||1e9,a=function(t,e){var r=[],n=[],i=bs.delayedCall(s,(function(){e(r,n),r=[],n=[]})).pause();return function(t){r.length||i.restart(!0),r.push(t.trigger),n.push(t),o<=r.length&&i.progress(1)}};for(r in e)i[r]="on"===r.substr(0,2)&&Ao(e[r])&&"onRefreshInit"!==r?a(0,e[r]):e[r];return Ao(o)&&(o=o(),Ko(Xa,"refresh",(function(){return o=e.batchMax()}))),ks(t).forEach((function(t){var e={};for(r in i)e[r]=i[r];e.trigger=t,n.push(Xa.create(e))})),n};var Wa,Ha=function(t,e,r,n){return e>n?t(n):e<0&&t(0),r>n?(n-e)/(r-e):r<0?e/(e-r):1},Ua=function t(e,r){!0===r?e.style.removeProperty("touch-action"):e.style.touchAction=!0===r?"auto":r?"pan-"+r+(ys.isTouch?" pinch-zoom":""):"none",e===Ss&&t(As,r)},qa={auto:1,scroll:1},ja=function(t){var e,r=t.event,n=t.target,i=t.axis,s=(r.changedTouches?r.changedTouches[0]:r).target,o=s._gsap||bs.core.getCache(s),a=so();if(!o._isScrollT||a-o._isScrollT>2e3){for(;s&&s!==As&&(s.scrollHeight<=s.clientHeight&&s.scrollWidth<=s.clientWidth||!qa[(e=qo(s)).overflowY]&&!qa[e.overflowX]);)s=s.parentNode;o._isScroll=s&&s!==n&&!yo(s)&&(qa[(e=qo(s)).overflowY]||qa[e.overflowX]),o._isScrollT=a}(o._isScroll||"x"===i)&&(r.stopPropagation(),r._gsapAllow=!0)},Va=function(t,e,r,n){return ys.create({target:t,capture:!0,debounce:!1,lockAxis:!0,type:e,onWheel:n=n&&ja,onPress:n,onDrag:n,onScroll:n,onEnable:function(){return r&&Ko(Ts,ys.eventTypes[0],Ga,!1,!0)},onDisable:function(){return Jo(Ts,ys.eventTypes[0],Ga,!0)}})},Qa=/(input|label|select|textarea)/i,Ga=function(t){var e=Qa.test(t.target.tagName);(e||Wa)&&(t._gsapAllow=!0,Wa=e)},$a=function(t){Co(t)||(t={}),t.preventDefault=t.isNormalizer=t.allowClicks=!0,t.type||(t.type="wheel,touch"),t.debounce=!!t.debounce,t.id=t.id||"normalizer";var e,r,n,i,s,o,a,l,u=t,c=u.normalizeScrollX,h=u.momentum,f=u.allowNestedScroll,p=u.onRelease,d=fs(t.target)||Ss,m=bs.core.globals().ScrollSmoother,g=m&&m.get(),v=js&&(t.content&&fs(t.content)||g&&!1!==t.content&&!g.smooth()&&g.content()),_=ps(d,hs),y=ps(d,cs),b=1,x=(ys.isTouch&&ws.visualViewport?ws.visualViewport.scale*ws.visualViewport.width:ws.outerWidth)/ws.innerWidth,w=0,T=Ao(h)?function(){return h(e)}:function(){return h||2.8},S=Va(d,t.type,!0,f),A=function(){return i=!1},M=mo,C=mo,k=function(){r=wo(d,hs),C=Es(js?1:0,r),c&&(M=Es(0,wo(d,cs))),n=xa},E=function(){v._gsap.y=go(parseFloat(v._gsap.y)+_.offset)+"px",v.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+parseFloat(v._gsap.y)+", 0, 1)",_.offset=_.cacheID=0},O=function(){k(),s.isActive()&&s.vars.scrollY>r&&(_()>r?s.progress(1)&&_(r):s.resetTo("scrollY",r))};return v&&bs.set(v,{y:"+=0"}),t.ignoreCheck=function(t){return js&&"touchmove"===t.type&&function(){if(i){requestAnimationFrame(A);var t=go(e.deltaY/2),r=C(_.v-t);if(v&&r!==_.v+_.offset){_.offset=r-_.v;var n=go((parseFloat(v&&v._gsap.y)||0)-_.offset);v.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+n+", 0, 1)",v._gsap.y=n+"px",_.cacheID=Ki.cache,Ca()}return!0}_.offset&&E(),i=!0}()||b>1.05&&"touchstart"!==t.type||e.isGesturing||t.touches&&t.touches.length>1},t.onPress=function(){i=!1;var t=b;b=go((ws.visualViewport&&ws.visualViewport.scale||1)/x),s.pause(),t!==b&&Ua(d,b>1.01||!c&&"x"),o=y(),a=_(),k(),n=xa},t.onRelease=t.onGestureStart=function(t,e){if(_.offset&&E(),e){Ki.cache++;var n,i,o=T();c&&(i=(n=y())+.05*o*-t.velocityX/.227,o*=Ha(y,n,i,wo(d,cs)),s.vars.scrollX=M(i)),i=(n=_())+.05*o*-t.velocityY/.227,o*=Ha(_,n,i,wo(d,hs)),s.vars.scrollY=C(i),s.invalidate().duration(o).play(.01),(js&&s.vars.scrollY>=r||n>=r-1)&&bs.to({},{onUpdate:O,duration:o})}else l.restart(!0);p&&p(t)},t.onWheel=function(){s._ts&&s.pause(),so()-w>1e3&&(n=0,w=so())},t.onChange=function(t,e,r,i,s){if(xa!==n&&k(),e&&c&&y(M(i[2]===e?o+(t.startX-t.x):y()+e-i[1])),r){_.offset&&E();var l=s[2]===r,u=l?a+t.startY-t.y:_()+r-s[1],h=C(u);l&&u!==h&&(a+=h-u),_(h)}(r||e)&&Ca()},t.onEnable=function(){Ua(d,!c&&"x"),Xa.addEventListener("refresh",O),Ko(ws,"resize",O),_.smooth&&(_.target.style.scrollBehavior="auto",_.smooth=y.smooth=!1),S.enable()},t.onDisable=function(){Ua(d,!0),Jo(ws,"resize",O),Xa.removeEventListener("refresh",O),S.kill()},t.lockAxis=!1!==t.lockAxis,(e=new ys(t)).iOS=js,js&&!_()&&_(1),js&&bs.ticker.add(mo),l=e._dc,s=bs.to(e,{ease:"power4",paused:!0,inherit:!1,scrollX:c?"+=0.1":"+=0",scrollY:"+=0.1",modifiers:{scrollY:Na(_,_(),(function(){return s.pause()}))},onUpdate:Ca,onComplete:l.vars.onComplete}),e};Xa.sort=function(t){return aa.sort(t||function(t,e){return-1e6*(t.vars.refreshPriority||0)+t.start-(e.start+-1e6*(e.vars.refreshPriority||0))})},Xa.observe=function(t){return new ys(t)},Xa.normalizeScroll=function(t){if(void 0===t)return Ws;if(!0===t&&Ws)return Ws.enable();if(!1===t)return Ws&&Ws.kill(),void(Ws=t);var e=t instanceof ys?t:$a(t);return Ws&&Ws.target===e.target&&Ws.kill(),yo(e.target)&&(Ws=e),e},Xa.core={_getVelocityProp:ds,_inputObserver:Va,_scrollers:Ki,_proxies:Ji,bridge:{ss:function(){ao||ga("scrollStart"),ao=so()},ref:function(){return Rs}}},_o()&&bs.registerPlugin(Xa),wi.registerPlugin(Xa);const Za=new Di({lerp:.1,smooth:!0});Za.on("scroll",(t=>{})),Za.on("scroll",Xa.update),wi.ticker.add((t=>{Za.raf(1e3*t)})),wi.ticker.lagSmoothing(0),wi.to(".hero-img",{y:-300,opacity:0,scrollTrigger:{trigger:"#Nosotros",scrub:1,start:"top 80%",end:"top 10%"}}),wi.to(".home-header",{y:-200,opacity:0,scrollTrigger:{trigger:"#Nosotros",scrub:1,start:"top 80%",end:"top 10%"}}),wi.to(".home-btn",{y:-100,opacity:0,scrollTrigger:{trigger:"#Nosotros",scrub:1,start:"top 80%",end:"top 10%"}}),wi.from(".bio",{opacity:0,scrollTrigger:{trigger:"#Nosotros",scrub:1,start:"top 50%",end:"top 10%"}}),wi.from(".bio-p",{y:300,stagger:.5,duration:1,scrollTrigger:{trigger:"#Nosotros",scrub:1,start:"top 40%",end:"top 10%"}}),wi.from(".references",{y:300,scrollTrigger:{trigger:"#Nosotros",scrub:1,start:"top 40%",end:"top 10%"}}),wi.from(".ref-icon",{y:300,stagger:.5,duration:1,scrollTrigger:{trigger:"#Nosotros",scrub:1,start:"top 15%",end:"top 5%"}}),wi.from(".servicios-header",{y:200,opacity:0,stagger:.5,duration:1,scrollTrigger:{trigger:"#Servicios",scrub:1,start:"top 75%",end:"top 5%"}}),wi.from(".cards",{y:700,scrollTrigger:{trigger:"#Servicios",scrub:1,start:"top 60%",end:"top 5%"}}),wi.from(".card",{scale:0,opacity:0,ease:"expoScale",stagger:{amount:2},scrollTrigger:{trigger:"#Servicios",scrub:1,start:"top 30%",end:"top 5%"}}),wi.fromTo(".card",{scale:1,opacity:1,y:0},{y:-200,scale:0,opacity:0,ease:"expoScale",stagger:{each:2},scrollTrigger:{trigger:"#Contacto",scrub:1,start:"top 80%",end:"top 20%"}}),wi.from(".items-contacto",{y:300,opacity:0,ease:"expoScale",scrollTrigger:{trigger:"#Contacto",scrub:1,start:"top 80%",end:"top 20%"}}),wi.from(".map",{scale:0,y:400,opacity:0,ease:"expoScale",scrollTrigger:{trigger:"#Contacto",scrub:1,start:"top 50%",end:"top 20%"}});wi.timeline({defaults:{duration:1}}).from(".hero-img",{opacity:0,scale:2},{ease:"expoScale"}).from(".home-header",{opacity:0,y:300},{ease:"expoScale"}).from(".home-btn",{opacity:0,y:500},{delay:1,ease:"expoScale"})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFVLENBQUMsRUFFZixFQUFRL0Isa0JBQW9CLElBQzVCLEVBQVFOLGNBQWdCLElBRWxCLEVBQVFiLE9BQVMsU0FBYyxLQUFNLFFBRTNDLEVBQVFYLE9BQVMsSUFDakIsRUFBUTZCLG1CQUFxQixJQUVoQixJQUFJLElBQVMsR0FLSixLQUFXLElBQVFnQyxRQUFTLElBQVFBLG9CQ2Z0RCxFQUFVLENBQUMsRUFFZixFQUFRL0Isa0JBQW9CLElBQzVCLEVBQVFOLGNBQWdCLElBRWxCLEVBQVFiLE9BQVMsU0FBYyxLQUFNLFFBRTNDLEVBQVFYLE9BQVMsSUFDakIsRUFBUTZCLG1CQUFxQixJQUVoQixJQUFJLElBQVMsR0FLSixLQUFXLElBQVFnQyxRQUFTLElBQVFBLG9CQ2Z0RCxFQUFVLENBQUMsRUFFZixFQUFRL0Isa0JBQW9CLElBQzVCLEVBQVFOLGNBQWdCLElBRWxCLEVBQVFiLE9BQVMsU0FBYyxLQUFNLFFBRTNDLEVBQVFYLE9BQVMsSUFDakIsRUFBUTZCLG1CQUFxQixJQUVoQixJQUFJLElBQVMsR0FLSixLQUFXLElBQVFnQyxRQUFTLElBQVFBLG9CQ2Z0RCxFQUFVLENBQUMsRUFFZixFQUFRL0Isa0JBQW9CLElBQzVCLEVBQVFOLGNBQWdCLElBRWxCLEVBQVFiLE9BQVMsU0FBYyxLQUFNLFFBRTNDLEVBQVFYLE9BQVMsSUFDakIsRUFBUTZCLG1CQUFxQixJQUVoQixJQUFJLElBQVMsR0FLSixLQUFXLElBQVFnQyxRQUFTLElBQVFBLG9CQ2Z0RCxFQUFVLENBQUMsRUFFZixFQUFRL0Isa0JBQW9CLElBQzVCLEVBQVFOLGNBQWdCLElBRWxCLEVBQVFiLE9BQVMsU0FBYyxLQUFNLFFBRTNDLEVBQVFYLE9BQVMsSUFDakIsRUFBUTZCLG1CQUFxQixJQUVoQixJQUFJLElBQVMsR0FLSixLQUFXLElBQVFnQyxRQUFTLElBQVFBLG9CQ2Z0RCxFQUFVLENBQUMsRUFFZixFQUFRL0Isa0JBQW9CLElBQzVCLEVBQVFOLGNBQWdCLElBRWxCLEVBQVFiLE9BQVMsU0FBYyxLQUFNLFFBRTNDLEVBQVFYLE9BQVMs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QUFLLE9BQVEsQ0FDaEJtaUIsTUFBTyxFQUNQdmhCLEVBQUcsSUFDSDZ1QixRQUFTLEVBQ1QzdkIsS0FBTSxZQUNOZ0UsY0FBZSxDQUNiaEksUUFBUyxZQUNUa3pDLE1BQU8sRUFDUHo1QyxNQUFPLFVBQ1BHLElBQUssYUNoTEVqRCxHQUFLc0ksU0FBUyxDQUFFNUQsU0FBVSxDQUFFcEgsU0FBVSxLQUU5Q2lRLEtBQUssWUFBYSxDQUFFeXZCLFFBQVMsRUFBR3ROLE1BQU8sR0FBSyxDQUFFcmlCLEtBQU0sY0FDcERFLEtBQUssZUFBZ0IsQ0FBRXl2QixRQUFTLEVBQUc3dUIsRUFBRyxLQUFPLENBQUVkLEtBQU0sY0FDckRFLEtBQUssWUFBYSxDQUFFeXZCLFFBQVMsRUFBRzd1QixFQUFHLEtBQU8sQ0FBRTNRLE1BQU8sRUFBRzZQLEtBQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ydWdnZXJpLXRlbGVjb211bmljYWNpb25lcy8uL3NyYy9zdXNjcmliZS5qcyIsIndlYnBhY2s6Ly9ydWdnZXJpLXRlbGVjb211bmljYWNpb25lcy8uL3NyYy9jc3MvY29udGFjdG8uY3NzPzJjNGMiLCJ3ZWJwYWNrOi8vcnVnZ2VyaS10ZWxlY29tdW5pY2FjaW9uZXMvLi9zcmMvY3NzL2Zvb3Rlci5jc3M/ZmFmNyIsIndlYnBhY2s6Ly9ydWdnZXJpLXRlbGVjb211bmljYWNpb25lcy8uL3NyYy9jc3MvaG9tZS5jc3M/NWNmNSIsIndlYnBhY2s6Ly9ydWdnZXJpLXRlbGVjb211bmljYWNpb25lcy8uL3NyYy9jc3MvbmF2LmNzcz9kYmNmIiwid2VicGFjazovL3J1Z2dlcmktdGVsZWNvbXVuaWNhY2lvbmVzLy4vc3JjL2Nzcy9ub3NvdHJvcy5jc3M/YzdjMSIsIndlYnBhY2s6Ly9ydWdnZXJpLXRlbGVjb211bmljYWNpb25lcy8uL3NyYy9jc3MvcHJlbG9hZGVyLmNzcz9kMTA3Iiwid2VicGFjazovL3J1Z2dlcmktdGVsZWNvbXVuaWNhY2lvbmVzLy4vc3JjL2Nzcy9zZXJ2aWNpb3MuY3NzPzY1ODQiLCJ3ZWJwYWNrOi8vcnVnZ2VyaS10ZWxlY29tdW5pY2FjaW9uZXMvLi9zcmMvY3NzL3N0eWxlLmNzcz9iZDQxIiwid2VicGFjazovL3J1Z2dlcmktdGVsZWNvbXVuaWNhY2lvbmVzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9ydWdnZXJpLXRlbGVjb211bmljYWNpb25lcy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3J1Z2dlcmktdGVsZWNvbXVuaWNhY2lvbmVzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3J1Z2dlcmktdGVsZWNvbXVuaWNhY2lvbmVzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9ydWdnZXJpLXRlbGVjb211bmljYWNpb25lcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9ydWdnZXJpLXRlbGVjb211bmljYWNpb25lcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9ydWdnZXJpLXRlbGVjb211bmljYWNpb25lcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3J1Z2dlcmktdGVsZWNvbXVuaWNhY2lvbmVzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vcnVnZ2VyaS10ZWxlY29tdW5pY2FjaW9uZXMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcnVnZ2VyaS10ZWxlY29tdW5pY2FjaW9uZXMvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vcnVnZ2VyaS10ZWxlY29tdW5pY2FjaW9uZXMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3J1Z2dlcmktdGVsZWNvbXVuaWNhY2lvbmVzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vcnVnZ2VyaS10ZWxlY29tdW5pY2FjaW9uZXMvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3J1Z2dlcmktdGVsZWNvbXVuaWNhY2lvbmVzLy4vc3JjL2Nzcy9wcmVsb2FkZXIuY3NzPzljMjYiLCJ3ZWJwYWNrOi8vcnVnZ2VyaS10ZWxlY29tdW5pY2FjaW9uZXMvLi9zcmMvY3NzL3N0eWxlLmNzcz84MWEyIiwid2VicGFjazovL3J1Z2dlcmktdGVsZWNvbXVuaWNhY2lvbmVzLy4vc3JjL2Nzcy9uYXYuY3NzPzg4MzciLCJ3ZWJwYWNrOi8vcnVnZ2VyaS10ZWxlY29tdW5pY2FjaW9uZXMvLi9zcmMvY3NzL2hvbWUuY3NzP2NiYmIiLCJ3ZWJwYWNrOi8vcnVnZ2VyaS10ZWxlY29tdW5pY2FjaW9uZXMvLi9zcmMvY3NzL25vc290cm9zLmNzcz9hMzQzIiwid2VicGFjazovL3J1Z2dlcmktdGVsZWNvbXVuaWNhY2lvbmVzLy4vc3JjL2Nzcy9zZXJ2aWNpb3MuY3NzPzM0MWQiLCJ3ZWJwYWNrOi8vcnVnZ2VyaS10ZWxlY29tdW5pY2FjaW9uZXMvLi9zcmMvY3NzL2NvbnRhY3RvLmNzcz9iYmE0Iiwid2VicGFjazovL3J1Z2dlcmktdGVsZWNvbXVuaWNhY2lvbmVzLy4vc3JjL2Nzcy9mb290ZXIuY3NzPzZhZjQiLCJ3ZWJwYWNrOi8vcnVnZ2VyaS10ZWxlY29tdW5pY2FjaW9uZXMvLi9ub2RlX21vZHVsZXMvZ3NhcC9nc2FwLWNvcmUuanMiLCJ3ZWJwYWNrOi8vcnVnZ2VyaS10ZWxlY29tdW5pY2FjaW9uZXMvLi9ub2RlX21vZHVsZXMvZ3NhcC9DU1NQbHVnaW4uanMiLCJ3ZWJwYWNrOi8vcnVnZ2VyaS10ZWxlY29tdW5pY2FjaW9uZXMvLi9ub2RlX21vZHVsZXMvZ3NhcC9pbmRleC5qcyIsIndlYnBhY2s6Ly9ydWdnZXJpLXRlbGVjb211bmljYWNpb25lcy8uL3NyYy9uYXZpZ2F0aW9uLmpzIiwid2VicGFjazovL3J1Z2dlcmktdGVsZWNvbXVuaWNhY2lvbmVzLy4vc3JjL3ByZWxvYWRlci5qcyIsIndlYnBhY2s6Ly9ydWdnZXJpLXRlbGVjb211bmljYWNpb25lcy8uL25vZGVfbW9kdWxlcy9sZW5pcy9kaXN0L2xlbmlzLm1qcyIsIndlYnBhY2s6Ly9ydWdnZXJpLXRlbGVjb211bmljYWNpb25lcy8uL25vZGVfbW9kdWxlcy9nc2FwL09ic2VydmVyLmpzIiwid2VicGFjazovL3J1Z2dlcmktdGVsZWNvbXVuaWNhY2lvbmVzLy4vbm9kZV9tb2R1bGVzL2dzYXAvU2Nyb2xsVHJpZ2dlci5qcyIsIndlYnBhY2s6Ly9ydWdnZXJpLXRlbGVjb211bmljYWNpb25lcy8uL3NyYy9hbmltYXRpb25zL3Njcm9sbGluZy5qcyIsIndlYnBhY2s6Ly9ydWdnZXJpLXRlbGVjb211bmljYWNpb25lcy8uL3NyYy9hbmltYXRpb25zL2xvYWRpbmdBbmltYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Zvcm0nKTtcclxuY29uc3QgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW1haWxJbnB1dCcpO1xyXG5cclxuZnVuY3Rpb24gc2VuZEVtYWlsKCkge1xyXG4gIGNvbnN0IGVtYWlsYWRkcmVzcyA9IGAke2lucHV0LnZhbHVlfWA7XHJcbiAgRW1haWwuc2VuZCh7XHJcbiAgICBIb3N0OiAnc210cC5lbGFzdGljZW1haWwuY29tJyxcclxuICAgIFVzZXJuYW1lOiAncnVnZ2VyaS50ZWxlY29tdW5pY2FjaW9uZXNAZ21haWwuY29tJyxcclxuICAgIFBhc3N3b3JkOiAnODI0NkU2RDMyREU0Rjk0NzY5QkE0NDVFQ0NBMjg1RjI0NkVDJyxcclxuICAgIFRvOiAncnVnZ2VyaS50ZWxlY29tdW5pY2FjaW9uZXNAZ21haWwuY29tJyxcclxuICAgIEZyb206ICdydWdnZXJpLnRlbGVjb211bmljYWNpb25lc0BnbWFpbC5jb20nLFxyXG4gICAgU3ViamVjdDogJ051ZXZhIFN1c2NyaXBjacOzbicsXHJcbiAgICBCb2R5OiBlbWFpbGFkZHJlc3MsXHJcbiAgfSkudGhlbigoKSA9PiBhbGVydCgnU3UgY29ycmVvIGhhIHNpZG8gZW52aWFkbyBjb24gw6l4aXRvJykpO1xyXG59XHJcblxyXG5mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChlKSA9PiB7XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIHNlbmRFbWFpbCgpO1xyXG59KTtcclxuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9O2AsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9jb250YWN0by5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7UUFDUSxDQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxcbmV4cG9ydCB7fTtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9O2AsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9mb290ZXIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO1FBQ1EsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cXG5leHBvcnQge307XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTtgLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvaG9tZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7UUFDUSxDQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxcbmV4cG9ydCB7fTtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9O2AsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9uYXYuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO1FBQ1EsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cXG5leHBvcnQge307XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTtgLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3Mvbm9zb3Ryb3MuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO1FBQ1EsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cXG5leHBvcnQge307XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTtgLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvcHJlbG9hZGVyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtRQUNRLENBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXFxuZXhwb3J0IHt9O1wiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL3NlcnZpY2lvcy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7UUFDUSxDQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxcbmV4cG9ydCB7fTtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9O2AsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7UUFDUSxDQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxcbmV4cG9ydCB7fTtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9wcmVsb2FkZXIuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcHJlbG9hZGVyLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9uYXYuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbmF2LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaG9tZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9ob21lLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbm9zb3Ryb3MuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbm9zb3Ryb3MuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zZXJ2aWNpb3MuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc2VydmljaW9zLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY29udGFjdG8uY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY29udGFjdG8uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9mb290ZXIuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZm9vdGVyLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyohXG4gKiBHU0FQIDMuMTIuNVxuICogaHR0cHM6Ly9nc2FwLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAyMDA4LTIwMjQsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3NhcC5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR1NBUCBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBfY29uZmlnID0ge1xuICBhdXRvU2xlZXA6IDEyMCxcbiAgZm9yY2UzRDogXCJhdXRvXCIsXG4gIG51bGxUYXJnZXRXYXJuOiAxLFxuICB1bml0czoge1xuICAgIGxpbmVIZWlnaHQ6IFwiXCJcbiAgfVxufSxcbiAgICBfZGVmYXVsdHMgPSB7XG4gIGR1cmF0aW9uOiAuNSxcbiAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgZGVsYXk6IDBcbn0sXG4gICAgX3N1cHByZXNzT3ZlcndyaXRlcyxcbiAgICBfcmV2ZXJ0aW5nLFxuICAgIF9jb250ZXh0LFxuICAgIF9iaWdOdW0gPSAxZTgsXG4gICAgX3RpbnlOdW0gPSAxIC8gX2JpZ051bSxcbiAgICBfMlBJID0gTWF0aC5QSSAqIDIsXG4gICAgX0hBTEZfUEkgPSBfMlBJIC8gNCxcbiAgICBfZ3NJRCA9IDAsXG4gICAgX3NxcnQgPSBNYXRoLnNxcnQsXG4gICAgX2NvcyA9IE1hdGguY29zLFxuICAgIF9zaW4gPSBNYXRoLnNpbixcbiAgICBfaXNTdHJpbmcgPSBmdW5jdGlvbiBfaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIjtcbn0sXG4gICAgX2lzRnVuY3Rpb24gPSBmdW5jdGlvbiBfaXNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCI7XG59LFxuICAgIF9pc051bWJlciA9IGZ1bmN0aW9uIF9pc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiO1xufSxcbiAgICBfaXNVbmRlZmluZWQgPSBmdW5jdGlvbiBfaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX2lzT2JqZWN0ID0gZnVuY3Rpb24gX2lzT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG59LFxuICAgIF9pc05vdEZhbHNlID0gZnVuY3Rpb24gX2lzTm90RmFsc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSBmYWxzZTtcbn0sXG4gICAgX3dpbmRvd0V4aXN0cyA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfaXNGdW5jT3JTdHJpbmcgPSBmdW5jdGlvbiBfaXNGdW5jT3JTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHZhbHVlKSB8fCBfaXNTdHJpbmcodmFsdWUpO1xufSxcbiAgICBfaXNUeXBlZEFycmF5ID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCIgJiYgQXJyYXlCdWZmZXIuaXNWaWV3IHx8IGZ1bmN0aW9uICgpIHt9LFxuICAgIC8vIG5vdGU6IElFMTAgaGFzIEFycmF5QnVmZmVyLCBidXQgTk9UIEFycmF5QnVmZmVyLmlzVmlldygpLlxuX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5LFxuICAgIF9zdHJpY3ROdW1FeHAgPSAvKD86LT9cXC4/XFxkfFxcLikrL2dpLFxuICAgIC8vb25seSBudW1iZXJzIChpbmNsdWRpbmcgbmVnYXRpdmVzIGFuZCBkZWNpbWFscykgYnV0IE5PVCByZWxhdGl2ZSB2YWx1ZXMuXG5fbnVtRXhwID0gL1stKz0uXSpcXGQrWy5lXFwtK10qXFxkKltlXFwtK10qXFxkKi9nLFxuICAgIC8vZmluZHMgYW55IG51bWJlcnMsIGluY2x1ZGluZyBvbmVzIHRoYXQgc3RhcnQgd2l0aCArPSBvciAtPSwgbmVnYXRpdmUgbnVtYmVycywgYW5kIG9uZXMgaW4gc2NpZW50aWZpYyBub3RhdGlvbiBsaWtlIDFlLTguXG5fbnVtV2l0aFVuaXRFeHAgPSAvWy0rPS5dKlxcZCtbLmUtXSpcXGQqW2EteiVdKi9nLFxuICAgIF9jb21wbGV4U3RyaW5nTnVtRXhwID0gL1stKz0uXSpcXGQrXFwuP1xcZCooPzplLXxlXFwrKT9cXGQqL2dpLFxuICAgIC8vZHVwbGljYXRlIHNvIHRoYXQgd2hpbGUgd2UncmUgbG9vcGluZyB0aHJvdWdoIG1hdGNoZXMgZnJvbSBleGVjKCksIGl0IGRvZXNuJ3QgY29udGFtaW5hdGUgdGhlIGxhc3RJbmRleCBvZiBfbnVtRXhwIHdoaWNoIHdlIHVzZSB0byBzZWFyY2ggZm9yIGNvbG9ycyB0b28uXG5fcmVsRXhwID0gL1srLV09LT9bLlxcZF0rLyxcbiAgICBfZGVsaW1pdGVkVmFsdWVFeHAgPSAvW14sJ1wiXFxbXFxdXFxzXSsvZ2ksXG4gICAgLy8gcHJldmlvdXNseSAvWyNcXC0rLl0qXFxiW2EtelxcZFxcLT0rJS5dKy9naSBidXQgZGlkbid0IGNhdGNoIHNwZWNpYWwgY2hhcmFjdGVycy5cbl91bml0RXhwID0gL15bK1xcLT1lXFxzXFxkXSpcXGQrWy5cXGRdKihbYS16XSp8JSlcXHMqJC9pLFxuICAgIF9nbG9iYWxUaW1lbGluZSxcbiAgICBfd2luLFxuICAgIF9jb3JlSW5pdHRlZCxcbiAgICBfZG9jLFxuICAgIF9nbG9iYWxzID0ge30sXG4gICAgX2luc3RhbGxTY29wZSA9IHt9LFxuICAgIF9jb3JlUmVhZHksXG4gICAgX2luc3RhbGwgPSBmdW5jdGlvbiBfaW5zdGFsbChzY29wZSkge1xuICByZXR1cm4gKF9pbnN0YWxsU2NvcGUgPSBfbWVyZ2Uoc2NvcGUsIF9nbG9iYWxzKSkgJiYgZ3NhcDtcbn0sXG4gICAgX21pc3NpbmdQbHVnaW4gPSBmdW5jdGlvbiBfbWlzc2luZ1BsdWdpbihwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIGNvbnNvbGUud2FybihcIkludmFsaWQgcHJvcGVydHlcIiwgcHJvcGVydHksIFwic2V0IHRvXCIsIHZhbHVlLCBcIk1pc3NpbmcgcGx1Z2luPyBnc2FwLnJlZ2lzdGVyUGx1Z2luKClcIik7XG59LFxuICAgIF93YXJuID0gZnVuY3Rpb24gX3dhcm4obWVzc2FnZSwgc3VwcHJlc3MpIHtcbiAgcmV0dXJuICFzdXBwcmVzcyAmJiBjb25zb2xlLndhcm4obWVzc2FnZSk7XG59LFxuICAgIF9hZGRHbG9iYWwgPSBmdW5jdGlvbiBfYWRkR2xvYmFsKG5hbWUsIG9iaikge1xuICByZXR1cm4gbmFtZSAmJiAoX2dsb2JhbHNbbmFtZV0gPSBvYmopICYmIF9pbnN0YWxsU2NvcGUgJiYgKF9pbnN0YWxsU2NvcGVbbmFtZV0gPSBvYmopIHx8IF9nbG9iYWxzO1xufSxcbiAgICBfZW1wdHlGdW5jID0gZnVuY3Rpb24gX2VtcHR5RnVuYygpIHtcbiAgcmV0dXJuIDA7XG59LFxuICAgIF9zdGFydEF0UmV2ZXJ0Q29uZmlnID0ge1xuICBzdXBwcmVzc0V2ZW50czogdHJ1ZSxcbiAgaXNTdGFydDogdHJ1ZSxcbiAga2lsbDogZmFsc2Vcbn0sXG4gICAgX3JldmVydENvbmZpZ05vS2lsbCA9IHtcbiAgc3VwcHJlc3NFdmVudHM6IHRydWUsXG4gIGtpbGw6IGZhbHNlXG59LFxuICAgIF9yZXZlcnRDb25maWcgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlXG59LFxuICAgIF9yZXNlcnZlZFByb3BzID0ge30sXG4gICAgX2xhenlUd2VlbnMgPSBbXSxcbiAgICBfbGF6eUxvb2t1cCA9IHt9LFxuICAgIF9sYXN0UmVuZGVyZWRGcmFtZSxcbiAgICBfcGx1Z2lucyA9IHt9LFxuICAgIF9lZmZlY3RzID0ge30sXG4gICAgX25leHRHQ0ZyYW1lID0gMzAsXG4gICAgX2hhcm5lc3NQbHVnaW5zID0gW10sXG4gICAgX2NhbGxiYWNrTmFtZXMgPSBcIlwiLFxuICAgIF9oYXJuZXNzID0gZnVuY3Rpb24gX2hhcm5lc3ModGFyZ2V0cykge1xuICB2YXIgdGFyZ2V0ID0gdGFyZ2V0c1swXSxcbiAgICAgIGhhcm5lc3NQbHVnaW4sXG4gICAgICBpO1xuICBfaXNPYmplY3QodGFyZ2V0KSB8fCBfaXNGdW5jdGlvbih0YXJnZXQpIHx8ICh0YXJnZXRzID0gW3RhcmdldHNdKTtcblxuICBpZiAoIShoYXJuZXNzUGx1Z2luID0gKHRhcmdldC5fZ3NhcCB8fCB7fSkuaGFybmVzcykpIHtcbiAgICAvLyBmaW5kIHRoZSBmaXJzdCB0YXJnZXQgd2l0aCBhIGhhcm5lc3MuIFdlIGFzc3VtZSB0YXJnZXRzIHBhc3NlZCBpbnRvIGFuIGFuaW1hdGlvbiB3aWxsIGJlIG9mIHNpbWlsYXIgdHlwZSwgbWVhbmluZyB0aGUgc2FtZSBraW5kIG9mIGhhcm5lc3MgY2FuIGJlIHVzZWQgZm9yIHRoZW0gYWxsIChwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24pXG4gICAgaSA9IF9oYXJuZXNzUGx1Z2lucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tICYmICFfaGFybmVzc1BsdWdpbnNbaV0udGFyZ2V0VGVzdCh0YXJnZXQpKSB7fVxuXG4gICAgaGFybmVzc1BsdWdpbiA9IF9oYXJuZXNzUGx1Z2luc1tpXTtcbiAgfVxuXG4gIGkgPSB0YXJnZXRzLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgdGFyZ2V0c1tpXSAmJiAodGFyZ2V0c1tpXS5fZ3NhcCB8fCAodGFyZ2V0c1tpXS5fZ3NhcCA9IG5ldyBHU0NhY2hlKHRhcmdldHNbaV0sIGhhcm5lc3NQbHVnaW4pKSkgfHwgdGFyZ2V0cy5zcGxpY2UoaSwgMSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0cztcbn0sXG4gICAgX2dldENhY2hlID0gZnVuY3Rpb24gX2dldENhY2hlKHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwIHx8IF9oYXJuZXNzKHRvQXJyYXkodGFyZ2V0KSlbMF0uX2dzYXA7XG59LFxuICAgIF9nZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9nZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB2KSB7XG4gIHJldHVybiAodiA9IHRhcmdldFtwcm9wZXJ0eV0pICYmIF9pc0Z1bmN0aW9uKHYpID8gdGFyZ2V0W3Byb3BlcnR5XSgpIDogX2lzVW5kZWZpbmVkKHYpICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShwcm9wZXJ0eSkgfHwgdjtcbn0sXG4gICAgX2ZvckVhY2hOYW1lID0gZnVuY3Rpb24gX2ZvckVhY2hOYW1lKG5hbWVzLCBmdW5jKSB7XG4gIHJldHVybiAobmFtZXMgPSBuYW1lcy5zcGxpdChcIixcIikpLmZvckVhY2goZnVuYykgfHwgbmFtZXM7XG59LFxuICAgIC8vc3BsaXQgYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBuYW1lcyBpbnRvIGFuIGFycmF5LCB0aGVuIHJ1biBhIGZvckVhY2goKSBmdW5jdGlvbiBhbmQgcmV0dXJuIHRoZSBzcGxpdCBhcnJheSAodGhpcyBpcyBqdXN0IGEgd2F5IHRvIGNvbnNvbGlkYXRlL3Nob3J0ZW4gc29tZSBjb2RlKS5cbl9yb3VuZCA9IGZ1bmN0aW9uIF9yb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwMCkgLyAxMDAwMDAgfHwgMDtcbn0sXG4gICAgX3JvdW5kUHJlY2lzZSA9IGZ1bmN0aW9uIF9yb3VuZFByZWNpc2UodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDAwMCkgLyAxMDAwMDAwMCB8fCAwO1xufSxcbiAgICAvLyBpbmNyZWFzZWQgcHJlY2lzaW9uIG1vc3RseSBmb3IgdGltaW5nIHZhbHVlcy5cbl9wYXJzZVJlbGF0aXZlID0gZnVuY3Rpb24gX3BhcnNlUmVsYXRpdmUoc3RhcnQsIHZhbHVlKSB7XG4gIHZhciBvcGVyYXRvciA9IHZhbHVlLmNoYXJBdCgwKSxcbiAgICAgIGVuZCA9IHBhcnNlRmxvYXQodmFsdWUuc3Vic3RyKDIpKTtcbiAgc3RhcnQgPSBwYXJzZUZsb2F0KHN0YXJ0KTtcbiAgcmV0dXJuIG9wZXJhdG9yID09PSBcIitcIiA/IHN0YXJ0ICsgZW5kIDogb3BlcmF0b3IgPT09IFwiLVwiID8gc3RhcnQgLSBlbmQgOiBvcGVyYXRvciA9PT0gXCIqXCIgPyBzdGFydCAqIGVuZCA6IHN0YXJ0IC8gZW5kO1xufSxcbiAgICBfYXJyYXlDb250YWluc0FueSA9IGZ1bmN0aW9uIF9hcnJheUNvbnRhaW5zQW55KHRvU2VhcmNoLCB0b0ZpbmQpIHtcbiAgLy9zZWFyY2hlcyBvbmUgYXJyYXkgdG8gZmluZCBtYXRjaGVzIGZvciBhbnkgb2YgdGhlIGl0ZW1zIGluIHRoZSB0b0ZpbmQgYXJyYXkuIEFzIHNvb24gYXMgb25lIGlzIGZvdW5kLCBpdCByZXR1cm5zIHRydWUuIEl0IGRvZXMgTk9UIHJldHVybiBhbGwgdGhlIG1hdGNoZXM7IGl0J3Mgc2ltcGx5IGEgYm9vbGVhbiBzZWFyY2guXG4gIHZhciBsID0gdG9GaW5kLmxlbmd0aCxcbiAgICAgIGkgPSAwO1xuXG4gIGZvciAoOyB0b1NlYXJjaC5pbmRleE9mKHRvRmluZFtpXSkgPCAwICYmICsraSA8IGw7KSB7fVxuXG4gIHJldHVybiBpIDwgbDtcbn0sXG4gICAgX2xhenlSZW5kZXIgPSBmdW5jdGlvbiBfbGF6eVJlbmRlcigpIHtcbiAgdmFyIGwgPSBfbGF6eVR3ZWVucy5sZW5ndGgsXG4gICAgICBhID0gX2xhenlUd2VlbnMuc2xpY2UoMCksXG4gICAgICBpLFxuICAgICAgdHdlZW47XG5cbiAgX2xhenlMb29rdXAgPSB7fTtcbiAgX2xhenlUd2VlbnMubGVuZ3RoID0gMDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgdHdlZW4gPSBhW2ldO1xuICAgIHR3ZWVuICYmIHR3ZWVuLl9sYXp5ICYmICh0d2Vlbi5yZW5kZXIodHdlZW4uX2xhenlbMF0sIHR3ZWVuLl9sYXp5WzFdLCB0cnVlKS5fbGF6eSA9IDApO1xuICB9XG59LFxuICAgIF9sYXp5U2FmZVJlbmRlciA9IGZ1bmN0aW9uIF9sYXp5U2FmZVJlbmRlcihhbmltYXRpb24sIHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICBfbGF6eVR3ZWVucy5sZW5ndGggJiYgIV9yZXZlcnRpbmcgJiYgX2xhenlSZW5kZXIoKTtcbiAgYW5pbWF0aW9uLnJlbmRlcih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UgfHwgX3JldmVydGluZyAmJiB0aW1lIDwgMCAmJiAoYW5pbWF0aW9uLl9pbml0dGVkIHx8IGFuaW1hdGlvbi5fc3RhcnRBdCkpO1xuICBfbGF6eVR3ZWVucy5sZW5ndGggJiYgIV9yZXZlcnRpbmcgJiYgX2xhenlSZW5kZXIoKTsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIHNvbWVvbmUgY2FsbHMgc2VlaygpIG9yIHRpbWUoKSBvciBwcm9ncmVzcygpLCB0aGV5IGV4cGVjdCBhbiBpbW1lZGlhdGUgcmVuZGVyLlxufSxcbiAgICBfbnVtZXJpY0lmUG9zc2libGUgPSBmdW5jdGlvbiBfbnVtZXJpY0lmUG9zc2libGUodmFsdWUpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgcmV0dXJuIChuIHx8IG4gPT09IDApICYmICh2YWx1ZSArIFwiXCIpLm1hdGNoKF9kZWxpbWl0ZWRWYWx1ZUV4cCkubGVuZ3RoIDwgMiA/IG4gOiBfaXNTdHJpbmcodmFsdWUpID8gdmFsdWUudHJpbSgpIDogdmFsdWU7XG59LFxuICAgIF9wYXNzVGhyb3VnaCA9IGZ1bmN0aW9uIF9wYXNzVGhyb3VnaChwKSB7XG4gIHJldHVybiBwO1xufSxcbiAgICBfc2V0RGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0RGVmYXVsdHMob2JqLCBkZWZhdWx0cykge1xuICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgcCBpbiBvYmogfHwgKG9ialtwXSA9IGRlZmF1bHRzW3BdKTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59LFxuICAgIF9zZXRLZXlmcmFtZURlZmF1bHRzID0gZnVuY3Rpb24gX3NldEtleWZyYW1lRGVmYXVsdHMoZXhjbHVkZUR1cmF0aW9uKSB7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBkZWZhdWx0cykge1xuICAgIGZvciAodmFyIHAgaW4gZGVmYXVsdHMpIHtcbiAgICAgIHAgaW4gb2JqIHx8IHAgPT09IFwiZHVyYXRpb25cIiAmJiBleGNsdWRlRHVyYXRpb24gfHwgcCA9PT0gXCJlYXNlXCIgfHwgKG9ialtwXSA9IGRlZmF1bHRzW3BdKTtcbiAgICB9XG4gIH07XG59LFxuICAgIF9tZXJnZSA9IGZ1bmN0aW9uIF9tZXJnZShiYXNlLCB0b01lcmdlKSB7XG4gIGZvciAodmFyIHAgaW4gdG9NZXJnZSkge1xuICAgIGJhc2VbcF0gPSB0b01lcmdlW3BdO1xuICB9XG5cbiAgcmV0dXJuIGJhc2U7XG59LFxuICAgIF9tZXJnZURlZXAgPSBmdW5jdGlvbiBfbWVyZ2VEZWVwKGJhc2UsIHRvTWVyZ2UpIHtcbiAgZm9yICh2YXIgcCBpbiB0b01lcmdlKSB7XG4gICAgcCAhPT0gXCJfX3Byb3RvX19cIiAmJiBwICE9PSBcImNvbnN0cnVjdG9yXCIgJiYgcCAhPT0gXCJwcm90b3R5cGVcIiAmJiAoYmFzZVtwXSA9IF9pc09iamVjdCh0b01lcmdlW3BdKSA/IF9tZXJnZURlZXAoYmFzZVtwXSB8fCAoYmFzZVtwXSA9IHt9KSwgdG9NZXJnZVtwXSkgOiB0b01lcmdlW3BdKTtcbiAgfVxuXG4gIHJldHVybiBiYXNlO1xufSxcbiAgICBfY29weUV4Y2x1ZGluZyA9IGZ1bmN0aW9uIF9jb3B5RXhjbHVkaW5nKG9iaiwgZXhjbHVkaW5nKSB7XG4gIHZhciBjb3B5ID0ge30sXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiBvYmopIHtcbiAgICBwIGluIGV4Y2x1ZGluZyB8fCAoY29weVtwXSA9IG9ialtwXSk7XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgX2luaGVyaXREZWZhdWx0cyA9IGZ1bmN0aW9uIF9pbmhlcml0RGVmYXVsdHModmFycykge1xuICB2YXIgcGFyZW50ID0gdmFycy5wYXJlbnQgfHwgX2dsb2JhbFRpbWVsaW5lLFxuICAgICAgZnVuYyA9IHZhcnMua2V5ZnJhbWVzID8gX3NldEtleWZyYW1lRGVmYXVsdHMoX2lzQXJyYXkodmFycy5rZXlmcmFtZXMpKSA6IF9zZXREZWZhdWx0cztcblxuICBpZiAoX2lzTm90RmFsc2UodmFycy5pbmhlcml0KSkge1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGZ1bmModmFycywgcGFyZW50LnZhcnMuZGVmYXVsdHMpO1xuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudCB8fCBwYXJlbnQuX2RwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YXJzO1xufSxcbiAgICBfYXJyYXlzTWF0Y2ggPSBmdW5jdGlvbiBfYXJyYXlzTWF0Y2goYTEsIGEyKSB7XG4gIHZhciBpID0gYTEubGVuZ3RoLFxuICAgICAgbWF0Y2ggPSBpID09PSBhMi5sZW5ndGg7XG5cbiAgd2hpbGUgKG1hdGNoICYmIGktLSAmJiBhMVtpXSA9PT0gYTJbaV0pIHt9XG5cbiAgcmV0dXJuIGkgPCAwO1xufSxcbiAgICBfYWRkTGlua2VkTGlzdEl0ZW0gPSBmdW5jdGlvbiBfYWRkTGlua2VkTGlzdEl0ZW0ocGFyZW50LCBjaGlsZCwgZmlyc3RQcm9wLCBsYXN0UHJvcCwgc29ydEJ5KSB7XG4gIGlmIChmaXJzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGZpcnN0UHJvcCA9IFwiX2ZpcnN0XCI7XG4gIH1cblxuICBpZiAobGFzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGxhc3RQcm9wID0gXCJfbGFzdFwiO1xuICB9XG5cbiAgdmFyIHByZXYgPSBwYXJlbnRbbGFzdFByb3BdLFxuICAgICAgdDtcblxuICBpZiAoc29ydEJ5KSB7XG4gICAgdCA9IGNoaWxkW3NvcnRCeV07XG5cbiAgICB3aGlsZSAocHJldiAmJiBwcmV2W3NvcnRCeV0gPiB0KSB7XG4gICAgICBwcmV2ID0gcHJldi5fcHJldjtcbiAgICB9XG4gIH1cblxuICBpZiAocHJldikge1xuICAgIGNoaWxkLl9uZXh0ID0gcHJldi5fbmV4dDtcbiAgICBwcmV2Ll9uZXh0ID0gY2hpbGQ7XG4gIH0gZWxzZSB7XG4gICAgY2hpbGQuX25leHQgPSBwYXJlbnRbZmlyc3RQcm9wXTtcbiAgICBwYXJlbnRbZmlyc3RQcm9wXSA9IGNoaWxkO1xuICB9XG5cbiAgaWYgKGNoaWxkLl9uZXh0KSB7XG4gICAgY2hpbGQuX25leHQuX3ByZXYgPSBjaGlsZDtcbiAgfSBlbHNlIHtcbiAgICBwYXJlbnRbbGFzdFByb3BdID0gY2hpbGQ7XG4gIH1cblxuICBjaGlsZC5fcHJldiA9IHByZXY7XG4gIGNoaWxkLnBhcmVudCA9IGNoaWxkLl9kcCA9IHBhcmVudDtcbiAgcmV0dXJuIGNoaWxkO1xufSxcbiAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0gPSBmdW5jdGlvbiBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0ocGFyZW50LCBjaGlsZCwgZmlyc3RQcm9wLCBsYXN0UHJvcCkge1xuICBpZiAoZmlyc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBmaXJzdFByb3AgPSBcIl9maXJzdFwiO1xuICB9XG5cbiAgaWYgKGxhc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBsYXN0UHJvcCA9IFwiX2xhc3RcIjtcbiAgfVxuXG4gIHZhciBwcmV2ID0gY2hpbGQuX3ByZXYsXG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgaWYgKHByZXYpIHtcbiAgICBwcmV2Ll9uZXh0ID0gbmV4dDtcbiAgfSBlbHNlIGlmIChwYXJlbnRbZmlyc3RQcm9wXSA9PT0gY2hpbGQpIHtcbiAgICBwYXJlbnRbZmlyc3RQcm9wXSA9IG5leHQ7XG4gIH1cblxuICBpZiAobmV4dCkge1xuICAgIG5leHQuX3ByZXYgPSBwcmV2O1xuICB9IGVsc2UgaWYgKHBhcmVudFtsYXN0UHJvcF0gPT09IGNoaWxkKSB7XG4gICAgcGFyZW50W2xhc3RQcm9wXSA9IHByZXY7XG4gIH1cblxuICBjaGlsZC5fbmV4dCA9IGNoaWxkLl9wcmV2ID0gY2hpbGQucGFyZW50ID0gbnVsbDsgLy8gZG9uJ3QgZGVsZXRlIHRoZSBfZHAganVzdCBzbyB3ZSBjYW4gcmV2ZXJ0IGlmIG5lY2Vzc2FyeS4gQnV0IHBhcmVudCBzaG91bGQgYmUgbnVsbCB0byBpbmRpY2F0ZSB0aGUgaXRlbSBpc24ndCBpbiBhIGxpbmtlZCBsaXN0LlxufSxcbiAgICBfcmVtb3ZlRnJvbVBhcmVudCA9IGZ1bmN0aW9uIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkLCBvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlKSB7XG4gIGNoaWxkLnBhcmVudCAmJiAoIW9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUgfHwgY2hpbGQucGFyZW50LmF1dG9SZW1vdmVDaGlsZHJlbikgJiYgY2hpbGQucGFyZW50LnJlbW92ZSAmJiBjaGlsZC5wYXJlbnQucmVtb3ZlKGNoaWxkKTtcbiAgY2hpbGQuX2FjdCA9IDA7XG59LFxuICAgIF91bmNhY2hlID0gZnVuY3Rpb24gX3VuY2FjaGUoYW5pbWF0aW9uLCBjaGlsZCkge1xuICBpZiAoYW5pbWF0aW9uICYmICghY2hpbGQgfHwgY2hpbGQuX2VuZCA+IGFuaW1hdGlvbi5fZHVyIHx8IGNoaWxkLl9zdGFydCA8IDApKSB7XG4gICAgLy8gcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uOiBpZiBhIGNoaWxkIGFuaW1hdGlvbiBpcyBwYXNzZWQgaW4gd2Ugc2hvdWxkIG9ubHkgdW5jYWNoZSBpZiB0aGF0IGNoaWxkIEVYVEVORFMgdGhlIGFuaW1hdGlvbiAoaXRzIGVuZCB0aW1lIGlzIGJleW9uZCB0aGUgZW5kKVxuICAgIHZhciBhID0gYW5pbWF0aW9uO1xuXG4gICAgd2hpbGUgKGEpIHtcbiAgICAgIGEuX2RpcnR5ID0gMTtcbiAgICAgIGEgPSBhLnBhcmVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcmVjYWNoZUFuY2VzdG9ycyA9IGZ1bmN0aW9uIF9yZWNhY2hlQW5jZXN0b3JzKGFuaW1hdGlvbikge1xuICB2YXIgcGFyZW50ID0gYW5pbWF0aW9uLnBhcmVudDtcblxuICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5wYXJlbnQpIHtcbiAgICAvL3NvbWV0aW1lcyB3ZSBtdXN0IGZvcmNlIGEgcmUtc29ydCBvZiBhbGwgY2hpbGRyZW4gYW5kIHVwZGF0ZSB0aGUgZHVyYXRpb24vdG90YWxEdXJhdGlvbiBvZiBhbGwgYW5jZXN0b3IgdGltZWxpbmVzIGltbWVkaWF0ZWx5IGluIGNhc2UsIGZvciBleGFtcGxlLCBpbiB0aGUgbWlkZGxlIG9mIGEgcmVuZGVyIGxvb3AsIG9uZSB0d2VlbiBhbHRlcnMgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSB3aGljaCBzaG92ZXMgaXRzIHN0YXJ0VGltZSBiZWZvcmUgMCwgZm9yY2luZyB0aGUgcGFyZW50IHRpbWVsaW5lIHRvIHNoaWZ0IGFyb3VuZCBhbmQgc2hpZnRDaGlsZHJlbigpIHdoaWNoIGNvdWxkIGFmZmVjdCB0aGF0IG5leHQgdHdlZW4ncyByZW5kZXIgKHN0YXJ0VGltZSkuIERvZXNuJ3QgbWF0dGVyIGZvciB0aGUgcm9vdCB0aW1lbGluZSB0aG91Z2guXG4gICAgcGFyZW50Ll9kaXJ0eSA9IDE7XG4gICAgcGFyZW50LnRvdGFsRHVyYXRpb24oKTtcbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX3Jld2luZFN0YXJ0QXQgPSBmdW5jdGlvbiBfcmV3aW5kU3RhcnRBdCh0d2VlbiwgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgcmV0dXJuIHR3ZWVuLl9zdGFydEF0ICYmIChfcmV2ZXJ0aW5nID8gdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWdOb0tpbGwpIDogdHdlZW4udmFycy5pbW1lZGlhdGVSZW5kZXIgJiYgIXR3ZWVuLnZhcnMuYXV0b1JldmVydCB8fCB0d2Vlbi5fc3RhcnRBdC5yZW5kZXIodG90YWxUaW1lLCB0cnVlLCBmb3JjZSkpO1xufSxcbiAgICBfaGFzTm9QYXVzZWRBbmNlc3RvcnMgPSBmdW5jdGlvbiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoYW5pbWF0aW9uKSB7XG4gIHJldHVybiAhYW5pbWF0aW9uIHx8IGFuaW1hdGlvbi5fdHMgJiYgX2hhc05vUGF1c2VkQW5jZXN0b3JzKGFuaW1hdGlvbi5wYXJlbnQpO1xufSxcbiAgICBfZWxhcHNlZEN5Y2xlRHVyYXRpb24gPSBmdW5jdGlvbiBfZWxhcHNlZEN5Y2xlRHVyYXRpb24oYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24uX3JlcGVhdCA/IF9hbmltYXRpb25DeWNsZShhbmltYXRpb24uX3RUaW1lLCBhbmltYXRpb24gPSBhbmltYXRpb24uZHVyYXRpb24oKSArIGFuaW1hdGlvbi5fckRlbGF5KSAqIGFuaW1hdGlvbiA6IDA7XG59LFxuICAgIC8vIGZlZWQgaW4gdGhlIHRvdGFsVGltZSBhbmQgY3ljbGVEdXJhdGlvbiBhbmQgaXQnbGwgcmV0dXJuIHRoZSBjeWNsZSAoaXRlcmF0aW9uIG1pbnVzIDEpIGFuZCBpZiB0aGUgcGxheWhlYWQgaXMgZXhhY3RseSBhdCB0aGUgdmVyeSBFTkQsIGl0IHdpbGwgTk9UIGJ1bXAgdXAgdG8gdGhlIG5leHQgY3ljbGUuXG5fYW5pbWF0aW9uQ3ljbGUgPSBmdW5jdGlvbiBfYW5pbWF0aW9uQ3ljbGUodFRpbWUsIGN5Y2xlRHVyYXRpb24pIHtcbiAgdmFyIHdob2xlID0gTWF0aC5mbG9vcih0VGltZSAvPSBjeWNsZUR1cmF0aW9uKTtcbiAgcmV0dXJuIHRUaW1lICYmIHdob2xlID09PSB0VGltZSA/IHdob2xlIC0gMSA6IHdob2xlO1xufSxcbiAgICBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSA9IGZ1bmN0aW9uIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHBhcmVudFRpbWUsIGNoaWxkKSB7XG4gIHJldHVybiAocGFyZW50VGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgKyAoY2hpbGQuX3RzID49IDAgPyAwIDogY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpO1xufSxcbiAgICBfc2V0RW5kID0gZnVuY3Rpb24gX3NldEVuZChhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbi5fZW5kID0gX3JvdW5kUHJlY2lzZShhbmltYXRpb24uX3N0YXJ0ICsgKGFuaW1hdGlvbi5fdER1ciAvIE1hdGguYWJzKGFuaW1hdGlvbi5fdHMgfHwgYW5pbWF0aW9uLl9ydHMgfHwgX3RpbnlOdW0pIHx8IDApKTtcbn0sXG4gICAgX2FsaWduUGxheWhlYWQgPSBmdW5jdGlvbiBfYWxpZ25QbGF5aGVhZChhbmltYXRpb24sIHRvdGFsVGltZSkge1xuICAvLyBhZGp1c3RzIHRoZSBhbmltYXRpb24ncyBfc3RhcnQgYW5kIF9lbmQgYWNjb3JkaW5nIHRvIHRoZSBwcm92aWRlZCB0b3RhbFRpbWUgKG9ubHkgaWYgdGhlIHBhcmVudCdzIHNtb290aENoaWxkVGltaW5nIGlzIHRydWUgYW5kIHRoZSBhbmltYXRpb24gaXNuJ3QgcGF1c2VkKS4gSXQgZG9lc24ndCBkbyBhbnkgcmVuZGVyaW5nIG9yIGZvcmNpbmcgdGhpbmdzIGJhY2sgaW50byBwYXJlbnQgdGltZWxpbmVzLCBldGMuIC0gdGhhdCdzIHdoYXQgdG90YWxUaW1lKCkgaXMgZm9yLlxuICB2YXIgcGFyZW50ID0gYW5pbWF0aW9uLl9kcDtcblxuICBpZiAocGFyZW50ICYmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiBhbmltYXRpb24uX3RzKSB7XG4gICAgYW5pbWF0aW9uLl9zdGFydCA9IF9yb3VuZFByZWNpc2UocGFyZW50Ll90aW1lIC0gKGFuaW1hdGlvbi5fdHMgPiAwID8gdG90YWxUaW1lIC8gYW5pbWF0aW9uLl90cyA6ICgoYW5pbWF0aW9uLl9kaXJ0eSA/IGFuaW1hdGlvbi50b3RhbER1cmF0aW9uKCkgOiBhbmltYXRpb24uX3REdXIpIC0gdG90YWxUaW1lKSAvIC1hbmltYXRpb24uX3RzKSk7XG5cbiAgICBfc2V0RW5kKGFuaW1hdGlvbik7XG5cbiAgICBwYXJlbnQuX2RpcnR5IHx8IF91bmNhY2hlKHBhcmVudCwgYW5pbWF0aW9uKTsgLy9mb3IgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnQuIElmIHRoZSBwYXJlbnQncyBjYWNoZSBpcyBhbHJlYWR5IGRpcnR5LCBpdCBhbHJlYWR5IHRvb2sgY2FyZSBvZiBtYXJraW5nIHRoZSBhbmNlc3RvcnMgYXMgZGlydHkgdG9vLCBzbyBza2lwIHRoZSBmdW5jdGlvbiBjYWxsIGhlcmUuXG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcblxuLypcbl90b3RhbFRpbWVUb1RpbWUgPSAoY2xhbXBlZFRvdGFsVGltZSwgZHVyYXRpb24sIHJlcGVhdCwgcmVwZWF0RGVsYXksIHlveW8pID0+IHtcblx0bGV0IGN5Y2xlRHVyYXRpb24gPSBkdXJhdGlvbiArIHJlcGVhdERlbGF5LFxuXHRcdHRpbWUgPSBfcm91bmQoY2xhbXBlZFRvdGFsVGltZSAlIGN5Y2xlRHVyYXRpb24pO1xuXHRpZiAodGltZSA+IGR1cmF0aW9uKSB7XG5cdFx0dGltZSA9IGR1cmF0aW9uO1xuXHR9XG5cdHJldHVybiAoeW95byAmJiAofn4oY2xhbXBlZFRvdGFsVGltZSAvIGN5Y2xlRHVyYXRpb24pICYgMSkpID8gZHVyYXRpb24gLSB0aW1lIDogdGltZTtcbn0sXG4qL1xuX3Bvc3RBZGRDaGVja3MgPSBmdW5jdGlvbiBfcG9zdEFkZENoZWNrcyh0aW1lbGluZSwgY2hpbGQpIHtcbiAgdmFyIHQ7XG5cbiAgaWYgKGNoaWxkLl90aW1lIHx8ICFjaGlsZC5fZHVyICYmIGNoaWxkLl9pbml0dGVkIHx8IGNoaWxkLl9zdGFydCA8IHRpbWVsaW5lLl90aW1lICYmIChjaGlsZC5fZHVyIHx8ICFjaGlsZC5hZGQpKSB7XG4gICAgLy8gaW4gY2FzZSwgZm9yIGV4YW1wbGUsIHRoZSBfc3RhcnQgaXMgbW92ZWQgb24gYSB0d2VlbiB0aGF0IGhhcyBhbHJlYWR5IHJlbmRlcmVkLCBvciBpZiBpdCdzIGJlaW5nIGluc2VydGVkIGludG8gYSB0aW1lbGluZSBCRUZPUkUgd2hlcmUgdGhlIHBsYXloZWFkIGlzIGN1cnJlbnRseS4gSW1hZ2luZSBpdCdzIGF0IGl0cyBlbmQgc3RhdGUsIHRoZW4gdGhlIHN0YXJ0VGltZSBpcyBtb3ZlZCBXQVkgbGF0ZXIgKGFmdGVyIHRoZSBlbmQgb2YgdGhpcyB0aW1lbGluZSksIGl0IHNob3VsZCByZW5kZXIgYXQgaXRzIGJlZ2lubmluZy4gU3BlY2lhbCBjYXNlOiBpZiBpdCdzIGEgdGltZWxpbmUgKGhhcyAuYWRkKCkgbWV0aG9kKSBhbmQgbm8gZHVyYXRpb24sIHdlIGNhbiBza2lwIHJlbmRlcmluZyBiZWNhdXNlIHRoZSB1c2VyIG1heSBiZSBwb3B1bGF0aW5nIGl0IEFGVEVSIGFkZGluZyBpdCB0byBhIHBhcmVudCB0aW1lbGluZSAodW5jb252ZW50aW9uYWwsIGJ1dCBwb3NzaWJsZSwgYW5kIHdlIHdvdWxkbid0IHdhbnQgaXQgdG8gZ2V0IHJlbW92ZWQgaWYgdGhlIHBhcmVudCdzIGF1dG9SZW1vdmVDaGlsZHJlbiBpcyB0cnVlKS5cbiAgICB0ID0gX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUodGltZWxpbmUucmF3VGltZSgpLCBjaGlsZCk7XG5cbiAgICBpZiAoIWNoaWxkLl9kdXIgfHwgX2NsYW1wKDAsIGNoaWxkLnRvdGFsRHVyYXRpb24oKSwgdCkgLSBjaGlsZC5fdFRpbWUgPiBfdGlueU51bSkge1xuICAgICAgY2hpbGQucmVuZGVyKHQsIHRydWUpO1xuICAgIH1cbiAgfSAvL2lmIHRoZSB0aW1lbGluZSBoYXMgYWxyZWFkeSBlbmRlZCBidXQgdGhlIGluc2VydGVkIHR3ZWVuL3RpbWVsaW5lIGV4dGVuZHMgdGhlIGR1cmF0aW9uLCB3ZSBzaG91bGQgZW5hYmxlIHRoaXMgdGltZWxpbmUgYWdhaW4gc28gdGhhdCBpdCByZW5kZXJzIHByb3Blcmx5LiBXZSBzaG91bGQgYWxzbyBhbGlnbiB0aGUgcGxheWhlYWQgd2l0aCB0aGUgcGFyZW50IHRpbWVsaW5lJ3Mgd2hlbiBhcHByb3ByaWF0ZS5cblxuXG4gIGlmIChfdW5jYWNoZSh0aW1lbGluZSwgY2hpbGQpLl9kcCAmJiB0aW1lbGluZS5faW5pdHRlZCAmJiB0aW1lbGluZS5fdGltZSA+PSB0aW1lbGluZS5fZHVyICYmIHRpbWVsaW5lLl90cykge1xuICAgIC8vaW4gY2FzZSBhbnkgb2YgdGhlIGFuY2VzdG9ycyBoYWQgY29tcGxldGVkIGJ1dCBzaG91bGQgbm93IGJlIGVuYWJsZWQuLi5cbiAgICBpZiAodGltZWxpbmUuX2R1ciA8IHRpbWVsaW5lLmR1cmF0aW9uKCkpIHtcbiAgICAgIHQgPSB0aW1lbGluZTtcblxuICAgICAgd2hpbGUgKHQuX2RwKSB7XG4gICAgICAgIHQucmF3VGltZSgpID49IDAgJiYgdC50b3RhbFRpbWUodC5fdFRpbWUpOyAvL21vdmVzIHRoZSB0aW1lbGluZSAoc2hpZnRzIGl0cyBzdGFydFRpbWUpIGlmIG5lY2Vzc2FyeSwgYW5kIGFsc28gZW5hYmxlcyBpdC4gSWYgaXQncyBjdXJyZW50bHkgemVybywgdGhvdWdoLCBpdCBtYXkgbm90IGJlIHNjaGVkdWxlZCB0byByZW5kZXIgdW50aWwgbGF0ZXIgc28gdGhlcmUncyBubyBuZWVkIHRvIGZvcmNlIGl0IHRvIGFsaWduIHdpdGggdGhlIGN1cnJlbnQgcGxheWhlYWQgcG9zaXRpb24uIE9ubHkgbW92ZSB0byBjYXRjaCB1cCB3aXRoIHRoZSBwbGF5aGVhZC5cblxuICAgICAgICB0ID0gdC5fZHA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGltZWxpbmUuX3pUaW1lID0gLV90aW55TnVtOyAvLyBoZWxwcyBlbnN1cmUgdGhhdCB0aGUgbmV4dCByZW5kZXIoKSB3aWxsIGJlIGZvcmNlZCAoY3Jvc3NpbmdTdGFydCA9IHRydWUgaW4gcmVuZGVyKCkpLCBldmVuIGlmIHRoZSBkdXJhdGlvbiBoYXNuJ3QgY2hhbmdlZCAod2UncmUgYWRkaW5nIGEgY2hpbGQgd2hpY2ggd291bGQgbmVlZCB0byBnZXQgcmVuZGVyZWQpLiBEZWZpbml0ZWx5IGFuIGVkZ2UgY2FzZS4gTm90ZTogd2UgTVVTVCBkbyB0aGlzIEFGVEVSIHRoZSBsb29wIGFib3ZlIHdoZXJlIHRoZSB0b3RhbFRpbWUoKSBtaWdodCB0cmlnZ2VyIGEgcmVuZGVyKCkgYmVjYXVzZSB0aGlzIF9hZGRUb1RpbWVsaW5lKCkgbWV0aG9kIGdldHMgY2FsbGVkIGZyb20gdGhlIEFuaW1hdGlvbiBjb25zdHJ1Y3RvciwgQkVGT1JFIHR3ZWVucyBldmVuIHJlY29yZCB0aGVpciB0YXJnZXRzLCBldGMuIHNvIHdlIHdvdWxkbid0IHdhbnQgdGhpbmdzIHRvIGdldCB0cmlnZ2VyZWQgaW4gdGhlIHdyb25nIG9yZGVyLlxuICB9XG59LFxuICAgIF9hZGRUb1RpbWVsaW5lID0gZnVuY3Rpb24gX2FkZFRvVGltZWxpbmUodGltZWxpbmUsIGNoaWxkLCBwb3NpdGlvbiwgc2tpcENoZWNrcykge1xuICBjaGlsZC5wYXJlbnQgJiYgX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQpO1xuICBjaGlsZC5fc3RhcnQgPSBfcm91bmRQcmVjaXNlKChfaXNOdW1iZXIocG9zaXRpb24pID8gcG9zaXRpb24gOiBwb3NpdGlvbiB8fCB0aW1lbGluZSAhPT0gX2dsb2JhbFRpbWVsaW5lID8gX3BhcnNlUG9zaXRpb24odGltZWxpbmUsIHBvc2l0aW9uLCBjaGlsZCkgOiB0aW1lbGluZS5fdGltZSkgKyBjaGlsZC5fZGVsYXkpO1xuICBjaGlsZC5fZW5kID0gX3JvdW5kUHJlY2lzZShjaGlsZC5fc3RhcnQgKyAoY2hpbGQudG90YWxEdXJhdGlvbigpIC8gTWF0aC5hYnMoY2hpbGQudGltZVNjYWxlKCkpIHx8IDApKTtcblxuICBfYWRkTGlua2VkTGlzdEl0ZW0odGltZWxpbmUsIGNoaWxkLCBcIl9maXJzdFwiLCBcIl9sYXN0XCIsIHRpbWVsaW5lLl9zb3J0ID8gXCJfc3RhcnRcIiA6IDApO1xuXG4gIF9pc0Zyb21PckZyb21TdGFydChjaGlsZCkgfHwgKHRpbWVsaW5lLl9yZWNlbnQgPSBjaGlsZCk7XG4gIHNraXBDaGVja3MgfHwgX3Bvc3RBZGRDaGVja3ModGltZWxpbmUsIGNoaWxkKTtcbiAgdGltZWxpbmUuX3RzIDwgMCAmJiBfYWxpZ25QbGF5aGVhZCh0aW1lbGluZSwgdGltZWxpbmUuX3RUaW1lKTsgLy8gaWYgdGhlIHRpbWVsaW5lIGlzIHJldmVyc2VkIGFuZCB0aGUgbmV3IGNoaWxkIG1ha2VzIGl0IGxvbmdlciwgd2UgbWF5IG5lZWQgdG8gYWRqdXN0IHRoZSBwYXJlbnQncyBfc3RhcnQgKHB1c2ggaXQgYmFjaylcblxuICByZXR1cm4gdGltZWxpbmU7XG59LFxuICAgIF9zY3JvbGxUcmlnZ2VyID0gZnVuY3Rpb24gX3Njcm9sbFRyaWdnZXIoYW5pbWF0aW9uLCB0cmlnZ2VyKSB7XG4gIHJldHVybiAoX2dsb2JhbHMuU2Nyb2xsVHJpZ2dlciB8fCBfbWlzc2luZ1BsdWdpbihcInNjcm9sbFRyaWdnZXJcIiwgdHJpZ2dlcikpICYmIF9nbG9iYWxzLlNjcm9sbFRyaWdnZXIuY3JlYXRlKHRyaWdnZXIsIGFuaW1hdGlvbik7XG59LFxuICAgIF9hdHRlbXB0SW5pdFR3ZWVuID0gZnVuY3Rpb24gX2F0dGVtcHRJbml0VHdlZW4odHdlZW4sIHRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cywgdFRpbWUpIHtcbiAgX2luaXRUd2Vlbih0d2VlbiwgdGltZSwgdFRpbWUpO1xuXG4gIGlmICghdHdlZW4uX2luaXR0ZWQpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIGlmICghZm9yY2UgJiYgdHdlZW4uX3B0ICYmICFfcmV2ZXJ0aW5nICYmICh0d2Vlbi5fZHVyICYmIHR3ZWVuLnZhcnMubGF6eSAhPT0gZmFsc2UgfHwgIXR3ZWVuLl9kdXIgJiYgdHdlZW4udmFycy5sYXp5KSAmJiBfbGFzdFJlbmRlcmVkRnJhbWUgIT09IF90aWNrZXIuZnJhbWUpIHtcbiAgICBfbGF6eVR3ZWVucy5wdXNoKHR3ZWVuKTtcblxuICAgIHR3ZWVuLl9sYXp5ID0gW3RUaW1lLCBzdXBwcmVzc0V2ZW50c107XG4gICAgcmV0dXJuIDE7XG4gIH1cbn0sXG4gICAgX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCA9IGZ1bmN0aW9uIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQoX3JlZikge1xuICB2YXIgcGFyZW50ID0gX3JlZi5wYXJlbnQ7XG4gIHJldHVybiBwYXJlbnQgJiYgcGFyZW50Ll90cyAmJiBwYXJlbnQuX2luaXR0ZWQgJiYgIXBhcmVudC5fbG9jayAmJiAocGFyZW50LnJhd1RpbWUoKSA8IDAgfHwgX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydChwYXJlbnQpKTtcbn0sXG4gICAgLy8gY2hlY2sgcGFyZW50J3MgX2xvY2sgYmVjYXVzZSB3aGVuIGEgdGltZWxpbmUgcmVwZWF0cy95b3lvcyBhbmQgZG9lcyBpdHMgYXJ0aWZpY2lhbCB3cmFwcGluZywgd2Ugc2hvdWxkbid0IGZvcmNlIHRoZSByYXRpbyBiYWNrIHRvIDBcbl9pc0Zyb21PckZyb21TdGFydCA9IGZ1bmN0aW9uIF9pc0Zyb21PckZyb21TdGFydChfcmVmMikge1xuICB2YXIgZGF0YSA9IF9yZWYyLmRhdGE7XG4gIHJldHVybiBkYXRhID09PSBcImlzRnJvbVN0YXJ0XCIgfHwgZGF0YSA9PT0gXCJpc1N0YXJ0XCI7XG59LFxuICAgIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2VlbiA9IGZ1bmN0aW9uIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2Vlbih0d2VlbiwgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgdmFyIHByZXZSYXRpbyA9IHR3ZWVuLnJhdGlvLFxuICAgICAgcmF0aW8gPSB0b3RhbFRpbWUgPCAwIHx8ICF0b3RhbFRpbWUgJiYgKCF0d2Vlbi5fc3RhcnQgJiYgX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCh0d2VlbikgJiYgISghdHdlZW4uX2luaXR0ZWQgJiYgX2lzRnJvbU9yRnJvbVN0YXJ0KHR3ZWVuKSkgfHwgKHR3ZWVuLl90cyA8IDAgfHwgdHdlZW4uX2RwLl90cyA8IDApICYmICFfaXNGcm9tT3JGcm9tU3RhcnQodHdlZW4pKSA/IDAgOiAxLFxuICAgICAgLy8gaWYgdGhlIHR3ZWVuIG9yIGl0cyBwYXJlbnQgaXMgcmV2ZXJzZWQgYW5kIHRoZSB0b3RhbFRpbWUgaXMgMCwgd2Ugc2hvdWxkIGdvIHRvIGEgcmF0aW8gb2YgMC4gRWRnZSBjYXNlOiBpZiBhIGZyb20oKSBvciBmcm9tVG8oKSBzdGFnZ2VyIHR3ZWVuIGlzIHBsYWNlZCBsYXRlciBpbiBhIHRpbWVsaW5lLCB0aGUgXCJzdGFydEF0XCIgemVyby1kdXJhdGlvbiB0d2VlbiBjb3VsZCBpbml0aWFsbHkgcmVuZGVyIGF0IGEgdGltZSB3aGVuIHRoZSBwYXJlbnQgdGltZWxpbmUncyBwbGF5aGVhZCBpcyB0ZWNobmljYWxseSBCRUZPUkUgd2hlcmUgdGhpcyB0d2VlbiBpcywgc28gbWFrZSBzdXJlIHRoYXQgYW55IFwiZnJvbVwiIGFuZCBcImZyb21Ub1wiIHN0YXJ0QXQgdHdlZW5zIGFyZSByZW5kZXJlZCB0aGUgZmlyc3QgdGltZSBhdCBhIHJhdGlvIG9mIDEuXG4gIHJlcGVhdERlbGF5ID0gdHdlZW4uX3JEZWxheSxcbiAgICAgIHRUaW1lID0gMCxcbiAgICAgIHB0LFxuICAgICAgaXRlcmF0aW9uLFxuICAgICAgcHJldkl0ZXJhdGlvbjtcblxuICBpZiAocmVwZWF0RGVsYXkgJiYgdHdlZW4uX3JlcGVhdCkge1xuICAgIC8vIGluIGNhc2UgdGhlcmUncyBhIHplcm8tZHVyYXRpb24gdHdlZW4gdGhhdCBoYXMgYSByZXBlYXQgd2l0aCBhIHJlcGVhdERlbGF5XG4gICAgdFRpbWUgPSBfY2xhbXAoMCwgdHdlZW4uX3REdXIsIHRvdGFsVGltZSk7XG4gICAgaXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRUaW1lLCByZXBlYXREZWxheSk7XG4gICAgdHdlZW4uX3lveW8gJiYgaXRlcmF0aW9uICYgMSAmJiAocmF0aW8gPSAxIC0gcmF0aW8pO1xuXG4gICAgaWYgKGl0ZXJhdGlvbiAhPT0gX2FuaW1hdGlvbkN5Y2xlKHR3ZWVuLl90VGltZSwgcmVwZWF0RGVsYXkpKSB7XG4gICAgICAvLyBpZiBpdGVyYXRpb24gY2hhbmdlZFxuICAgICAgcHJldlJhdGlvID0gMSAtIHJhdGlvO1xuICAgICAgdHdlZW4udmFycy5yZXBlYXRSZWZyZXNoICYmIHR3ZWVuLl9pbml0dGVkICYmIHR3ZWVuLmludmFsaWRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBpZiAocmF0aW8gIT09IHByZXZSYXRpbyB8fCBfcmV2ZXJ0aW5nIHx8IGZvcmNlIHx8IHR3ZWVuLl96VGltZSA9PT0gX3RpbnlOdW0gfHwgIXRvdGFsVGltZSAmJiB0d2Vlbi5felRpbWUpIHtcbiAgICBpZiAoIXR3ZWVuLl9pbml0dGVkICYmIF9hdHRlbXB0SW5pdFR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cywgdFRpbWUpKSB7XG4gICAgICAvLyBpZiB3ZSByZW5kZXIgdGhlIHZlcnkgYmVnaW5uaW5nICh0aW1lID09IDApIG9mIGEgZnJvbVRvKCksIHdlIG11c3QgZm9yY2UgdGhlIHJlbmRlciAobm9ybWFsIHR3ZWVucyB3b3VsZG4ndCBuZWVkIHRvIHJlbmRlciBhdCBhIHRpbWUgb2YgMCB3aGVuIHRoZSBwcmV2VGltZSB3YXMgYWxzbyAwKS4gVGhpcyBpcyBhbHNvIG1hbmRhdG9yeSB0byBtYWtlIHN1cmUgb3ZlcndyaXRpbmcga2lja3MgaW4gaW1tZWRpYXRlbHkuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJldkl0ZXJhdGlvbiA9IHR3ZWVuLl96VGltZTtcbiAgICB0d2Vlbi5felRpbWUgPSB0b3RhbFRpbWUgfHwgKHN1cHByZXNzRXZlbnRzID8gX3RpbnlOdW0gOiAwKTsgLy8gd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdHdlZW4sIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuXG5cbiAgICBzdXBwcmVzc0V2ZW50cyB8fCAoc3VwcHJlc3NFdmVudHMgPSB0b3RhbFRpbWUgJiYgIXByZXZJdGVyYXRpb24pOyAvLyBpZiBpdCB3YXMgcmVuZGVyZWQgcHJldmlvdXNseSBhdCBleGFjdGx5IDAgKF96VGltZSkgYW5kIG5vdyB0aGUgcGxheWhlYWQgaXMgbW92aW5nIGF3YXksIERPTidUIGZpcmUgY2FsbGJhY2tzIG90aGVyd2lzZSB0aGV5J2xsIHNlZW0gbGlrZSBkdXBsaWNhdGVzLlxuXG4gICAgdHdlZW4ucmF0aW8gPSByYXRpbztcbiAgICB0d2Vlbi5fZnJvbSAmJiAocmF0aW8gPSAxIC0gcmF0aW8pO1xuICAgIHR3ZWVuLl90aW1lID0gMDtcbiAgICB0d2Vlbi5fdFRpbWUgPSB0VGltZTtcbiAgICBwdCA9IHR3ZWVuLl9wdDtcblxuICAgIHdoaWxlIChwdCkge1xuICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cblxuICAgIHRvdGFsVGltZSA8IDAgJiYgX3Jld2luZFN0YXJ0QXQodHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIHRydWUpO1xuICAgIHR3ZWVuLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgX2NhbGxiYWNrKHR3ZWVuLCBcIm9uVXBkYXRlXCIpO1xuICAgIHRUaW1lICYmIHR3ZWVuLl9yZXBlYXQgJiYgIXN1cHByZXNzRXZlbnRzICYmIHR3ZWVuLnBhcmVudCAmJiBfY2FsbGJhY2sodHdlZW4sIFwib25SZXBlYXRcIik7XG5cbiAgICBpZiAoKHRvdGFsVGltZSA+PSB0d2Vlbi5fdER1ciB8fCB0b3RhbFRpbWUgPCAwKSAmJiB0d2Vlbi5yYXRpbyA9PT0gcmF0aW8pIHtcbiAgICAgIHJhdGlvICYmIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLCAxKTtcblxuICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhX3JldmVydGluZykge1xuICAgICAgICBfY2FsbGJhY2sodHdlZW4sIHJhdGlvID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgIHR3ZWVuLl9wcm9tICYmIHR3ZWVuLl9wcm9tKCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKCF0d2Vlbi5felRpbWUpIHtcbiAgICB0d2Vlbi5felRpbWUgPSB0b3RhbFRpbWU7XG4gIH1cbn0sXG4gICAgX2ZpbmROZXh0UGF1c2VUd2VlbiA9IGZ1bmN0aW9uIF9maW5kTmV4dFBhdXNlVHdlZW4oYW5pbWF0aW9uLCBwcmV2VGltZSwgdGltZSkge1xuICB2YXIgY2hpbGQ7XG5cbiAgaWYgKHRpbWUgPiBwcmV2VGltZSkge1xuICAgIGNoaWxkID0gYW5pbWF0aW9uLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCAmJiBjaGlsZC5fc3RhcnQgPD0gdGltZSkge1xuICAgICAgaWYgKGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiICYmIGNoaWxkLl9zdGFydCA+IHByZXZUaW1lKSB7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY2hpbGQgPSBhbmltYXRpb24uX2xhc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQgJiYgY2hpbGQuX3N0YXJ0ID49IHRpbWUpIHtcbiAgICAgIGlmIChjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIiAmJiBjaGlsZC5fc3RhcnQgPCBwcmV2VGltZSkge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX3ByZXY7XG4gICAgfVxuICB9XG59LFxuICAgIF9zZXREdXJhdGlvbiA9IGZ1bmN0aW9uIF9zZXREdXJhdGlvbihhbmltYXRpb24sIGR1cmF0aW9uLCBza2lwVW5jYWNoZSwgbGVhdmVQbGF5aGVhZCkge1xuICB2YXIgcmVwZWF0ID0gYW5pbWF0aW9uLl9yZXBlYXQsXG4gICAgICBkdXIgPSBfcm91bmRQcmVjaXNlKGR1cmF0aW9uKSB8fCAwLFxuICAgICAgdG90YWxQcm9ncmVzcyA9IGFuaW1hdGlvbi5fdFRpbWUgLyBhbmltYXRpb24uX3REdXI7XG4gIHRvdGFsUHJvZ3Jlc3MgJiYgIWxlYXZlUGxheWhlYWQgJiYgKGFuaW1hdGlvbi5fdGltZSAqPSBkdXIgLyBhbmltYXRpb24uX2R1cik7XG4gIGFuaW1hdGlvbi5fZHVyID0gZHVyO1xuICBhbmltYXRpb24uX3REdXIgPSAhcmVwZWF0ID8gZHVyIDogcmVwZWF0IDwgMCA/IDFlMTAgOiBfcm91bmRQcmVjaXNlKGR1ciAqIChyZXBlYXQgKyAxKSArIGFuaW1hdGlvbi5fckRlbGF5ICogcmVwZWF0KTtcbiAgdG90YWxQcm9ncmVzcyA+IDAgJiYgIWxlYXZlUGxheWhlYWQgJiYgX2FsaWduUGxheWhlYWQoYW5pbWF0aW9uLCBhbmltYXRpb24uX3RUaW1lID0gYW5pbWF0aW9uLl90RHVyICogdG90YWxQcm9ncmVzcyk7XG4gIGFuaW1hdGlvbi5wYXJlbnQgJiYgX3NldEVuZChhbmltYXRpb24pO1xuICBza2lwVW5jYWNoZSB8fCBfdW5jYWNoZShhbmltYXRpb24ucGFyZW50LCBhbmltYXRpb24pO1xuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfb25VcGRhdGVUb3RhbER1cmF0aW9uID0gZnVuY3Rpb24gX29uVXBkYXRlVG90YWxEdXJhdGlvbihhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbiBpbnN0YW5jZW9mIFRpbWVsaW5lID8gX3VuY2FjaGUoYW5pbWF0aW9uKSA6IF9zZXREdXJhdGlvbihhbmltYXRpb24sIGFuaW1hdGlvbi5fZHVyKTtcbn0sXG4gICAgX3plcm9Qb3NpdGlvbiA9IHtcbiAgX3N0YXJ0OiAwLFxuICBlbmRUaW1lOiBfZW1wdHlGdW5jLFxuICB0b3RhbER1cmF0aW9uOiBfZW1wdHlGdW5jXG59LFxuICAgIF9wYXJzZVBvc2l0aW9uID0gZnVuY3Rpb24gX3BhcnNlUG9zaXRpb24oYW5pbWF0aW9uLCBwb3NpdGlvbiwgcGVyY2VudEFuaW1hdGlvbikge1xuICB2YXIgbGFiZWxzID0gYW5pbWF0aW9uLmxhYmVscyxcbiAgICAgIHJlY2VudCA9IGFuaW1hdGlvbi5fcmVjZW50IHx8IF96ZXJvUG9zaXRpb24sXG4gICAgICBjbGlwcGVkRHVyYXRpb24gPSBhbmltYXRpb24uZHVyYXRpb24oKSA+PSBfYmlnTnVtID8gcmVjZW50LmVuZFRpbWUoZmFsc2UpIDogYW5pbWF0aW9uLl9kdXIsXG4gICAgICAvL2luIGNhc2UgdGhlcmUncyBhIGNoaWxkIHRoYXQgaW5maW5pdGVseSByZXBlYXRzLCB1c2VycyBhbG1vc3QgbmV2ZXIgaW50ZW5kIGZvciB0aGUgaW5zZXJ0aW9uIHBvaW50IG9mIGEgbmV3IGNoaWxkIHRvIGJlIGJhc2VkIG9uIGEgU1VQRVIgbG9uZyB2YWx1ZSBsaWtlIHRoYXQgc28gd2UgY2xpcCBpdCBhbmQgYXNzdW1lIHRoZSBtb3N0IHJlY2VudGx5LWFkZGVkIGNoaWxkJ3MgZW5kVGltZSBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuICBpLFxuICAgICAgb2Zmc2V0LFxuICAgICAgaXNQZXJjZW50O1xuXG4gIGlmIChfaXNTdHJpbmcocG9zaXRpb24pICYmIChpc05hTihwb3NpdGlvbikgfHwgcG9zaXRpb24gaW4gbGFiZWxzKSkge1xuICAgIC8vaWYgdGhlIHN0cmluZyBpcyBhIG51bWJlciBsaWtlIFwiMVwiLCBjaGVjayB0byBzZWUgaWYgdGhlcmUncyBhIGxhYmVsIHdpdGggdGhhdCBuYW1lLCBvdGhlcndpc2UgaW50ZXJwcmV0IGl0IGFzIGEgbnVtYmVyIChhYnNvbHV0ZSB2YWx1ZSkuXG4gICAgb2Zmc2V0ID0gcG9zaXRpb24uY2hhckF0KDApO1xuICAgIGlzUGVyY2VudCA9IHBvc2l0aW9uLnN1YnN0cigtMSkgPT09IFwiJVwiO1xuICAgIGkgPSBwb3NpdGlvbi5pbmRleE9mKFwiPVwiKTtcblxuICAgIGlmIChvZmZzZXQgPT09IFwiPFwiIHx8IG9mZnNldCA9PT0gXCI+XCIpIHtcbiAgICAgIGkgPj0gMCAmJiAocG9zaXRpb24gPSBwb3NpdGlvbi5yZXBsYWNlKC89LywgXCJcIikpO1xuICAgICAgcmV0dXJuIChvZmZzZXQgPT09IFwiPFwiID8gcmVjZW50Ll9zdGFydCA6IHJlY2VudC5lbmRUaW1lKHJlY2VudC5fcmVwZWF0ID49IDApKSArIChwYXJzZUZsb2F0KHBvc2l0aW9uLnN1YnN0cigxKSkgfHwgMCkgKiAoaXNQZXJjZW50ID8gKGkgPCAwID8gcmVjZW50IDogcGVyY2VudEFuaW1hdGlvbikudG90YWxEdXJhdGlvbigpIC8gMTAwIDogMSk7XG4gICAgfVxuXG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICBwb3NpdGlvbiBpbiBsYWJlbHMgfHwgKGxhYmVsc1twb3NpdGlvbl0gPSBjbGlwcGVkRHVyYXRpb24pO1xuICAgICAgcmV0dXJuIGxhYmVsc1twb3NpdGlvbl07XG4gICAgfVxuXG4gICAgb2Zmc2V0ID0gcGFyc2VGbG9hdChwb3NpdGlvbi5jaGFyQXQoaSAtIDEpICsgcG9zaXRpb24uc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoaXNQZXJjZW50ICYmIHBlcmNlbnRBbmltYXRpb24pIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCAvIDEwMCAqIChfaXNBcnJheShwZXJjZW50QW5pbWF0aW9uKSA/IHBlcmNlbnRBbmltYXRpb25bMF0gOiBwZXJjZW50QW5pbWF0aW9uKS50b3RhbER1cmF0aW9uKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGkgPiAxID8gX3BhcnNlUG9zaXRpb24oYW5pbWF0aW9uLCBwb3NpdGlvbi5zdWJzdHIoMCwgaSAtIDEpLCBwZXJjZW50QW5pbWF0aW9uKSArIG9mZnNldCA6IGNsaXBwZWREdXJhdGlvbiArIG9mZnNldDtcbiAgfVxuXG4gIHJldHVybiBwb3NpdGlvbiA9PSBudWxsID8gY2xpcHBlZER1cmF0aW9uIDogK3Bvc2l0aW9uO1xufSxcbiAgICBfY3JlYXRlVHdlZW5UeXBlID0gZnVuY3Rpb24gX2NyZWF0ZVR3ZWVuVHlwZSh0eXBlLCBwYXJhbXMsIHRpbWVsaW5lKSB7XG4gIHZhciBpc0xlZ2FjeSA9IF9pc051bWJlcihwYXJhbXNbMV0pLFxuICAgICAgdmFyc0luZGV4ID0gKGlzTGVnYWN5ID8gMiA6IDEpICsgKHR5cGUgPCAyID8gMCA6IDEpLFxuICAgICAgdmFycyA9IHBhcmFtc1t2YXJzSW5kZXhdLFxuICAgICAgaXJWYXJzLFxuICAgICAgcGFyZW50O1xuXG4gIGlzTGVnYWN5ICYmICh2YXJzLmR1cmF0aW9uID0gcGFyYW1zWzFdKTtcbiAgdmFycy5wYXJlbnQgPSB0aW1lbGluZTtcblxuICBpZiAodHlwZSkge1xuICAgIGlyVmFycyA9IHZhcnM7XG4gICAgcGFyZW50ID0gdGltZWxpbmU7XG5cbiAgICB3aGlsZSAocGFyZW50ICYmICEoXCJpbW1lZGlhdGVSZW5kZXJcIiBpbiBpclZhcnMpKSB7XG4gICAgICAvLyBpbmhlcml0YW5jZSBoYXNuJ3QgaGFwcGVuZWQgeWV0LCBidXQgc29tZW9uZSBtYXkgaGF2ZSBzZXQgYSBkZWZhdWx0IGluIGFuIGFuY2VzdG9yIHRpbWVsaW5lLiBXZSBjb3VsZCBkbyB2YXJzLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKF9pbmhlcml0RGVmYXVsdHModmFycykuaW1tZWRpYXRlUmVuZGVyKSBidXQgdGhhdCdkIGV4YWN0IGEgc2xpZ2h0IHBlcmZvcm1hbmNlIHBlbmFsdHkgYmVjYXVzZSBfaW5oZXJpdERlZmF1bHRzKCkgYWxzbyBydW5zIGluIHRoZSBUd2VlbiBjb25zdHJ1Y3Rvci4gV2UncmUgcGF5aW5nIGEgc21hbGwga2IgcHJpY2UgaGVyZSB0byBnYWluIHNwZWVkLlxuICAgICAgaXJWYXJzID0gcGFyZW50LnZhcnMuZGVmYXVsdHMgfHwge307XG4gICAgICBwYXJlbnQgPSBfaXNOb3RGYWxzZShwYXJlbnQudmFycy5pbmhlcml0KSAmJiBwYXJlbnQucGFyZW50O1xuICAgIH1cblxuICAgIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UoaXJWYXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgdHlwZSA8IDIgPyB2YXJzLnJ1bkJhY2t3YXJkcyA9IDEgOiB2YXJzLnN0YXJ0QXQgPSBwYXJhbXNbdmFyc0luZGV4IC0gMV07IC8vIFwiZnJvbVwiIHZhcnNcbiAgfVxuXG4gIHJldHVybiBuZXcgVHdlZW4ocGFyYW1zWzBdLCB2YXJzLCBwYXJhbXNbdmFyc0luZGV4ICsgMV0pO1xufSxcbiAgICBfY29uZGl0aW9uYWxSZXR1cm4gPSBmdW5jdGlvbiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmMpIHtcbiAgcmV0dXJuIHZhbHVlIHx8IHZhbHVlID09PSAwID8gZnVuYyh2YWx1ZSkgOiBmdW5jO1xufSxcbiAgICBfY2xhbXAgPSBmdW5jdGlvbiBfY2xhbXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA8IG1pbiA/IG1pbiA6IHZhbHVlID4gbWF4ID8gbWF4IDogdmFsdWU7XG59LFxuICAgIGdldFVuaXQgPSBmdW5jdGlvbiBnZXRVbml0KHZhbHVlLCB2KSB7XG4gIHJldHVybiAhX2lzU3RyaW5nKHZhbHVlKSB8fCAhKHYgPSBfdW5pdEV4cC5leGVjKHZhbHVlKSkgPyBcIlwiIDogdlsxXTtcbn0sXG4gICAgLy8gbm90ZTogcHJvdGVjdCBhZ2FpbnN0IHBhZGRlZCBudW1iZXJzIGFzIHN0cmluZ3MsIGxpa2UgXCIxMDAuMTAwXCIuIFRoYXQgc2hvdWxkbid0IHJldHVybiBcIjAwXCIgYXMgdGhlIHVuaXQuIElmIGl0J3MgbnVtZXJpYywgcmV0dXJuIG5vIHVuaXQuXG5jbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiBfY2xhbXAobWluLCBtYXgsIHYpO1xuICB9KTtcbn0sXG4gICAgX3NsaWNlID0gW10uc2xpY2UsXG4gICAgX2lzQXJyYXlMaWtlID0gZnVuY3Rpb24gX2lzQXJyYXlMaWtlKHZhbHVlLCBub25FbXB0eSkge1xuICByZXR1cm4gdmFsdWUgJiYgX2lzT2JqZWN0KHZhbHVlKSAmJiBcImxlbmd0aFwiIGluIHZhbHVlICYmICghbm9uRW1wdHkgJiYgIXZhbHVlLmxlbmd0aCB8fCB2YWx1ZS5sZW5ndGggLSAxIGluIHZhbHVlICYmIF9pc09iamVjdCh2YWx1ZVswXSkpICYmICF2YWx1ZS5ub2RlVHlwZSAmJiB2YWx1ZSAhPT0gX3dpbjtcbn0sXG4gICAgX2ZsYXR0ZW4gPSBmdW5jdGlvbiBfZmxhdHRlbihhciwgbGVhdmVTdHJpbmdzLCBhY2N1bXVsYXRvcikge1xuICBpZiAoYWNjdW11bGF0b3IgPT09IHZvaWQgMCkge1xuICAgIGFjY3VtdWxhdG9yID0gW107XG4gIH1cblxuICByZXR1cm4gYXIuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgX2FjY3VtdWxhdG9yO1xuXG4gICAgcmV0dXJuIF9pc1N0cmluZyh2YWx1ZSkgJiYgIWxlYXZlU3RyaW5ncyB8fCBfaXNBcnJheUxpa2UodmFsdWUsIDEpID8gKF9hY2N1bXVsYXRvciA9IGFjY3VtdWxhdG9yKS5wdXNoLmFwcGx5KF9hY2N1bXVsYXRvciwgdG9BcnJheSh2YWx1ZSkpIDogYWNjdW11bGF0b3IucHVzaCh2YWx1ZSk7XG4gIH0pIHx8IGFjY3VtdWxhdG9yO1xufSxcbiAgICAvL3Rha2VzIGFueSB2YWx1ZSBhbmQgcmV0dXJucyBhbiBhcnJheS4gSWYgaXQncyBhIHN0cmluZyAoYW5kIGxlYXZlU3RyaW5ncyBpc24ndCB0cnVlKSwgaXQnbGwgdXNlIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoKSBhbmQgY29udmVydCB0aGF0IHRvIGFuIGFycmF5LiBJdCdsbCBhbHNvIGFjY2VwdCBpdGVyYWJsZXMgbGlrZSBqUXVlcnkgb2JqZWN0cy5cbnRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5KHZhbHVlLCBzY29wZSwgbGVhdmVTdHJpbmdzKSB7XG4gIHJldHVybiBfY29udGV4dCAmJiAhc2NvcGUgJiYgX2NvbnRleHQuc2VsZWN0b3IgPyBfY29udGV4dC5zZWxlY3Rvcih2YWx1ZSkgOiBfaXNTdHJpbmcodmFsdWUpICYmICFsZWF2ZVN0cmluZ3MgJiYgKF9jb3JlSW5pdHRlZCB8fCAhX3dha2UoKSkgPyBfc2xpY2UuY2FsbCgoc2NvcGUgfHwgX2RvYykucXVlcnlTZWxlY3RvckFsbCh2YWx1ZSksIDApIDogX2lzQXJyYXkodmFsdWUpID8gX2ZsYXR0ZW4odmFsdWUsIGxlYXZlU3RyaW5ncykgOiBfaXNBcnJheUxpa2UodmFsdWUpID8gX3NsaWNlLmNhbGwodmFsdWUsIDApIDogdmFsdWUgPyBbdmFsdWVdIDogW107XG59LFxuICAgIHNlbGVjdG9yID0gZnVuY3Rpb24gc2VsZWN0b3IodmFsdWUpIHtcbiAgdmFsdWUgPSB0b0FycmF5KHZhbHVlKVswXSB8fCBfd2FybihcIkludmFsaWQgc2NvcGVcIikgfHwge307XG4gIHJldHVybiBmdW5jdGlvbiAodikge1xuICAgIHZhciBlbCA9IHZhbHVlLmN1cnJlbnQgfHwgdmFsdWUubmF0aXZlRWxlbWVudCB8fCB2YWx1ZTtcbiAgICByZXR1cm4gdG9BcnJheSh2LCBlbC5xdWVyeVNlbGVjdG9yQWxsID8gZWwgOiBlbCA9PT0gdmFsdWUgPyBfd2FybihcIkludmFsaWQgc2NvcGVcIikgfHwgX2RvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpIDogdmFsdWUpO1xuICB9O1xufSxcbiAgICBzaHVmZmxlID0gZnVuY3Rpb24gc2h1ZmZsZShhKSB7XG4gIHJldHVybiBhLnNvcnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAuNSAtIE1hdGgucmFuZG9tKCk7XG4gIH0pO1xufSxcbiAgICAvLyBhbHRlcm5hdGl2ZSB0aGF0J3MgYSBiaXQgZmFzdGVyIGFuZCBtb3JlIHJlbGlhYmx5IGRpdmVyc2UgYnV0IGJpZ2dlcjogICBmb3IgKGxldCBqLCB2LCBpID0gYS5sZW5ndGg7IGk7IGogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBpKSwgdiA9IGFbLS1pXSwgYVtpXSA9IGFbal0sIGFbal0gPSB2KTsgcmV0dXJuIGE7XG4vL2ZvciBkaXN0cmlidXRpbmcgdmFsdWVzIGFjcm9zcyBhbiBhcnJheS4gQ2FuIGFjY2VwdCBhIG51bWJlciwgYSBmdW5jdGlvbiBvciAobW9zdCBjb21tb25seSkgYSBmdW5jdGlvbiB3aGljaCBjYW4gY29udGFpbiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6IHtiYXNlLCBhbW91bnQsIGZyb20sIGVhc2UsIGdyaWQsIGF4aXMsIGxlbmd0aCwgZWFjaH0uIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGV4cGVjdHMgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOiBpbmRleCwgdGFyZ2V0LCBhcnJheS4gUmVjb2duaXplcyB0aGUgZm9sbG93aW5nXG5kaXN0cmlidXRlID0gZnVuY3Rpb24gZGlzdHJpYnV0ZSh2KSB7XG4gIGlmIChfaXNGdW5jdGlvbih2KSkge1xuICAgIHJldHVybiB2O1xuICB9XG5cbiAgdmFyIHZhcnMgPSBfaXNPYmplY3QodikgPyB2IDoge1xuICAgIGVhY2g6IHZcbiAgfSxcbiAgICAgIC8vbjoxIGlzIGp1c3QgdG8gaW5kaWNhdGUgdiB3YXMgYSBudW1iZXI7IHdlIGxldmVyYWdlIHRoYXQgbGF0ZXIgdG8gc2V0IHYgYWNjb3JkaW5nIHRvIHRoZSBsZW5ndGggd2UgZ2V0LiBJZiBhIG51bWJlciBpcyBwYXNzZWQgaW4sIHdlIHRyZWF0IGl0IGxpa2UgdGhlIG9sZCBzdGFnZ2VyIHZhbHVlIHdoZXJlIDAuMSwgZm9yIGV4YW1wbGUsIHdvdWxkIG1lYW4gdGhhdCB0aGluZ3Mgd291bGQgYmUgZGlzdHJpYnV0ZWQgd2l0aCAwLjEgYmV0d2VlbiBlYWNoIGVsZW1lbnQgaW4gdGhlIGFycmF5IHJhdGhlciB0aGFuIGEgdG90YWwgXCJhbW91bnRcIiB0aGF0J3MgY2h1bmtlZCBvdXQgYW1vbmcgdGhlbSBhbGwuXG4gIGVhc2UgPSBfcGFyc2VFYXNlKHZhcnMuZWFzZSksXG4gICAgICBmcm9tID0gdmFycy5mcm9tIHx8IDAsXG4gICAgICBiYXNlID0gcGFyc2VGbG9hdCh2YXJzLmJhc2UpIHx8IDAsXG4gICAgICBjYWNoZSA9IHt9LFxuICAgICAgaXNEZWNpbWFsID0gZnJvbSA+IDAgJiYgZnJvbSA8IDEsXG4gICAgICByYXRpb3MgPSBpc05hTihmcm9tKSB8fCBpc0RlY2ltYWwsXG4gICAgICBheGlzID0gdmFycy5heGlzLFxuICAgICAgcmF0aW9YID0gZnJvbSxcbiAgICAgIHJhdGlvWSA9IGZyb207XG5cbiAgaWYgKF9pc1N0cmluZyhmcm9tKSkge1xuICAgIHJhdGlvWCA9IHJhdGlvWSA9IHtcbiAgICAgIGNlbnRlcjogLjUsXG4gICAgICBlZGdlczogLjUsXG4gICAgICBlbmQ6IDFcbiAgICB9W2Zyb21dIHx8IDA7XG4gIH0gZWxzZSBpZiAoIWlzRGVjaW1hbCAmJiByYXRpb3MpIHtcbiAgICByYXRpb1ggPSBmcm9tWzBdO1xuICAgIHJhdGlvWSA9IGZyb21bMV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGksIHRhcmdldCwgYSkge1xuICAgIHZhciBsID0gKGEgfHwgdmFycykubGVuZ3RoLFxuICAgICAgICBkaXN0YW5jZXMgPSBjYWNoZVtsXSxcbiAgICAgICAgb3JpZ2luWCxcbiAgICAgICAgb3JpZ2luWSxcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgZCxcbiAgICAgICAgaixcbiAgICAgICAgbWF4LFxuICAgICAgICBtaW4sXG4gICAgICAgIHdyYXBBdDtcblxuICAgIGlmICghZGlzdGFuY2VzKSB7XG4gICAgICB3cmFwQXQgPSB2YXJzLmdyaWQgPT09IFwiYXV0b1wiID8gMCA6ICh2YXJzLmdyaWQgfHwgWzEsIF9iaWdOdW1dKVsxXTtcblxuICAgICAgaWYgKCF3cmFwQXQpIHtcbiAgICAgICAgbWF4ID0gLV9iaWdOdW07XG5cbiAgICAgICAgd2hpbGUgKG1heCA8IChtYXggPSBhW3dyYXBBdCsrXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0KSAmJiB3cmFwQXQgPCBsKSB7fVxuXG4gICAgICAgIHdyYXBBdCA8IGwgJiYgd3JhcEF0LS07XG4gICAgICB9XG5cbiAgICAgIGRpc3RhbmNlcyA9IGNhY2hlW2xdID0gW107XG4gICAgICBvcmlnaW5YID0gcmF0aW9zID8gTWF0aC5taW4od3JhcEF0LCBsKSAqIHJhdGlvWCAtIC41IDogZnJvbSAlIHdyYXBBdDtcbiAgICAgIG9yaWdpblkgPSB3cmFwQXQgPT09IF9iaWdOdW0gPyAwIDogcmF0aW9zID8gbCAqIHJhdGlvWSAvIHdyYXBBdCAtIC41IDogZnJvbSAvIHdyYXBBdCB8IDA7XG4gICAgICBtYXggPSAwO1xuICAgICAgbWluID0gX2JpZ051bTtcblxuICAgICAgZm9yIChqID0gMDsgaiA8IGw7IGorKykge1xuICAgICAgICB4ID0gaiAlIHdyYXBBdCAtIG9yaWdpblg7XG4gICAgICAgIHkgPSBvcmlnaW5ZIC0gKGogLyB3cmFwQXQgfCAwKTtcbiAgICAgICAgZGlzdGFuY2VzW2pdID0gZCA9ICFheGlzID8gX3NxcnQoeCAqIHggKyB5ICogeSkgOiBNYXRoLmFicyhheGlzID09PSBcInlcIiA/IHkgOiB4KTtcbiAgICAgICAgZCA+IG1heCAmJiAobWF4ID0gZCk7XG4gICAgICAgIGQgPCBtaW4gJiYgKG1pbiA9IGQpO1xuICAgICAgfVxuXG4gICAgICBmcm9tID09PSBcInJhbmRvbVwiICYmIHNodWZmbGUoZGlzdGFuY2VzKTtcbiAgICAgIGRpc3RhbmNlcy5tYXggPSBtYXggLSBtaW47XG4gICAgICBkaXN0YW5jZXMubWluID0gbWluO1xuICAgICAgZGlzdGFuY2VzLnYgPSBsID0gKHBhcnNlRmxvYXQodmFycy5hbW91bnQpIHx8IHBhcnNlRmxvYXQodmFycy5lYWNoKSAqICh3cmFwQXQgPiBsID8gbCAtIDEgOiAhYXhpcyA/IE1hdGgubWF4KHdyYXBBdCwgbCAvIHdyYXBBdCkgOiBheGlzID09PSBcInlcIiA/IGwgLyB3cmFwQXQgOiB3cmFwQXQpIHx8IDApICogKGZyb20gPT09IFwiZWRnZXNcIiA/IC0xIDogMSk7XG4gICAgICBkaXN0YW5jZXMuYiA9IGwgPCAwID8gYmFzZSAtIGwgOiBiYXNlO1xuICAgICAgZGlzdGFuY2VzLnUgPSBnZXRVbml0KHZhcnMuYW1vdW50IHx8IHZhcnMuZWFjaCkgfHwgMDsgLy91bml0XG5cbiAgICAgIGVhc2UgPSBlYXNlICYmIGwgPCAwID8gX2ludmVydEVhc2UoZWFzZSkgOiBlYXNlO1xuICAgIH1cblxuICAgIGwgPSAoZGlzdGFuY2VzW2ldIC0gZGlzdGFuY2VzLm1pbikgLyBkaXN0YW5jZXMubWF4IHx8IDA7XG4gICAgcmV0dXJuIF9yb3VuZFByZWNpc2UoZGlzdGFuY2VzLmIgKyAoZWFzZSA/IGVhc2UobCkgOiBsKSAqIGRpc3RhbmNlcy52KSArIGRpc3RhbmNlcy51OyAvL3JvdW5kIGluIG9yZGVyIHRvIHdvcmsgYXJvdW5kIGZsb2F0aW5nIHBvaW50IGVycm9yc1xuICB9O1xufSxcbiAgICBfcm91bmRNb2RpZmllciA9IGZ1bmN0aW9uIF9yb3VuZE1vZGlmaWVyKHYpIHtcbiAgLy9wYXNzIGluIDAuMSBnZXQgYSBmdW5jdGlvbiB0aGF0J2xsIHJvdW5kIHRvIHRoZSBuZWFyZXN0IHRlbnRoLCBvciA1IHRvIHJvdW5kIHRvIHRoZSBjbG9zZXN0IDUsIG9yIDAuMDAxIHRvIHRoZSBjbG9zZXN0IDEwMDB0aCwgZXRjLlxuICB2YXIgcCA9IE1hdGgucG93KDEwLCAoKHYgKyBcIlwiKS5zcGxpdChcIi5cIilbMV0gfHwgXCJcIikubGVuZ3RoKTsgLy90byBhdm9pZCBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyAobGlrZSAyNCAqIDAuMSA9PSAyLjQwMDAwMDAwMDAwMDAwMDQpLCB3ZSBjaG9wIG9mZiBhdCBhIHNwZWNpZmljIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyAobXVjaCBmYXN0ZXIgdGhhbiB0b0ZpeGVkKCkpXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChyYXcpIHtcbiAgICB2YXIgbiA9IF9yb3VuZFByZWNpc2UoTWF0aC5yb3VuZChwYXJzZUZsb2F0KHJhdykgLyB2KSAqIHYgKiBwKTtcblxuICAgIHJldHVybiAobiAtIG4gJSAxKSAvIHAgKyAoX2lzTnVtYmVyKHJhdykgPyAwIDogZ2V0VW5pdChyYXcpKTsgLy8gbiAtIG4gJSAxIHJlcGxhY2VzIE1hdGguZmxvb3IoKSBpbiBvcmRlciB0byBoYW5kbGUgbmVnYXRpdmUgdmFsdWVzIHByb3Blcmx5LiBGb3IgZXhhbXBsZSwgTWF0aC5mbG9vcigtMTUwLjAwMDAwMDAwMDAwMDAzKSBpcyAxNTEhXG4gIH07XG59LFxuICAgIHNuYXAgPSBmdW5jdGlvbiBzbmFwKHNuYXBUbywgdmFsdWUpIHtcbiAgdmFyIGlzQXJyYXkgPSBfaXNBcnJheShzbmFwVG8pLFxuICAgICAgcmFkaXVzLFxuICAgICAgaXMyRDtcblxuICBpZiAoIWlzQXJyYXkgJiYgX2lzT2JqZWN0KHNuYXBUbykpIHtcbiAgICByYWRpdXMgPSBpc0FycmF5ID0gc25hcFRvLnJhZGl1cyB8fCBfYmlnTnVtO1xuXG4gICAgaWYgKHNuYXBUby52YWx1ZXMpIHtcbiAgICAgIHNuYXBUbyA9IHRvQXJyYXkoc25hcFRvLnZhbHVlcyk7XG5cbiAgICAgIGlmIChpczJEID0gIV9pc051bWJlcihzbmFwVG9bMF0pKSB7XG4gICAgICAgIHJhZGl1cyAqPSByYWRpdXM7IC8vcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHNvIHdlIGRvbid0IGhhdmUgdG8gTWF0aC5zcXJ0KCkgaW4gdGhlIGxvb3AuXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNuYXBUbyA9IF9yb3VuZE1vZGlmaWVyKHNuYXBUby5pbmNyZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsICFpc0FycmF5ID8gX3JvdW5kTW9kaWZpZXIoc25hcFRvKSA6IF9pc0Z1bmN0aW9uKHNuYXBUbykgPyBmdW5jdGlvbiAocmF3KSB7XG4gICAgaXMyRCA9IHNuYXBUbyhyYXcpO1xuICAgIHJldHVybiBNYXRoLmFicyhpczJEIC0gcmF3KSA8PSByYWRpdXMgPyBpczJEIDogcmF3O1xuICB9IDogZnVuY3Rpb24gKHJhdykge1xuICAgIHZhciB4ID0gcGFyc2VGbG9hdChpczJEID8gcmF3LnggOiByYXcpLFxuICAgICAgICB5ID0gcGFyc2VGbG9hdChpczJEID8gcmF3LnkgOiAwKSxcbiAgICAgICAgbWluID0gX2JpZ051bSxcbiAgICAgICAgY2xvc2VzdCA9IDAsXG4gICAgICAgIGkgPSBzbmFwVG8ubGVuZ3RoLFxuICAgICAgICBkeCxcbiAgICAgICAgZHk7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAoaXMyRCkge1xuICAgICAgICBkeCA9IHNuYXBUb1tpXS54IC0geDtcbiAgICAgICAgZHkgPSBzbmFwVG9baV0ueSAtIHk7XG4gICAgICAgIGR4ID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkeCA9IE1hdGguYWJzKHNuYXBUb1tpXSAtIHgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZHggPCBtaW4pIHtcbiAgICAgICAgbWluID0gZHg7XG4gICAgICAgIGNsb3Nlc3QgPSBpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNsb3Nlc3QgPSAhcmFkaXVzIHx8IG1pbiA8PSByYWRpdXMgPyBzbmFwVG9bY2xvc2VzdF0gOiByYXc7XG4gICAgcmV0dXJuIGlzMkQgfHwgY2xvc2VzdCA9PT0gcmF3IHx8IF9pc051bWJlcihyYXcpID8gY2xvc2VzdCA6IGNsb3Nlc3QgKyBnZXRVbml0KHJhdyk7XG4gIH0pO1xufSxcbiAgICByYW5kb20gPSBmdW5jdGlvbiByYW5kb20obWluLCBtYXgsIHJvdW5kaW5nSW5jcmVtZW50LCByZXR1cm5GdW5jdGlvbikge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKF9pc0FycmF5KG1pbikgPyAhbWF4IDogcm91bmRpbmdJbmNyZW1lbnQgPT09IHRydWUgPyAhIShyb3VuZGluZ0luY3JlbWVudCA9IDApIDogIXJldHVybkZ1bmN0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBtaW5bfn4oTWF0aC5yYW5kb20oKSAqIG1pbi5sZW5ndGgpXSA6IChyb3VuZGluZ0luY3JlbWVudCA9IHJvdW5kaW5nSW5jcmVtZW50IHx8IDFlLTUpICYmIChyZXR1cm5GdW5jdGlvbiA9IHJvdW5kaW5nSW5jcmVtZW50IDwgMSA/IE1hdGgucG93KDEwLCAocm91bmRpbmdJbmNyZW1lbnQgKyBcIlwiKS5sZW5ndGggLSAyKSA6IDEpICYmIE1hdGguZmxvb3IoTWF0aC5yb3VuZCgobWluIC0gcm91bmRpbmdJbmNyZW1lbnQgLyAyICsgTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyByb3VuZGluZ0luY3JlbWVudCAqIC45OSkpIC8gcm91bmRpbmdJbmNyZW1lbnQpICogcm91bmRpbmdJbmNyZW1lbnQgKiByZXR1cm5GdW5jdGlvbikgLyByZXR1cm5GdW5jdGlvbjtcbiAgfSk7XG59LFxuICAgIHBpcGUgPSBmdW5jdGlvbiBwaXBlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3Rpb25zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmN0aW9uc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25zLnJlZHVjZShmdW5jdGlvbiAodiwgZikge1xuICAgICAgcmV0dXJuIGYodik7XG4gICAgfSwgdmFsdWUpO1xuICB9O1xufSxcbiAgICB1bml0aXplID0gZnVuY3Rpb24gdW5pdGl6ZShmdW5jLCB1bml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyhwYXJzZUZsb2F0KHZhbHVlKSkgKyAodW5pdCB8fCBnZXRVbml0KHZhbHVlKSk7XG4gIH07XG59LFxuICAgIG5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZShtaW4sIG1heCwgdmFsdWUpIHtcbiAgcmV0dXJuIG1hcFJhbmdlKG1pbiwgbWF4LCAwLCAxLCB2YWx1ZSk7XG59LFxuICAgIF93cmFwQXJyYXkgPSBmdW5jdGlvbiBfd3JhcEFycmF5KGEsIHdyYXBwZXIsIHZhbHVlKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHJldHVybiBhW35+d3JhcHBlcihpbmRleCldO1xuICB9KTtcbn0sXG4gICAgd3JhcCA9IGZ1bmN0aW9uIHdyYXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIC8vIE5PVEU6IHdyYXAoKSBDQU5OT1QgYmUgYW4gYXJyb3cgZnVuY3Rpb24hIEEgdmVyeSBvZGQgY29tcGlsaW5nIGJ1ZyBjYXVzZXMgcHJvYmxlbXMgKHVucmVsYXRlZCB0byBHU0FQKS5cbiAgdmFyIHJhbmdlID0gbWF4IC0gbWluO1xuICByZXR1cm4gX2lzQXJyYXkobWluKSA/IF93cmFwQXJyYXkobWluLCB3cmFwKDAsIG1pbi5sZW5ndGgpLCBtYXgpIDogX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gKHJhbmdlICsgKHZhbHVlIC0gbWluKSAlIHJhbmdlKSAlIHJhbmdlICsgbWluO1xuICB9KTtcbn0sXG4gICAgd3JhcFlveW8gPSBmdW5jdGlvbiB3cmFwWW95byhtaW4sIG1heCwgdmFsdWUpIHtcbiAgdmFyIHJhbmdlID0gbWF4IC0gbWluLFxuICAgICAgdG90YWwgPSByYW5nZSAqIDI7XG4gIHJldHVybiBfaXNBcnJheShtaW4pID8gX3dyYXBBcnJheShtaW4sIHdyYXBZb3lvKDAsIG1pbi5sZW5ndGggLSAxKSwgbWF4KSA6IF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFsdWUgPSAodG90YWwgKyAodmFsdWUgLSBtaW4pICUgdG90YWwpICUgdG90YWwgfHwgMDtcbiAgICByZXR1cm4gbWluICsgKHZhbHVlID4gcmFuZ2UgPyB0b3RhbCAtIHZhbHVlIDogdmFsdWUpO1xuICB9KTtcbn0sXG4gICAgX3JlcGxhY2VSYW5kb20gPSBmdW5jdGlvbiBfcmVwbGFjZVJhbmRvbSh2YWx1ZSkge1xuICAvL3JlcGxhY2VzIGFsbCBvY2N1cnJlbmNlcyBvZiByYW5kb20oLi4uKSBpbiBhIHN0cmluZyB3aXRoIHRoZSBjYWxjdWxhdGVkIHJhbmRvbSB2YWx1ZS4gY2FuIGJlIGEgcmFuZ2UgbGlrZSByYW5kb20oLTEwMCwgMTAwLCA1KSBvciBhbiBhcnJheSBsaWtlIHJhbmRvbShbMCwgMTAwLCA1MDBdKVxuICB2YXIgcHJldiA9IDAsXG4gICAgICBzID0gXCJcIixcbiAgICAgIGksXG4gICAgICBudW1zLFxuICAgICAgZW5kLFxuICAgICAgaXNBcnJheTtcblxuICB3aGlsZSAofihpID0gdmFsdWUuaW5kZXhPZihcInJhbmRvbShcIiwgcHJldikpKSB7XG4gICAgZW5kID0gdmFsdWUuaW5kZXhPZihcIilcIiwgaSk7XG4gICAgaXNBcnJheSA9IHZhbHVlLmNoYXJBdChpICsgNykgPT09IFwiW1wiO1xuICAgIG51bXMgPSB2YWx1ZS5zdWJzdHIoaSArIDcsIGVuZCAtIGkgLSA3KS5tYXRjaChpc0FycmF5ID8gX2RlbGltaXRlZFZhbHVlRXhwIDogX3N0cmljdE51bUV4cCk7XG4gICAgcyArPSB2YWx1ZS5zdWJzdHIocHJldiwgaSAtIHByZXYpICsgcmFuZG9tKGlzQXJyYXkgPyBudW1zIDogK251bXNbMF0sIGlzQXJyYXkgPyAwIDogK251bXNbMV0sICtudW1zWzJdIHx8IDFlLTUpO1xuICAgIHByZXYgPSBlbmQgKyAxO1xuICB9XG5cbiAgcmV0dXJuIHMgKyB2YWx1ZS5zdWJzdHIocHJldiwgdmFsdWUubGVuZ3RoIC0gcHJldik7XG59LFxuICAgIG1hcFJhbmdlID0gZnVuY3Rpb24gbWFwUmFuZ2UoaW5NaW4sIGluTWF4LCBvdXRNaW4sIG91dE1heCwgdmFsdWUpIHtcbiAgdmFyIGluUmFuZ2UgPSBpbk1heCAtIGluTWluLFxuICAgICAgb3V0UmFuZ2UgPSBvdXRNYXggLSBvdXRNaW47XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBvdXRNaW4gKyAoKHZhbHVlIC0gaW5NaW4pIC8gaW5SYW5nZSAqIG91dFJhbmdlIHx8IDApO1xuICB9KTtcbn0sXG4gICAgaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiBpbnRlcnBvbGF0ZShzdGFydCwgZW5kLCBwcm9ncmVzcywgbXV0YXRlKSB7XG4gIHZhciBmdW5jID0gaXNOYU4oc3RhcnQgKyBlbmQpID8gMCA6IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuICgxIC0gcCkgKiBzdGFydCArIHAgKiBlbmQ7XG4gIH07XG5cbiAgaWYgKCFmdW5jKSB7XG4gICAgdmFyIGlzU3RyaW5nID0gX2lzU3RyaW5nKHN0YXJ0KSxcbiAgICAgICAgbWFzdGVyID0ge30sXG4gICAgICAgIHAsXG4gICAgICAgIGksXG4gICAgICAgIGludGVycG9sYXRvcnMsXG4gICAgICAgIGwsXG4gICAgICAgIGlsO1xuXG4gICAgcHJvZ3Jlc3MgPT09IHRydWUgJiYgKG11dGF0ZSA9IDEpICYmIChwcm9ncmVzcyA9IG51bGwpO1xuXG4gICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICBzdGFydCA9IHtcbiAgICAgICAgcDogc3RhcnRcbiAgICAgIH07XG4gICAgICBlbmQgPSB7XG4gICAgICAgIHA6IGVuZFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKF9pc0FycmF5KHN0YXJ0KSAmJiAhX2lzQXJyYXkoZW5kKSkge1xuICAgICAgaW50ZXJwb2xhdG9ycyA9IFtdO1xuICAgICAgbCA9IHN0YXJ0Lmxlbmd0aDtcbiAgICAgIGlsID0gbCAtIDI7XG5cbiAgICAgIGZvciAoaSA9IDE7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaW50ZXJwb2xhdG9ycy5wdXNoKGludGVycG9sYXRlKHN0YXJ0W2kgLSAxXSwgc3RhcnRbaV0pKTsgLy9idWlsZCB0aGUgaW50ZXJwb2xhdG9ycyB1cCBmcm9udCBhcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiBzbyB0aGF0IHdoZW4gdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCBtYW55IHRpbWVzLCBpdCBjYW4ganVzdCByZXVzZSB0aGVtLlxuICAgICAgfVxuXG4gICAgICBsLS07XG5cbiAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHApIHtcbiAgICAgICAgcCAqPSBsO1xuICAgICAgICB2YXIgaSA9IE1hdGgubWluKGlsLCB+fnApO1xuICAgICAgICByZXR1cm4gaW50ZXJwb2xhdG9yc1tpXShwIC0gaSk7XG4gICAgICB9O1xuXG4gICAgICBwcm9ncmVzcyA9IGVuZDtcbiAgICB9IGVsc2UgaWYgKCFtdXRhdGUpIHtcbiAgICAgIHN0YXJ0ID0gX21lcmdlKF9pc0FycmF5KHN0YXJ0KSA/IFtdIDoge30sIHN0YXJ0KTtcbiAgICB9XG5cbiAgICBpZiAoIWludGVycG9sYXRvcnMpIHtcbiAgICAgIGZvciAocCBpbiBlbmQpIHtcbiAgICAgICAgX2FkZFByb3BUd2Vlbi5jYWxsKG1hc3Rlciwgc3RhcnQsIHAsIFwiZ2V0XCIsIGVuZFtwXSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHApIHtcbiAgICAgICAgcmV0dXJuIF9yZW5kZXJQcm9wVHdlZW5zKHAsIG1hc3RlcikgfHwgKGlzU3RyaW5nID8gc3RhcnQucCA6IHN0YXJ0KTtcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybihwcm9ncmVzcywgZnVuYyk7XG59LFxuICAgIF9nZXRMYWJlbEluRGlyZWN0aW9uID0gZnVuY3Rpb24gX2dldExhYmVsSW5EaXJlY3Rpb24odGltZWxpbmUsIGZyb21UaW1lLCBiYWNrd2FyZCkge1xuICAvL3VzZWQgZm9yIG5leHRMYWJlbCgpIGFuZCBwcmV2aW91c0xhYmVsKClcbiAgdmFyIGxhYmVscyA9IHRpbWVsaW5lLmxhYmVscyxcbiAgICAgIG1pbiA9IF9iaWdOdW0sXG4gICAgICBwLFxuICAgICAgZGlzdGFuY2UsXG4gICAgICBsYWJlbDtcblxuICBmb3IgKHAgaW4gbGFiZWxzKSB7XG4gICAgZGlzdGFuY2UgPSBsYWJlbHNbcF0gLSBmcm9tVGltZTtcblxuICAgIGlmIChkaXN0YW5jZSA8IDAgPT09ICEhYmFja3dhcmQgJiYgZGlzdGFuY2UgJiYgbWluID4gKGRpc3RhbmNlID0gTWF0aC5hYnMoZGlzdGFuY2UpKSkge1xuICAgICAgbGFiZWwgPSBwO1xuICAgICAgbWluID0gZGlzdGFuY2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxhYmVsO1xufSxcbiAgICBfY2FsbGJhY2sgPSBmdW5jdGlvbiBfY2FsbGJhY2soYW5pbWF0aW9uLCB0eXBlLCBleGVjdXRlTGF6eUZpcnN0KSB7XG4gIHZhciB2ID0gYW5pbWF0aW9uLnZhcnMsXG4gICAgICBjYWxsYmFjayA9IHZbdHlwZV0sXG4gICAgICBwcmV2Q29udGV4dCA9IF9jb250ZXh0LFxuICAgICAgY29udGV4dCA9IGFuaW1hdGlvbi5fY3R4LFxuICAgICAgcGFyYW1zLFxuICAgICAgc2NvcGUsXG4gICAgICByZXN1bHQ7XG5cbiAgaWYgKCFjYWxsYmFjaykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHBhcmFtcyA9IHZbdHlwZSArIFwiUGFyYW1zXCJdO1xuICBzY29wZSA9IHYuY2FsbGJhY2tTY29wZSB8fCBhbmltYXRpb247XG4gIGV4ZWN1dGVMYXp5Rmlyc3QgJiYgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7IC8vaW4gY2FzZSByZW5kZXJpbmcgY2F1c2VkIGFueSB0d2VlbnMgdG8gbGF6eS1pbml0LCB3ZSBzaG91bGQgcmVuZGVyIHRoZW0gYmVjYXVzZSB0eXBpY2FsbHkgd2hlbiBhIHRpbWVsaW5lIGZpbmlzaGVzLCB1c2VycyBleHBlY3QgdGhpbmdzIHRvIGhhdmUgcmVuZGVyZWQgZnVsbHkuIEltYWdpbmUgYW4gb25VcGRhdGUgb24gYSB0aW1lbGluZSB0aGF0IHJlcG9ydHMvY2hlY2tzIHR3ZWVuZWQgdmFsdWVzLlxuXG4gIGNvbnRleHQgJiYgKF9jb250ZXh0ID0gY29udGV4dCk7XG4gIHJlc3VsdCA9IHBhcmFtcyA/IGNhbGxiYWNrLmFwcGx5KHNjb3BlLCBwYXJhbXMpIDogY2FsbGJhY2suY2FsbChzY29wZSk7XG4gIF9jb250ZXh0ID0gcHJldkNvbnRleHQ7XG4gIHJldHVybiByZXN1bHQ7XG59LFxuICAgIF9pbnRlcnJ1cHQgPSBmdW5jdGlvbiBfaW50ZXJydXB0KGFuaW1hdGlvbikge1xuICBfcmVtb3ZlRnJvbVBhcmVudChhbmltYXRpb24pO1xuXG4gIGFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyICYmIGFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyLmtpbGwoISFfcmV2ZXJ0aW5nKTtcbiAgYW5pbWF0aW9uLnByb2dyZXNzKCkgPCAxICYmIF9jYWxsYmFjayhhbmltYXRpb24sIFwib25JbnRlcnJ1cHRcIik7XG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9xdWlja1R3ZWVuLFxuICAgIF9yZWdpc3RlclBsdWdpblF1ZXVlID0gW10sXG4gICAgX2NyZWF0ZVBsdWdpbiA9IGZ1bmN0aW9uIF9jcmVhdGVQbHVnaW4oY29uZmlnKSB7XG4gIGlmICghY29uZmlnKSByZXR1cm47XG4gIGNvbmZpZyA9ICFjb25maWcubmFtZSAmJiBjb25maWdbXCJkZWZhdWx0XCJdIHx8IGNvbmZpZzsgLy8gVU1EIHBhY2thZ2luZyB3cmFwcyB0aGluZ3Mgb2RkbHksIHNvIGZvciBleGFtcGxlIE1vdGlvblBhdGhIZWxwZXIgYmVjb21lcyB7TW90aW9uUGF0aEhlbHBlcjpNb3Rpb25QYXRoSGVscGVyLCBkZWZhdWx0Ok1vdGlvblBhdGhIZWxwZXJ9LlxuXG4gIGlmIChfd2luZG93RXhpc3RzKCkgfHwgY29uZmlnLmhlYWRsZXNzKSB7XG4gICAgLy8gZWRnZSBjYXNlOiBzb21lIGJ1aWxkIHRvb2xzIG1heSBwYXNzIGluIGEgbnVsbC91bmRlZmluZWQgdmFsdWVcbiAgICB2YXIgbmFtZSA9IGNvbmZpZy5uYW1lLFxuICAgICAgICBpc0Z1bmMgPSBfaXNGdW5jdGlvbihjb25maWcpLFxuICAgICAgICBQbHVnaW4gPSBuYW1lICYmICFpc0Z1bmMgJiYgY29uZmlnLmluaXQgPyBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLl9wcm9wcyA9IFtdO1xuICAgIH0gOiBjb25maWcsXG4gICAgICAgIC8vaW4gY2FzZSBzb21lb25lIHBhc3NlcyBpbiBhbiBvYmplY3QgdGhhdCdzIG5vdCBhIHBsdWdpbiwgbGlrZSBDdXN0b21FYXNlXG4gICAgaW5zdGFuY2VEZWZhdWx0cyA9IHtcbiAgICAgIGluaXQ6IF9lbXB0eUZ1bmMsXG4gICAgICByZW5kZXI6IF9yZW5kZXJQcm9wVHdlZW5zLFxuICAgICAgYWRkOiBfYWRkUHJvcFR3ZWVuLFxuICAgICAga2lsbDogX2tpbGxQcm9wVHdlZW5zT2YsXG4gICAgICBtb2RpZmllcjogX2FkZFBsdWdpbk1vZGlmaWVyLFxuICAgICAgcmF3VmFyczogMFxuICAgIH0sXG4gICAgICAgIHN0YXRpY3MgPSB7XG4gICAgICB0YXJnZXRUZXN0OiAwLFxuICAgICAgZ2V0OiAwLFxuICAgICAgZ2V0U2V0dGVyOiBfZ2V0U2V0dGVyLFxuICAgICAgYWxpYXNlczoge30sXG4gICAgICByZWdpc3RlcjogMFxuICAgIH07XG5cbiAgICBfd2FrZSgpO1xuXG4gICAgaWYgKGNvbmZpZyAhPT0gUGx1Z2luKSB7XG4gICAgICBpZiAoX3BsdWdpbnNbbmFtZV0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfc2V0RGVmYXVsdHMoUGx1Z2luLCBfc2V0RGVmYXVsdHMoX2NvcHlFeGNsdWRpbmcoY29uZmlnLCBpbnN0YW5jZURlZmF1bHRzKSwgc3RhdGljcykpOyAvL3N0YXRpYyBtZXRob2RzXG5cblxuICAgICAgX21lcmdlKFBsdWdpbi5wcm90b3R5cGUsIF9tZXJnZShpbnN0YW5jZURlZmF1bHRzLCBfY29weUV4Y2x1ZGluZyhjb25maWcsIHN0YXRpY3MpKSk7IC8vaW5zdGFuY2UgbWV0aG9kc1xuXG5cbiAgICAgIF9wbHVnaW5zW1BsdWdpbi5wcm9wID0gbmFtZV0gPSBQbHVnaW47XG5cbiAgICAgIGlmIChjb25maWcudGFyZ2V0VGVzdCkge1xuICAgICAgICBfaGFybmVzc1BsdWdpbnMucHVzaChQbHVnaW4pO1xuXG4gICAgICAgIF9yZXNlcnZlZFByb3BzW25hbWVdID0gMTtcbiAgICAgIH1cblxuICAgICAgbmFtZSA9IChuYW1lID09PSBcImNzc1wiID8gXCJDU1NcIiA6IG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnN1YnN0cigxKSkgKyBcIlBsdWdpblwiOyAvL2ZvciB0aGUgZ2xvYmFsIG5hbWUuIFwibW90aW9uUGF0aFwiIHNob3VsZCBiZWNvbWUgTW90aW9uUGF0aFBsdWdpblxuICAgIH1cblxuICAgIF9hZGRHbG9iYWwobmFtZSwgUGx1Z2luKTtcblxuICAgIGNvbmZpZy5yZWdpc3RlciAmJiBjb25maWcucmVnaXN0ZXIoZ3NhcCwgUGx1Z2luLCBQcm9wVHdlZW4pO1xuICB9IGVsc2Uge1xuICAgIF9yZWdpc3RlclBsdWdpblF1ZXVlLnB1c2goY29uZmlnKTtcbiAgfVxufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDT0xPUlNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl8yNTUgPSAyNTUsXG4gICAgX2NvbG9yTG9va3VwID0ge1xuICBhcXVhOiBbMCwgXzI1NSwgXzI1NV0sXG4gIGxpbWU6IFswLCBfMjU1LCAwXSxcbiAgc2lsdmVyOiBbMTkyLCAxOTIsIDE5Ml0sXG4gIGJsYWNrOiBbMCwgMCwgMF0sXG4gIG1hcm9vbjogWzEyOCwgMCwgMF0sXG4gIHRlYWw6IFswLCAxMjgsIDEyOF0sXG4gIGJsdWU6IFswLCAwLCBfMjU1XSxcbiAgbmF2eTogWzAsIDAsIDEyOF0sXG4gIHdoaXRlOiBbXzI1NSwgXzI1NSwgXzI1NV0sXG4gIG9saXZlOiBbMTI4LCAxMjgsIDBdLFxuICB5ZWxsb3c6IFtfMjU1LCBfMjU1LCAwXSxcbiAgb3JhbmdlOiBbXzI1NSwgMTY1LCAwXSxcbiAgZ3JheTogWzEyOCwgMTI4LCAxMjhdLFxuICBwdXJwbGU6IFsxMjgsIDAsIDEyOF0sXG4gIGdyZWVuOiBbMCwgMTI4LCAwXSxcbiAgcmVkOiBbXzI1NSwgMCwgMF0sXG4gIHBpbms6IFtfMjU1LCAxOTIsIDIwM10sXG4gIGN5YW46IFswLCBfMjU1LCBfMjU1XSxcbiAgdHJhbnNwYXJlbnQ6IFtfMjU1LCBfMjU1LCBfMjU1LCAwXVxufSxcbiAgICAvLyBwb3NzaWJsZSBmdXR1cmUgaWRlYSB0byByZXBsYWNlIHRoZSBoYXJkLWNvZGVkIGNvbG9yIG5hbWUgdmFsdWVzIC0gcHV0IHRoaXMgaW4gdGhlIHRpY2tlci53YWtlKCkgd2hlcmUgd2Ugc2V0IHRoZSBfZG9jOlxuLy8gbGV0IGN0eCA9IF9kb2MuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKS5nZXRDb250ZXh0KFwiMmRcIik7XG4vLyBfZm9yRWFjaE5hbWUoXCJhcXVhLGxpbWUsc2lsdmVyLGJsYWNrLG1hcm9vbix0ZWFsLGJsdWUsbmF2eSx3aGl0ZSxvbGl2ZSx5ZWxsb3csb3JhbmdlLGdyYXkscHVycGxlLGdyZWVuLHJlZCxwaW5rLGN5YW5cIiwgY29sb3IgPT4ge2N0eC5maWxsU3R5bGUgPSBjb2xvcjsgX2NvbG9yTG9va3VwW2NvbG9yXSA9IHNwbGl0Q29sb3IoY3R4LmZpbGxTdHlsZSl9KTtcbl9odWUgPSBmdW5jdGlvbiBfaHVlKGgsIG0xLCBtMikge1xuICBoICs9IGggPCAwID8gMSA6IGggPiAxID8gLTEgOiAwO1xuICByZXR1cm4gKGggKiA2IDwgMSA/IG0xICsgKG0yIC0gbTEpICogaCAqIDYgOiBoIDwgLjUgPyBtMiA6IGggKiAzIDwgMiA/IG0xICsgKG0yIC0gbTEpICogKDIgLyAzIC0gaCkgKiA2IDogbTEpICogXzI1NSArIC41IHwgMDtcbn0sXG4gICAgc3BsaXRDb2xvciA9IGZ1bmN0aW9uIHNwbGl0Q29sb3IodiwgdG9IU0wsIGZvcmNlQWxwaGEpIHtcbiAgdmFyIGEgPSAhdiA/IF9jb2xvckxvb2t1cC5ibGFjayA6IF9pc051bWJlcih2KSA/IFt2ID4+IDE2LCB2ID4+IDggJiBfMjU1LCB2ICYgXzI1NV0gOiAwLFxuICAgICAgcixcbiAgICAgIGcsXG4gICAgICBiLFxuICAgICAgaCxcbiAgICAgIHMsXG4gICAgICBsLFxuICAgICAgbWF4LFxuICAgICAgbWluLFxuICAgICAgZCxcbiAgICAgIHdhc0hTTDtcblxuICBpZiAoIWEpIHtcbiAgICBpZiAodi5zdWJzdHIoLTEpID09PSBcIixcIikge1xuICAgICAgLy9zb21ldGltZXMgYSB0cmFpbGluZyBjb21tYSBpcyBpbmNsdWRlZCBhbmQgd2Ugc2hvdWxkIGNob3AgaXQgb2ZmICh0eXBpY2FsbHkgZnJvbSBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHZhbHVlcyBsaWtlIGEgdGV4dFNoYWRvdzpcIjJweCAycHggMnB4IGJsdWUsIDVweCA1cHggNXB4IHJnYigyNTUsMCwwKVwiIC0gaW4gdGhpcyBleGFtcGxlIFwiYmx1ZSxcIiBoYXMgYSB0cmFpbGluZyBjb21tYS4gV2UgY291bGQgc3RyaXAgaXQgb3V0IGluc2lkZSBwYXJzZUNvbXBsZXgoKSBidXQgd2UnZCBuZWVkIHRvIGRvIGl0IHRvIHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyB2YWx1ZXMgcGx1cyBpdCB3b3VsZG4ndCBwcm92aWRlIHByb3RlY3Rpb24gZnJvbSBvdGhlciBwb3RlbnRpYWwgc2NlbmFyaW9zIGxpa2UgaWYgdGhlIHVzZXIgcGFzc2VzIGluIGEgc2ltaWxhciB2YWx1ZS5cbiAgICAgIHYgPSB2LnN1YnN0cigwLCB2Lmxlbmd0aCAtIDEpO1xuICAgIH1cblxuICAgIGlmIChfY29sb3JMb29rdXBbdl0pIHtcbiAgICAgIGEgPSBfY29sb3JMb29rdXBbdl07XG4gICAgfSBlbHNlIGlmICh2LmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcbiAgICAgIGlmICh2Lmxlbmd0aCA8IDYpIHtcbiAgICAgICAgLy9mb3Igc2hvcnRoYW5kIGxpa2UgIzlGMCBvciAjOUYwRiAoY291bGQgaGF2ZSBhbHBoYSlcbiAgICAgICAgciA9IHYuY2hhckF0KDEpO1xuICAgICAgICBnID0gdi5jaGFyQXQoMik7XG4gICAgICAgIGIgPSB2LmNoYXJBdCgzKTtcbiAgICAgICAgdiA9IFwiI1wiICsgciArIHIgKyBnICsgZyArIGIgKyBiICsgKHYubGVuZ3RoID09PSA1ID8gdi5jaGFyQXQoNCkgKyB2LmNoYXJBdCg0KSA6IFwiXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAodi5sZW5ndGggPT09IDkpIHtcbiAgICAgICAgLy8gaGV4IHdpdGggYWxwaGEsIGxpa2UgI2ZkNWU1M2ZmXG4gICAgICAgIGEgPSBwYXJzZUludCh2LnN1YnN0cigxLCA2KSwgMTYpO1xuICAgICAgICByZXR1cm4gW2EgPj4gMTYsIGEgPj4gOCAmIF8yNTUsIGEgJiBfMjU1LCBwYXJzZUludCh2LnN1YnN0cig3KSwgMTYpIC8gMjU1XTtcbiAgICAgIH1cblxuICAgICAgdiA9IHBhcnNlSW50KHYuc3Vic3RyKDEpLCAxNik7XG4gICAgICBhID0gW3YgPj4gMTYsIHYgPj4gOCAmIF8yNTUsIHYgJiBfMjU1XTtcbiAgICB9IGVsc2UgaWYgKHYuc3Vic3RyKDAsIDMpID09PSBcImhzbFwiKSB7XG4gICAgICBhID0gd2FzSFNMID0gdi5tYXRjaChfc3RyaWN0TnVtRXhwKTtcblxuICAgICAgaWYgKCF0b0hTTCkge1xuICAgICAgICBoID0gK2FbMF0gJSAzNjAgLyAzNjA7XG4gICAgICAgIHMgPSArYVsxXSAvIDEwMDtcbiAgICAgICAgbCA9ICthWzJdIC8gMTAwO1xuICAgICAgICBnID0gbCA8PSAuNSA/IGwgKiAocyArIDEpIDogbCArIHMgLSBsICogcztcbiAgICAgICAgciA9IGwgKiAyIC0gZztcbiAgICAgICAgYS5sZW5ndGggPiAzICYmIChhWzNdICo9IDEpOyAvL2Nhc3QgYXMgbnVtYmVyXG5cbiAgICAgICAgYVswXSA9IF9odWUoaCArIDEgLyAzLCByLCBnKTtcbiAgICAgICAgYVsxXSA9IF9odWUoaCwgciwgZyk7XG4gICAgICAgIGFbMl0gPSBfaHVlKGggLSAxIC8gMywgciwgZyk7XG4gICAgICB9IGVsc2UgaWYgKH52LmluZGV4T2YoXCI9XCIpKSB7XG4gICAgICAgIC8vaWYgcmVsYXRpdmUgdmFsdWVzIGFyZSBmb3VuZCwganVzdCByZXR1cm4gdGhlIHJhdyBzdHJpbmdzIHdpdGggdGhlIHJlbGF0aXZlIHByZWZpeGVzIGluIHBsYWNlLlxuICAgICAgICBhID0gdi5tYXRjaChfbnVtRXhwKTtcbiAgICAgICAgZm9yY2VBbHBoYSAmJiBhLmxlbmd0aCA8IDQgJiYgKGFbM10gPSAxKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSB2Lm1hdGNoKF9zdHJpY3ROdW1FeHApIHx8IF9jb2xvckxvb2t1cC50cmFuc3BhcmVudDtcbiAgICB9XG5cbiAgICBhID0gYS5tYXAoTnVtYmVyKTtcbiAgfVxuXG4gIGlmICh0b0hTTCAmJiAhd2FzSFNMKSB7XG4gICAgciA9IGFbMF0gLyBfMjU1O1xuICAgIGcgPSBhWzFdIC8gXzI1NTtcbiAgICBiID0gYVsyXSAvIF8yNTU7XG4gICAgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgbCA9IChtYXggKyBtaW4pIC8gMjtcblxuICAgIGlmIChtYXggPT09IG1pbikge1xuICAgICAgaCA9IHMgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBkID0gbWF4IC0gbWluO1xuICAgICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuICAgICAgaCA9IG1heCA9PT0gciA/IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApIDogbWF4ID09PSBnID8gKGIgLSByKSAvIGQgKyAyIDogKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgaCAqPSA2MDtcbiAgICB9XG5cbiAgICBhWzBdID0gfn4oaCArIC41KTtcbiAgICBhWzFdID0gfn4ocyAqIDEwMCArIC41KTtcbiAgICBhWzJdID0gfn4obCAqIDEwMCArIC41KTtcbiAgfVxuXG4gIGZvcmNlQWxwaGEgJiYgYS5sZW5ndGggPCA0ICYmIChhWzNdID0gMSk7XG4gIHJldHVybiBhO1xufSxcbiAgICBfY29sb3JPcmRlckRhdGEgPSBmdW5jdGlvbiBfY29sb3JPcmRlckRhdGEodikge1xuICAvLyBzdHJpcHMgb3V0IHRoZSBjb2xvcnMgZnJvbSB0aGUgc3RyaW5nLCBmaW5kcyBhbGwgdGhlIG51bWVyaWMgc2xvdHMgKHdpdGggdW5pdHMpIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRob3NlLiBUaGUgQXJyYXkgYWxzbyBoYXMgYSBcImNcIiBwcm9wZXJ0eSB3aGljaCBpcyBhbiBBcnJheSBvZiB0aGUgaW5kZXggdmFsdWVzIHdoZXJlIHRoZSBjb2xvcnMgYmVsb25nLiBUaGlzIGlzIHRvIGhlbHAgd29yayBhcm91bmQgaXNzdWVzIHdoZXJlIHRoZXJlJ3MgYSBtaXMtbWF0Y2hlZCBvcmRlciBvZiBjb2xvci9udW1lcmljIGRhdGEgbGlrZSBkcm9wLXNoYWRvdygjZjAwIDBweCAxcHggMnB4KSBhbmQgZHJvcC1zaGFkb3coMHggMXB4IDJweCAjZjAwKS4gVGhpcyBpcyBiYXNpY2FsbHkgYSBoZWxwZXIgZnVuY3Rpb24gdXNlZCBpbiBfZm9ybWF0Q29sb3JzKClcbiAgdmFyIHZhbHVlcyA9IFtdLFxuICAgICAgYyA9IFtdLFxuICAgICAgaSA9IC0xO1xuICB2LnNwbGl0KF9jb2xvckV4cCkuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgIHZhciBhID0gdi5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuICAgIHZhbHVlcy5wdXNoLmFwcGx5KHZhbHVlcywgYSk7XG4gICAgYy5wdXNoKGkgKz0gYS5sZW5ndGggKyAxKTtcbiAgfSk7XG4gIHZhbHVlcy5jID0gYztcbiAgcmV0dXJuIHZhbHVlcztcbn0sXG4gICAgX2Zvcm1hdENvbG9ycyA9IGZ1bmN0aW9uIF9mb3JtYXRDb2xvcnMocywgdG9IU0wsIG9yZGVyTWF0Y2hEYXRhKSB7XG4gIHZhciByZXN1bHQgPSBcIlwiLFxuICAgICAgY29sb3JzID0gKHMgKyByZXN1bHQpLm1hdGNoKF9jb2xvckV4cCksXG4gICAgICB0eXBlID0gdG9IU0wgPyBcImhzbGEoXCIgOiBcInJnYmEoXCIsXG4gICAgICBpID0gMCxcbiAgICAgIGMsXG4gICAgICBzaGVsbCxcbiAgICAgIGQsXG4gICAgICBsO1xuXG4gIGlmICghY29sb3JzKSB7XG4gICAgcmV0dXJuIHM7XG4gIH1cblxuICBjb2xvcnMgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChjb2xvcikge1xuICAgIHJldHVybiAoY29sb3IgPSBzcGxpdENvbG9yKGNvbG9yLCB0b0hTTCwgMSkpICYmIHR5cGUgKyAodG9IU0wgPyBjb2xvclswXSArIFwiLFwiICsgY29sb3JbMV0gKyBcIiUsXCIgKyBjb2xvclsyXSArIFwiJSxcIiArIGNvbG9yWzNdIDogY29sb3Iuam9pbihcIixcIikpICsgXCIpXCI7XG4gIH0pO1xuXG4gIGlmIChvcmRlck1hdGNoRGF0YSkge1xuICAgIGQgPSBfY29sb3JPcmRlckRhdGEocyk7XG4gICAgYyA9IG9yZGVyTWF0Y2hEYXRhLmM7XG5cbiAgICBpZiAoYy5qb2luKHJlc3VsdCkgIT09IGQuYy5qb2luKHJlc3VsdCkpIHtcbiAgICAgIHNoZWxsID0gcy5yZXBsYWNlKF9jb2xvckV4cCwgXCIxXCIpLnNwbGl0KF9udW1XaXRoVW5pdEV4cCk7XG4gICAgICBsID0gc2hlbGwubGVuZ3RoIC0gMTtcblxuICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ICs9IHNoZWxsW2ldICsgKH5jLmluZGV4T2YoaSkgPyBjb2xvcnMuc2hpZnQoKSB8fCB0eXBlICsgXCIwLDAsMCwwKVwiIDogKGQubGVuZ3RoID8gZCA6IGNvbG9ycy5sZW5ndGggPyBjb2xvcnMgOiBvcmRlck1hdGNoRGF0YSkuc2hpZnQoKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzaGVsbCkge1xuICAgIHNoZWxsID0gcy5zcGxpdChfY29sb3JFeHApO1xuICAgIGwgPSBzaGVsbC5sZW5ndGggLSAxO1xuXG4gICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJlc3VsdCArPSBzaGVsbFtpXSArIGNvbG9yc1tpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICsgc2hlbGxbbF07XG59LFxuICAgIF9jb2xvckV4cCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHMgPSBcIig/OlxcXFxiKD86KD86cmdifHJnYmF8aHNsfGhzbGEpXFxcXCguKz9cXFxcKSl8XFxcXEIjKD86WzAtOWEtZl17Myw0fSl7MSwyfVxcXFxiXCIsXG4gICAgICAvL3dlJ2xsIGR5bmFtaWNhbGx5IGJ1aWxkIHRoaXMgUmVndWxhciBFeHByZXNzaW9uIHRvIGNvbnNlcnZlIGZpbGUgc2l6ZS4gQWZ0ZXIgYnVpbGRpbmcgaXQsIGl0IHdpbGwgYmUgYWJsZSB0byBmaW5kIHJnYigpLCByZ2JhKCksICMgKGhleGFkZWNpbWFsKSwgYW5kIG5hbWVkIGNvbG9yIHZhbHVlcyBsaWtlIHJlZCwgYmx1ZSwgcHVycGxlLCBldGMuLFxuICBwO1xuXG4gIGZvciAocCBpbiBfY29sb3JMb29rdXApIHtcbiAgICBzICs9IFwifFwiICsgcCArIFwiXFxcXGJcIjtcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVnRXhwKHMgKyBcIilcIiwgXCJnaVwiKTtcbn0oKSxcbiAgICBfaHNsRXhwID0gL2hzbFthXT9cXCgvLFxuICAgIF9jb2xvclN0cmluZ0ZpbHRlciA9IGZ1bmN0aW9uIF9jb2xvclN0cmluZ0ZpbHRlcihhKSB7XG4gIHZhciBjb21iaW5lZCA9IGEuam9pbihcIiBcIiksXG4gICAgICB0b0hTTDtcbiAgX2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7XG5cbiAgaWYgKF9jb2xvckV4cC50ZXN0KGNvbWJpbmVkKSkge1xuICAgIHRvSFNMID0gX2hzbEV4cC50ZXN0KGNvbWJpbmVkKTtcbiAgICBhWzFdID0gX2Zvcm1hdENvbG9ycyhhWzFdLCB0b0hTTCk7XG4gICAgYVswXSA9IF9mb3JtYXRDb2xvcnMoYVswXSwgdG9IU0wsIF9jb2xvck9yZGVyRGF0YShhWzFdKSk7IC8vIG1ha2Ugc3VyZSB0aGUgb3JkZXIgb2YgbnVtYmVycy9jb2xvcnMgbWF0Y2ggd2l0aCB0aGUgRU5EIHZhbHVlLlxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn0sXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVElDS0VSXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5fdGlja2VyQWN0aXZlLFxuICAgIF90aWNrZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfZ2V0VGltZSA9IERhdGUubm93LFxuICAgICAgX2xhZ1RocmVzaG9sZCA9IDUwMCxcbiAgICAgIF9hZGp1c3RlZExhZyA9IDMzLFxuICAgICAgX3N0YXJ0VGltZSA9IF9nZXRUaW1lKCksXG4gICAgICBfbGFzdFVwZGF0ZSA9IF9zdGFydFRpbWUsXG4gICAgICBfZ2FwID0gMTAwMCAvIDI0MCxcbiAgICAgIF9uZXh0VGltZSA9IF9nYXAsXG4gICAgICBfbGlzdGVuZXJzID0gW10sXG4gICAgICBfaWQsXG4gICAgICBfcmVxLFxuICAgICAgX3JhZixcbiAgICAgIF9zZWxmLFxuICAgICAgX2RlbHRhLFxuICAgICAgX2ksXG4gICAgICBfdGljayA9IGZ1bmN0aW9uIF90aWNrKHYpIHtcbiAgICB2YXIgZWxhcHNlZCA9IF9nZXRUaW1lKCkgLSBfbGFzdFVwZGF0ZSxcbiAgICAgICAgbWFudWFsID0gdiA9PT0gdHJ1ZSxcbiAgICAgICAgb3ZlcmxhcCxcbiAgICAgICAgZGlzcGF0Y2gsXG4gICAgICAgIHRpbWUsXG4gICAgICAgIGZyYW1lO1xuXG4gICAgKGVsYXBzZWQgPiBfbGFnVGhyZXNob2xkIHx8IGVsYXBzZWQgPCAwKSAmJiAoX3N0YXJ0VGltZSArPSBlbGFwc2VkIC0gX2FkanVzdGVkTGFnKTtcbiAgICBfbGFzdFVwZGF0ZSArPSBlbGFwc2VkO1xuICAgIHRpbWUgPSBfbGFzdFVwZGF0ZSAtIF9zdGFydFRpbWU7XG4gICAgb3ZlcmxhcCA9IHRpbWUgLSBfbmV4dFRpbWU7XG5cbiAgICBpZiAob3ZlcmxhcCA+IDAgfHwgbWFudWFsKSB7XG4gICAgICBmcmFtZSA9ICsrX3NlbGYuZnJhbWU7XG4gICAgICBfZGVsdGEgPSB0aW1lIC0gX3NlbGYudGltZSAqIDEwMDA7XG4gICAgICBfc2VsZi50aW1lID0gdGltZSA9IHRpbWUgLyAxMDAwO1xuICAgICAgX25leHRUaW1lICs9IG92ZXJsYXAgKyAob3ZlcmxhcCA+PSBfZ2FwID8gNCA6IF9nYXAgLSBvdmVybGFwKTtcbiAgICAgIGRpc3BhdGNoID0gMTtcbiAgICB9XG5cbiAgICBtYW51YWwgfHwgKF9pZCA9IF9yZXEoX3RpY2spKTsgLy9tYWtlIHN1cmUgdGhlIHJlcXVlc3QgaXMgbWFkZSBiZWZvcmUgd2UgZGlzcGF0Y2ggdGhlIFwidGlja1wiIGV2ZW50IHNvIHRoYXQgdGltaW5nIGlzIG1haW50YWluZWQuIE90aGVyd2lzZSwgaWYgcHJvY2Vzc2luZyB0aGUgXCJ0aWNrXCIgcmVxdWlyZXMgYSBidW5jaCBvZiB0aW1lIChsaWtlIDE1bXMpIGFuZCB3ZSdyZSB1c2luZyBhIHNldFRpbWVvdXQoKSB0aGF0J3MgYmFzZWQgb24gMTYuN21zLCBpdCdkIHRlY2huaWNhbGx5IHRha2UgMzEuN21zIGJldHdlZW4gZnJhbWVzIG90aGVyd2lzZS5cblxuICAgIGlmIChkaXNwYXRjaCkge1xuICAgICAgZm9yIChfaSA9IDA7IF9pIDwgX2xpc3RlbmVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgLy8gdXNlIF9pIGFuZCBjaGVjayBfbGlzdGVuZXJzLmxlbmd0aCBpbnN0ZWFkIG9mIGEgdmFyaWFibGUgYmVjYXVzZSBhIGxpc3RlbmVyIGNvdWxkIGdldCByZW1vdmVkIGR1cmluZyB0aGUgbG9vcCwgYW5kIGlmIHRoYXQgaGFwcGVucyB0byBhbiBlbGVtZW50IGxlc3MgdGhhbiB0aGUgY3VycmVudCBpbmRleCwgaXQnZCB0aHJvdyB0aGluZ3Mgb2ZmIGluIHRoZSBsb29wLlxuICAgICAgICBfbGlzdGVuZXJzW19pXSh0aW1lLCBfZGVsdGEsIGZyYW1lLCB2KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3NlbGYgPSB7XG4gICAgdGltZTogMCxcbiAgICBmcmFtZTogMCxcbiAgICB0aWNrOiBmdW5jdGlvbiB0aWNrKCkge1xuICAgICAgX3RpY2sodHJ1ZSk7XG4gICAgfSxcbiAgICBkZWx0YVJhdGlvOiBmdW5jdGlvbiBkZWx0YVJhdGlvKGZwcykge1xuICAgICAgcmV0dXJuIF9kZWx0YSAvICgxMDAwIC8gKGZwcyB8fCA2MCkpO1xuICAgIH0sXG4gICAgd2FrZTogZnVuY3Rpb24gd2FrZSgpIHtcbiAgICAgIGlmIChfY29yZVJlYWR5KSB7XG4gICAgICAgIGlmICghX2NvcmVJbml0dGVkICYmIF93aW5kb3dFeGlzdHMoKSkge1xuICAgICAgICAgIF93aW4gPSBfY29yZUluaXR0ZWQgPSB3aW5kb3c7XG4gICAgICAgICAgX2RvYyA9IF93aW4uZG9jdW1lbnQgfHwge307XG4gICAgICAgICAgX2dsb2JhbHMuZ3NhcCA9IGdzYXA7XG4gICAgICAgICAgKF93aW4uZ3NhcFZlcnNpb25zIHx8IChfd2luLmdzYXBWZXJzaW9ucyA9IFtdKSkucHVzaChnc2FwLnZlcnNpb24pO1xuXG4gICAgICAgICAgX2luc3RhbGwoX2luc3RhbGxTY29wZSB8fCBfd2luLkdyZWVuU29ja0dsb2JhbHMgfHwgIV93aW4uZ3NhcCAmJiBfd2luIHx8IHt9KTtcblxuICAgICAgICAgIF9yZWdpc3RlclBsdWdpblF1ZXVlLmZvckVhY2goX2NyZWF0ZVBsdWdpbik7XG4gICAgICAgIH1cblxuICAgICAgICBfcmFmID0gdHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgICAgIF9pZCAmJiBfc2VsZi5zbGVlcCgpO1xuXG4gICAgICAgIF9yZXEgPSBfcmFmIHx8IGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZiwgX25leHRUaW1lIC0gX3NlbGYudGltZSAqIDEwMDAgKyAxIHwgMCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgX3RpY2tlckFjdGl2ZSA9IDE7XG5cbiAgICAgICAgX3RpY2soMik7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbGVlcDogZnVuY3Rpb24gc2xlZXAoKSB7XG4gICAgICAoX3JhZiA/IGNhbmNlbEFuaW1hdGlvbkZyYW1lIDogY2xlYXJUaW1lb3V0KShfaWQpO1xuICAgICAgX3RpY2tlckFjdGl2ZSA9IDA7XG4gICAgICBfcmVxID0gX2VtcHR5RnVuYztcbiAgICB9LFxuICAgIGxhZ1Ntb290aGluZzogZnVuY3Rpb24gbGFnU21vb3RoaW5nKHRocmVzaG9sZCwgYWRqdXN0ZWRMYWcpIHtcbiAgICAgIF9sYWdUaHJlc2hvbGQgPSB0aHJlc2hvbGQgfHwgSW5maW5pdHk7IC8vIHplcm8gc2hvdWxkIGJlIGludGVycHJldGVkIGFzIGJhc2ljYWxseSB1bmxpbWl0ZWRcblxuICAgICAgX2FkanVzdGVkTGFnID0gTWF0aC5taW4oYWRqdXN0ZWRMYWcgfHwgMzMsIF9sYWdUaHJlc2hvbGQpO1xuICAgIH0sXG4gICAgZnBzOiBmdW5jdGlvbiBmcHMoX2Zwcykge1xuICAgICAgX2dhcCA9IDEwMDAgLyAoX2ZwcyB8fCAyNDApO1xuICAgICAgX25leHRUaW1lID0gX3NlbGYudGltZSAqIDEwMDAgKyBfZ2FwO1xuICAgIH0sXG4gICAgYWRkOiBmdW5jdGlvbiBhZGQoY2FsbGJhY2ssIG9uY2UsIHByaW9yaXRpemUpIHtcbiAgICAgIHZhciBmdW5jID0gb25jZSA/IGZ1bmN0aW9uICh0LCBkLCBmLCB2KSB7XG4gICAgICAgIGNhbGxiYWNrKHQsIGQsIGYsIHYpO1xuXG4gICAgICAgIF9zZWxmLnJlbW92ZShmdW5jKTtcbiAgICAgIH0gOiBjYWxsYmFjaztcblxuICAgICAgX3NlbGYucmVtb3ZlKGNhbGxiYWNrKTtcblxuICAgICAgX2xpc3RlbmVyc1twcmlvcml0aXplID8gXCJ1bnNoaWZ0XCIgOiBcInB1c2hcIl0oZnVuYyk7XG5cbiAgICAgIF93YWtlKCk7XG5cbiAgICAgIHJldHVybiBmdW5jO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoY2FsbGJhY2ssIGkpIHtcbiAgICAgIH4oaSA9IF9saXN0ZW5lcnMuaW5kZXhPZihjYWxsYmFjaykpICYmIF9saXN0ZW5lcnMuc3BsaWNlKGksIDEpICYmIF9pID49IGkgJiYgX2ktLTtcbiAgICB9LFxuICAgIF9saXN0ZW5lcnM6IF9saXN0ZW5lcnNcbiAgfTtcbiAgcmV0dXJuIF9zZWxmO1xufSgpLFxuICAgIF93YWtlID0gZnVuY3Rpb24gX3dha2UoKSB7XG4gIHJldHVybiAhX3RpY2tlckFjdGl2ZSAmJiBfdGlja2VyLndha2UoKTtcbn0sXG4gICAgLy9hbHNvIGVuc3VyZXMgdGhlIGNvcmUgY2xhc3NlcyBhcmUgaW5pdGlhbGl6ZWQuXG5cbi8qXG4qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogRUFTSU5HXG4qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiovXG5fZWFzZU1hcCA9IHt9LFxuICAgIF9jdXN0b21FYXNlRXhwID0gL15bXFxkLlxcLU1dW1xcZC5cXC0sXFxzXS8sXG4gICAgX3F1b3Rlc0V4cCA9IC9bXCInXS9nLFxuICAgIF9wYXJzZU9iamVjdEluU3RyaW5nID0gZnVuY3Rpb24gX3BhcnNlT2JqZWN0SW5TdHJpbmcodmFsdWUpIHtcbiAgLy90YWtlcyBhIHN0cmluZyBsaWtlIFwie3dpZ2dsZXM6MTAsIHR5cGU6YW50aWNpcGF0ZX0pXCIgYW5kIHR1cm5zIGl0IGludG8gYSByZWFsIG9iamVjdC4gTm90aWNlIGl0IGVuZHMgaW4gXCIpXCIgYW5kIGluY2x1ZGVzIHRoZSB7fSB3cmFwcGVycy4gVGhpcyBpcyBiZWNhdXNlIHdlIG9ubHkgdXNlIHRoaXMgZnVuY3Rpb24gZm9yIHBhcnNpbmcgZWFzZSBjb25maWdzIGFuZCBwcmlvcml0aXplZCBvcHRpbWl6YXRpb24gcmF0aGVyIHRoYW4gcmV1c2FiaWxpdHkuXG4gIHZhciBvYmogPSB7fSxcbiAgICAgIHNwbGl0ID0gdmFsdWUuc3Vic3RyKDEsIHZhbHVlLmxlbmd0aCAtIDMpLnNwbGl0KFwiOlwiKSxcbiAgICAgIGtleSA9IHNwbGl0WzBdLFxuICAgICAgaSA9IDEsXG4gICAgICBsID0gc3BsaXQubGVuZ3RoLFxuICAgICAgaW5kZXgsXG4gICAgICB2YWwsXG4gICAgICBwYXJzZWRWYWw7XG5cbiAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICB2YWwgPSBzcGxpdFtpXTtcbiAgICBpbmRleCA9IGkgIT09IGwgLSAxID8gdmFsLmxhc3RJbmRleE9mKFwiLFwiKSA6IHZhbC5sZW5ndGg7XG4gICAgcGFyc2VkVmFsID0gdmFsLnN1YnN0cigwLCBpbmRleCk7XG4gICAgb2JqW2tleV0gPSBpc05hTihwYXJzZWRWYWwpID8gcGFyc2VkVmFsLnJlcGxhY2UoX3F1b3Rlc0V4cCwgXCJcIikudHJpbSgpIDogK3BhcnNlZFZhbDtcbiAgICBrZXkgPSB2YWwuc3Vic3RyKGluZGV4ICsgMSkudHJpbSgpO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0sXG4gICAgX3ZhbHVlSW5QYXJlbnRoZXNlcyA9IGZ1bmN0aW9uIF92YWx1ZUluUGFyZW50aGVzZXModmFsdWUpIHtcbiAgdmFyIG9wZW4gPSB2YWx1ZS5pbmRleE9mKFwiKFwiKSArIDEsXG4gICAgICBjbG9zZSA9IHZhbHVlLmluZGV4T2YoXCIpXCIpLFxuICAgICAgbmVzdGVkID0gdmFsdWUuaW5kZXhPZihcIihcIiwgb3Blbik7XG4gIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcob3Blbiwgfm5lc3RlZCAmJiBuZXN0ZWQgPCBjbG9zZSA/IHZhbHVlLmluZGV4T2YoXCIpXCIsIGNsb3NlICsgMSkgOiBjbG9zZSk7XG59LFxuICAgIF9jb25maWdFYXNlRnJvbVN0cmluZyA9IGZ1bmN0aW9uIF9jb25maWdFYXNlRnJvbVN0cmluZyhuYW1lKSB7XG4gIC8vbmFtZSBjYW4gYmUgYSBzdHJpbmcgbGlrZSBcImVsYXN0aWMub3V0KDEsMC41KVwiLCBhbmQgcGFzcyBpbiBfZWFzZU1hcCBhcyBvYmogYW5kIGl0J2xsIHBhcnNlIGl0IG91dCBhbmQgY2FsbCB0aGUgYWN0dWFsIGZ1bmN0aW9uIGxpa2UgX2Vhc2VNYXAuRWxhc3RpYy5lYXNlT3V0LmNvbmZpZygxLDAuNSkuIEl0IHdpbGwgYWxzbyBwYXJzZSBjdXN0b20gZWFzZSBzdHJpbmdzIGFzIGxvbmcgYXMgQ3VzdG9tRWFzZSBpcyBsb2FkZWQgYW5kIHJlZ2lzdGVyZWQgKGludGVybmFsbHkgYXMgX2Vhc2VNYXAuX0NFKS5cbiAgdmFyIHNwbGl0ID0gKG5hbWUgKyBcIlwiKS5zcGxpdChcIihcIiksXG4gICAgICBlYXNlID0gX2Vhc2VNYXBbc3BsaXRbMF1dO1xuICByZXR1cm4gZWFzZSAmJiBzcGxpdC5sZW5ndGggPiAxICYmIGVhc2UuY29uZmlnID8gZWFzZS5jb25maWcuYXBwbHkobnVsbCwgfm5hbWUuaW5kZXhPZihcIntcIikgPyBbX3BhcnNlT2JqZWN0SW5TdHJpbmcoc3BsaXRbMV0pXSA6IF92YWx1ZUluUGFyZW50aGVzZXMobmFtZSkuc3BsaXQoXCIsXCIpLm1hcChfbnVtZXJpY0lmUG9zc2libGUpKSA6IF9lYXNlTWFwLl9DRSAmJiBfY3VzdG9tRWFzZUV4cC50ZXN0KG5hbWUpID8gX2Vhc2VNYXAuX0NFKFwiXCIsIG5hbWUpIDogZWFzZTtcbn0sXG4gICAgX2ludmVydEVhc2UgPSBmdW5jdGlvbiBfaW52ZXJ0RWFzZShlYXNlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZSgxIC0gcCk7XG4gIH07XG59LFxuICAgIC8vIGFsbG93IHlveW9FYXNlIHRvIGJlIHNldCBpbiBjaGlsZHJlbiBhbmQgaGF2ZSB0aG9zZSBhZmZlY3RlZCB3aGVuIHRoZSBwYXJlbnQvYW5jZXN0b3IgdGltZWxpbmUgeW95b3MuXG5fcHJvcGFnYXRlWW95b0Vhc2UgPSBmdW5jdGlvbiBfcHJvcGFnYXRlWW95b0Vhc2UodGltZWxpbmUsIGlzWW95bykge1xuICB2YXIgY2hpbGQgPSB0aW1lbGluZS5fZmlyc3QsXG4gICAgICBlYXNlO1xuXG4gIHdoaWxlIChjaGlsZCkge1xuICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFRpbWVsaW5lKSB7XG4gICAgICBfcHJvcGFnYXRlWW95b0Vhc2UoY2hpbGQsIGlzWW95byk7XG4gICAgfSBlbHNlIGlmIChjaGlsZC52YXJzLnlveW9FYXNlICYmICghY2hpbGQuX3lveW8gfHwgIWNoaWxkLl9yZXBlYXQpICYmIGNoaWxkLl95b3lvICE9PSBpc1lveW8pIHtcbiAgICAgIGlmIChjaGlsZC50aW1lbGluZSkge1xuICAgICAgICBfcHJvcGFnYXRlWW95b0Vhc2UoY2hpbGQudGltZWxpbmUsIGlzWW95byk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlYXNlID0gY2hpbGQuX2Vhc2U7XG4gICAgICAgIGNoaWxkLl9lYXNlID0gY2hpbGQuX3lFYXNlO1xuICAgICAgICBjaGlsZC5feUVhc2UgPSBlYXNlO1xuICAgICAgICBjaGlsZC5feW95byA9IGlzWW95bztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICB9XG59LFxuICAgIF9wYXJzZUVhc2UgPSBmdW5jdGlvbiBfcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSB7XG4gIHJldHVybiAhZWFzZSA/IGRlZmF1bHRFYXNlIDogKF9pc0Z1bmN0aW9uKGVhc2UpID8gZWFzZSA6IF9lYXNlTWFwW2Vhc2VdIHx8IF9jb25maWdFYXNlRnJvbVN0cmluZyhlYXNlKSkgfHwgZGVmYXVsdEVhc2U7XG59LFxuICAgIF9pbnNlcnRFYXNlID0gZnVuY3Rpb24gX2luc2VydEVhc2UobmFtZXMsIGVhc2VJbiwgZWFzZU91dCwgZWFzZUluT3V0KSB7XG4gIGlmIChlYXNlT3V0ID09PSB2b2lkIDApIHtcbiAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgICByZXR1cm4gMSAtIGVhc2VJbigxIC0gcCk7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChlYXNlSW5PdXQgPT09IHZvaWQgMCkge1xuICAgIGVhc2VJbk91dCA9IGZ1bmN0aW9uIGVhc2VJbk91dChwKSB7XG4gICAgICByZXR1cm4gcCA8IC41ID8gZWFzZUluKHAgKiAyKSAvIDIgOiAxIC0gZWFzZUluKCgxIC0gcCkgKiAyKSAvIDI7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBlYXNlID0ge1xuICAgIGVhc2VJbjogZWFzZUluLFxuICAgIGVhc2VPdXQ6IGVhc2VPdXQsXG4gICAgZWFzZUluT3V0OiBlYXNlSW5PdXRcbiAgfSxcbiAgICAgIGxvd2VyY2FzZU5hbWU7XG5cbiAgX2ZvckVhY2hOYW1lKG5hbWVzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF9lYXNlTWFwW25hbWVdID0gX2dsb2JhbHNbbmFtZV0gPSBlYXNlO1xuICAgIF9lYXNlTWFwW2xvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCldID0gZWFzZU91dDtcblxuICAgIGZvciAodmFyIHAgaW4gZWFzZSkge1xuICAgICAgX2Vhc2VNYXBbbG93ZXJjYXNlTmFtZSArIChwID09PSBcImVhc2VJblwiID8gXCIuaW5cIiA6IHAgPT09IFwiZWFzZU91dFwiID8gXCIub3V0XCIgOiBcIi5pbk91dFwiKV0gPSBfZWFzZU1hcFtuYW1lICsgXCIuXCIgKyBwXSA9IGVhc2VbcF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZWFzZTtcbn0sXG4gICAgX2Vhc2VJbk91dEZyb21PdXQgPSBmdW5jdGlvbiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwIDwgLjUgPyAoMSAtIGVhc2VPdXQoMSAtIHAgKiAyKSkgLyAyIDogLjUgKyBlYXNlT3V0KChwIC0gLjUpICogMikgLyAyO1xuICB9O1xufSxcbiAgICBfY29uZmlnRWxhc3RpYyA9IGZ1bmN0aW9uIF9jb25maWdFbGFzdGljKHR5cGUsIGFtcGxpdHVkZSwgcGVyaW9kKSB7XG4gIHZhciBwMSA9IGFtcGxpdHVkZSA+PSAxID8gYW1wbGl0dWRlIDogMSxcbiAgICAgIC8vbm90ZTogaWYgYW1wbGl0dWRlIGlzIDwgMSwgd2Ugc2ltcGx5IGFkanVzdCB0aGUgcGVyaW9kIGZvciBhIG1vcmUgbmF0dXJhbCBmZWVsLiBPdGhlcndpc2UgdGhlIG1hdGggZG9lc24ndCB3b3JrIHJpZ2h0IGFuZCB0aGUgY3VydmUgc3RhcnRzIGF0IDEuXG4gIHAyID0gKHBlcmlvZCB8fCAodHlwZSA/IC4zIDogLjQ1KSkgLyAoYW1wbGl0dWRlIDwgMSA/IGFtcGxpdHVkZSA6IDEpLFxuICAgICAgcDMgPSBwMiAvIF8yUEkgKiAoTWF0aC5hc2luKDEgLyBwMSkgfHwgMCksXG4gICAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgcmV0dXJuIHAgPT09IDEgPyAxIDogcDEgKiBNYXRoLnBvdygyLCAtMTAgKiBwKSAqIF9zaW4oKHAgLSBwMykgKiBwMikgKyAxO1xuICB9LFxuICAgICAgZWFzZSA9IHR5cGUgPT09IFwib3V0XCIgPyBlYXNlT3V0IDogdHlwZSA9PT0gXCJpblwiID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9IDogX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCk7XG5cbiAgcDIgPSBfMlBJIC8gcDI7IC8vcHJlY2FsY3VsYXRlIHRvIG9wdGltaXplXG5cbiAgZWFzZS5jb25maWcgPSBmdW5jdGlvbiAoYW1wbGl0dWRlLCBwZXJpb2QpIHtcbiAgICByZXR1cm4gX2NvbmZpZ0VsYXN0aWModHlwZSwgYW1wbGl0dWRlLCBwZXJpb2QpO1xuICB9O1xuXG4gIHJldHVybiBlYXNlO1xufSxcbiAgICBfY29uZmlnQmFjayA9IGZ1bmN0aW9uIF9jb25maWdCYWNrKHR5cGUsIG92ZXJzaG9vdCkge1xuICBpZiAob3ZlcnNob290ID09PSB2b2lkIDApIHtcbiAgICBvdmVyc2hvb3QgPSAxLjcwMTU4O1xuICB9XG5cbiAgdmFyIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA/IC0tcCAqIHAgKiAoKG92ZXJzaG9vdCArIDEpICogcCArIG92ZXJzaG9vdCkgKyAxIDogMDtcbiAgfSxcbiAgICAgIGVhc2UgPSB0eXBlID09PSBcIm91dFwiID8gZWFzZU91dCA6IHR5cGUgPT09IFwiaW5cIiA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSA6IF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpO1xuXG4gIGVhc2UuY29uZmlnID0gZnVuY3Rpb24gKG92ZXJzaG9vdCkge1xuICAgIHJldHVybiBfY29uZmlnQmFjayh0eXBlLCBvdmVyc2hvb3QpO1xuICB9O1xuXG4gIHJldHVybiBlYXNlO1xufTsgLy8gYSBjaGVhcGVyIChrYiBhbmQgY3B1KSBidXQgbW9yZSBtaWxkIHdheSB0byBnZXQgYSBwYXJhbWV0ZXJpemVkIHdlaWdodGVkIGVhc2UgYnkgZmVlZGluZyBpbiBhIHZhbHVlIGJldHdlZW4gLTEgKGVhc2VJbikgYW5kIDEgKGVhc2VPdXQpIHdoZXJlIDAgaXMgbGluZWFyLlxuLy8gX3dlaWdodGVkRWFzZSA9IHJhdGlvID0+IHtcbi8vIFx0bGV0IHkgPSAwLjUgKyByYXRpbyAvIDI7XG4vLyBcdHJldHVybiBwID0+ICgyICogKDEgLSBwKSAqIHAgKiB5ICsgcCAqIHApO1xuLy8gfSxcbi8vIGEgc3Ryb25nZXIgKGJ1dCBtb3JlIGV4cGVuc2l2ZSBrYi9jcHUpIHBhcmFtZXRlcml6ZWQgd2VpZ2h0ZWQgZWFzZSB0aGF0IGxldHMgeW91IGZlZWQgaW4gYSB2YWx1ZSBiZXR3ZWVuIC0xIChlYXNlSW4pIGFuZCAxIChlYXNlT3V0KSB3aGVyZSAwIGlzIGxpbmVhci5cbi8vIF93ZWlnaHRlZEVhc2VTdHJvbmcgPSByYXRpbyA9PiB7XG4vLyBcdHJhdGlvID0gLjUgKyByYXRpbyAvIDI7XG4vLyBcdGxldCBvID0gMSAvIDMgKiAocmF0aW8gPCAuNSA/IHJhdGlvIDogMSAtIHJhdGlvKSxcbi8vIFx0XHRiID0gcmF0aW8gLSBvLFxuLy8gXHRcdGMgPSByYXRpbyArIG87XG4vLyBcdHJldHVybiBwID0+IHAgPT09IDEgPyBwIDogMyAqIGIgKiAoMSAtIHApICogKDEgLSBwKSAqIHAgKyAzICogYyAqICgxIC0gcCkgKiBwICogcCArIHAgKiBwICogcDtcbi8vIH07XG5cblxuX2ZvckVhY2hOYW1lKFwiTGluZWFyLFF1YWQsQ3ViaWMsUXVhcnQsUXVpbnQsU3Ryb25nXCIsIGZ1bmN0aW9uIChuYW1lLCBpKSB7XG4gIHZhciBwb3dlciA9IGkgPCA1ID8gaSArIDEgOiBpO1xuXG4gIF9pbnNlcnRFYXNlKG5hbWUgKyBcIixQb3dlclwiICsgKHBvd2VyIC0gMSksIGkgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhwLCBwb3dlcik7XG4gIH0gOiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwO1xuICB9LCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5wb3coMSAtIHAsIHBvd2VyKTtcbiAgfSwgZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gcCA8IC41ID8gTWF0aC5wb3cocCAqIDIsIHBvd2VyKSAvIDIgOiAxIC0gTWF0aC5wb3coKDEgLSBwKSAqIDIsIHBvd2VyKSAvIDI7XG4gIH0pO1xufSk7XG5cbl9lYXNlTWFwLkxpbmVhci5lYXNlTm9uZSA9IF9lYXNlTWFwLm5vbmUgPSBfZWFzZU1hcC5MaW5lYXIuZWFzZUluO1xuXG5faW5zZXJ0RWFzZShcIkVsYXN0aWNcIiwgX2NvbmZpZ0VsYXN0aWMoXCJpblwiKSwgX2NvbmZpZ0VsYXN0aWMoXCJvdXRcIiksIF9jb25maWdFbGFzdGljKCkpO1xuXG4oZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIG4xID0gMSAvIGMsXG4gICAgICBuMiA9IDIgKiBuMSxcbiAgICAgIG4zID0gMi41ICogbjEsXG4gICAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgcmV0dXJuIHAgPCBuMSA/IG4gKiBwICogcCA6IHAgPCBuMiA/IG4gKiBNYXRoLnBvdyhwIC0gMS41IC8gYywgMikgKyAuNzUgOiBwIDwgbjMgPyBuICogKHAgLT0gMi4yNSAvIGMpICogcCArIC45Mzc1IDogbiAqIE1hdGgucG93KHAgLSAyLjYyNSAvIGMsIDIpICsgLjk4NDM3NTtcbiAgfTtcblxuICBfaW5zZXJ0RWFzZShcIkJvdW5jZVwiLCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0sIGVhc2VPdXQpO1xufSkoNy41NjI1LCAyLjc1KTtcblxuX2luc2VydEVhc2UoXCJFeHBvXCIsIGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwID8gTWF0aC5wb3coMiwgMTAgKiAocCAtIDEpKSA6IDA7XG59KTtcblxuX2luc2VydEVhc2UoXCJDaXJjXCIsIGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiAtKF9zcXJ0KDEgLSBwICogcCkgLSAxKTtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIlNpbmVcIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAgPT09IDEgPyAxIDogLV9jb3MocCAqIF9IQUxGX1BJKSArIDE7XG59KTtcblxuX2luc2VydEVhc2UoXCJCYWNrXCIsIF9jb25maWdCYWNrKFwiaW5cIiksIF9jb25maWdCYWNrKFwib3V0XCIpLCBfY29uZmlnQmFjaygpKTtcblxuX2Vhc2VNYXAuU3RlcHBlZEVhc2UgPSBfZWFzZU1hcC5zdGVwcyA9IF9nbG9iYWxzLlN0ZXBwZWRFYXNlID0ge1xuICBjb25maWc6IGZ1bmN0aW9uIGNvbmZpZyhzdGVwcywgaW1tZWRpYXRlU3RhcnQpIHtcbiAgICBpZiAoc3RlcHMgPT09IHZvaWQgMCkge1xuICAgICAgc3RlcHMgPSAxO1xuICAgIH1cblxuICAgIHZhciBwMSA9IDEgLyBzdGVwcyxcbiAgICAgICAgcDIgPSBzdGVwcyArIChpbW1lZGlhdGVTdGFydCA/IDAgOiAxKSxcbiAgICAgICAgcDMgPSBpbW1lZGlhdGVTdGFydCA/IDEgOiAwLFxuICAgICAgICBtYXggPSAxIC0gX3RpbnlOdW07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgICByZXR1cm4gKChwMiAqIF9jbGFtcCgwLCBtYXgsIHApIHwgMCkgKyBwMykgKiBwMTtcbiAgICB9O1xuICB9XG59O1xuX2RlZmF1bHRzLmVhc2UgPSBfZWFzZU1hcFtcInF1YWQub3V0XCJdO1xuXG5fZm9yRWFjaE5hbWUoXCJvbkNvbXBsZXRlLG9uVXBkYXRlLG9uU3RhcnQsb25SZXBlYXQsb25SZXZlcnNlQ29tcGxldGUsb25JbnRlcnJ1cHRcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9jYWxsYmFja05hbWVzICs9IG5hbWUgKyBcIixcIiArIG5hbWUgKyBcIlBhcmFtcyxcIjtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDQUNIRVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbmV4cG9ydCB2YXIgR1NDYWNoZSA9IGZ1bmN0aW9uIEdTQ2FjaGUodGFyZ2V0LCBoYXJuZXNzKSB7XG4gIHRoaXMuaWQgPSBfZ3NJRCsrO1xuICB0YXJnZXQuX2dzYXAgPSB0aGlzO1xuICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgdGhpcy5oYXJuZXNzID0gaGFybmVzcztcbiAgdGhpcy5nZXQgPSBoYXJuZXNzID8gaGFybmVzcy5nZXQgOiBfZ2V0UHJvcGVydHk7XG4gIHRoaXMuc2V0ID0gaGFybmVzcyA/IGhhcm5lc3MuZ2V0U2V0dGVyIDogX2dldFNldHRlcjtcbn07XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEFOSU1BVElPTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5leHBvcnQgdmFyIEFuaW1hdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEFuaW1hdGlvbih2YXJzKSB7XG4gICAgdGhpcy52YXJzID0gdmFycztcbiAgICB0aGlzLl9kZWxheSA9ICt2YXJzLmRlbGF5IHx8IDA7XG5cbiAgICBpZiAodGhpcy5fcmVwZWF0ID0gdmFycy5yZXBlYXQgPT09IEluZmluaXR5ID8gLTIgOiB2YXJzLnJlcGVhdCB8fCAwKSB7XG4gICAgICAvLyBUT0RPOiByZXBlYXQ6IEluZmluaXR5IG9uIGEgdGltZWxpbmUncyBjaGlsZHJlbiBtdXN0IGZsYWcgdGhhdCB0aW1lbGluZSBpbnRlcm5hbGx5IGFuZCBhZmZlY3QgaXRzIHRvdGFsRHVyYXRpb24sIG90aGVyd2lzZSBpdCdsbCBzdG9wIGluIHRoZSBuZWdhdGl2ZSBkaXJlY3Rpb24gd2hlbiByZWFjaGluZyB0aGUgc3RhcnQuXG4gICAgICB0aGlzLl9yRGVsYXkgPSB2YXJzLnJlcGVhdERlbGF5IHx8IDA7XG4gICAgICB0aGlzLl95b3lvID0gISF2YXJzLnlveW8gfHwgISF2YXJzLnlveW9FYXNlO1xuICAgIH1cblxuICAgIHRoaXMuX3RzID0gMTtcblxuICAgIF9zZXREdXJhdGlvbih0aGlzLCArdmFycy5kdXJhdGlvbiwgMSwgMSk7XG5cbiAgICB0aGlzLmRhdGEgPSB2YXJzLmRhdGE7XG5cbiAgICBpZiAoX2NvbnRleHQpIHtcbiAgICAgIHRoaXMuX2N0eCA9IF9jb250ZXh0O1xuXG4gICAgICBfY29udGV4dC5kYXRhLnB1c2godGhpcyk7XG4gICAgfVxuXG4gICAgX3RpY2tlckFjdGl2ZSB8fCBfdGlja2VyLndha2UoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBBbmltYXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5kZWxheSA9IGZ1bmN0aW9uIGRlbGF5KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIHx8IHZhbHVlID09PSAwKSB7XG4gICAgICB0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiB0aGlzLnN0YXJ0VGltZSh0aGlzLl9zdGFydCArIHZhbHVlIC0gdGhpcy5fZGVsYXkpO1xuICAgICAgdGhpcy5fZGVsYXkgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9kZWxheTtcbiAgfTtcblxuICBfcHJvdG8uZHVyYXRpb24gPSBmdW5jdGlvbiBkdXJhdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbER1cmF0aW9uKHRoaXMuX3JlcGVhdCA+IDAgPyB2YWx1ZSArICh2YWx1ZSArIHRoaXMuX3JEZWxheSkgKiB0aGlzLl9yZXBlYXQgOiB2YWx1ZSkgOiB0aGlzLnRvdGFsRHVyYXRpb24oKSAmJiB0aGlzLl9kdXI7XG4gIH07XG5cbiAgX3Byb3RvLnRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbiB0b3RhbER1cmF0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdER1cjtcbiAgICB9XG5cbiAgICB0aGlzLl9kaXJ0eSA9IDA7XG4gICAgcmV0dXJuIF9zZXREdXJhdGlvbih0aGlzLCB0aGlzLl9yZXBlYXQgPCAwID8gdmFsdWUgOiAodmFsdWUgLSB0aGlzLl9yZXBlYXQgKiB0aGlzLl9yRGVsYXkpIC8gKHRoaXMuX3JlcGVhdCArIDEpKTtcbiAgfTtcblxuICBfcHJvdG8udG90YWxUaW1lID0gZnVuY3Rpb24gdG90YWxUaW1lKF90b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgX3dha2UoKTtcblxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RUaW1lO1xuICAgIH1cblxuICAgIHZhciBwYXJlbnQgPSB0aGlzLl9kcDtcblxuICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIHRoaXMuX3RzKSB7XG4gICAgICBfYWxpZ25QbGF5aGVhZCh0aGlzLCBfdG90YWxUaW1lKTtcblxuICAgICAgIXBhcmVudC5fZHAgfHwgcGFyZW50LnBhcmVudCB8fCBfcG9zdEFkZENoZWNrcyhwYXJlbnQsIHRoaXMpOyAvLyBlZGdlIGNhc2U6IGlmIHRoaXMgaXMgYSBjaGlsZCBvZiBhIHRpbWVsaW5lIHRoYXQgYWxyZWFkeSBjb21wbGV0ZWQsIGZvciBleGFtcGxlLCB3ZSBtdXN0IHJlLWFjdGl2YXRlIHRoZSBwYXJlbnQuXG4gICAgICAvL2luIGNhc2UgYW55IG9mIHRoZSBhbmNlc3RvciB0aW1lbGluZXMgaGFkIGNvbXBsZXRlZCBidXQgc2hvdWxkIG5vdyBiZSBlbmFibGVkLCB3ZSBzaG91bGQgcmVzZXQgdGhlaXIgdG90YWxUaW1lKCkgd2hpY2ggd2lsbCBhbHNvIGVuc3VyZSB0aGF0IHRoZXkncmUgbGluZWQgdXAgcHJvcGVybHkgYW5kIGVuYWJsZWQuIFNraXAgZm9yIGFuaW1hdGlvbnMgdGhhdCBhcmUgb24gdGhlIHJvb3QgKHdhc3RlZnVsKS4gRXhhbXBsZTogYSBUaW1lbGluZUxpdGUuZXhwb3J0Um9vdCgpIGlzIHBlcmZvcm1lZCB3aGVuIHRoZXJlJ3MgYSBwYXVzZWQgdHdlZW4gb24gdGhlIHJvb3QsIHRoZSBleHBvcnQgd2lsbCBub3QgY29tcGxldGUgdW50aWwgdGhhdCB0d2VlbiBpcyB1bnBhdXNlZCwgYnV0IGltYWdpbmUgYSBjaGlsZCBnZXRzIHJlc3RhcnRlZCBsYXRlciwgYWZ0ZXIgYWxsIFt1bnBhdXNlZF0gdHdlZW5zIGhhdmUgY29tcGxldGVkLiBUaGUgc3RhcnQgb2YgdGhhdCBjaGlsZCB3b3VsZCBnZXQgcHVzaGVkIG91dCwgYnV0IG9uZSBvZiB0aGUgYW5jZXN0b3JzIG1heSBoYXZlIGNvbXBsZXRlZC5cblxuICAgICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQucGFyZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnQucGFyZW50Ll90aW1lICE9PSBwYXJlbnQuX3N0YXJ0ICsgKHBhcmVudC5fdHMgPj0gMCA/IHBhcmVudC5fdFRpbWUgLyBwYXJlbnQuX3RzIDogKHBhcmVudC50b3RhbER1cmF0aW9uKCkgLSBwYXJlbnQuX3RUaW1lKSAvIC1wYXJlbnQuX3RzKSkge1xuICAgICAgICAgIHBhcmVudC50b3RhbFRpbWUocGFyZW50Ll90VGltZSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMucGFyZW50ICYmIHRoaXMuX2RwLmF1dG9SZW1vdmVDaGlsZHJlbiAmJiAodGhpcy5fdHMgPiAwICYmIF90b3RhbFRpbWUgPCB0aGlzLl90RHVyIHx8IHRoaXMuX3RzIDwgMCAmJiBfdG90YWxUaW1lID4gMCB8fCAhdGhpcy5fdER1ciAmJiAhX3RvdGFsVGltZSkpIHtcbiAgICAgICAgLy9pZiB0aGUgYW5pbWF0aW9uIGRvZXNuJ3QgaGF2ZSBhIHBhcmVudCwgcHV0IGl0IGJhY2sgaW50byBpdHMgbGFzdCBwYXJlbnQgKHJlY29yZGVkIGFzIF9kcCBmb3IgZXhhY3RseSBjYXNlcyBsaWtlIHRoaXMpLiBMaW1pdCB0byBwYXJlbnRzIHdpdGggYXV0b1JlbW92ZUNoaWxkcmVuIChsaWtlIGdsb2JhbFRpbWVsaW5lKSBzbyB0aGF0IGlmIHRoZSB1c2VyIG1hbnVhbGx5IHJlbW92ZXMgYW4gYW5pbWF0aW9uIGZyb20gYSB0aW1lbGluZSBhbmQgdGhlbiBhbHRlcnMgaXRzIHBsYXloZWFkLCBpdCBkb2Vzbid0IGdldCBhZGRlZCBiYWNrIGluLlxuICAgICAgICBfYWRkVG9UaW1lbGluZSh0aGlzLl9kcCwgdGhpcywgdGhpcy5fc3RhcnQgLSB0aGlzLl9kZWxheSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3RUaW1lICE9PSBfdG90YWxUaW1lIHx8ICF0aGlzLl9kdXIgJiYgIXN1cHByZXNzRXZlbnRzIHx8IHRoaXMuX2luaXR0ZWQgJiYgTWF0aC5hYnModGhpcy5felRpbWUpID09PSBfdGlueU51bSB8fCAhX3RvdGFsVGltZSAmJiAhdGhpcy5faW5pdHRlZCAmJiAodGhpcy5hZGQgfHwgdGhpcy5fcHRMb29rdXApKSB7XG4gICAgICAvLyBjaGVjayBmb3IgX3B0TG9va3VwIG9uIGEgVHdlZW4gaW5zdGFuY2UgdG8gZW5zdXJlIGl0IGhhcyBhY3R1YWxseSBmaW5pc2hlZCBiZWluZyBpbnN0YW50aWF0ZWQsIG90aGVyd2lzZSBpZiB0aGlzLnJldmVyc2UoKSBnZXRzIGNhbGxlZCBpbiB0aGUgQW5pbWF0aW9uIGNvbnN0cnVjdG9yLCBpdCBjb3VsZCB0cmlnZ2VyIGEgcmVuZGVyKCkgaGVyZSBldmVuIHRob3VnaCB0aGUgX3RhcmdldHMgd2VyZW4ndCBwb3B1bGF0ZWQsIHRodXMgd2hlbiBfaW5pdCgpIGlzIGNhbGxlZCB0aGVyZSB3b24ndCBiZSBhbnkgUHJvcFR3ZWVucyAoaXQnbGwgYWN0IGxpa2UgdGhlIHR3ZWVuIGlzIG5vbi1mdW5jdGlvbmFsKVxuICAgICAgdGhpcy5fdHMgfHwgKHRoaXMuX3BUaW1lID0gX3RvdGFsVGltZSk7IC8vIG90aGVyd2lzZSwgaWYgYW4gYW5pbWF0aW9uIGlzIHBhdXNlZCwgdGhlbiB0aGUgcGxheWhlYWQgaXMgbW92ZWQgYmFjayB0byB6ZXJvLCB0aGVuIHJlc3VtZWQsIGl0J2QgcmV2ZXJ0IGJhY2sgdG8gdGhlIG9yaWdpbmFsIHRpbWUgYXQgdGhlIHBhdXNlXG4gICAgICAvL2lmICghdGhpcy5fbG9jaykgeyAvLyBhdm9pZCBlbmRsZXNzIHJlY3Vyc2lvbiAobm90IHN1cmUgd2UgbmVlZCB0aGlzIHlldCBvciBpZiBpdCdzIHdvcnRoIHRoZSBwZXJmb3JtYW5jZSBoaXQpXG4gICAgICAvLyAgIHRoaXMuX2xvY2sgPSAxO1xuXG4gICAgICBfbGF6eVNhZmVSZW5kZXIodGhpcywgX3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMpOyAvLyAgIHRoaXMuX2xvY2sgPSAwO1xuICAgICAgLy99XG5cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8udGltZSA9IGZ1bmN0aW9uIHRpbWUodmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZShNYXRoLm1pbih0aGlzLnRvdGFsRHVyYXRpb24oKSwgdmFsdWUgKyBfZWxhcHNlZEN5Y2xlRHVyYXRpb24odGhpcykpICUgKHRoaXMuX2R1ciArIHRoaXMuX3JEZWxheSkgfHwgKHZhbHVlID8gdGhpcy5fZHVyIDogMCksIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuX3RpbWU7IC8vIG5vdGU6IGlmIHRoZSBtb2R1bHVzIHJlc3VsdHMgaW4gMCwgdGhlIHBsYXloZWFkIGNvdWxkIGJlIGV4YWN0bHkgYXQgdGhlIGVuZCBvciB0aGUgYmVnaW5uaW5nLCBhbmQgd2UgYWx3YXlzIGRlZmVyIHRvIHRoZSBFTkQgd2l0aCBhIG5vbi16ZXJvIHZhbHVlLCBvdGhlcndpc2UgaWYgeW91IHNldCB0aGUgdGltZSgpIHRvIHRoZSB2ZXJ5IGVuZCAoZHVyYXRpb24oKSksIGl0IHdvdWxkIHJlbmRlciBhdCB0aGUgU1RBUlQhXG4gIH07XG5cbiAgX3Byb3RvLnRvdGFsUHJvZ3Jlc3MgPSBmdW5jdGlvbiB0b3RhbFByb2dyZXNzKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy50b3RhbER1cmF0aW9uKCkgKiB2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy50b3RhbER1cmF0aW9uKCkgPyBNYXRoLm1pbigxLCB0aGlzLl90VGltZSAvIHRoaXMuX3REdXIpIDogdGhpcy5yYXdUaW1lKCkgPiAwID8gMSA6IDA7XG4gIH07XG5cbiAgX3Byb3RvLnByb2dyZXNzID0gZnVuY3Rpb24gcHJvZ3Jlc3ModmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLmR1cmF0aW9uKCkgKiAodGhpcy5feW95byAmJiAhKHRoaXMuaXRlcmF0aW9uKCkgJiAxKSA/IDEgLSB2YWx1ZSA6IHZhbHVlKSArIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbih0aGlzKSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5kdXJhdGlvbigpID8gTWF0aC5taW4oMSwgdGhpcy5fdGltZSAvIHRoaXMuX2R1cikgOiB0aGlzLnJhd1RpbWUoKSA+IDAgPyAxIDogMDtcbiAgfTtcblxuICBfcHJvdG8uaXRlcmF0aW9uID0gZnVuY3Rpb24gaXRlcmF0aW9uKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHZhciBjeWNsZUR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbigpICsgdGhpcy5fckRlbGF5O1xuXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLl90aW1lICsgKHZhbHVlIC0gMSkgKiBjeWNsZUR1cmF0aW9uLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLl9yZXBlYXQgPyBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pICsgMSA6IDE7XG4gIH0gLy8gcG90ZW50aWFsIGZ1dHVyZSBhZGRpdGlvbjpcbiAgLy8gaXNQbGF5aW5nQmFja3dhcmRzKCkge1xuICAvLyBcdGxldCBhbmltYXRpb24gPSB0aGlzLFxuICAvLyBcdFx0b3JpZW50YXRpb24gPSAxOyAvLyAxID0gZm9yd2FyZCwgLTEgPSBiYWNrd2FyZFxuICAvLyBcdHdoaWxlIChhbmltYXRpb24pIHtcbiAgLy8gXHRcdG9yaWVudGF0aW9uICo9IGFuaW1hdGlvbi5yZXZlcnNlZCgpIHx8IChhbmltYXRpb24ucmVwZWF0KCkgJiYgIShhbmltYXRpb24uaXRlcmF0aW9uKCkgJiAxKSkgPyAtMSA6IDE7XG4gIC8vIFx0XHRhbmltYXRpb24gPSBhbmltYXRpb24ucGFyZW50O1xuICAvLyBcdH1cbiAgLy8gXHRyZXR1cm4gb3JpZW50YXRpb24gPCAwO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG8udGltZVNjYWxlID0gZnVuY3Rpb24gdGltZVNjYWxlKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3J0cyA9PT0gLV90aW55TnVtID8gMCA6IHRoaXMuX3J0czsgLy8gcmVjb3JkZWQgdGltZVNjYWxlLiBTcGVjaWFsIGNhc2U6IGlmIHNvbWVvbmUgY2FsbHMgcmV2ZXJzZSgpIG9uIGFuIGFuaW1hdGlvbiB3aXRoIHRpbWVTY2FsZSBvZiAwLCB3ZSBhc3NpZ24gaXQgLV90aW55TnVtIHRvIHJlbWVtYmVyIGl0J3MgcmV2ZXJzZWQuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3J0cyA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciB0VGltZSA9IHRoaXMucGFyZW50ICYmIHRoaXMuX3RzID8gX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUodGhpcy5wYXJlbnQuX3RpbWUsIHRoaXMpIDogdGhpcy5fdFRpbWU7IC8vIG1ha2Ugc3VyZSB0byBkbyB0aGUgcGFyZW50VG9DaGlsZFRvdGFsVGltZSgpIEJFRk9SRSBzZXR0aW5nIHRoZSBuZXcgX3RzIGJlY2F1c2UgdGhlIG9sZCBvbmUgbXVzdCBiZSB1c2VkIGluIHRoYXQgY2FsY3VsYXRpb24uXG4gICAgLy8gZnV0dXJlIGFkZGl0aW9uPyBVcCBzaWRlOiBmYXN0IGFuZCBtaW5pbWFsIGZpbGUgc2l6ZS4gRG93biBzaWRlOiBvbmx5IHdvcmtzIG9uIHRoaXMgYW5pbWF0aW9uOyBpZiBhIHRpbWVsaW5lIGlzIHJldmVyc2VkLCBmb3IgZXhhbXBsZSwgaXRzIGNoaWxkcmVucycgb25SZXZlcnNlIHdvdWxkbid0IGdldCBjYWxsZWQuXG4gICAgLy8oK3ZhbHVlIDwgMCAmJiB0aGlzLl9ydHMgPj0gMCkgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXZlcnNlXCIsIHRydWUpO1xuICAgIC8vIHByaW9yaXRpemUgcmVuZGVyaW5nIHdoZXJlIHRoZSBwYXJlbnQncyBwbGF5aGVhZCBsaW5lcyB1cCBpbnN0ZWFkIG9mIHRoaXMuX3RUaW1lIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgYSB0d2VlbiB0aGF0J3MgYW5pbWF0aW5nIGFub3RoZXIgdHdlZW4ncyB0aW1lU2NhbGUgaW4gdGhlIHNhbWUgcmVuZGVyaW5nIGxvb3AgKHNhbWUgcGFyZW50KSwgdGh1cyBpZiB0aGUgdGltZVNjYWxlIHR3ZWVuIHJlbmRlcnMgZmlyc3QsIGl0IHdvdWxkIGFsdGVyIF9zdGFydCBCRUZPUkUgX3RUaW1lIHdhcyBzZXQgb24gdGhhdCB0aWNrIChpbiB0aGUgcmVuZGVyaW5nIGxvb3ApLCBlZmZlY3RpdmVseSBmcmVlemluZyBpdCB1bnRpbCB0aGUgdGltZVNjYWxlIHR3ZWVuIGZpbmlzaGVzLlxuXG4gICAgdGhpcy5fcnRzID0gK3ZhbHVlIHx8IDA7XG4gICAgdGhpcy5fdHMgPSB0aGlzLl9wcyB8fCB2YWx1ZSA9PT0gLV90aW55TnVtID8gMCA6IHRoaXMuX3J0czsgLy8gX3RzIGlzIHRoZSBmdW5jdGlvbmFsIHRpbWVTY2FsZSB3aGljaCB3b3VsZCBiZSAwIGlmIHRoZSBhbmltYXRpb24gaXMgcGF1c2VkLlxuXG4gICAgdGhpcy50b3RhbFRpbWUoX2NsYW1wKC1NYXRoLmFicyh0aGlzLl9kZWxheSksIHRoaXMuX3REdXIsIHRUaW1lKSwgc3VwcHJlc3NFdmVudHMgIT09IGZhbHNlKTtcblxuICAgIF9zZXRFbmQodGhpcyk7IC8vIGlmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyB3YXMgZmFsc2UsIHRoZSBlbmQgdGltZSBkaWRuJ3QgZ2V0IHVwZGF0ZWQgaW4gdGhlIF9hbGlnblBsYXloZWFkKCkgbWV0aG9kLCBzbyBkbyBpdCBoZXJlLlxuXG5cbiAgICByZXR1cm4gX3JlY2FjaGVBbmNlc3RvcnModGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnBhdXNlZCA9IGZ1bmN0aW9uIHBhdXNlZCh2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wcyAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX3BzID0gdmFsdWU7XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9wVGltZSA9IHRoaXMuX3RUaW1lIHx8IE1hdGgubWF4KC10aGlzLl9kZWxheSwgdGhpcy5yYXdUaW1lKCkpOyAvLyBpZiB0aGUgcGF1c2Ugb2NjdXJzIGR1cmluZyB0aGUgZGVsYXkgcGhhc2UsIG1ha2Ugc3VyZSB0aGF0J3MgZmFjdG9yZWQgaW4gd2hlbiByZXN1bWluZy5cblxuICAgICAgICB0aGlzLl90cyA9IHRoaXMuX2FjdCA9IDA7IC8vIF90cyBpcyB0aGUgZnVuY3Rpb25hbCB0aW1lU2NhbGUsIHNvIGEgcGF1c2VkIHR3ZWVuIHdvdWxkIGVmZmVjdGl2ZWx5IGhhdmUgYSB0aW1lU2NhbGUgb2YgMC4gV2UgcmVjb3JkIHRoZSBcInJlYWxcIiB0aW1lU2NhbGUgYXMgX3J0cyAocmVjb3JkZWQgdGltZSBzY2FsZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF93YWtlKCk7XG5cbiAgICAgICAgdGhpcy5fdHMgPSB0aGlzLl9ydHM7IC8vb25seSBkZWZlciB0byBfcFRpbWUgKHBhdXNlVGltZSkgaWYgdFRpbWUgaXMgemVyby4gUmVtZW1iZXIsIHNvbWVvbmUgY291bGQgcGF1c2UoKSBhbiBhbmltYXRpb24sIHRoZW4gc2NydWIgdGhlIHBsYXloZWFkIGFuZCByZXN1bWUoKS4gSWYgdGhlIHBhcmVudCBkb2Vzbid0IGhhdmUgc21vb3RoQ2hpbGRUaW1pbmcsIHdlIHJlbmRlciBhdCB0aGUgcmF3VGltZSgpIGJlY2F1c2UgdGhlIHN0YXJ0VGltZSB3b24ndCBnZXQgdXBkYXRlZC5cblxuICAgICAgICB0aGlzLnRvdGFsVGltZSh0aGlzLnBhcmVudCAmJiAhdGhpcy5wYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgPyB0aGlzLnJhd1RpbWUoKSA6IHRoaXMuX3RUaW1lIHx8IHRoaXMuX3BUaW1lLCB0aGlzLnByb2dyZXNzKCkgPT09IDEgJiYgTWF0aC5hYnModGhpcy5felRpbWUpICE9PSBfdGlueU51bSAmJiAodGhpcy5fdFRpbWUgLT0gX3RpbnlOdW0pKTsgLy8gZWRnZSBjYXNlOiBhbmltYXRpb24ucHJvZ3Jlc3MoMSkucGF1c2UoKS5wbGF5KCkgd291bGRuJ3QgcmVuZGVyIGFnYWluIGJlY2F1c2UgdGhlIHBsYXloZWFkIGlzIGFscmVhZHkgYXQgdGhlIGVuZCwgYnV0IHRoZSBjYWxsIHRvIHRvdGFsVGltZSgpIGJlbG93IHdpbGwgYWRkIGl0IGJhY2sgdG8gaXRzIHBhcmVudC4uLmFuZCBub3QgcmVtb3ZlIGl0IGFnYWluIChzaW5jZSByZW1vdmluZyBvbmx5IGhhcHBlbnMgdXBvbiByZW5kZXJpbmcgYXQgYSBuZXcgdGltZSkuIE9mZnNldHRpbmcgdGhlIF90VGltZSBzbGlnaHRseSBpcyBkb25lIHNpbXBseSB0byBjYXVzZSB0aGUgZmluYWwgcmVuZGVyIGluIHRvdGFsVGltZSgpIHRoYXQnbGwgcG9wIGl0IG9mZiBpdHMgdGltZWxpbmUgKGlmIGF1dG9SZW1vdmVDaGlsZHJlbiBpcyB0cnVlLCBvZiBjb3Vyc2UpLiBDaGVjayB0byBtYWtlIHN1cmUgX3pUaW1lIGlzbid0IC1fdGlueU51bSB0byBhdm9pZCBhbiBlZGdlIGNhc2Ugd2hlcmUgdGhlIHBsYXloZWFkIGlzIHB1c2hlZCB0byB0aGUgZW5kIGJ1dCBJTlNJREUgYSB0d2Vlbi9jYWxsYmFjaywgdGhlIHRpbWVsaW5lIGl0c2VsZiBpcyBwYXVzZWQgdGh1cyBoYWx0aW5nIHJlbmRlcmluZyBhbmQgbGVhdmluZyBhIGZldyB1bnJlbmRlcmVkLiBXaGVuIHJlc3VtaW5nLCBpdCB3b3VsZG4ndCByZW5kZXIgdGhvc2Ugb3RoZXJ3aXNlLlxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5zdGFydFRpbWUgPSBmdW5jdGlvbiBzdGFydFRpbWUodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fc3RhcnQgPSB2YWx1ZTtcbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcDtcbiAgICAgIHBhcmVudCAmJiAocGFyZW50Ll9zb3J0IHx8ICF0aGlzLnBhcmVudCkgJiYgX2FkZFRvVGltZWxpbmUocGFyZW50LCB0aGlzLCB2YWx1ZSAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdGFydDtcbiAgfTtcblxuICBfcHJvdG8uZW5kVGltZSA9IGZ1bmN0aW9uIGVuZFRpbWUoaW5jbHVkZVJlcGVhdHMpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnQgKyAoX2lzTm90RmFsc2UoaW5jbHVkZVJlcGVhdHMpID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLmR1cmF0aW9uKCkpIC8gTWF0aC5hYnModGhpcy5fdHMgfHwgMSk7XG4gIH07XG5cbiAgX3Byb3RvLnJhd1RpbWUgPSBmdW5jdGlvbiByYXdUaW1lKHdyYXBSZXBlYXRzKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwOyAvLyBfZHAgPSBkZXRhY2hlZCBwYXJlbnRcblxuICAgIHJldHVybiAhcGFyZW50ID8gdGhpcy5fdFRpbWUgOiB3cmFwUmVwZWF0cyAmJiAoIXRoaXMuX3RzIHx8IHRoaXMuX3JlcGVhdCAmJiB0aGlzLl90aW1lICYmIHRoaXMudG90YWxQcm9ncmVzcygpIDwgMSkgPyB0aGlzLl90VGltZSAlICh0aGlzLl9kdXIgKyB0aGlzLl9yRGVsYXkpIDogIXRoaXMuX3RzID8gdGhpcy5fdFRpbWUgOiBfcGFyZW50VG9DaGlsZFRvdGFsVGltZShwYXJlbnQucmF3VGltZSh3cmFwUmVwZWF0cyksIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnQgPSBmdW5jdGlvbiByZXZlcnQoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7XG4gICAgICBjb25maWcgPSBfcmV2ZXJ0Q29uZmlnO1xuICAgIH1cblxuICAgIHZhciBwcmV2SXNSZXZlcnRpbmcgPSBfcmV2ZXJ0aW5nO1xuICAgIF9yZXZlcnRpbmcgPSBjb25maWc7XG5cbiAgICBpZiAodGhpcy5faW5pdHRlZCB8fCB0aGlzLl9zdGFydEF0KSB7XG4gICAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUucmV2ZXJ0KGNvbmZpZyk7XG4gICAgICB0aGlzLnRvdGFsVGltZSgtMC4wMSwgY29uZmlnLnN1cHByZXNzRXZlbnRzKTtcbiAgICB9XG5cbiAgICB0aGlzLmRhdGEgIT09IFwibmVzdGVkXCIgJiYgY29uZmlnLmtpbGwgIT09IGZhbHNlICYmIHRoaXMua2lsbCgpO1xuICAgIF9yZXZlcnRpbmcgPSBwcmV2SXNSZXZlcnRpbmc7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmdsb2JhbFRpbWUgPSBmdW5jdGlvbiBnbG9iYWxUaW1lKHJhd1RpbWUpIHtcbiAgICB2YXIgYW5pbWF0aW9uID0gdGhpcyxcbiAgICAgICAgdGltZSA9IGFyZ3VtZW50cy5sZW5ndGggPyByYXdUaW1lIDogYW5pbWF0aW9uLnJhd1RpbWUoKTtcblxuICAgIHdoaWxlIChhbmltYXRpb24pIHtcbiAgICAgIHRpbWUgPSBhbmltYXRpb24uX3N0YXJ0ICsgdGltZSAvIChNYXRoLmFicyhhbmltYXRpb24uX3RzKSB8fCAxKTtcbiAgICAgIGFuaW1hdGlvbiA9IGFuaW1hdGlvbi5fZHA7XG4gICAgfVxuXG4gICAgcmV0dXJuICF0aGlzLnBhcmVudCAmJiB0aGlzLl9zYXQgPyB0aGlzLl9zYXQuZ2xvYmFsVGltZShyYXdUaW1lKSA6IHRpbWU7IC8vIHRoZSBfc3RhcnRBdCB0d2VlbnMgZm9yIC5mcm9tVG8oKSBhbmQgLmZyb20oKSB0aGF0IGhhdmUgaW1tZWRpYXRlUmVuZGVyIHNob3VsZCBhbHdheXMgYmUgRklSU1QgaW4gdGhlIHRpbWVsaW5lIChpbXBvcnRhbnQgZm9yIGNvbnRleHQucmV2ZXJ0KCkpLiBcIl9zYXRcIiBzdGFuZHMgZm9yIF9zdGFydEF0VHdlZW4sIHJlZmVycmluZyB0byB0aGUgcGFyZW50IHR3ZWVuIHRoYXQgY3JlYXRlZCB0aGUgX3N0YXJ0QXQuIFdlIG11c3QgZGlzY2VybiBpZiB0aGF0IHR3ZWVuIGhhZCBpbW1lZGlhdGVSZW5kZXIgc28gdGhhdCB3ZSBjYW4ga25vdyB3aGV0aGVyIG9yIG5vdCB0byBwcmlvcml0aXplIGl0IGluIHJldmVydCgpLlxuICB9O1xuXG4gIF9wcm90by5yZXBlYXQgPSBmdW5jdGlvbiByZXBlYXQodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fcmVwZWF0ID0gdmFsdWUgPT09IEluZmluaXR5ID8gLTIgOiB2YWx1ZTtcbiAgICAgIHJldHVybiBfb25VcGRhdGVUb3RhbER1cmF0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yZXBlYXQgPT09IC0yID8gSW5maW5pdHkgOiB0aGlzLl9yZXBlYXQ7XG4gIH07XG5cbiAgX3Byb3RvLnJlcGVhdERlbGF5ID0gZnVuY3Rpb24gcmVwZWF0RGVsYXkodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdmFyIHRpbWUgPSB0aGlzLl90aW1lO1xuICAgICAgdGhpcy5fckRlbGF5ID0gdmFsdWU7XG5cbiAgICAgIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24odGhpcyk7XG5cbiAgICAgIHJldHVybiB0aW1lID8gdGhpcy50aW1lKHRpbWUpIDogdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fckRlbGF5O1xuICB9O1xuXG4gIF9wcm90by55b3lvID0gZnVuY3Rpb24geW95byh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl95b3lvID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5feW95bztcbiAgfTtcblxuICBfcHJvdG8uc2VlayA9IGZ1bmN0aW9uIHNlZWsocG9zaXRpb24sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSwgX2lzTm90RmFsc2Uoc3VwcHJlc3NFdmVudHMpKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdGFydCA9IGZ1bmN0aW9uIHJlc3RhcnQoaW5jbHVkZURlbGF5LCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiB0aGlzLnBsYXkoKS50b3RhbFRpbWUoaW5jbHVkZURlbGF5ID8gLXRoaXMuX2RlbGF5IDogMCwgX2lzTm90RmFsc2Uoc3VwcHJlc3NFdmVudHMpKTtcbiAgfTtcblxuICBfcHJvdG8ucGxheSA9IGZ1bmN0aW9uIHBsYXkoZnJvbSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBmcm9tICE9IG51bGwgJiYgdGhpcy5zZWVrKGZyb20sIHN1cHByZXNzRXZlbnRzKTtcbiAgICByZXR1cm4gdGhpcy5yZXZlcnNlZChmYWxzZSkucGF1c2VkKGZhbHNlKTtcbiAgfTtcblxuICBfcHJvdG8ucmV2ZXJzZSA9IGZ1bmN0aW9uIHJldmVyc2UoZnJvbSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBmcm9tICE9IG51bGwgJiYgdGhpcy5zZWVrKGZyb20gfHwgdGhpcy50b3RhbER1cmF0aW9uKCksIHN1cHByZXNzRXZlbnRzKTtcbiAgICByZXR1cm4gdGhpcy5yZXZlcnNlZCh0cnVlKS5wYXVzZWQoZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5wYXVzZSA9IGZ1bmN0aW9uIHBhdXNlKGF0VGltZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBhdFRpbWUgIT0gbnVsbCAmJiB0aGlzLnNlZWsoYXRUaW1lLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucGF1c2VkKHRydWUpO1xuICB9O1xuXG4gIF9wcm90by5yZXN1bWUgPSBmdW5jdGlvbiByZXN1bWUoKSB7XG4gICAgcmV0dXJuIHRoaXMucGF1c2VkKGZhbHNlKTtcbiAgfTtcblxuICBfcHJvdG8ucmV2ZXJzZWQgPSBmdW5jdGlvbiByZXZlcnNlZCh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAhIXZhbHVlICE9PSB0aGlzLnJldmVyc2VkKCkgJiYgdGhpcy50aW1lU2NhbGUoLXRoaXMuX3J0cyB8fCAodmFsdWUgPyAtX3RpbnlOdW0gOiAwKSk7IC8vIGluIGNhc2UgdGltZVNjYWxlIGlzIHplcm8sIHJldmVyc2luZyB3b3VsZCBoYXZlIG5vIGVmZmVjdCBzbyB3ZSB1c2UgX3RpbnlOdW0uXG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9ydHMgPCAwO1xuICB9O1xuXG4gIF9wcm90by5pbnZhbGlkYXRlID0gZnVuY3Rpb24gaW52YWxpZGF0ZSgpIHtcbiAgICB0aGlzLl9pbml0dGVkID0gdGhpcy5fYWN0ID0gMDtcbiAgICB0aGlzLl96VGltZSA9IC1fdGlueU51bTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uaXNBY3RpdmUgPSBmdW5jdGlvbiBpc0FjdGl2ZSgpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgdGhpcy5fZHAsXG4gICAgICAgIHN0YXJ0ID0gdGhpcy5fc3RhcnQsXG4gICAgICAgIHJhd1RpbWU7XG4gICAgcmV0dXJuICEhKCFwYXJlbnQgfHwgdGhpcy5fdHMgJiYgdGhpcy5faW5pdHRlZCAmJiBwYXJlbnQuaXNBY3RpdmUoKSAmJiAocmF3VGltZSA9IHBhcmVudC5yYXdUaW1lKHRydWUpKSA+PSBzdGFydCAmJiByYXdUaW1lIDwgdGhpcy5lbmRUaW1lKHRydWUpIC0gX3RpbnlOdW0pO1xuICB9O1xuXG4gIF9wcm90by5ldmVudENhbGxiYWNrID0gZnVuY3Rpb24gZXZlbnRDYWxsYmFjayh0eXBlLCBjYWxsYmFjaywgcGFyYW1zKSB7XG4gICAgdmFyIHZhcnMgPSB0aGlzLnZhcnM7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgZGVsZXRlIHZhcnNbdHlwZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXJzW3R5cGVdID0gY2FsbGJhY2s7XG4gICAgICAgIHBhcmFtcyAmJiAodmFyc1t0eXBlICsgXCJQYXJhbXNcIl0gPSBwYXJhbXMpO1xuICAgICAgICB0eXBlID09PSBcIm9uVXBkYXRlXCIgJiYgKHRoaXMuX29uVXBkYXRlID0gY2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdmFyc1t0eXBlXTtcbiAgfTtcblxuICBfcHJvdG8udGhlbiA9IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICB2YXIgZiA9IF9pc0Z1bmN0aW9uKG9uRnVsZmlsbGVkKSA/IG9uRnVsZmlsbGVkIDogX3Bhc3NUaHJvdWdoLFxuICAgICAgICAgIF9yZXNvbHZlID0gZnVuY3Rpb24gX3Jlc29sdmUoKSB7XG4gICAgICAgIHZhciBfdGhlbiA9IHNlbGYudGhlbjtcbiAgICAgICAgc2VsZi50aGVuID0gbnVsbDsgLy8gdGVtcG9yYXJpbHkgbnVsbCB0aGUgdGhlbigpIG1ldGhvZCB0byBhdm9pZCBhbiBpbmZpbml0ZSBsb29wIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dyZWVuc29jay9HU0FQL2lzc3Vlcy8zMjIpXG5cbiAgICAgICAgX2lzRnVuY3Rpb24oZikgJiYgKGYgPSBmKHNlbGYpKSAmJiAoZi50aGVuIHx8IGYgPT09IHNlbGYpICYmIChzZWxmLnRoZW4gPSBfdGhlbik7XG4gICAgICAgIHJlc29sdmUoZik7XG4gICAgICAgIHNlbGYudGhlbiA9IF90aGVuO1xuICAgICAgfTtcblxuICAgICAgaWYgKHNlbGYuX2luaXR0ZWQgJiYgc2VsZi50b3RhbFByb2dyZXNzKCkgPT09IDEgJiYgc2VsZi5fdHMgPj0gMCB8fCAhc2VsZi5fdFRpbWUgJiYgc2VsZi5fdHMgPCAwKSB7XG4gICAgICAgIF9yZXNvbHZlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLl9wcm9tID0gX3Jlc29sdmU7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmtpbGwgPSBmdW5jdGlvbiBraWxsKCkge1xuICAgIF9pbnRlcnJ1cHQodGhpcyk7XG4gIH07XG5cbiAgcmV0dXJuIEFuaW1hdGlvbjtcbn0oKTtcblxuX3NldERlZmF1bHRzKEFuaW1hdGlvbi5wcm90b3R5cGUsIHtcbiAgX3RpbWU6IDAsXG4gIF9zdGFydDogMCxcbiAgX2VuZDogMCxcbiAgX3RUaW1lOiAwLFxuICBfdER1cjogMCxcbiAgX2RpcnR5OiAwLFxuICBfcmVwZWF0OiAwLFxuICBfeW95bzogZmFsc2UsXG4gIHBhcmVudDogbnVsbCxcbiAgX2luaXR0ZWQ6IGZhbHNlLFxuICBfckRlbGF5OiAwLFxuICBfdHM6IDEsXG4gIF9kcDogMCxcbiAgcmF0aW86IDAsXG4gIF96VGltZTogLV90aW55TnVtLFxuICBfcHJvbTogMCxcbiAgX3BzOiBmYWxzZSxcbiAgX3J0czogMVxufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVElNRUxJTkVcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbmV4cG9ydCB2YXIgVGltZWxpbmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BbmltYXRpb24pIHtcbiAgX2luaGVyaXRzTG9vc2UoVGltZWxpbmUsIF9BbmltYXRpb24pO1xuXG4gIGZ1bmN0aW9uIFRpbWVsaW5lKHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgaWYgKHZhcnMgPT09IHZvaWQgMCkge1xuICAgICAgdmFycyA9IHt9O1xuICAgIH1cblxuICAgIF90aGlzID0gX0FuaW1hdGlvbi5jYWxsKHRoaXMsIHZhcnMpIHx8IHRoaXM7XG4gICAgX3RoaXMubGFiZWxzID0ge307XG4gICAgX3RoaXMuc21vb3RoQ2hpbGRUaW1pbmcgPSAhIXZhcnMuc21vb3RoQ2hpbGRUaW1pbmc7XG4gICAgX3RoaXMuYXV0b1JlbW92ZUNoaWxkcmVuID0gISF2YXJzLmF1dG9SZW1vdmVDaGlsZHJlbjtcbiAgICBfdGhpcy5fc29ydCA9IF9pc05vdEZhbHNlKHZhcnMuc29ydENoaWxkcmVuKTtcbiAgICBfZ2xvYmFsVGltZWxpbmUgJiYgX2FkZFRvVGltZWxpbmUodmFycy5wYXJlbnQgfHwgX2dsb2JhbFRpbWVsaW5lLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgcG9zaXRpb24pO1xuICAgIHZhcnMucmV2ZXJzZWQgJiYgX3RoaXMucmV2ZXJzZSgpO1xuICAgIHZhcnMucGF1c2VkICYmIF90aGlzLnBhdXNlZCh0cnVlKTtcbiAgICB2YXJzLnNjcm9sbFRyaWdnZXIgJiYgX3Njcm9sbFRyaWdnZXIoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHZhcnMuc2Nyb2xsVHJpZ2dlcik7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90bzIgPSBUaW1lbGluZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMi50byA9IGZ1bmN0aW9uIHRvKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSgwLCBhcmd1bWVudHMsIHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5mcm9tID0gZnVuY3Rpb24gZnJvbSh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMSwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZnJvbVRvID0gZnVuY3Rpb24gZnJvbVRvKHRhcmdldHMsIGZyb21WYXJzLCB0b1ZhcnMsIHBvc2l0aW9uKSB7XG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSgyLCBhcmd1bWVudHMsIHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5zZXQgPSBmdW5jdGlvbiBzZXQodGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICB2YXJzLmR1cmF0aW9uID0gMDtcbiAgICB2YXJzLnBhcmVudCA9IHRoaXM7XG4gICAgX2luaGVyaXREZWZhdWx0cyh2YXJzKS5yZXBlYXREZWxheSB8fCAodmFycy5yZXBlYXQgPSAwKTtcbiAgICB2YXJzLmltbWVkaWF0ZVJlbmRlciA9ICEhdmFycy5pbW1lZGlhdGVSZW5kZXI7XG4gICAgbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSwgMSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5jYWxsID0gZnVuY3Rpb24gY2FsbChjYWxsYmFjaywgcGFyYW1zLCBwb3NpdGlvbikge1xuICAgIHJldHVybiBfYWRkVG9UaW1lbGluZSh0aGlzLCBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjYWxsYmFjaywgcGFyYW1zKSwgcG9zaXRpb24pO1xuICB9IC8vT05MWSBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSEgTWF5YmUgZGVsZXRlP1xuICA7XG5cbiAgX3Byb3RvMi5zdGFnZ2VyVG8gPSBmdW5jdGlvbiBzdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgIHZhcnMuc3RhZ2dlciA9IHZhcnMuc3RhZ2dlciB8fCBzdGFnZ2VyO1xuICAgIHZhcnMub25Db21wbGV0ZSA9IG9uQ29tcGxldGVBbGw7XG4gICAgdmFycy5vbkNvbXBsZXRlUGFyYW1zID0gb25Db21wbGV0ZUFsbFBhcmFtcztcbiAgICB2YXJzLnBhcmVudCA9IHRoaXM7XG4gICAgbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5zdGFnZ2VyRnJvbSA9IGZ1bmN0aW9uIHN0YWdnZXJGcm9tKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcykge1xuICAgIHZhcnMucnVuQmFja3dhcmRzID0gMTtcbiAgICBfaW5oZXJpdERlZmF1bHRzKHZhcnMpLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKHZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICByZXR1cm4gdGhpcy5zdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKTtcbiAgfTtcblxuICBfcHJvdG8yLnN0YWdnZXJGcm9tVG8gPSBmdW5jdGlvbiBzdGFnZ2VyRnJvbVRvKHRhcmdldHMsIGR1cmF0aW9uLCBmcm9tVmFycywgdG9WYXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcykge1xuICAgIHRvVmFycy5zdGFydEF0ID0gZnJvbVZhcnM7XG4gICAgX2luaGVyaXREZWZhdWx0cyh0b1ZhcnMpLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKHRvVmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgIHJldHVybiB0aGlzLnN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdG9WYXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgICB2YXIgcHJldlRpbWUgPSB0aGlzLl90aW1lLFxuICAgICAgICB0RHVyID0gdGhpcy5fZGlydHkgPyB0aGlzLnRvdGFsRHVyYXRpb24oKSA6IHRoaXMuX3REdXIsXG4gICAgICAgIGR1ciA9IHRoaXMuX2R1cixcbiAgICAgICAgdFRpbWUgPSB0b3RhbFRpbWUgPD0gMCA/IDAgOiBfcm91bmRQcmVjaXNlKHRvdGFsVGltZSksXG4gICAgICAgIC8vIGlmIGEgcGF1c2VkIHRpbWVsaW5lIGlzIHJlc3VtZWQgKG9yIGl0cyBfc3RhcnQgaXMgdXBkYXRlZCBmb3IgYW5vdGhlciByZWFzb24uLi53aGljaCByb3VuZHMgaXQpLCB0aGF0IGNvdWxkIHJlc3VsdCBpbiB0aGUgcGxheWhlYWQgc2hpZnRpbmcgYSAqKnRpbnkqKiBhbW91bnQgYW5kIGEgemVyby1kdXJhdGlvbiBjaGlsZCBhdCB0aGF0IHNwb3QgbWF5IGdldCByZW5kZXJlZCBhdCBhIGRpZmZlcmVudCByYXRpbywgbGlrZSBpdHMgdG90YWxUaW1lIGluIHJlbmRlcigpIG1heSBiZSAxZS0xNyBpbnN0ZWFkIG9mIDAsIGZvciBleGFtcGxlLlxuICAgIGNyb3NzaW5nU3RhcnQgPSB0aGlzLl96VGltZSA8IDAgIT09IHRvdGFsVGltZSA8IDAgJiYgKHRoaXMuX2luaXR0ZWQgfHwgIWR1ciksXG4gICAgICAgIHRpbWUsXG4gICAgICAgIGNoaWxkLFxuICAgICAgICBuZXh0LFxuICAgICAgICBpdGVyYXRpb24sXG4gICAgICAgIGN5Y2xlRHVyYXRpb24sXG4gICAgICAgIHByZXZQYXVzZWQsXG4gICAgICAgIHBhdXNlVHdlZW4sXG4gICAgICAgIHRpbWVTY2FsZSxcbiAgICAgICAgcHJldlN0YXJ0LFxuICAgICAgICBwcmV2SXRlcmF0aW9uLFxuICAgICAgICB5b3lvLFxuICAgICAgICBpc1lveW87XG4gICAgdGhpcyAhPT0gX2dsb2JhbFRpbWVsaW5lICYmIHRUaW1lID4gdER1ciAmJiB0b3RhbFRpbWUgPj0gMCAmJiAodFRpbWUgPSB0RHVyKTtcblxuICAgIGlmICh0VGltZSAhPT0gdGhpcy5fdFRpbWUgfHwgZm9yY2UgfHwgY3Jvc3NpbmdTdGFydCkge1xuICAgICAgaWYgKHByZXZUaW1lICE9PSB0aGlzLl90aW1lICYmIGR1cikge1xuICAgICAgICAvL2lmIHRvdGFsRHVyYXRpb24oKSBmaW5kcyBhIGNoaWxkIHdpdGggYSBuZWdhdGl2ZSBzdGFydFRpbWUgYW5kIHNtb290aENoaWxkVGltaW5nIGlzIHRydWUsIHRoaW5ncyBnZXQgc2hpZnRlZCBhcm91bmQgaW50ZXJuYWxseSBzbyB3ZSBuZWVkIHRvIGFkanVzdCB0aGUgdGltZSBhY2NvcmRpbmdseS4gRm9yIGV4YW1wbGUsIGlmIGEgdHdlZW4gc3RhcnRzIGF0IC0zMCB3ZSBtdXN0IHNoaWZ0IEVWRVJZVEhJTkcgZm9yd2FyZCAzMCBzZWNvbmRzIGFuZCBtb3ZlIHRoaXMgdGltZWxpbmUncyBzdGFydFRpbWUgYmFja3dhcmQgYnkgMzAgc2Vjb25kcyBzbyB0aGF0IHRoaW5ncyBhbGlnbiB3aXRoIHRoZSBwbGF5aGVhZCAobm8ganVtcCkuXG4gICAgICAgIHRUaW1lICs9IHRoaXMuX3RpbWUgLSBwcmV2VGltZTtcbiAgICAgICAgdG90YWxUaW1lICs9IHRoaXMuX3RpbWUgLSBwcmV2VGltZTtcbiAgICAgIH1cblxuICAgICAgdGltZSA9IHRUaW1lO1xuICAgICAgcHJldlN0YXJ0ID0gdGhpcy5fc3RhcnQ7XG4gICAgICB0aW1lU2NhbGUgPSB0aGlzLl90cztcbiAgICAgIHByZXZQYXVzZWQgPSAhdGltZVNjYWxlO1xuXG4gICAgICBpZiAoY3Jvc3NpbmdTdGFydCkge1xuICAgICAgICBkdXIgfHwgKHByZXZUaW1lID0gdGhpcy5felRpbWUpOyAvL3doZW4gdGhlIHBsYXloZWFkIGFycml2ZXMgYXQgRVhBQ1RMWSB0aW1lIDAgKHJpZ2h0IG9uIHRvcCkgb2YgYSB6ZXJvLWR1cmF0aW9uIHRpbWVsaW5lLCB3ZSBuZWVkIHRvIGRpc2Nlcm4gaWYgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIHNvIHRoYXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgYWdhaW4gKG5leHQgdGltZSksIGl0J2xsIHRyaWdnZXIgdGhlIGNhbGxiYWNrLiBJZiBldmVudHMgYXJlIE5PVCBzdXBwcmVzc2VkLCBvYnZpb3VzbHkgdGhlIGNhbGxiYWNrIHdvdWxkIGJlIHRyaWdnZXJlZCBpbiB0aGlzIHJlbmRlci4gQmFzaWNhbGx5LCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUgZWl0aGVyIHdoZW4gdGhlIHBsYXloZWFkIEFSUklWRVMgb3IgTEVBVkVTIHRoaXMgZXhhY3Qgc3BvdCwgbm90IGJvdGguIEltYWdpbmUgZG9pbmcgYSB0aW1lbGluZS5zZWVrKDApIGFuZCB0aGVyZSdzIGEgY2FsbGJhY2sgdGhhdCBzaXRzIGF0IDAuIFNpbmNlIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBvbiB0aGF0IHNlZWsoKSBieSBkZWZhdWx0LCBub3RoaW5nIHdpbGwgZmlyZSwgYnV0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIG9mZiBvZiB0aGF0IHBvc2l0aW9uLCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUuIFRoaXMgYmVoYXZpb3IgaXMgd2hhdCBwZW9wbGUgaW50dWl0aXZlbHkgZXhwZWN0LlxuXG4gICAgICAgICh0b3RhbFRpbWUgfHwgIXN1cHByZXNzRXZlbnRzKSAmJiAodGhpcy5felRpbWUgPSB0b3RhbFRpbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fcmVwZWF0KSB7XG4gICAgICAgIC8vYWRqdXN0IHRoZSB0aW1lIGZvciByZXBlYXRzIGFuZCB5b3lvc1xuICAgICAgICB5b3lvID0gdGhpcy5feW95bztcbiAgICAgICAgY3ljbGVEdXJhdGlvbiA9IGR1ciArIHRoaXMuX3JEZWxheTtcblxuICAgICAgICBpZiAodGhpcy5fcmVwZWF0IDwgLTEgJiYgdG90YWxUaW1lIDwgMCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShjeWNsZUR1cmF0aW9uICogMTAwICsgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGltZSA9IF9yb3VuZFByZWNpc2UodFRpbWUgJSBjeWNsZUR1cmF0aW9uKTsgLy9yb3VuZCB0byBhdm9pZCBmbG9hdGluZyBwb2ludCBlcnJvcnMuICg0ICUgMC44IHNob3VsZCBiZSAwIGJ1dCBzb21lIGJyb3dzZXJzIHJlcG9ydCBpdCBhcyAwLjc5OTk5OTk5ISlcblxuICAgICAgICBpZiAodFRpbWUgPT09IHREdXIpIHtcbiAgICAgICAgICAvLyB0aGUgdER1ciA9PT0gdFRpbWUgaXMgZm9yIGVkZ2UgY2FzZXMgd2hlcmUgdGhlcmUncyBhIGxlbmd0aHkgZGVjaW1hbCBvbiB0aGUgZHVyYXRpb24gYW5kIGl0IG1heSByZWFjaCB0aGUgdmVyeSBlbmQgYnV0IHRoZSB0aW1lIGlzIHJlbmRlcmVkIGFzIG5vdC1xdWl0ZS10aGVyZSAocmVtZW1iZXIsIHREdXIgaXMgcm91bmRlZCB0byA0IGRlY2ltYWxzIHdoZXJlYXMgZHVyIGlzbid0KVxuICAgICAgICAgIGl0ZXJhdGlvbiA9IHRoaXMuX3JlcGVhdDtcbiAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZXJhdGlvbiA9IH5+KHRUaW1lIC8gY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgICBpZiAoaXRlcmF0aW9uICYmIGl0ZXJhdGlvbiA9PT0gdFRpbWUgLyBjeWNsZUR1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICAgICAgaXRlcmF0aW9uLS07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGltZSA+IGR1ciAmJiAodGltZSA9IGR1cik7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2SXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKTtcbiAgICAgICAgIXByZXZUaW1lICYmIHRoaXMuX3RUaW1lICYmIHByZXZJdGVyYXRpb24gIT09IGl0ZXJhdGlvbiAmJiB0aGlzLl90VGltZSAtIHByZXZJdGVyYXRpb24gKiBjeWNsZUR1cmF0aW9uIC0gdGhpcy5fZHVyIDw9IDAgJiYgKHByZXZJdGVyYXRpb24gPSBpdGVyYXRpb24pOyAvLyBlZGdlIGNhc2UgLSBpZiBzb21lb25lIGRvZXMgYWRkUGF1c2UoKSBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgb2YgYSByZXBlYXRpbmcgdGltZWxpbmUsIHRoYXQgcGF1c2UgaXMgdGVjaG5pY2FsbHkgYXQgdGhlIHNhbWUgc3BvdCBhcyB0aGUgZW5kIHdoaWNoIGNhdXNlcyB0aGlzLl90aW1lIHRvIGdldCBzZXQgdG8gMCB3aGVuIHRoZSB0b3RhbFRpbWUgd291bGQgbm9ybWFsbHkgcGxhY2UgdGhlIHBsYXloZWFkIGF0IHRoZSBlbmQuIFNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8yMzgyMy1jbG9zaW5nLW5hdi1hbmltYXRpb24tbm90LXdvcmtpbmctb24taWUtYW5kLWlwaG9uZS02LW1heWJlLW90aGVyLW9sZGVyLWJyb3dzZXIvP3RhYj1jb21tZW50cyNjb21tZW50LTExMzAwNSBhbHNvLCB0aGlzLl90VGltZSAtIHByZXZJdGVyYXRpb24gKiBjeWNsZUR1cmF0aW9uIC0gdGhpcy5fZHVyIDw9IDAganVzdCBjaGVja3MgdG8gbWFrZSBzdXJlIGl0IHdhc24ndCBwcmV2aW91c2x5IGluIHRoZSBcInJlcGVhdERlbGF5XCIgcG9ydGlvblxuXG4gICAgICAgIGlmICh5b3lvICYmIGl0ZXJhdGlvbiAmIDEpIHtcbiAgICAgICAgICB0aW1lID0gZHVyIC0gdGltZTtcbiAgICAgICAgICBpc1lveW8gPSAxO1xuICAgICAgICB9XG4gICAgICAgIC8qXG4gICAgICAgIG1ha2Ugc3VyZSBjaGlsZHJlbiBhdCB0aGUgZW5kL2JlZ2lubmluZyBvZiB0aGUgdGltZWxpbmUgYXJlIHJlbmRlcmVkIHByb3Blcmx5LiBJZiwgZm9yIGV4YW1wbGUsXG4gICAgICAgIGEgMy1zZWNvbmQgbG9uZyB0aW1lbGluZSByZW5kZXJlZCBhdCAyLjkgc2Vjb25kcyBwcmV2aW91c2x5LCBhbmQgbm93IHJlbmRlcnMgYXQgMy4yIHNlY29uZHMgKHdoaWNoXG4gICAgICAgIHdvdWxkIGdldCB0cmFuc2xhdGVkIHRvIDIuOCBzZWNvbmRzIGlmIHRoZSB0aW1lbGluZSB5b3lvcyBvciAwLjIgc2Vjb25kcyBpZiBpdCBqdXN0IHJlcGVhdHMpLCB0aGVyZVxuICAgICAgICBjb3VsZCBiZSBhIGNhbGxiYWNrIG9yIGEgc2hvcnQgdHdlZW4gdGhhdCdzIGF0IDIuOTUgb3IgMyBzZWNvbmRzIGluIHdoaWNoIHdvdWxkbid0IHJlbmRlci4gU29cbiAgICAgICAgd2UgbmVlZCB0byBwdXNoIHRoZSB0aW1lbGluZSB0byB0aGUgZW5kIChhbmQvb3IgYmVnaW5uaW5nIGRlcGVuZGluZyBvbiBpdHMgeW95byB2YWx1ZSkuIEFsc28gd2UgbXVzdFxuICAgICAgICBlbnN1cmUgdGhhdCB6ZXJvLWR1cmF0aW9uIHR3ZWVucyBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgb3IgZW5kIG9mIHRoZSBUaW1lbGluZSB3b3JrLlxuICAgICAgICAqL1xuXG5cbiAgICAgICAgaWYgKGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbiAmJiAhdGhpcy5fbG9jaykge1xuICAgICAgICAgIHZhciByZXdpbmRpbmcgPSB5b3lvICYmIHByZXZJdGVyYXRpb24gJiAxLFxuICAgICAgICAgICAgICBkb2VzV3JhcCA9IHJld2luZGluZyA9PT0gKHlveW8gJiYgaXRlcmF0aW9uICYgMSk7XG4gICAgICAgICAgaXRlcmF0aW9uIDwgcHJldkl0ZXJhdGlvbiAmJiAocmV3aW5kaW5nID0gIXJld2luZGluZyk7XG4gICAgICAgICAgcHJldlRpbWUgPSByZXdpbmRpbmcgPyAwIDogdFRpbWUgJSBkdXIgPyBkdXIgOiB0VGltZTsgLy8gaWYgdGhlIHBsYXloZWFkIGlzIGxhbmRpbmcgZXhhY3RseSBhdCB0aGUgZW5kIG9mIGFuIGl0ZXJhdGlvbiwgdXNlIHRoYXQgdG90YWxUaW1lIHJhdGhlciB0aGFuIG9ubHkgdGhlIGR1cmF0aW9uLCBvdGhlcndpc2UgaXQnbGwgc2tpcCB0aGUgMm5kIHJlbmRlciBzaW5jZSBpdCdzIGVmZmVjdGl2ZWx5IGF0IHRoZSBzYW1lIHRpbWUuXG5cbiAgICAgICAgICB0aGlzLl9sb2NrID0gMTtcbiAgICAgICAgICB0aGlzLnJlbmRlcihwcmV2VGltZSB8fCAoaXNZb3lvID8gMCA6IF9yb3VuZFByZWNpc2UoaXRlcmF0aW9uICogY3ljbGVEdXJhdGlvbikpLCBzdXBwcmVzc0V2ZW50cywgIWR1cikuX2xvY2sgPSAwO1xuICAgICAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7IC8vIGlmIGEgdXNlciBnZXRzIHRoZSBpdGVyYXRpb24oKSBpbnNpZGUgdGhlIG9uUmVwZWF0LCBmb3IgZXhhbXBsZSwgaXQgc2hvdWxkIGJlIGFjY3VyYXRlLlxuXG4gICAgICAgICAgIXN1cHByZXNzRXZlbnRzICYmIHRoaXMucGFyZW50ICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uUmVwZWF0XCIpO1xuICAgICAgICAgIHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgKHRoaXMuaW52YWxpZGF0ZSgpLl9sb2NrID0gMSk7XG5cbiAgICAgICAgICBpZiAocHJldlRpbWUgJiYgcHJldlRpbWUgIT09IHRoaXMuX3RpbWUgfHwgcHJldlBhdXNlZCAhPT0gIXRoaXMuX3RzIHx8IHRoaXMudmFycy5vblJlcGVhdCAmJiAhdGhpcy5wYXJlbnQgJiYgIXRoaXMuX2FjdCkge1xuICAgICAgICAgICAgLy8gaWYgcHJldlRpbWUgaXMgMCBhbmQgd2UgcmVuZGVyIGF0IHRoZSB2ZXJ5IGVuZCwgX3RpbWUgd2lsbCBiZSB0aGUgZW5kLCB0aHVzIHdvbid0IG1hdGNoLiBTbyBpbiB0aGlzIGVkZ2UgY2FzZSwgcHJldlRpbWUgd29uJ3QgbWF0Y2ggX3RpbWUgYnV0IHRoYXQncyBva2F5LiBJZiBpdCBnZXRzIGtpbGxlZCBpbiB0aGUgb25SZXBlYXQsIGVqZWN0IGFzIHdlbGwuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkdXIgPSB0aGlzLl9kdXI7IC8vIGluIGNhc2UgdGhlIGR1cmF0aW9uIGNoYW5nZWQgaW4gdGhlIG9uUmVwZWF0XG5cbiAgICAgICAgICB0RHVyID0gdGhpcy5fdER1cjtcblxuICAgICAgICAgIGlmIChkb2VzV3JhcCkge1xuICAgICAgICAgICAgdGhpcy5fbG9jayA9IDI7XG4gICAgICAgICAgICBwcmV2VGltZSA9IHJld2luZGluZyA/IGR1ciA6IC0wLjAwMDE7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcihwcmV2VGltZSwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmIHRoaXMuaW52YWxpZGF0ZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuX2xvY2sgPSAwO1xuXG4gICAgICAgICAgaWYgKCF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfSAvL2luIG9yZGVyIGZvciB5b3lvRWFzZSB0byB3b3JrIHByb3Blcmx5IHdoZW4gdGhlcmUncyBhIHN0YWdnZXIsIHdlIG11c3Qgc3dhcCBvdXQgdGhlIGVhc2UgaW4gZWFjaCBzdWItdHdlZW4uXG5cblxuICAgICAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZSh0aGlzLCBpc1lveW8pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9oYXNQYXVzZSAmJiAhdGhpcy5fZm9yY2luZyAmJiB0aGlzLl9sb2NrIDwgMikge1xuICAgICAgICBwYXVzZVR3ZWVuID0gX2ZpbmROZXh0UGF1c2VUd2Vlbih0aGlzLCBfcm91bmRQcmVjaXNlKHByZXZUaW1lKSwgX3JvdW5kUHJlY2lzZSh0aW1lKSk7XG5cbiAgICAgICAgaWYgKHBhdXNlVHdlZW4pIHtcbiAgICAgICAgICB0VGltZSAtPSB0aW1lIC0gKHRpbWUgPSBwYXVzZVR3ZWVuLl9zdGFydCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTtcbiAgICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICAgICAgdGhpcy5fYWN0ID0gIXRpbWVTY2FsZTsgLy9hcyBsb25nIGFzIGl0J3Mgbm90IHBhdXNlZCwgZm9yY2UgaXQgdG8gYmUgYWN0aXZlIHNvIHRoYXQgaWYgdGhlIHVzZXIgcmVuZGVycyBpbmRlcGVuZGVudCBvZiB0aGUgcGFyZW50IHRpbWVsaW5lLCBpdCdsbCBiZSBmb3JjZWQgdG8gcmUtcmVuZGVyIG9uIHRoZSBuZXh0IHRpY2suXG5cbiAgICAgIGlmICghdGhpcy5faW5pdHRlZCkge1xuICAgICAgICB0aGlzLl9vblVwZGF0ZSA9IHRoaXMudmFycy5vblVwZGF0ZTtcbiAgICAgICAgdGhpcy5faW5pdHRlZCA9IDE7XG4gICAgICAgIHRoaXMuX3pUaW1lID0gdG90YWxUaW1lO1xuICAgICAgICBwcmV2VGltZSA9IDA7IC8vIHVwb24gaW5pdCwgdGhlIHBsYXloZWFkIHNob3VsZCBhbHdheXMgZ28gZm9yd2FyZDsgc29tZW9uZSBjb3VsZCBpbnZhbGlkYXRlKCkgYSBjb21wbGV0ZWQgdGltZWxpbmUgYW5kIHRoZW4gaWYgdGhleSByZXN0YXJ0KCksIHRoYXQgd291bGQgbWFrZSBjaGlsZCB0d2VlbnMgcmVuZGVyIGluIHJldmVyc2Ugb3JkZXIgd2hpY2ggY291bGQgbG9jayBpbiB0aGUgd3Jvbmcgc3RhcnRpbmcgdmFsdWVzIGlmIHRoZXkgYnVpbGQgb24gZWFjaCBvdGhlciwgbGlrZSB0bC50byhvYmosIHt4OiAxMDB9KS50byhvYmosIHt4OiAwfSkuXG4gICAgICB9XG5cbiAgICAgIGlmICghcHJldlRpbWUgJiYgdGltZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgIWl0ZXJhdGlvbikge1xuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblN0YXJ0XCIpO1xuXG4gICAgICAgIGlmICh0aGlzLl90VGltZSAhPT0gdFRpbWUpIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIHRoZSBvblN0YXJ0IHRyaWdnZXJlZCBhIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90LCBlamVjdC4gTGlrZSBpZiBzb21lb25lIGRpZCBhbmltYXRpb24ucGF1c2UoMC41KSBvciBzb21ldGhpbmcgaW5zaWRlIHRoZSBvblN0YXJ0LlxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aW1lID49IHByZXZUaW1lICYmIHRvdGFsVGltZSA+PSAwKSB7XG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gICAgICAgICAgaWYgKChjaGlsZC5fYWN0IHx8IHRpbWUgPj0gY2hpbGQuX3N0YXJ0KSAmJiBjaGlsZC5fdHMgJiYgcGF1c2VUd2VlbiAhPT0gY2hpbGQpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5wYXJlbnQgIT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgLy8gYW4gZXh0cmVtZSBlZGdlIGNhc2UgLSB0aGUgY2hpbGQncyByZW5kZXIgY291bGQgZG8gc29tZXRoaW5nIGxpa2Uga2lsbCgpIHRoZSBcIm5leHRcIiBvbmUgaW4gdGhlIGxpbmtlZCBsaXN0LCBvciByZXBhcmVudCBpdC4gSW4gdGhhdCBjYXNlIHdlIG11c3QgcmUtaW5pdGlhdGUgdGhlIHdob2xlIHJlbmRlciB0byBiZSBzYWZlLlxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZC5yZW5kZXIoY2hpbGQuX3RzID4gMCA/ICh0aW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyA6IChjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cikgKyAodGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cbiAgICAgICAgICAgIGlmICh0aW1lICE9PSB0aGlzLl90aW1lIHx8ICF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgICAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgb3Igc2Vla3MgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nLCBsaWtlIGluc2lkZSBvZiBhbiBvblVwZGF0ZS9vbkNvbXBsZXRlXG4gICAgICAgICAgICAgIHBhdXNlVHdlZW4gPSAwO1xuICAgICAgICAgICAgICBuZXh0ICYmICh0VGltZSArPSB0aGlzLl96VGltZSA9IC1fdGlueU51bSk7IC8vIGl0IGRpZG4ndCBmaW5pc2ggcmVuZGVyaW5nLCBzbyBmbGFnIHpUaW1lIGFzIG5lZ2F0aXZlIHNvIHRoYXQgc28gdGhhdCB0aGUgbmV4dCB0aW1lIHJlbmRlcigpIGlzIGNhbGxlZCBpdCdsbCBiZSBmb3JjZWQgKHRvIHJlbmRlciBhbnkgcmVtYWluaW5nIGNoaWxkcmVuKVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoaWxkID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9sYXN0O1xuICAgICAgICB2YXIgYWRqdXN0ZWRUaW1lID0gdG90YWxUaW1lIDwgMCA/IHRvdGFsVGltZSA6IHRpbWU7IC8vd2hlbiB0aGUgcGxheWhlYWQgZ29lcyBiYWNrd2FyZCBiZXlvbmQgdGhlIHN0YXJ0IG9mIHRoaXMgdGltZWxpbmUsIHdlIG11c3QgcGFzcyB0aGF0IGluZm9ybWF0aW9uIGRvd24gdG8gdGhlIGNoaWxkIGFuaW1hdGlvbnMgc28gdGhhdCB6ZXJvLWR1cmF0aW9uIHR3ZWVucyBrbm93IHdoZXRoZXIgdG8gcmVuZGVyIHRoZWlyIHN0YXJ0aW5nIG9yIGVuZGluZyB2YWx1ZXMuXG5cbiAgICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgICAgbmV4dCA9IGNoaWxkLl9wcmV2O1xuXG4gICAgICAgICAgaWYgKChjaGlsZC5fYWN0IHx8IGFkanVzdGVkVGltZSA8PSBjaGlsZC5fZW5kKSAmJiBjaGlsZC5fdHMgJiYgcGF1c2VUd2VlbiAhPT0gY2hpbGQpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5wYXJlbnQgIT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgLy8gYW4gZXh0cmVtZSBlZGdlIGNhc2UgLSB0aGUgY2hpbGQncyByZW5kZXIgY291bGQgZG8gc29tZXRoaW5nIGxpa2Uga2lsbCgpIHRoZSBcIm5leHRcIiBvbmUgaW4gdGhlIGxpbmtlZCBsaXN0LCBvciByZXBhcmVudCBpdC4gSW4gdGhhdCBjYXNlIHdlIG11c3QgcmUtaW5pdGlhdGUgdGhlIHdob2xlIHJlbmRlciB0byBiZSBzYWZlLlxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZC5yZW5kZXIoY2hpbGQuX3RzID4gMCA/IChhZGp1c3RlZFRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzIDogKGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKSArIChhZGp1c3RlZFRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UgfHwgX3JldmVydGluZyAmJiAoY2hpbGQuX2luaXR0ZWQgfHwgY2hpbGQuX3N0YXJ0QXQpKTsgLy8gaWYgcmV2ZXJ0aW5nLCB3ZSBzaG91bGQgYWx3YXlzIGZvcmNlIHJlbmRlcnMgb2YgaW5pdHRlZCB0d2VlbnMgKGJ1dCByZW1lbWJlciB0aGF0IC5mcm9tVG8oKSBvciAuZnJvbSgpIG1heSBoYXZlIGEgX3N0YXJ0QXQgYnV0IG5vdCBfaW5pdHRlZCB5ZXQpLiBJZiwgZm9yIGV4YW1wbGUsIGEgLmZyb21UbygpIHR3ZWVuIHdpdGggYSBzdGFnZ2VyICh3aGljaCBjcmVhdGVzIGFuIGludGVybmFsIHRpbWVsaW5lKSBnZXRzIHJldmVydGVkIEJFRk9SRSBzb21lIG9mIGl0cyBjaGlsZCB0d2VlbnMgcmVuZGVyIGZvciB0aGUgZmlyc3QgdGltZSwgaXQgbWF5IG5vdCBwcm9wZXJseSB0cmlnZ2VyIHRoZW0gdG8gcmV2ZXJ0LlxuXG4gICAgICAgICAgICBpZiAodGltZSAhPT0gdGhpcy5fdGltZSB8fCAhdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgICAgLy9pbiBjYXNlIGEgdHdlZW4gcGF1c2VzIG9yIHNlZWtzIHRoZSB0aW1lbGluZSB3aGVuIHJlbmRlcmluZywgbGlrZSBpbnNpZGUgb2YgYW4gb25VcGRhdGUvb25Db21wbGV0ZVxuICAgICAgICAgICAgICBwYXVzZVR3ZWVuID0gMDtcbiAgICAgICAgICAgICAgbmV4dCAmJiAodFRpbWUgKz0gdGhpcy5felRpbWUgPSBhZGp1c3RlZFRpbWUgPyAtX3RpbnlOdW0gOiBfdGlueU51bSk7IC8vIGl0IGRpZG4ndCBmaW5pc2ggcmVuZGVyaW5nLCBzbyBhZGp1c3QgelRpbWUgc28gdGhhdCBzbyB0aGF0IHRoZSBuZXh0IHRpbWUgcmVuZGVyKCkgaXMgY2FsbGVkIGl0J2xsIGJlIGZvcmNlZCAodG8gcmVuZGVyIGFueSByZW1haW5pbmcgY2hpbGRyZW4pXG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXVzZVR3ZWVuICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgIHBhdXNlVHdlZW4ucmVuZGVyKHRpbWUgPj0gcHJldlRpbWUgPyAwIDogLV90aW55TnVtKS5felRpbWUgPSB0aW1lID49IHByZXZUaW1lID8gMSA6IC0xO1xuXG4gICAgICAgIGlmICh0aGlzLl90cykge1xuICAgICAgICAgIC8vdGhlIGNhbGxiYWNrIHJlc3VtZWQgcGxheWJhY2shIFNvIHNpbmNlIHdlIG1heSBoYXZlIGhlbGQgYmFjayB0aGUgcGxheWhlYWQgZHVlIHRvIHdoZXJlIHRoZSBwYXVzZSBpcyBwb3NpdGlvbmVkLCBnbyBhaGVhZCBhbmQganVtcCB0byB3aGVyZSBpdCdzIFNVUFBPU0VEIHRvIGJlIChpZiBubyBwYXVzZSBoYXBwZW5lZCkuXG4gICAgICAgICAgdGhpcy5fc3RhcnQgPSBwcmV2U3RhcnQ7IC8vaWYgdGhlIHBhdXNlIHdhcyBhdCBhbiBlYXJsaWVyIHRpbWUgYW5kIHRoZSB1c2VyIHJlc3VtZWQgaW4gdGhlIGNhbGxiYWNrLCBpdCBjb3VsZCByZXBvc2l0aW9uIHRoZSB0aW1lbGluZSAoY2hhbmdpbmcgaXRzIHN0YXJ0VGltZSksIHRocm93aW5nIHRoaW5ncyBvZmYgc2xpZ2h0bHksIHNvIHdlIG1ha2Ugc3VyZSB0aGUgX3N0YXJ0IGRvZXNuJ3Qgc2hpZnQuXG5cbiAgICAgICAgICBfc2V0RW5kKHRoaXMpO1xuXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25VcGRhdGVcIiwgdHJ1ZSk7XG4gICAgICBpZiAodFRpbWUgPT09IHREdXIgJiYgdGhpcy5fdFRpbWUgPj0gdGhpcy50b3RhbER1cmF0aW9uKCkgfHwgIXRUaW1lICYmIHByZXZUaW1lKSBpZiAocHJldlN0YXJ0ID09PSB0aGlzLl9zdGFydCB8fCBNYXRoLmFicyh0aW1lU2NhbGUpICE9PSBNYXRoLmFicyh0aGlzLl90cykpIGlmICghdGhpcy5fbG9jaykge1xuICAgICAgICAvLyByZW1lbWJlciwgYSBjaGlsZCdzIGNhbGxiYWNrIG1heSBhbHRlciB0aGlzIHRpbWVsaW5lJ3MgcGxheWhlYWQgb3IgdGltZVNjYWxlIHdoaWNoIGlzIHdoeSB3ZSBuZWVkIHRvIGFkZCBzb21lIG9mIHRoZXNlIGNoZWNrcy5cbiAgICAgICAgKHRvdGFsVGltZSB8fCAhZHVyKSAmJiAodFRpbWUgPT09IHREdXIgJiYgdGhpcy5fdHMgPiAwIHx8ICF0VGltZSAmJiB0aGlzLl90cyA8IDApICYmIF9yZW1vdmVGcm9tUGFyZW50KHRoaXMsIDEpOyAvLyBkb24ndCByZW1vdmUgaWYgdGhlIHRpbWVsaW5lIGlzIHJldmVyc2VkIGFuZCB0aGUgcGxheWhlYWQgaXNuJ3QgYXQgMCwgb3RoZXJ3aXNlIHRsLnByb2dyZXNzKDEpLnJldmVyc2UoKSB3b24ndCB3b3JrLiBPbmx5IHJlbW92ZSBpZiB0aGUgcGxheWhlYWQgaXMgYXQgdGhlIGVuZCBhbmQgdGltZVNjYWxlIGlzIHBvc2l0aXZlLCBvciBpZiB0aGUgcGxheWhlYWQgaXMgYXQgMCBhbmQgdGhlIHRpbWVTY2FsZSBpcyBuZWdhdGl2ZS5cblxuICAgICAgICBpZiAoIXN1cHByZXNzRXZlbnRzICYmICEodG90YWxUaW1lIDwgMCAmJiAhcHJldlRpbWUpICYmICh0VGltZSB8fCBwcmV2VGltZSB8fCAhdER1cikpIHtcbiAgICAgICAgICBfY2FsbGJhY2sodGhpcywgdFRpbWUgPT09IHREdXIgJiYgdG90YWxUaW1lID49IDAgPyBcIm9uQ29tcGxldGVcIiA6IFwib25SZXZlcnNlQ29tcGxldGVcIiwgdHJ1ZSk7XG5cbiAgICAgICAgICB0aGlzLl9wcm9tICYmICEodFRpbWUgPCB0RHVyICYmIHRoaXMudGltZVNjYWxlKCkgPiAwKSAmJiB0aGlzLl9wcm9tKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmFkZCA9IGZ1bmN0aW9uIGFkZChjaGlsZCwgcG9zaXRpb24pIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIF9pc051bWJlcihwb3NpdGlvbikgfHwgKHBvc2l0aW9uID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24sIGNoaWxkKSk7XG5cbiAgICBpZiAoIShjaGlsZCBpbnN0YW5jZW9mIEFuaW1hdGlvbikpIHtcbiAgICAgIGlmIChfaXNBcnJheShjaGlsZCkpIHtcbiAgICAgICAgY2hpbGQuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5hZGQob2JqLCBwb3NpdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgaWYgKF9pc1N0cmluZyhjaGlsZCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkTGFiZWwoY2hpbGQsIHBvc2l0aW9uKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9pc0Z1bmN0aW9uKGNoaWxkKSkge1xuICAgICAgICBjaGlsZCA9IFR3ZWVuLmRlbGF5ZWRDYWxsKDAsIGNoaWxkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzICE9PSBjaGlsZCA/IF9hZGRUb1RpbWVsaW5lKHRoaXMsIGNoaWxkLCBwb3NpdGlvbikgOiB0aGlzOyAvL2Rvbid0IGFsbG93IGEgdGltZWxpbmUgdG8gYmUgYWRkZWQgdG8gaXRzZWxmIGFzIGEgY2hpbGQhXG4gIH07XG5cbiAgX3Byb3RvMi5nZXRDaGlsZHJlbiA9IGZ1bmN0aW9uIGdldENoaWxkcmVuKG5lc3RlZCwgdHdlZW5zLCB0aW1lbGluZXMsIGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICBpZiAobmVzdGVkID09PSB2b2lkIDApIHtcbiAgICAgIG5lc3RlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHR3ZWVucyA9PT0gdm9pZCAwKSB7XG4gICAgICB0d2VlbnMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aW1lbGluZXMgPT09IHZvaWQgMCkge1xuICAgICAgdGltZWxpbmVzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaWdub3JlQmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBpZ25vcmVCZWZvcmVUaW1lID0gLV9iaWdOdW07XG4gICAgfVxuXG4gICAgdmFyIGEgPSBbXSxcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFR3ZWVuKSB7XG4gICAgICAgICAgdHdlZW5zICYmIGEucHVzaChjaGlsZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGltZWxpbmVzICYmIGEucHVzaChjaGlsZCk7XG4gICAgICAgICAgbmVzdGVkICYmIGEucHVzaC5hcHBseShhLCBjaGlsZC5nZXRDaGlsZHJlbih0cnVlLCB0d2VlbnMsIHRpbWVsaW5lcykpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH07XG5cbiAgX3Byb3RvMi5nZXRCeUlkID0gZnVuY3Rpb24gZ2V0QnlJZChpZCkge1xuICAgIHZhciBhbmltYXRpb25zID0gdGhpcy5nZXRDaGlsZHJlbigxLCAxLCAxKSxcbiAgICAgICAgaSA9IGFuaW1hdGlvbnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKGFuaW1hdGlvbnNbaV0udmFycy5pZCA9PT0gaWQpIHtcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbnNbaV07XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzIucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKGNoaWxkKSB7XG4gICAgaWYgKF9pc1N0cmluZyhjaGlsZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbW92ZUxhYmVsKGNoaWxkKTtcbiAgICB9XG5cbiAgICBpZiAoX2lzRnVuY3Rpb24oY2hpbGQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5raWxsVHdlZW5zT2YoY2hpbGQpO1xuICAgIH1cblxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBjaGlsZCk7XG5cbiAgICBpZiAoY2hpbGQgPT09IHRoaXMuX3JlY2VudCkge1xuICAgICAgdGhpcy5fcmVjZW50ID0gdGhpcy5fbGFzdDtcbiAgICB9XG5cbiAgICByZXR1cm4gX3VuY2FjaGUodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvMi50b3RhbFRpbWUgPSBmdW5jdGlvbiB0b3RhbFRpbWUoX3RvdGFsVGltZTIsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdFRpbWU7XG4gICAgfVxuXG4gICAgdGhpcy5fZm9yY2luZyA9IDE7XG5cbiAgICBpZiAoIXRoaXMuX2RwICYmIHRoaXMuX3RzKSB7XG4gICAgICAvL3NwZWNpYWwgY2FzZSBmb3IgdGhlIGdsb2JhbCB0aW1lbGluZSAob3IgYW55IG90aGVyIHRoYXQgaGFzIG5vIHBhcmVudCBvciBkZXRhY2hlZCBwYXJlbnQpLlxuICAgICAgdGhpcy5fc3RhcnQgPSBfcm91bmRQcmVjaXNlKF90aWNrZXIudGltZSAtICh0aGlzLl90cyA+IDAgPyBfdG90YWxUaW1lMiAvIHRoaXMuX3RzIDogKHRoaXMudG90YWxEdXJhdGlvbigpIC0gX3RvdGFsVGltZTIpIC8gLXRoaXMuX3RzKSk7XG4gICAgfVxuXG4gICAgX0FuaW1hdGlvbi5wcm90b3R5cGUudG90YWxUaW1lLmNhbGwodGhpcywgX3RvdGFsVGltZTIsIHN1cHByZXNzRXZlbnRzKTtcblxuICAgIHRoaXMuX2ZvcmNpbmcgPSAwO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkTGFiZWwgPSBmdW5jdGlvbiBhZGRMYWJlbChsYWJlbCwgcG9zaXRpb24pIHtcbiAgICB0aGlzLmxhYmVsc1tsYWJlbF0gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmVMYWJlbCA9IGZ1bmN0aW9uIHJlbW92ZUxhYmVsKGxhYmVsKSB7XG4gICAgZGVsZXRlIHRoaXMubGFiZWxzW2xhYmVsXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmFkZFBhdXNlID0gZnVuY3Rpb24gYWRkUGF1c2UocG9zaXRpb24sIGNhbGxiYWNrLCBwYXJhbXMpIHtcbiAgICB2YXIgdCA9IFR3ZWVuLmRlbGF5ZWRDYWxsKDAsIGNhbGxiYWNrIHx8IF9lbXB0eUZ1bmMsIHBhcmFtcyk7XG4gICAgdC5kYXRhID0gXCJpc1BhdXNlXCI7XG4gICAgdGhpcy5faGFzUGF1c2UgPSAxO1xuICAgIHJldHVybiBfYWRkVG9UaW1lbGluZSh0aGlzLCB0LCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbikpO1xuICB9O1xuXG4gIF9wcm90bzIucmVtb3ZlUGF1c2UgPSBmdW5jdGlvbiByZW1vdmVQYXVzZShwb3NpdGlvbikge1xuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuICAgIHBvc2l0aW9uID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID09PSBwb3NpdGlvbiAmJiBjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIikge1xuICAgICAgICBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzIua2lsbFR3ZWVuc09mID0gZnVuY3Rpb24ga2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKSB7XG4gICAgdmFyIHR3ZWVucyA9IHRoaXMuZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSksXG4gICAgICAgIGkgPSB0d2VlbnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgX292ZXJ3cml0aW5nVHdlZW4gIT09IHR3ZWVuc1tpXSAmJiB0d2VlbnNbaV0ua2lsbCh0YXJnZXRzLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5nZXRUd2VlbnNPZiA9IGZ1bmN0aW9uIGdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpIHtcbiAgICB2YXIgYSA9IFtdLFxuICAgICAgICBwYXJzZWRUYXJnZXRzID0gdG9BcnJheSh0YXJnZXRzKSxcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdCxcbiAgICAgICAgaXNHbG9iYWxUaW1lID0gX2lzTnVtYmVyKG9ubHlBY3RpdmUpLFxuICAgICAgICAvLyBhIG51bWJlciBpcyBpbnRlcnByZXRlZCBhcyBhIGdsb2JhbCB0aW1lLiBJZiB0aGUgYW5pbWF0aW9uIHNwYW5zXG4gICAgY2hpbGRyZW47XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFR3ZWVuKSB7XG4gICAgICAgIGlmIChfYXJyYXlDb250YWluc0FueShjaGlsZC5fdGFyZ2V0cywgcGFyc2VkVGFyZ2V0cykgJiYgKGlzR2xvYmFsVGltZSA/ICghX292ZXJ3cml0aW5nVHdlZW4gfHwgY2hpbGQuX2luaXR0ZWQgJiYgY2hpbGQuX3RzKSAmJiBjaGlsZC5nbG9iYWxUaW1lKDApIDw9IG9ubHlBY3RpdmUgJiYgY2hpbGQuZ2xvYmFsVGltZShjaGlsZC50b3RhbER1cmF0aW9uKCkpID4gb25seUFjdGl2ZSA6ICFvbmx5QWN0aXZlIHx8IGNoaWxkLmlzQWN0aXZlKCkpKSB7XG4gICAgICAgICAgLy8gbm90ZTogaWYgdGhpcyBpcyBmb3Igb3ZlcndyaXRpbmcsIGl0IHNob3VsZCBvbmx5IGJlIGZvciB0d2VlbnMgdGhhdCBhcmVuJ3QgcGF1c2VkIGFuZCBhcmUgaW5pdHRlZC5cbiAgICAgICAgICBhLnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKChjaGlsZHJlbiA9IGNoaWxkLmdldFR3ZWVuc09mKHBhcnNlZFRhcmdldHMsIG9ubHlBY3RpdmUpKS5sZW5ndGgpIHtcbiAgICAgICAgYS5wdXNoLmFwcGx5KGEsIGNoaWxkcmVuKTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfSAvLyBwb3RlbnRpYWwgZnV0dXJlIGZlYXR1cmUgLSB0YXJnZXRzKCkgb24gdGltZWxpbmVzXG4gIC8vIHRhcmdldHMoKSB7XG4gIC8vIFx0bGV0IHJlc3VsdCA9IFtdO1xuICAvLyBcdHRoaXMuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHJ1ZSwgZmFsc2UpLmZvckVhY2godCA9PiByZXN1bHQucHVzaCguLi50LnRhcmdldHMoKSkpO1xuICAvLyBcdHJldHVybiByZXN1bHQuZmlsdGVyKCh2LCBpKSA9PiByZXN1bHQuaW5kZXhPZih2KSA9PT0gaSk7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90bzIudHdlZW5UbyA9IGZ1bmN0aW9uIHR3ZWVuVG8ocG9zaXRpb24sIHZhcnMpIHtcbiAgICB2YXJzID0gdmFycyB8fCB7fTtcblxuICAgIHZhciB0bCA9IHRoaXMsXG4gICAgICAgIGVuZFRpbWUgPSBfcGFyc2VQb3NpdGlvbih0bCwgcG9zaXRpb24pLFxuICAgICAgICBfdmFycyA9IHZhcnMsXG4gICAgICAgIHN0YXJ0QXQgPSBfdmFycy5zdGFydEF0LFxuICAgICAgICBfb25TdGFydCA9IF92YXJzLm9uU3RhcnQsXG4gICAgICAgIG9uU3RhcnRQYXJhbXMgPSBfdmFycy5vblN0YXJ0UGFyYW1zLFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXIgPSBfdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgIGluaXR0ZWQsXG4gICAgICAgIHR3ZWVuID0gVHdlZW4udG8odGwsIF9zZXREZWZhdWx0cyh7XG4gICAgICBlYXNlOiB2YXJzLmVhc2UgfHwgXCJub25lXCIsXG4gICAgICBsYXp5OiBmYWxzZSxcbiAgICAgIGltbWVkaWF0ZVJlbmRlcjogZmFsc2UsXG4gICAgICB0aW1lOiBlbmRUaW1lLFxuICAgICAgb3ZlcndyaXRlOiBcImF1dG9cIixcbiAgICAgIGR1cmF0aW9uOiB2YXJzLmR1cmF0aW9uIHx8IE1hdGguYWJzKChlbmRUaW1lIC0gKHN0YXJ0QXQgJiYgXCJ0aW1lXCIgaW4gc3RhcnRBdCA/IHN0YXJ0QXQudGltZSA6IHRsLl90aW1lKSkgLyB0bC50aW1lU2NhbGUoKSkgfHwgX3RpbnlOdW0sXG4gICAgICBvblN0YXJ0OiBmdW5jdGlvbiBvblN0YXJ0KCkge1xuICAgICAgICB0bC5wYXVzZSgpO1xuXG4gICAgICAgIGlmICghaW5pdHRlZCkge1xuICAgICAgICAgIHZhciBkdXJhdGlvbiA9IHZhcnMuZHVyYXRpb24gfHwgTWF0aC5hYnMoKGVuZFRpbWUgLSAoc3RhcnRBdCAmJiBcInRpbWVcIiBpbiBzdGFydEF0ID8gc3RhcnRBdC50aW1lIDogdGwuX3RpbWUpKSAvIHRsLnRpbWVTY2FsZSgpKTtcbiAgICAgICAgICB0d2Vlbi5fZHVyICE9PSBkdXJhdGlvbiAmJiBfc2V0RHVyYXRpb24odHdlZW4sIGR1cmF0aW9uLCAwLCAxKS5yZW5kZXIodHdlZW4uX3RpbWUsIHRydWUsIHRydWUpO1xuICAgICAgICAgIGluaXR0ZWQgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgX29uU3RhcnQgJiYgX29uU3RhcnQuYXBwbHkodHdlZW4sIG9uU3RhcnRQYXJhbXMgfHwgW10pOyAvL2luIGNhc2UgdGhlIHVzZXIgaGFkIGFuIG9uU3RhcnQgaW4gdGhlIHZhcnMgLSB3ZSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSBpdC5cbiAgICAgIH1cbiAgICB9LCB2YXJzKSk7XG5cbiAgICByZXR1cm4gaW1tZWRpYXRlUmVuZGVyID8gdHdlZW4ucmVuZGVyKDApIDogdHdlZW47XG4gIH07XG5cbiAgX3Byb3RvMi50d2VlbkZyb21UbyA9IGZ1bmN0aW9uIHR3ZWVuRnJvbVRvKGZyb21Qb3NpdGlvbiwgdG9Qb3NpdGlvbiwgdmFycykge1xuICAgIHJldHVybiB0aGlzLnR3ZWVuVG8odG9Qb3NpdGlvbiwgX3NldERlZmF1bHRzKHtcbiAgICAgIHN0YXJ0QXQ6IHtcbiAgICAgICAgdGltZTogX3BhcnNlUG9zaXRpb24odGhpcywgZnJvbVBvc2l0aW9uKVxuICAgICAgfVxuICAgIH0sIHZhcnMpKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlY2VudCA9IGZ1bmN0aW9uIHJlY2VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVjZW50O1xuICB9O1xuXG4gIF9wcm90bzIubmV4dExhYmVsID0gZnVuY3Rpb24gbmV4dExhYmVsKGFmdGVyVGltZSkge1xuICAgIGlmIChhZnRlclRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgYWZ0ZXJUaW1lID0gdGhpcy5fdGltZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2dldExhYmVsSW5EaXJlY3Rpb24odGhpcywgX3BhcnNlUG9zaXRpb24odGhpcywgYWZ0ZXJUaW1lKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5wcmV2aW91c0xhYmVsID0gZnVuY3Rpb24gcHJldmlvdXNMYWJlbChiZWZvcmVUaW1lKSB7XG4gICAgaWYgKGJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgYmVmb3JlVGltZSA9IHRoaXMuX3RpbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRoaXMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIGJlZm9yZVRpbWUpLCAxKTtcbiAgfTtcblxuICBfcHJvdG8yLmN1cnJlbnRMYWJlbCA9IGZ1bmN0aW9uIGN1cnJlbnRMYWJlbCh2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy5zZWVrKHZhbHVlLCB0cnVlKSA6IHRoaXMucHJldmlvdXNMYWJlbCh0aGlzLl90aW1lICsgX3RpbnlOdW0pO1xuICB9O1xuXG4gIF9wcm90bzIuc2hpZnRDaGlsZHJlbiA9IGZ1bmN0aW9uIHNoaWZ0Q2hpbGRyZW4oYW1vdW50LCBhZGp1c3RMYWJlbHMsIGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICBpZiAoaWdub3JlQmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBpZ25vcmVCZWZvcmVUaW1lID0gMDtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdCxcbiAgICAgICAgbGFiZWxzID0gdGhpcy5sYWJlbHMsXG4gICAgICAgIHA7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICBjaGlsZC5fc3RhcnQgKz0gYW1vdW50O1xuICAgICAgICBjaGlsZC5fZW5kICs9IGFtb3VudDtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICBpZiAoYWRqdXN0TGFiZWxzKSB7XG4gICAgICBmb3IgKHAgaW4gbGFiZWxzKSB7XG4gICAgICAgIGlmIChsYWJlbHNbcF0gPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICAgIGxhYmVsc1twXSArPSBhbW91bnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX3VuY2FjaGUodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5pbnZhbGlkYXRlID0gZnVuY3Rpb24gaW52YWxpZGF0ZShzb2Z0KSB7XG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG4gICAgdGhpcy5fbG9jayA9IDA7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGNoaWxkLmludmFsaWRhdGUoc29mdCk7XG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBfQW5pbWF0aW9uLnByb3RvdHlwZS5pbnZhbGlkYXRlLmNhbGwodGhpcywgc29mdCk7XG4gIH07XG5cbiAgX3Byb3RvMi5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKGluY2x1ZGVMYWJlbHMpIHtcbiAgICBpZiAoaW5jbHVkZUxhYmVscyA9PT0gdm9pZCAwKSB7XG4gICAgICBpbmNsdWRlTGFiZWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdCxcbiAgICAgICAgbmV4dDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuICAgICAgdGhpcy5yZW1vdmUoY2hpbGQpO1xuICAgICAgY2hpbGQgPSBuZXh0O1xuICAgIH1cblxuICAgIHRoaXMuX2RwICYmICh0aGlzLl90aW1lID0gdGhpcy5fdFRpbWUgPSB0aGlzLl9wVGltZSA9IDApO1xuICAgIGluY2x1ZGVMYWJlbHMgJiYgKHRoaXMubGFiZWxzID0ge30pO1xuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLnRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbiB0b3RhbER1cmF0aW9uKHZhbHVlKSB7XG4gICAgdmFyIG1heCA9IDAsXG4gICAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgICBjaGlsZCA9IHNlbGYuX2xhc3QsXG4gICAgICAgIHByZXZTdGFydCA9IF9iaWdOdW0sXG4gICAgICAgIHByZXYsXG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBwYXJlbnQ7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHNlbGYudGltZVNjYWxlKChzZWxmLl9yZXBlYXQgPCAwID8gc2VsZi5kdXJhdGlvbigpIDogc2VsZi50b3RhbER1cmF0aW9uKCkpIC8gKHNlbGYucmV2ZXJzZWQoKSA/IC12YWx1ZSA6IHZhbHVlKSk7XG4gICAgfVxuXG4gICAgaWYgKHNlbGYuX2RpcnR5KSB7XG4gICAgICBwYXJlbnQgPSBzZWxmLnBhcmVudDtcblxuICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgIHByZXYgPSBjaGlsZC5fcHJldjsgLy9yZWNvcmQgaXQgaGVyZSBpbiBjYXNlIHRoZSB0d2VlbiBjaGFuZ2VzIHBvc2l0aW9uIGluIHRoZSBzZXF1ZW5jZS4uLlxuXG4gICAgICAgIGNoaWxkLl9kaXJ0eSAmJiBjaGlsZC50b3RhbER1cmF0aW9uKCk7IC8vY291bGQgY2hhbmdlIHRoZSB0d2Vlbi5fc3RhcnRUaW1lLCBzbyBtYWtlIHN1cmUgdGhlIGFuaW1hdGlvbidzIGNhY2hlIGlzIGNsZWFuIGJlZm9yZSBhbmFseXppbmcgaXQuXG5cbiAgICAgICAgc3RhcnQgPSBjaGlsZC5fc3RhcnQ7XG5cbiAgICAgICAgaWYgKHN0YXJ0ID4gcHJldlN0YXJ0ICYmIHNlbGYuX3NvcnQgJiYgY2hpbGQuX3RzICYmICFzZWxmLl9sb2NrKSB7XG4gICAgICAgICAgLy9pbiBjYXNlIG9uZSBvZiB0aGUgdHdlZW5zIHNoaWZ0ZWQgb3V0IG9mIG9yZGVyLCBpdCBuZWVkcyB0byBiZSByZS1pbnNlcnRlZCBpbnRvIHRoZSBjb3JyZWN0IHBvc2l0aW9uIGluIHRoZSBzZXF1ZW5jZVxuICAgICAgICAgIHNlbGYuX2xvY2sgPSAxOyAvL3ByZXZlbnQgZW5kbGVzcyByZWN1cnNpdmUgY2FsbHMgLSB0aGVyZSBhcmUgbWV0aG9kcyB0aGF0IGdldCB0cmlnZ2VyZWQgdGhhdCBjaGVjayBkdXJhdGlvbi90b3RhbER1cmF0aW9uIHdoZW4gd2UgYWRkKCkuXG5cbiAgICAgICAgICBfYWRkVG9UaW1lbGluZShzZWxmLCBjaGlsZCwgc3RhcnQgLSBjaGlsZC5fZGVsYXksIDEpLl9sb2NrID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2U3RhcnQgPSBzdGFydDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGFydCA8IDAgJiYgY2hpbGQuX3RzKSB7XG4gICAgICAgICAgLy9jaGlsZHJlbiBhcmVuJ3QgYWxsb3dlZCB0byBoYXZlIG5lZ2F0aXZlIHN0YXJ0VGltZXMgdW5sZXNzIHNtb290aENoaWxkVGltaW5nIGlzIHRydWUsIHNvIGFkanVzdCBoZXJlIGlmIG9uZSBpcyBmb3VuZC5cbiAgICAgICAgICBtYXggLT0gc3RhcnQ7XG5cbiAgICAgICAgICBpZiAoIXBhcmVudCAmJiAhc2VsZi5fZHAgfHwgcGFyZW50ICYmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZykge1xuICAgICAgICAgICAgc2VsZi5fc3RhcnQgKz0gc3RhcnQgLyBzZWxmLl90cztcbiAgICAgICAgICAgIHNlbGYuX3RpbWUgLT0gc3RhcnQ7XG4gICAgICAgICAgICBzZWxmLl90VGltZSAtPSBzdGFydDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLnNoaWZ0Q2hpbGRyZW4oLXN0YXJ0LCBmYWxzZSwgLTFlOTk5KTtcbiAgICAgICAgICBwcmV2U3RhcnQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQuX2VuZCA+IG1heCAmJiBjaGlsZC5fdHMgJiYgKG1heCA9IGNoaWxkLl9lbmQpO1xuICAgICAgICBjaGlsZCA9IHByZXY7XG4gICAgICB9XG5cbiAgICAgIF9zZXREdXJhdGlvbihzZWxmLCBzZWxmID09PSBfZ2xvYmFsVGltZWxpbmUgJiYgc2VsZi5fdGltZSA+IG1heCA/IHNlbGYuX3RpbWUgOiBtYXgsIDEsIDEpO1xuXG4gICAgICBzZWxmLl9kaXJ0eSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGYuX3REdXI7XG4gIH07XG5cbiAgVGltZWxpbmUudXBkYXRlUm9vdCA9IGZ1bmN0aW9uIHVwZGF0ZVJvb3QodGltZSkge1xuICAgIGlmIChfZ2xvYmFsVGltZWxpbmUuX3RzKSB7XG4gICAgICBfbGF6eVNhZmVSZW5kZXIoX2dsb2JhbFRpbWVsaW5lLCBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aW1lLCBfZ2xvYmFsVGltZWxpbmUpKTtcblxuICAgICAgX2xhc3RSZW5kZXJlZEZyYW1lID0gX3RpY2tlci5mcmFtZTtcbiAgICB9XG5cbiAgICBpZiAoX3RpY2tlci5mcmFtZSA+PSBfbmV4dEdDRnJhbWUpIHtcbiAgICAgIF9uZXh0R0NGcmFtZSArPSBfY29uZmlnLmF1dG9TbGVlcCB8fCAxMjA7XG4gICAgICB2YXIgY2hpbGQgPSBfZ2xvYmFsVGltZWxpbmUuX2ZpcnN0O1xuICAgICAgaWYgKCFjaGlsZCB8fCAhY2hpbGQuX3RzKSBpZiAoX2NvbmZpZy5hdXRvU2xlZXAgJiYgX3RpY2tlci5fbGlzdGVuZXJzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgd2hpbGUgKGNoaWxkICYmICFjaGlsZC5fdHMpIHtcbiAgICAgICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQgfHwgX3RpY2tlci5zbGVlcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gVGltZWxpbmU7XG59KEFuaW1hdGlvbik7XG5cbl9zZXREZWZhdWx0cyhUaW1lbGluZS5wcm90b3R5cGUsIHtcbiAgX2xvY2s6IDAsXG4gIF9oYXNQYXVzZTogMCxcbiAgX2ZvcmNpbmc6IDBcbn0pO1xuXG52YXIgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbih0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQsIHNldHRlciwgc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0pIHtcbiAgLy9ub3RlOiB3ZSBjYWxsIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuLmNhbGwodHdlZW5JbnN0YW5jZS4uLikgdG8gZW5zdXJlIHRoYXQgaXQncyBzY29wZWQgcHJvcGVybHkuIFdlIG1heSBjYWxsIGl0IGZyb20gd2l0aGluIGEgcGx1Z2luIHRvbywgdGh1cyBcInRoaXNcIiB3b3VsZCByZWZlciB0byB0aGUgcGx1Z2luLlxuICB2YXIgcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCB0YXJnZXQsIHByb3AsIDAsIDEsIF9yZW5kZXJDb21wbGV4U3RyaW5nLCBudWxsLCBzZXR0ZXIpLFxuICAgICAgaW5kZXggPSAwLFxuICAgICAgbWF0Y2hJbmRleCA9IDAsXG4gICAgICByZXN1bHQsXG4gICAgICBzdGFydE51bXMsXG4gICAgICBjb2xvcixcbiAgICAgIGVuZE51bSxcbiAgICAgIGNodW5rLFxuICAgICAgc3RhcnROdW0sXG4gICAgICBoYXNSYW5kb20sXG4gICAgICBhO1xuICBwdC5iID0gc3RhcnQ7XG4gIHB0LmUgPSBlbmQ7XG4gIHN0YXJ0ICs9IFwiXCI7IC8vZW5zdXJlIHZhbHVlcyBhcmUgc3RyaW5nc1xuXG4gIGVuZCArPSBcIlwiO1xuXG4gIGlmIChoYXNSYW5kb20gPSB+ZW5kLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgZW5kID0gX3JlcGxhY2VSYW5kb20oZW5kKTtcbiAgfVxuXG4gIGlmIChzdHJpbmdGaWx0ZXIpIHtcbiAgICBhID0gW3N0YXJ0LCBlbmRdO1xuICAgIHN0cmluZ0ZpbHRlcihhLCB0YXJnZXQsIHByb3ApOyAvL3Bhc3MgYW4gYXJyYXkgd2l0aCB0aGUgc3RhcnRpbmcgYW5kIGVuZGluZyB2YWx1ZXMgYW5kIGxldCB0aGUgZmlsdGVyIGRvIHdoYXRldmVyIGl0IG5lZWRzIHRvIHRoZSB2YWx1ZXMuXG5cbiAgICBzdGFydCA9IGFbMF07XG4gICAgZW5kID0gYVsxXTtcbiAgfVxuXG4gIHN0YXJ0TnVtcyA9IHN0YXJ0Lm1hdGNoKF9jb21wbGV4U3RyaW5nTnVtRXhwKSB8fCBbXTtcblxuICB3aGlsZSAocmVzdWx0ID0gX2NvbXBsZXhTdHJpbmdOdW1FeHAuZXhlYyhlbmQpKSB7XG4gICAgZW5kTnVtID0gcmVzdWx0WzBdO1xuICAgIGNodW5rID0gZW5kLnN1YnN0cmluZyhpbmRleCwgcmVzdWx0LmluZGV4KTtcblxuICAgIGlmIChjb2xvcikge1xuICAgICAgY29sb3IgPSAoY29sb3IgKyAxKSAlIDU7XG4gICAgfSBlbHNlIGlmIChjaHVuay5zdWJzdHIoLTUpID09PSBcInJnYmEoXCIpIHtcbiAgICAgIGNvbG9yID0gMTtcbiAgICB9XG5cbiAgICBpZiAoZW5kTnVtICE9PSBzdGFydE51bXNbbWF0Y2hJbmRleCsrXSkge1xuICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0TnVtc1ttYXRjaEluZGV4IC0gMV0pIHx8IDA7IC8vdGhlc2UgbmVzdGVkIFByb3BUd2VlbnMgYXJlIGhhbmRsZWQgaW4gYSBzcGVjaWFsIHdheSAtIHdlJ2xsIG5ldmVyIGFjdHVhbGx5IGNhbGwgYSByZW5kZXIgb3Igc2V0dGVyIG1ldGhvZCBvbiB0aGVtLiBXZSdsbCBqdXN0IGxvb3AgdGhyb3VnaCB0aGVtIGluIHRoZSBwYXJlbnQgY29tcGxleCBzdHJpbmcgUHJvcFR3ZWVuJ3MgcmVuZGVyIG1ldGhvZC5cblxuICAgICAgcHQuX3B0ID0ge1xuICAgICAgICBfbmV4dDogcHQuX3B0LFxuICAgICAgICBwOiBjaHVuayB8fCBtYXRjaEluZGV4ID09PSAxID8gY2h1bmsgOiBcIixcIixcbiAgICAgICAgLy9ub3RlOiBTVkcgc3BlYyBhbGxvd3Mgb21pc3Npb24gb2YgY29tbWEvc3BhY2Ugd2hlbiBhIG5lZ2F0aXZlIHNpZ24gaXMgd2VkZ2VkIGJldHdlZW4gdHdvIG51bWJlcnMsIGxpa2UgMi41LTUuMyBpbnN0ZWFkIG9mIDIuNSwtNS4zIGJ1dCB3aGVuIHR3ZWVuaW5nLCB0aGUgbmVnYXRpdmUgdmFsdWUgbWF5IHN3aXRjaCB0byBwb3NpdGl2ZSwgc28gd2UgaW5zZXJ0IHRoZSBjb21tYSBqdXN0IGluIGNhc2UuXG4gICAgICAgIHM6IHN0YXJ0TnVtLFxuICAgICAgICBjOiBlbmROdW0uY2hhckF0KDEpID09PSBcIj1cIiA/IF9wYXJzZVJlbGF0aXZlKHN0YXJ0TnVtLCBlbmROdW0pIC0gc3RhcnROdW0gOiBwYXJzZUZsb2F0KGVuZE51bSkgLSBzdGFydE51bSxcbiAgICAgICAgbTogY29sb3IgJiYgY29sb3IgPCA0ID8gTWF0aC5yb3VuZCA6IDBcbiAgICAgIH07XG4gICAgICBpbmRleCA9IF9jb21wbGV4U3RyaW5nTnVtRXhwLmxhc3RJbmRleDtcbiAgICB9XG4gIH1cblxuICBwdC5jID0gaW5kZXggPCBlbmQubGVuZ3RoID8gZW5kLnN1YnN0cmluZyhpbmRleCwgZW5kLmxlbmd0aCkgOiBcIlwiOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgcGFydCBvZiB0aGUgc3RyaW5nIChhZnRlciB0aGUgbGFzdCBudW1iZXIpXG5cbiAgcHQuZnAgPSBmdW5jUGFyYW07XG5cbiAgaWYgKF9yZWxFeHAudGVzdChlbmQpIHx8IGhhc1JhbmRvbSkge1xuICAgIHB0LmUgPSAwOyAvL2lmIHRoZSBlbmQgc3RyaW5nIGNvbnRhaW5zIHJlbGF0aXZlIHZhbHVlcyBvciBkeW5hbWljIHJhbmRvbSguLi4pIHZhbHVlcywgZGVsZXRlIHRoZSBlbmQgaXQgc28gdGhhdCBvbiB0aGUgZmluYWwgcmVuZGVyIHdlIGRvbid0IGFjdHVhbGx5IHNldCBpdCB0byB0aGUgc3RyaW5nIHdpdGggKz0gb3IgLT0gY2hhcmFjdGVycyAoZm9yY2VzIGl0IHRvIHVzZSB0aGUgY2FsY3VsYXRlZCB2YWx1ZSkuXG4gIH1cblxuICB0aGlzLl9wdCA9IHB0OyAvL3N0YXJ0IHRoZSBsaW5rZWQgbGlzdCB3aXRoIHRoaXMgbmV3IFByb3BUd2Vlbi4gUmVtZW1iZXIsIHdlIGNhbGwgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0d2Vlbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYWRkUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZFByb3BUd2Vlbih0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQsIGluZGV4LCB0YXJnZXRzLCBtb2RpZmllciwgc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0sIG9wdGlvbmFsKSB7XG4gIF9pc0Z1bmN0aW9uKGVuZCkgJiYgKGVuZCA9IGVuZChpbmRleCB8fCAwLCB0YXJnZXQsIHRhcmdldHMpKTtcbiAgdmFyIGN1cnJlbnRWYWx1ZSA9IHRhcmdldFtwcm9wXSxcbiAgICAgIHBhcnNlZFN0YXJ0ID0gc3RhcnQgIT09IFwiZ2V0XCIgPyBzdGFydCA6ICFfaXNGdW5jdGlvbihjdXJyZW50VmFsdWUpID8gY3VycmVudFZhbHVlIDogZnVuY1BhcmFtID8gdGFyZ2V0W3Byb3AuaW5kZXhPZihcInNldFwiKSB8fCAhX2lzRnVuY3Rpb24odGFyZ2V0W1wiZ2V0XCIgKyBwcm9wLnN1YnN0cigzKV0pID8gcHJvcCA6IFwiZ2V0XCIgKyBwcm9wLnN1YnN0cigzKV0oZnVuY1BhcmFtKSA6IHRhcmdldFtwcm9wXSgpLFxuICAgICAgc2V0dGVyID0gIV9pc0Z1bmN0aW9uKGN1cnJlbnRWYWx1ZSkgPyBfc2V0dGVyUGxhaW4gOiBmdW5jUGFyYW0gPyBfc2V0dGVyRnVuY1dpdGhQYXJhbSA6IF9zZXR0ZXJGdW5jLFxuICAgICAgcHQ7XG5cbiAgaWYgKF9pc1N0cmluZyhlbmQpKSB7XG4gICAgaWYgKH5lbmQuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICAgIGVuZCA9IF9yZXBsYWNlUmFuZG9tKGVuZCk7XG4gICAgfVxuXG4gICAgaWYgKGVuZC5jaGFyQXQoMSkgPT09IFwiPVwiKSB7XG4gICAgICBwdCA9IF9wYXJzZVJlbGF0aXZlKHBhcnNlZFN0YXJ0LCBlbmQpICsgKGdldFVuaXQocGFyc2VkU3RhcnQpIHx8IDApO1xuXG4gICAgICBpZiAocHQgfHwgcHQgPT09IDApIHtcbiAgICAgICAgLy8gdG8gYXZvaWQgaXNOYU4sIGxpa2UgaWYgc29tZW9uZSBwYXNzZXMgaW4gYSB2YWx1ZSBsaWtlIFwiIT0gd2hhdGV2ZXJcIlxuICAgICAgICBlbmQgPSBwdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIW9wdGlvbmFsIHx8IHBhcnNlZFN0YXJ0ICE9PSBlbmQgfHwgX2ZvcmNlQWxsUHJvcFR3ZWVucykge1xuICAgIGlmICghaXNOYU4ocGFyc2VkU3RhcnQgKiBlbmQpICYmIGVuZCAhPT0gXCJcIikge1xuICAgICAgLy8gZnVuIGZhY3Q6IGFueSBudW1iZXIgbXVsdGlwbGllZCBieSBcIlwiIGlzIGV2YWx1YXRlZCBhcyB0aGUgbnVtYmVyIDAhXG4gICAgICBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcHJvcCwgK3BhcnNlZFN0YXJ0IHx8IDAsIGVuZCAtIChwYXJzZWRTdGFydCB8fCAwKSwgdHlwZW9mIGN1cnJlbnRWYWx1ZSA9PT0gXCJib29sZWFuXCIgPyBfcmVuZGVyQm9vbGVhbiA6IF9yZW5kZXJQbGFpbiwgMCwgc2V0dGVyKTtcbiAgICAgIGZ1bmNQYXJhbSAmJiAocHQuZnAgPSBmdW5jUGFyYW0pO1xuICAgICAgbW9kaWZpZXIgJiYgcHQubW9kaWZpZXIobW9kaWZpZXIsIHRoaXMsIHRhcmdldCk7XG4gICAgICByZXR1cm4gdGhpcy5fcHQgPSBwdDtcbiAgICB9XG5cbiAgICAhY3VycmVudFZhbHVlICYmICEocHJvcCBpbiB0YXJnZXQpICYmIF9taXNzaW5nUGx1Z2luKHByb3AsIGVuZCk7XG4gICAgcmV0dXJuIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuLmNhbGwodGhpcywgdGFyZ2V0LCBwcm9wLCBwYXJzZWRTdGFydCwgZW5kLCBzZXR0ZXIsIHN0cmluZ0ZpbHRlciB8fCBfY29uZmlnLnN0cmluZ0ZpbHRlciwgZnVuY1BhcmFtKTtcbiAgfVxufSxcbiAgICAvL2NyZWF0ZXMgYSBjb3B5IG9mIHRoZSB2YXJzIG9iamVjdCBhbmQgcHJvY2Vzc2VzIGFueSBmdW5jdGlvbi1iYXNlZCB2YWx1ZXMgKHB1dHRpbmcgdGhlIHJlc3VsdGluZyB2YWx1ZXMgZGlyZWN0bHkgaW50byB0aGUgY29weSkgYXMgd2VsbCBhcyBzdHJpbmdzIHdpdGggXCJyYW5kb20oKVwiIGluIHRoZW0uIEl0IGRvZXMgTk9UIHByb2Nlc3MgcmVsYXRpdmUgdmFsdWVzLlxuX3Byb2Nlc3NWYXJzID0gZnVuY3Rpb24gX3Byb2Nlc3NWYXJzKHZhcnMsIGluZGV4LCB0YXJnZXQsIHRhcmdldHMsIHR3ZWVuKSB7XG4gIF9pc0Z1bmN0aW9uKHZhcnMpICYmICh2YXJzID0gX3BhcnNlRnVuY09yU3RyaW5nKHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSk7XG5cbiAgaWYgKCFfaXNPYmplY3QodmFycykgfHwgdmFycy5zdHlsZSAmJiB2YXJzLm5vZGVUeXBlIHx8IF9pc0FycmF5KHZhcnMpIHx8IF9pc1R5cGVkQXJyYXkodmFycykpIHtcbiAgICByZXR1cm4gX2lzU3RyaW5nKHZhcnMpID8gX3BhcnNlRnVuY09yU3RyaW5nKHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSA6IHZhcnM7XG4gIH1cblxuICB2YXIgY29weSA9IHt9LFxuICAgICAgcDtcblxuICBmb3IgKHAgaW4gdmFycykge1xuICAgIGNvcHlbcF0gPSBfcGFyc2VGdW5jT3JTdHJpbmcodmFyc1twXSwgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpO1xuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIF9jaGVja1BsdWdpbiA9IGZ1bmN0aW9uIF9jaGVja1BsdWdpbihwcm9wZXJ0eSwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIHtcbiAgdmFyIHBsdWdpbiwgcHQsIHB0TG9va3VwLCBpO1xuXG4gIGlmIChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgKHBsdWdpbiA9IG5ldyBfcGx1Z2luc1twcm9wZXJ0eV0oKSkuaW5pdCh0YXJnZXQsIHBsdWdpbi5yYXdWYXJzID8gdmFyc1twcm9wZXJ0eV0gOiBfcHJvY2Vzc1ZhcnModmFyc1twcm9wZXJ0eV0sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMsIHR3ZWVuKSwgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSAhPT0gZmFsc2UpIHtcbiAgICB0d2Vlbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4odHdlZW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAxLCBwbHVnaW4ucmVuZGVyLCBwbHVnaW4sIDAsIHBsdWdpbi5wcmlvcml0eSk7XG5cbiAgICBpZiAodHdlZW4gIT09IF9xdWlja1R3ZWVuKSB7XG4gICAgICBwdExvb2t1cCA9IHR3ZWVuLl9wdExvb2t1cFt0d2Vlbi5fdGFyZ2V0cy5pbmRleE9mKHRhcmdldCldOyAvL25vdGU6IHdlIGNhbid0IHVzZSB0d2Vlbi5fcHRMb29rdXBbaW5kZXhdIGJlY2F1c2UgZm9yIHN0YWdnZXJlZCB0d2VlbnMsIHRoZSBpbmRleCBmcm9tIHRoZSBmdWxsVGFyZ2V0cyBhcnJheSB3b24ndCBtYXRjaCB3aGF0IGl0IGlzIGluIGVhY2ggaW5kaXZpZHVhbCB0d2VlbiB0aGF0IHNwYXducyBmcm9tIHRoZSBzdGFnZ2VyLlxuXG4gICAgICBpID0gcGx1Z2luLl9wcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgcHRMb29rdXBbcGx1Z2luLl9wcm9wc1tpXV0gPSBwdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGx1Z2luO1xufSxcbiAgICBfb3ZlcndyaXRpbmdUd2VlbixcbiAgICAvL3N0b3JlIGEgcmVmZXJlbmNlIHRlbXBvcmFyaWx5IHNvIHdlIGNhbiBhdm9pZCBvdmVyd3JpdGluZyBpdHNlbGYuXG5fZm9yY2VBbGxQcm9wVHdlZW5zLFxuICAgIF9pbml0VHdlZW4gPSBmdW5jdGlvbiBfaW5pdFR3ZWVuKHR3ZWVuLCB0aW1lLCB0VGltZSkge1xuICB2YXIgdmFycyA9IHR3ZWVuLnZhcnMsXG4gICAgICBlYXNlID0gdmFycy5lYXNlLFxuICAgICAgc3RhcnRBdCA9IHZhcnMuc3RhcnRBdCxcbiAgICAgIGltbWVkaWF0ZVJlbmRlciA9IHZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgbGF6eSA9IHZhcnMubGF6eSxcbiAgICAgIG9uVXBkYXRlID0gdmFycy5vblVwZGF0ZSxcbiAgICAgIHJ1bkJhY2t3YXJkcyA9IHZhcnMucnVuQmFja3dhcmRzLFxuICAgICAgeW95b0Vhc2UgPSB2YXJzLnlveW9FYXNlLFxuICAgICAga2V5ZnJhbWVzID0gdmFycy5rZXlmcmFtZXMsXG4gICAgICBhdXRvUmV2ZXJ0ID0gdmFycy5hdXRvUmV2ZXJ0LFxuICAgICAgZHVyID0gdHdlZW4uX2R1cixcbiAgICAgIHByZXZTdGFydEF0ID0gdHdlZW4uX3N0YXJ0QXQsXG4gICAgICB0YXJnZXRzID0gdHdlZW4uX3RhcmdldHMsXG4gICAgICBwYXJlbnQgPSB0d2Vlbi5wYXJlbnQsXG4gICAgICBmdWxsVGFyZ2V0cyA9IHBhcmVudCAmJiBwYXJlbnQuZGF0YSA9PT0gXCJuZXN0ZWRcIiA/IHBhcmVudC52YXJzLnRhcmdldHMgOiB0YXJnZXRzLFxuICAgICAgYXV0b092ZXJ3cml0ZSA9IHR3ZWVuLl9vdmVyd3JpdGUgPT09IFwiYXV0b1wiICYmICFfc3VwcHJlc3NPdmVyd3JpdGVzLFxuICAgICAgdGwgPSB0d2Vlbi50aW1lbGluZSxcbiAgICAgIGNsZWFuVmFycyxcbiAgICAgIGksXG4gICAgICBwLFxuICAgICAgcHQsXG4gICAgICB0YXJnZXQsXG4gICAgICBoYXNQcmlvcml0eSxcbiAgICAgIGdzRGF0YSxcbiAgICAgIGhhcm5lc3MsXG4gICAgICBwbHVnaW4sXG4gICAgICBwdExvb2t1cCxcbiAgICAgIGluZGV4LFxuICAgICAgaGFybmVzc1ZhcnMsXG4gICAgICBvdmVyd3JpdHRlbjtcbiAgdGwgJiYgKCFrZXlmcmFtZXMgfHwgIWVhc2UpICYmIChlYXNlID0gXCJub25lXCIpO1xuICB0d2Vlbi5fZWFzZSA9IF9wYXJzZUVhc2UoZWFzZSwgX2RlZmF1bHRzLmVhc2UpO1xuICB0d2Vlbi5feUVhc2UgPSB5b3lvRWFzZSA/IF9pbnZlcnRFYXNlKF9wYXJzZUVhc2UoeW95b0Vhc2UgPT09IHRydWUgPyBlYXNlIDogeW95b0Vhc2UsIF9kZWZhdWx0cy5lYXNlKSkgOiAwO1xuXG4gIGlmICh5b3lvRWFzZSAmJiB0d2Vlbi5feW95byAmJiAhdHdlZW4uX3JlcGVhdCkge1xuICAgIC8vdGhlcmUgbXVzdCBoYXZlIGJlZW4gYSBwYXJlbnQgdGltZWxpbmUgd2l0aCB5b3lvOnRydWUgdGhhdCBpcyBjdXJyZW50bHkgaW4gaXRzIHlveW8gcGhhc2UsIHNvIGZsaXAgdGhlIGVhc2VzLlxuICAgIHlveW9FYXNlID0gdHdlZW4uX3lFYXNlO1xuICAgIHR3ZWVuLl95RWFzZSA9IHR3ZWVuLl9lYXNlO1xuICAgIHR3ZWVuLl9lYXNlID0geW95b0Vhc2U7XG4gIH1cblxuICB0d2Vlbi5fZnJvbSA9ICF0bCAmJiAhIXZhcnMucnVuQmFja3dhcmRzOyAvL25lc3RlZCB0aW1lbGluZXMgc2hvdWxkIG5ldmVyIHJ1biBiYWNrd2FyZHMgLSB0aGUgYmFja3dhcmRzLW5lc3MgaXMgaW4gdGhlIGNoaWxkIHR3ZWVucy5cblxuICBpZiAoIXRsIHx8IGtleWZyYW1lcyAmJiAhdmFycy5zdGFnZ2VyKSB7XG4gICAgLy9pZiB0aGVyZSdzIGFuIGludGVybmFsIHRpbWVsaW5lLCBza2lwIGFsbCB0aGUgcGFyc2luZyBiZWNhdXNlIHdlIHBhc3NlZCB0aGF0IHRhc2sgZG93biB0aGUgY2hhaW4uXG4gICAgaGFybmVzcyA9IHRhcmdldHNbMF0gPyBfZ2V0Q2FjaGUodGFyZ2V0c1swXSkuaGFybmVzcyA6IDA7XG4gICAgaGFybmVzc1ZhcnMgPSBoYXJuZXNzICYmIHZhcnNbaGFybmVzcy5wcm9wXTsgLy9zb21lb25lIG1heSBuZWVkIHRvIHNwZWNpZnkgQ1NTLXNwZWNpZmljIHZhbHVlcyBBTkQgbm9uLUNTUyB2YWx1ZXMsIGxpa2UgaWYgdGhlIGVsZW1lbnQgaGFzIGFuIFwieFwiIHByb3BlcnR5IHBsdXMgaXQncyBhIHN0YW5kYXJkIERPTSBlbGVtZW50LiBXZSBhbGxvdyBwZW9wbGUgdG8gZGlzdGluZ3Vpc2ggYnkgd3JhcHBpbmcgcGx1Z2luLXNwZWNpZmljIHN0dWZmIGluIGEgY3NzOnt9IG9iamVjdCBmb3IgZXhhbXBsZS5cblxuICAgIGNsZWFuVmFycyA9IF9jb3B5RXhjbHVkaW5nKHZhcnMsIF9yZXNlcnZlZFByb3BzKTtcblxuICAgIGlmIChwcmV2U3RhcnRBdCkge1xuICAgICAgcHJldlN0YXJ0QXQuX3pUaW1lIDwgMCAmJiBwcmV2U3RhcnRBdC5wcm9ncmVzcygxKTsgLy8gaW4gY2FzZSBpdCdzIGEgbGF6eSBzdGFydEF0IHRoYXQgaGFzbid0IHJlbmRlcmVkIHlldC5cblxuICAgICAgdGltZSA8IDAgJiYgcnVuQmFja3dhcmRzICYmIGltbWVkaWF0ZVJlbmRlciAmJiAhYXV0b1JldmVydCA/IHByZXZTdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSkgOiBwcmV2U3RhcnRBdC5yZXZlcnQocnVuQmFja3dhcmRzICYmIGR1ciA/IF9yZXZlcnRDb25maWdOb0tpbGwgOiBfc3RhcnRBdFJldmVydENvbmZpZyk7IC8vIGlmIGl0J3MgYSBcInN0YXJ0QXRcIiAobm90IFwiZnJvbSgpXCIgb3IgcnVuQmFja3dhcmRzOiB0cnVlKSwgd2Ugb25seSBuZWVkIHRvIGRvIGEgc2hhbGxvdyByZXZlcnQgKGtlZXAgdHJhbnNmb3JtcyBjYWNoZWQgaW4gQ1NTUGx1Z2luKVxuICAgICAgLy8gZG9uJ3QganVzdCBfcmVtb3ZlRnJvbVBhcmVudChwcmV2U3RhcnRBdC5yZW5kZXIoLTEsIHRydWUpKSBiZWNhdXNlIHRoYXQnbGwgbGVhdmUgaW5saW5lIHN0eWxlcy4gV2UncmUgY3JlYXRpbmcgYSBuZXcgX3N0YXJ0QXQgZm9yIFwic3RhcnRBdFwiIHR3ZWVucyB0aGF0IHJlLWNhcHR1cmUgdGhpbmdzIHRvIGVuc3VyZSB0aGF0IGlmIHRoZSBwcmUtdHdlZW4gdmFsdWVzIGNoYW5nZWQgc2luY2UgdGhlIHR3ZWVuIHdhcyBjcmVhdGVkLCB0aGV5J3JlIHJlY29yZGVkLlxuXG4gICAgICBwcmV2U3RhcnRBdC5fbGF6eSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0QXQpIHtcbiAgICAgIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLl9zdGFydEF0ID0gVHdlZW4uc2V0KHRhcmdldHMsIF9zZXREZWZhdWx0cyh7XG4gICAgICAgIGRhdGE6IFwiaXNTdGFydFwiLFxuICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyOiB0cnVlLFxuICAgICAgICBsYXp5OiAhcHJldlN0YXJ0QXQgJiYgX2lzTm90RmFsc2UobGF6eSksXG4gICAgICAgIHN0YXJ0QXQ6IG51bGwsXG4gICAgICAgIGRlbGF5OiAwLFxuICAgICAgICBvblVwZGF0ZTogb25VcGRhdGUgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfY2FsbGJhY2sodHdlZW4sIFwib25VcGRhdGVcIik7XG4gICAgICAgIH0sXG4gICAgICAgIHN0YWdnZXI6IDBcbiAgICAgIH0sIHN0YXJ0QXQpKSk7IC8vY29weSB0aGUgcHJvcGVydGllcy92YWx1ZXMgaW50byBhIG5ldyBvYmplY3QgdG8gYXZvaWQgY29sbGlzaW9ucywgbGlrZSB2YXIgdG8gPSB7eDowfSwgZnJvbSA9IHt4OjUwMH07IHRpbWVsaW5lLmZyb21UbyhlLCBmcm9tLCB0bykuZnJvbVRvKGUsIHRvLCBmcm9tKTtcblxuXG4gICAgICB0d2Vlbi5fc3RhcnRBdC5fZHAgPSAwOyAvLyBkb24ndCBhbGxvdyBpdCB0byBnZXQgcHV0IGJhY2sgaW50byByb290IHRpbWVsaW5lISBMaWtlIHdoZW4gcmV2ZXJ0KCkgaXMgY2FsbGVkIGFuZCB0b3RhbFRpbWUoKSBnZXRzIHNldC5cblxuICAgICAgdHdlZW4uX3N0YXJ0QXQuX3NhdCA9IHR3ZWVuOyAvLyB1c2VkIGluIGdsb2JhbFRpbWUoKS4gX3NhdCBzdGFuZHMgZm9yIF9zdGFydEF0VHdlZW5cblxuICAgICAgdGltZSA8IDAgJiYgKF9yZXZlcnRpbmcgfHwgIWltbWVkaWF0ZVJlbmRlciAmJiAhYXV0b1JldmVydCkgJiYgdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWdOb0tpbGwpOyAvLyByYXJlIGVkZ2UgY2FzZSwgbGlrZSBpZiBhIHJlbmRlciBpcyBmb3JjZWQgaW4gdGhlIG5lZ2F0aXZlIGRpcmVjdGlvbiBvZiBhIG5vbi1pbml0dGVkIHR3ZWVuLlxuXG4gICAgICBpZiAoaW1tZWRpYXRlUmVuZGVyKSB7XG4gICAgICAgIGlmIChkdXIgJiYgdGltZSA8PSAwICYmIHRUaW1lIDw9IDApIHtcbiAgICAgICAgICAvLyBjaGVjayB0VGltZSBoZXJlIGJlY2F1c2UgaW4gdGhlIGNhc2Ugb2YgYSB5b3lvIHR3ZWVuIHdob3NlIHBsYXloZWFkIGdldHMgcHVzaGVkIHRvIHRoZSBlbmQgbGlrZSB0d2Vlbi5wcm9ncmVzcygxKSwgd2Ugc2hvdWxkIGFsbG93IGl0IHRocm91Z2ggc28gdGhhdCB0aGUgb25Db21wbGV0ZSBnZXRzIGZpcmVkIHByb3Blcmx5LlxuICAgICAgICAgIHRpbWUgJiYgKHR3ZWVuLl96VGltZSA9IHRpbWUpO1xuICAgICAgICAgIHJldHVybjsgLy93ZSBza2lwIGluaXRpYWxpemF0aW9uIGhlcmUgc28gdGhhdCBvdmVyd3JpdGluZyBkb2Vzbid0IG9jY3VyIHVudGlsIHRoZSB0d2VlbiBhY3R1YWxseSBiZWdpbnMuIE90aGVyd2lzZSwgaWYgeW91IGNyZWF0ZSBzZXZlcmFsIGltbWVkaWF0ZVJlbmRlcjp0cnVlIHR3ZWVucyBvZiB0aGUgc2FtZSB0YXJnZXQvcHJvcGVydGllcyB0byBkcm9wIGludG8gYSBUaW1lbGluZSwgdGhlIGxhc3Qgb25lIGNyZWF0ZWQgd291bGQgb3ZlcndyaXRlIHRoZSBmaXJzdCBvbmVzIGJlY2F1c2UgdGhleSBkaWRuJ3QgZ2V0IHBsYWNlZCBpbnRvIHRoZSB0aW1lbGluZSB5ZXQgYmVmb3JlIHRoZSBmaXJzdCByZW5kZXIgb2NjdXJzIGFuZCBraWNrcyBpbiBvdmVyd3JpdGluZy5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocnVuQmFja3dhcmRzICYmIGR1cikge1xuICAgICAgLy9mcm9tKCkgdHdlZW5zIG11c3QgYmUgaGFuZGxlZCB1bmlxdWVseTogdGhlaXIgYmVnaW5uaW5nIHZhbHVlcyBtdXN0IGJlIHJlbmRlcmVkIGJ1dCB3ZSBkb24ndCB3YW50IG92ZXJ3cml0aW5nIHRvIG9jY3VyIHlldCAod2hlbiB0aW1lIGlzIHN0aWxsIDApLiBXYWl0IHVudGlsIHRoZSB0d2VlbiBhY3R1YWxseSBiZWdpbnMgYmVmb3JlIGRvaW5nIGFsbCB0aGUgcm91dGluZXMgbGlrZSBvdmVyd3JpdGluZy4gQXQgdGhhdCB0aW1lLCB3ZSBzaG91bGQgcmVuZGVyIGF0IHRoZSBFTkQgb2YgdGhlIHR3ZWVuIHRvIGVuc3VyZSB0aGF0IHRoaW5ncyBpbml0aWFsaXplIGNvcnJlY3RseSAocmVtZW1iZXIsIGZyb20oKSB0d2VlbnMgZ28gYmFja3dhcmRzKVxuICAgICAgaWYgKCFwcmV2U3RhcnRBdCkge1xuICAgICAgICB0aW1lICYmIChpbW1lZGlhdGVSZW5kZXIgPSBmYWxzZSk7IC8vaW4gcmFyZSBjYXNlcyAobGlrZSBpZiBhIGZyb20oKSB0d2VlbiBydW5zIGFuZCB0aGVuIGlzIGludmFsaWRhdGUoKS1lZCksIGltbWVkaWF0ZVJlbmRlciBjb3VsZCBiZSB0cnVlIGJ1dCB0aGUgaW5pdGlhbCBmb3JjZWQtcmVuZGVyIGdldHMgc2tpcHBlZCwgc28gdGhlcmUncyBubyBuZWVkIHRvIGZvcmNlIHRoZSByZW5kZXIgaW4gdGhpcyBjb250ZXh0IHdoZW4gdGhlIF90aW1lIGlzIGdyZWF0ZXIgdGhhbiAwXG5cbiAgICAgICAgcCA9IF9zZXREZWZhdWx0cyh7XG4gICAgICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgICAgICBkYXRhOiBcImlzRnJvbVN0YXJ0XCIsXG4gICAgICAgICAgLy93ZSB0YWcgdGhlIHR3ZWVuIHdpdGggYXMgXCJpc0Zyb21TdGFydFwiIHNvIHRoYXQgaWYgW2luc2lkZSBhIHBsdWdpbl0gd2UgbmVlZCB0byBvbmx5IGRvIHNvbWV0aGluZyBhdCB0aGUgdmVyeSBFTkQgb2YgYSB0d2Vlbiwgd2UgaGF2ZSBhIHdheSBvZiBpZGVudGlmeWluZyB0aGlzIHR3ZWVuIGFzIG1lcmVseSB0aGUgb25lIHRoYXQncyBzZXR0aW5nIHRoZSBiZWdpbm5pbmcgdmFsdWVzIGZvciBhIFwiZnJvbSgpXCIgdHdlZW4uIEZvciBleGFtcGxlLCBjbGVhclByb3BzIGluIENTU1BsdWdpbiBzaG91bGQgb25seSBnZXQgYXBwbGllZCBhdCB0aGUgdmVyeSBFTkQgb2YgYSB0d2VlbiBhbmQgd2l0aG91dCB0aGlzIHRhZywgZnJvbSguLi57aGVpZ2h0OjEwMCwgY2xlYXJQcm9wczpcImhlaWdodFwiLCBkZWxheToxfSkgd291bGQgd2lwZSB0aGUgaGVpZ2h0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHR3ZWVuIGFuZCBhZnRlciAxIHNlY29uZCwgaXQnZCBraWNrIGJhY2sgaW4uXG4gICAgICAgICAgbGF6eTogaW1tZWRpYXRlUmVuZGVyICYmICFwcmV2U3RhcnRBdCAmJiBfaXNOb3RGYWxzZShsYXp5KSxcbiAgICAgICAgICBpbW1lZGlhdGVSZW5kZXI6IGltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgICAvL3plcm8tZHVyYXRpb24gdHdlZW5zIHJlbmRlciBpbW1lZGlhdGVseSBieSBkZWZhdWx0LCBidXQgaWYgd2UncmUgbm90IHNwZWNpZmljYWxseSBpbnN0cnVjdGVkIHRvIHJlbmRlciB0aGlzIHR3ZWVuIGltbWVkaWF0ZWx5LCB3ZSBzaG91bGQgc2tpcCB0aGlzIGFuZCBtZXJlbHkgX2luaXQoKSB0byByZWNvcmQgdGhlIHN0YXJ0aW5nIHZhbHVlcyAocmVuZGVyaW5nIHRoZW0gaW1tZWRpYXRlbHkgd291bGQgcHVzaCB0aGVtIHRvIGNvbXBsZXRpb24gd2hpY2ggaXMgd2FzdGVmdWwgaW4gdGhhdCBjYXNlIC0gd2UnZCBoYXZlIHRvIHJlbmRlcigtMSkgaW1tZWRpYXRlbHkgYWZ0ZXIpXG4gICAgICAgICAgc3RhZ2dlcjogMCxcbiAgICAgICAgICBwYXJlbnQ6IHBhcmVudCAvL2Vuc3VyZXMgdGhhdCBuZXN0ZWQgdHdlZW5zIHRoYXQgaGFkIGEgc3RhZ2dlciBhcmUgaGFuZGxlZCBwcm9wZXJseSwgbGlrZSBnc2FwLmZyb20oXCIuY2xhc3NcIiwge3k6IGdzYXAudXRpbHMud3JhcChbLTEwMCwxMDBdKSwgc3RhZ2dlcjogMC41fSlcblxuICAgICAgICB9LCBjbGVhblZhcnMpO1xuICAgICAgICBoYXJuZXNzVmFycyAmJiAocFtoYXJuZXNzLnByb3BdID0gaGFybmVzc1ZhcnMpOyAvLyBpbiBjYXNlIHNvbWVvbmUgZG9lcyBzb21ldGhpbmcgbGlrZSAuZnJvbSguLi4sIHtjc3M6e319KVxuXG4gICAgICAgIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLl9zdGFydEF0ID0gVHdlZW4uc2V0KHRhcmdldHMsIHApKTtcblxuICAgICAgICB0d2Vlbi5fc3RhcnRBdC5fZHAgPSAwOyAvLyBkb24ndCBhbGxvdyBpdCB0byBnZXQgcHV0IGJhY2sgaW50byByb290IHRpbWVsaW5lIVxuXG4gICAgICAgIHR3ZWVuLl9zdGFydEF0Ll9zYXQgPSB0d2VlbjsgLy8gdXNlZCBpbiBnbG9iYWxUaW1lKClcblxuICAgICAgICB0aW1lIDwgMCAmJiAoX3JldmVydGluZyA/IHR3ZWVuLl9zdGFydEF0LnJldmVydChfcmV2ZXJ0Q29uZmlnTm9LaWxsKSA6IHR3ZWVuLl9zdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSkpO1xuICAgICAgICB0d2Vlbi5felRpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmICghaW1tZWRpYXRlUmVuZGVyKSB7XG4gICAgICAgICAgX2luaXRUd2Vlbih0d2Vlbi5fc3RhcnRBdCwgX3RpbnlOdW0sIF90aW55TnVtKTsgLy9lbnN1cmVzIHRoYXQgdGhlIGluaXRpYWwgdmFsdWVzIGFyZSByZWNvcmRlZFxuXG4gICAgICAgIH0gZWxzZSBpZiAoIXRpbWUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0d2Vlbi5fcHQgPSB0d2Vlbi5fcHRDYWNoZSA9IDA7XG4gICAgbGF6eSA9IGR1ciAmJiBfaXNOb3RGYWxzZShsYXp5KSB8fCBsYXp5ICYmICFkdXI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgdGFyZ2V0ID0gdGFyZ2V0c1tpXTtcbiAgICAgIGdzRGF0YSA9IHRhcmdldC5fZ3NhcCB8fCBfaGFybmVzcyh0YXJnZXRzKVtpXS5fZ3NhcDtcbiAgICAgIHR3ZWVuLl9wdExvb2t1cFtpXSA9IHB0TG9va3VwID0ge307XG4gICAgICBfbGF6eUxvb2t1cFtnc0RhdGEuaWRdICYmIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2lmIG90aGVyIHR3ZWVucyBvZiB0aGUgc2FtZSB0YXJnZXQgaGF2ZSByZWNlbnRseSBpbml0dGVkIGJ1dCBoYXZlbid0IHJlbmRlcmVkIHlldCwgd2UndmUgZ290IHRvIGZvcmNlIHRoZSByZW5kZXIgc28gdGhhdCB0aGUgc3RhcnRpbmcgdmFsdWVzIGFyZSBjb3JyZWN0IChpbWFnaW5lIHBvcHVsYXRpbmcgYSB0aW1lbGluZSB3aXRoIGEgYnVuY2ggb2Ygc2VxdWVudGlhbCB0d2VlbnMgYW5kIHRoZW4ganVtcGluZyB0byB0aGUgZW5kKVxuXG4gICAgICBpbmRleCA9IGZ1bGxUYXJnZXRzID09PSB0YXJnZXRzID8gaSA6IGZ1bGxUYXJnZXRzLmluZGV4T2YodGFyZ2V0KTtcblxuICAgICAgaWYgKGhhcm5lc3MgJiYgKHBsdWdpbiA9IG5ldyBoYXJuZXNzKCkpLmluaXQodGFyZ2V0LCBoYXJuZXNzVmFycyB8fCBjbGVhblZhcnMsIHR3ZWVuLCBpbmRleCwgZnVsbFRhcmdldHMpICE9PSBmYWxzZSkge1xuICAgICAgICB0d2Vlbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4odHdlZW4uX3B0LCB0YXJnZXQsIHBsdWdpbi5uYW1lLCAwLCAxLCBwbHVnaW4ucmVuZGVyLCBwbHVnaW4sIDAsIHBsdWdpbi5wcmlvcml0eSk7XG5cbiAgICAgICAgcGx1Z2luLl9wcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgcHRMb29rdXBbbmFtZV0gPSBwdDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcGx1Z2luLnByaW9yaXR5ICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWhhcm5lc3MgfHwgaGFybmVzc1ZhcnMpIHtcbiAgICAgICAgZm9yIChwIGluIGNsZWFuVmFycykge1xuICAgICAgICAgIGlmIChfcGx1Z2luc1twXSAmJiAocGx1Z2luID0gX2NoZWNrUGx1Z2luKHAsIGNsZWFuVmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIGZ1bGxUYXJnZXRzKSkpIHtcbiAgICAgICAgICAgIHBsdWdpbi5wcmlvcml0eSAmJiAoaGFzUHJpb3JpdHkgPSAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHRMb29rdXBbcF0gPSBwdCA9IF9hZGRQcm9wVHdlZW4uY2FsbCh0d2VlbiwgdGFyZ2V0LCBwLCBcImdldFwiLCBjbGVhblZhcnNbcF0sIGluZGV4LCBmdWxsVGFyZ2V0cywgMCwgdmFycy5zdHJpbmdGaWx0ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0d2Vlbi5fb3AgJiYgdHdlZW4uX29wW2ldICYmIHR3ZWVuLmtpbGwodGFyZ2V0LCB0d2Vlbi5fb3BbaV0pO1xuXG4gICAgICBpZiAoYXV0b092ZXJ3cml0ZSAmJiB0d2Vlbi5fcHQpIHtcbiAgICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSB0d2VlbjtcblxuICAgICAgICBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldCwgcHRMb29rdXAsIHR3ZWVuLmdsb2JhbFRpbWUodGltZSkpOyAvLyBtYWtlIHN1cmUgdGhlIG92ZXJ3cml0aW5nIGRvZXNuJ3Qgb3ZlcndyaXRlIFRISVMgdHdlZW4hISFcblxuXG4gICAgICAgIG92ZXJ3cml0dGVuID0gIXR3ZWVuLnBhcmVudDtcbiAgICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSAwO1xuICAgICAgfVxuXG4gICAgICB0d2Vlbi5fcHQgJiYgbGF6eSAmJiAoX2xhenlMb29rdXBbZ3NEYXRhLmlkXSA9IDEpO1xuICAgIH1cblxuICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodHdlZW4pO1xuICAgIHR3ZWVuLl9vbkluaXQgJiYgdHdlZW4uX29uSW5pdCh0d2Vlbik7IC8vcGx1Z2lucyBsaWtlIFJvdW5kUHJvcHMgbXVzdCB3YWl0IHVudGlsIEFMTCBvZiB0aGUgUHJvcFR3ZWVucyBhcmUgaW5zdGFudGlhdGVkLiBJbiB0aGUgcGx1Z2luJ3MgaW5pdCgpIGZ1bmN0aW9uLCBpdCBzZXRzIHRoZSBfb25Jbml0IG9uIHRoZSB0d2VlbiBpbnN0YW5jZS4gTWF5IG5vdCBiZSBwcmV0dHkvaW50dWl0aXZlLCBidXQgaXQncyBmYXN0IGFuZCBrZWVwcyBmaWxlIHNpemUgZG93bi5cbiAgfVxuXG4gIHR3ZWVuLl9vblVwZGF0ZSA9IG9uVXBkYXRlO1xuICB0d2Vlbi5faW5pdHRlZCA9ICghdHdlZW4uX29wIHx8IHR3ZWVuLl9wdCkgJiYgIW92ZXJ3cml0dGVuOyAvLyBpZiBvdmVyd3JpdHRlblByb3BzIHJlc3VsdGVkIGluIHRoZSBlbnRpcmUgdHdlZW4gYmVpbmcga2lsbGVkLCBkbyBOT1QgZmxhZyBpdCBhcyBpbml0dGVkIG9yIGVsc2UgaXQgbWF5IHJlbmRlciBmb3Igb25lIHRpY2suXG5cbiAga2V5ZnJhbWVzICYmIHRpbWUgPD0gMCAmJiB0bC5yZW5kZXIoX2JpZ051bSwgdHJ1ZSwgdHJ1ZSk7IC8vIGlmIHRoZXJlJ3MgYSAwJSBrZXlmcmFtZSwgaXQnbGwgcmVuZGVyIGluIHRoZSBcImJlZm9yZVwiIHN0YXRlIGZvciBhbnkgc3RhZ2dlcmVkL2RlbGF5ZWQgYW5pbWF0aW9ucyB0aHVzIHdoZW4gdGhlIGZvbGxvd2luZyB0d2VlbiBpbml0aWFsaXplcywgaXQnbGwgdXNlIHRoZSBcImJlZm9yZVwiIHN0YXRlIGluc3RlYWQgb2YgdGhlIFwiYWZ0ZXJcIiBzdGF0ZSBhcyB0aGUgaW5pdGlhbCB2YWx1ZXMuXG59LFxuICAgIF91cGRhdGVQcm9wVHdlZW5zID0gZnVuY3Rpb24gX3VwZGF0ZVByb3BUd2VlbnModHdlZW4sIHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgcmF0aW8sIHRpbWUsIHNraXBSZWN1cnNpb24pIHtcbiAgdmFyIHB0Q2FjaGUgPSAodHdlZW4uX3B0ICYmIHR3ZWVuLl9wdENhY2hlIHx8ICh0d2Vlbi5fcHRDYWNoZSA9IHt9KSlbcHJvcGVydHldLFxuICAgICAgcHQsXG4gICAgICByb290UFQsXG4gICAgICBsb29rdXAsXG4gICAgICBpO1xuXG4gIGlmICghcHRDYWNoZSkge1xuICAgIHB0Q2FjaGUgPSB0d2Vlbi5fcHRDYWNoZVtwcm9wZXJ0eV0gPSBbXTtcbiAgICBsb29rdXAgPSB0d2Vlbi5fcHRMb29rdXA7XG4gICAgaSA9IHR3ZWVuLl90YXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHB0ID0gbG9va3VwW2ldW3Byb3BlcnR5XTtcblxuICAgICAgaWYgKHB0ICYmIHB0LmQgJiYgcHQuZC5fcHQpIHtcbiAgICAgICAgLy8gaXQncyBhIHBsdWdpbiwgc28gZmluZCB0aGUgbmVzdGVkIFByb3BUd2VlblxuICAgICAgICBwdCA9IHB0LmQuX3B0O1xuXG4gICAgICAgIHdoaWxlIChwdCAmJiBwdC5wICE9PSBwcm9wZXJ0eSAmJiBwdC5mcCAhPT0gcHJvcGVydHkpIHtcbiAgICAgICAgICAvLyBcImZwXCIgaXMgZnVuY3Rpb25QYXJhbSBmb3IgdGhpbmdzIGxpa2Ugc2V0dGluZyBDU1MgdmFyaWFibGVzIHdoaWNoIHJlcXVpcmUgLnNldFByb3BlcnR5KFwiLS12YXItbmFtZVwiLCB2YWx1ZSlcbiAgICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghcHQpIHtcbiAgICAgICAgLy8gdGhlcmUgaXMgbm8gUHJvcFR3ZWVuIGFzc29jaWF0ZWQgd2l0aCB0aGF0IHByb3BlcnR5LCBzbyB3ZSBtdXN0IEZPUkNFIG9uZSB0byBiZSBjcmVhdGVkIGFuZCBkaXRjaCBvdXQgb2YgdGhpc1xuICAgICAgICAvLyBpZiB0aGUgdHdlZW4gaGFzIG90aGVyIHByb3BlcnRpZXMgdGhhdCBhbHJlYWR5IHJlbmRlcmVkIGF0IG5ldyBwb3NpdGlvbnMsIHdlJ2Qgbm9ybWFsbHkgaGF2ZSB0byByZXdpbmQgdG8gcHV0IHRoZW0gYmFjayBsaWtlIHR3ZWVuLnJlbmRlcigwLCB0cnVlKSBiZWZvcmUgZm9yY2luZyBhbiBfaW5pdFR3ZWVuKCksIGJ1dCB0aGF0IGNhbiBjcmVhdGUgYW5vdGhlciBlZGdlIGNhc2UgbGlrZSB0d2VlbmluZyBhIHRpbWVsaW5lJ3MgcHJvZ3Jlc3Mgd291bGQgdHJpZ2dlciBvblVwZGF0ZXMgdG8gZmlyZSB3aGljaCBjb3VsZCBtb3ZlIG90aGVyIHRoaW5ncyBhcm91bmQuIEl0J3MgYmV0dGVyIHRvIGp1c3QgaW5mb3JtIHVzZXJzIHRoYXQgLnJlc2V0VG8oKSBzaG91bGQgT05MWSBiZSB1c2VkIGZvciB0d2VlbnMgdGhhdCBhbHJlYWR5IGhhdmUgdGhhdCBwcm9wZXJ0eS4gRm9yIGV4YW1wbGUsIHlvdSBjYW4ndCBnc2FwLnRvKC4uLnsgeTogMCB9KSBhbmQgdGhlbiB0d2Vlbi5yZXN0VG8oXCJ4XCIsIDIwMCkgZm9yIGV4YW1wbGUuXG4gICAgICAgIF9mb3JjZUFsbFByb3BUd2VlbnMgPSAxOyAvLyBvdGhlcndpc2UsIHdoZW4gd2UgX2FkZFByb3BUd2VlbigpIGFuZCBpdCBmaW5kcyBubyBjaGFuZ2UgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIGVuZCB2YWx1ZXMsIGl0IHNraXBzIGNyZWF0aW5nIGEgUHJvcFR3ZWVuIChmb3IgZWZmaWNpZW5jeS4uLndoeSB0d2VlbiB3aGVuIHRoZXJlJ3Mgbm8gZGlmZmVyZW5jZT8pIGJ1dCBpbiB0aGlzIGNhc2Ugd2UgTkVFRCB0aGF0IFByb3BUd2VlbiBjcmVhdGVkIHNvIHdlIGNhbiBlZGl0IGl0LlxuXG4gICAgICAgIHR3ZWVuLnZhcnNbcHJvcGVydHldID0gXCIrPTBcIjtcblxuICAgICAgICBfaW5pdFR3ZWVuKHR3ZWVuLCB0aW1lKTtcblxuICAgICAgICBfZm9yY2VBbGxQcm9wVHdlZW5zID0gMDtcbiAgICAgICAgcmV0dXJuIHNraXBSZWN1cnNpb24gPyBfd2Fybihwcm9wZXJ0eSArIFwiIG5vdCBlbGlnaWJsZSBmb3IgcmVzZXRcIikgOiAxOyAvLyBpZiBzb21lb25lIHRyaWVzIHRvIGRvIGEgcXVpY2tUbygpIG9uIGEgc3BlY2lhbCBwcm9wZXJ0eSBsaWtlIGJvcmRlclJhZGl1cyB3aGljaCBtdXN0IGdldCBzcGxpdCBpbnRvIDQgZGlmZmVyZW50IHByb3BlcnRpZXMsIHRoYXQncyBub3QgZWxpZ2libGUgZm9yIC5yZXNldFRvKCkuXG4gICAgICB9XG5cbiAgICAgIHB0Q2FjaGUucHVzaChwdCk7XG4gICAgfVxuICB9XG5cbiAgaSA9IHB0Q2FjaGUubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICByb290UFQgPSBwdENhY2hlW2ldO1xuICAgIHB0ID0gcm9vdFBULl9wdCB8fCByb290UFQ7IC8vIGNvbXBsZXggdmFsdWVzIG1heSBoYXZlIG5lc3RlZCBQcm9wVHdlZW5zLiBXZSBvbmx5IGFjY29tbW9kYXRlIHRoZSBGSVJTVCB2YWx1ZS5cblxuICAgIHB0LnMgPSAoc3RhcnQgfHwgc3RhcnQgPT09IDApICYmICFzdGFydElzUmVsYXRpdmUgPyBzdGFydCA6IHB0LnMgKyAoc3RhcnQgfHwgMCkgKyByYXRpbyAqIHB0LmM7XG4gICAgcHQuYyA9IHZhbHVlIC0gcHQucztcbiAgICByb290UFQuZSAmJiAocm9vdFBULmUgPSBfcm91bmQodmFsdWUpICsgZ2V0VW5pdChyb290UFQuZSkpOyAvLyBtYWlubHkgZm9yIENTU1BsdWdpbiAoZW5kIHZhbHVlKVxuXG4gICAgcm9vdFBULmIgJiYgKHJvb3RQVC5iID0gcHQucyArIGdldFVuaXQocm9vdFBULmIpKTsgLy8gKGJlZ2lubmluZyB2YWx1ZSlcbiAgfVxufSxcbiAgICBfYWRkQWxpYXNlc1RvVmFycyA9IGZ1bmN0aW9uIF9hZGRBbGlhc2VzVG9WYXJzKHRhcmdldHMsIHZhcnMpIHtcbiAgdmFyIGhhcm5lc3MgPSB0YXJnZXRzWzBdID8gX2dldENhY2hlKHRhcmdldHNbMF0pLmhhcm5lc3MgOiAwLFxuICAgICAgcHJvcGVydHlBbGlhc2VzID0gaGFybmVzcyAmJiBoYXJuZXNzLmFsaWFzZXMsXG4gICAgICBjb3B5LFxuICAgICAgcCxcbiAgICAgIGksXG4gICAgICBhbGlhc2VzO1xuXG4gIGlmICghcHJvcGVydHlBbGlhc2VzKSB7XG4gICAgcmV0dXJuIHZhcnM7XG4gIH1cblxuICBjb3B5ID0gX21lcmdlKHt9LCB2YXJzKTtcblxuICBmb3IgKHAgaW4gcHJvcGVydHlBbGlhc2VzKSB7XG4gICAgaWYgKHAgaW4gY29weSkge1xuICAgICAgYWxpYXNlcyA9IHByb3BlcnR5QWxpYXNlc1twXS5zcGxpdChcIixcIik7XG4gICAgICBpID0gYWxpYXNlcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29weVthbGlhc2VzW2ldXSA9IGNvcHlbcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIC8vIHBhcnNlcyBtdWx0aXBsZSBmb3JtYXRzLCBsaWtlIHtcIjAlXCI6IHt4OiAxMDB9LCB7XCI1MCVcIjoge3g6IC0yMH19IGFuZCB7IHg6IHtcIjAlXCI6IDEwMCwgXCI1MCVcIjogLTIwfSB9LCBhbmQgYW4gXCJlYXNlXCIgY2FuIGJlIHNldCBvbiBhbnkgb2JqZWN0LiBXZSBwb3B1bGF0ZSBhbiBcImFsbFByb3BzXCIgb2JqZWN0IHdpdGggYW4gQXJyYXkgZm9yIGVhY2ggcHJvcGVydHksIGxpa2Uge3g6IFt7fSwge31dLCB5Olt7fSwge31dfSB3aXRoIGRhdGEgZm9yIGVhY2ggcHJvcGVydHkgdHdlZW4uIFRoZSBvYmplY3RzIGhhdmUgYSBcInRcIiAodGltZSksIFwidlwiLCAodmFsdWUpLCBhbmQgXCJlXCIgKGVhc2UpIHByb3BlcnR5LiBUaGlzIGFsbG93cyB1cyB0byBwaWVjZSB0b2dldGhlciBhIHRpbWVsaW5lIGxhdGVyLlxuX3BhcnNlS2V5ZnJhbWUgPSBmdW5jdGlvbiBfcGFyc2VLZXlmcmFtZShwcm9wLCBvYmosIGFsbFByb3BzLCBlYXNlRWFjaCkge1xuICB2YXIgZWFzZSA9IG9iai5lYXNlIHx8IGVhc2VFYWNoIHx8IFwicG93ZXIxLmluT3V0XCIsXG4gICAgICBwLFxuICAgICAgYTtcblxuICBpZiAoX2lzQXJyYXkob2JqKSkge1xuICAgIGEgPSBhbGxQcm9wc1twcm9wXSB8fCAoYWxsUHJvcHNbcHJvcF0gPSBbXSk7IC8vIHQgPSB0aW1lIChvdXQgb2YgMTAwKSwgdiA9IHZhbHVlLCBlID0gZWFzZVxuXG4gICAgb2JqLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpKSB7XG4gICAgICByZXR1cm4gYS5wdXNoKHtcbiAgICAgICAgdDogaSAvIChvYmoubGVuZ3RoIC0gMSkgKiAxMDAsXG4gICAgICAgIHY6IHZhbHVlLFxuICAgICAgICBlOiBlYXNlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBmb3IgKHAgaW4gb2JqKSB7XG4gICAgICBhID0gYWxsUHJvcHNbcF0gfHwgKGFsbFByb3BzW3BdID0gW10pO1xuICAgICAgcCA9PT0gXCJlYXNlXCIgfHwgYS5wdXNoKHtcbiAgICAgICAgdDogcGFyc2VGbG9hdChwcm9wKSxcbiAgICAgICAgdjogb2JqW3BdLFxuICAgICAgICBlOiBlYXNlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0sXG4gICAgX3BhcnNlRnVuY09yU3RyaW5nID0gZnVuY3Rpb24gX3BhcnNlRnVuY09yU3RyaW5nKHZhbHVlLCB0d2VlbiwgaSwgdGFyZ2V0LCB0YXJnZXRzKSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKHR3ZWVuLCBpLCB0YXJnZXQsIHRhcmdldHMpIDogX2lzU3RyaW5nKHZhbHVlKSAmJiB+dmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikgPyBfcmVwbGFjZVJhbmRvbSh2YWx1ZSkgOiB2YWx1ZTtcbn0sXG4gICAgX3N0YWdnZXJUd2VlblByb3BzID0gX2NhbGxiYWNrTmFtZXMgKyBcInJlcGVhdCxyZXBlYXREZWxheSx5b3lvLHJlcGVhdFJlZnJlc2gseW95b0Vhc2UsYXV0b1JldmVydFwiLFxuICAgIF9zdGFnZ2VyUHJvcHNUb1NraXAgPSB7fTtcblxuX2ZvckVhY2hOYW1lKF9zdGFnZ2VyVHdlZW5Qcm9wcyArIFwiLGlkLHN0YWdnZXIsZGVsYXksZHVyYXRpb24scGF1c2VkLHNjcm9sbFRyaWdnZXJcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9zdGFnZ2VyUHJvcHNUb1NraXBbbmFtZV0gPSAxO1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRXRUVOXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBUd2VlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FuaW1hdGlvbjIpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHdlZW4sIF9BbmltYXRpb24yKTtcblxuICBmdW5jdGlvbiBUd2Vlbih0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbiwgc2tpcEluaGVyaXQpIHtcbiAgICB2YXIgX3RoaXMzO1xuXG4gICAgaWYgKHR5cGVvZiB2YXJzID09PSBcIm51bWJlclwiKSB7XG4gICAgICBwb3NpdGlvbi5kdXJhdGlvbiA9IHZhcnM7XG4gICAgICB2YXJzID0gcG9zaXRpb247XG4gICAgICBwb3NpdGlvbiA9IG51bGw7XG4gICAgfVxuXG4gICAgX3RoaXMzID0gX0FuaW1hdGlvbjIuY2FsbCh0aGlzLCBza2lwSW5oZXJpdCA/IHZhcnMgOiBfaW5oZXJpdERlZmF1bHRzKHZhcnMpKSB8fCB0aGlzO1xuICAgIHZhciBfdGhpczMkdmFycyA9IF90aGlzMy52YXJzLFxuICAgICAgICBkdXJhdGlvbiA9IF90aGlzMyR2YXJzLmR1cmF0aW9uLFxuICAgICAgICBkZWxheSA9IF90aGlzMyR2YXJzLmRlbGF5LFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXIgPSBfdGhpczMkdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgIHN0YWdnZXIgPSBfdGhpczMkdmFycy5zdGFnZ2VyLFxuICAgICAgICBvdmVyd3JpdGUgPSBfdGhpczMkdmFycy5vdmVyd3JpdGUsXG4gICAgICAgIGtleWZyYW1lcyA9IF90aGlzMyR2YXJzLmtleWZyYW1lcyxcbiAgICAgICAgZGVmYXVsdHMgPSBfdGhpczMkdmFycy5kZWZhdWx0cyxcbiAgICAgICAgc2Nyb2xsVHJpZ2dlciA9IF90aGlzMyR2YXJzLnNjcm9sbFRyaWdnZXIsXG4gICAgICAgIHlveW9FYXNlID0gX3RoaXMzJHZhcnMueW95b0Vhc2UsXG4gICAgICAgIHBhcmVudCA9IHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSxcbiAgICAgICAgcGFyc2VkVGFyZ2V0cyA9IChfaXNBcnJheSh0YXJnZXRzKSB8fCBfaXNUeXBlZEFycmF5KHRhcmdldHMpID8gX2lzTnVtYmVyKHRhcmdldHNbMF0pIDogXCJsZW5ndGhcIiBpbiB2YXJzKSA/IFt0YXJnZXRzXSA6IHRvQXJyYXkodGFyZ2V0cyksXG4gICAgICAgIHRsLFxuICAgICAgICBpLFxuICAgICAgICBjb3B5LFxuICAgICAgICBsLFxuICAgICAgICBwLFxuICAgICAgICBjdXJUYXJnZXQsXG4gICAgICAgIHN0YWdnZXJGdW5jLFxuICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2U7XG4gICAgX3RoaXMzLl90YXJnZXRzID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGggPyBfaGFybmVzcyhwYXJzZWRUYXJnZXRzKSA6IF93YXJuKFwiR1NBUCB0YXJnZXQgXCIgKyB0YXJnZXRzICsgXCIgbm90IGZvdW5kLiBodHRwczovL2dzYXAuY29tXCIsICFfY29uZmlnLm51bGxUYXJnZXRXYXJuKSB8fCBbXTtcbiAgICBfdGhpczMuX3B0TG9va3VwID0gW107IC8vUHJvcFR3ZWVuIGxvb2t1cC4gQW4gYXJyYXkgY29udGFpbmluZyBhbiBvYmplY3QgZm9yIGVhY2ggdGFyZ2V0LCBoYXZpbmcga2V5cyBmb3IgZWFjaCB0d2VlbmluZyBwcm9wZXJ0eVxuXG4gICAgX3RoaXMzLl9vdmVyd3JpdGUgPSBvdmVyd3JpdGU7XG5cbiAgICBpZiAoa2V5ZnJhbWVzIHx8IHN0YWdnZXIgfHwgX2lzRnVuY09yU3RyaW5nKGR1cmF0aW9uKSB8fCBfaXNGdW5jT3JTdHJpbmcoZGVsYXkpKSB7XG4gICAgICB2YXJzID0gX3RoaXMzLnZhcnM7XG4gICAgICB0bCA9IF90aGlzMy50aW1lbGluZSA9IG5ldyBUaW1lbGluZSh7XG4gICAgICAgIGRhdGE6IFwibmVzdGVkXCIsXG4gICAgICAgIGRlZmF1bHRzOiBkZWZhdWx0cyB8fCB7fSxcbiAgICAgICAgdGFyZ2V0czogcGFyZW50ICYmIHBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiID8gcGFyZW50LnZhcnMudGFyZ2V0cyA6IHBhcnNlZFRhcmdldHNcbiAgICAgIH0pOyAvLyB3ZSBuZWVkIHRvIHN0b3JlIHRoZSB0YXJnZXRzIGJlY2F1c2UgZm9yIHN0YWdnZXJzIGFuZCBrZXlmcmFtZXMsIHdlIGVuZCB1cCBjcmVhdGluZyBhbiBpbmRpdmlkdWFsIHR3ZWVuIGZvciBlYWNoIGJ1dCBmdW5jdGlvbi1iYXNlZCB2YWx1ZXMgbmVlZCB0byBrbm93IHRoZSBpbmRleCBhbmQgdGhlIHdob2xlIEFycmF5IG9mIHRhcmdldHMuXG5cbiAgICAgIHRsLmtpbGwoKTtcbiAgICAgIHRsLnBhcmVudCA9IHRsLl9kcCA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKTtcbiAgICAgIHRsLl9zdGFydCA9IDA7XG5cbiAgICAgIGlmIChzdGFnZ2VyIHx8IF9pc0Z1bmNPclN0cmluZyhkdXJhdGlvbikgfHwgX2lzRnVuY09yU3RyaW5nKGRlbGF5KSkge1xuICAgICAgICBsID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGg7XG4gICAgICAgIHN0YWdnZXJGdW5jID0gc3RhZ2dlciAmJiBkaXN0cmlidXRlKHN0YWdnZXIpO1xuXG4gICAgICAgIGlmIChfaXNPYmplY3Qoc3RhZ2dlcikpIHtcbiAgICAgICAgICAvL3VzZXJzIGNhbiBwYXNzIGluIGNhbGxiYWNrcyBsaWtlIG9uU3RhcnQvb25Db21wbGV0ZSBpbiB0aGUgc3RhZ2dlciBvYmplY3QuIFRoZXNlIHNob3VsZCBmaXJlIHdpdGggZWFjaCBpbmRpdmlkdWFsIHR3ZWVuLlxuICAgICAgICAgIGZvciAocCBpbiBzdGFnZ2VyKSB7XG4gICAgICAgICAgICBpZiAofl9zdGFnZ2VyVHdlZW5Qcm9wcy5pbmRleE9mKHApKSB7XG4gICAgICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZSB8fCAoc3RhZ2dlclZhcnNUb01lcmdlID0ge30pO1xuICAgICAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2VbcF0gPSBzdGFnZ2VyW3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBjb3B5ID0gX2NvcHlFeGNsdWRpbmcodmFycywgX3N0YWdnZXJQcm9wc1RvU2tpcCk7XG4gICAgICAgICAgY29weS5zdGFnZ2VyID0gMDtcbiAgICAgICAgICB5b3lvRWFzZSAmJiAoY29weS55b3lvRWFzZSA9IHlveW9FYXNlKTtcbiAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2UgJiYgX21lcmdlKGNvcHksIHN0YWdnZXJWYXJzVG9NZXJnZSk7XG4gICAgICAgICAgY3VyVGFyZ2V0ID0gcGFyc2VkVGFyZ2V0c1tpXTsgLy9kb24ndCBqdXN0IGNvcHkgZHVyYXRpb24gb3IgZGVsYXkgYmVjYXVzZSBpZiB0aGV5J3JlIGEgc3RyaW5nIG9yIGZ1bmN0aW9uLCB3ZSdkIGVuZCB1cCBpbiBhbiBpbmZpbml0ZSBsb29wIGJlY2F1c2UgX2lzRnVuY09yU3RyaW5nKCkgd291bGQgZXZhbHVhdGUgYXMgdHJ1ZSBpbiB0aGUgY2hpbGQgdHdlZW5zLCBlbnRlcmluZyB0aGlzIGxvb3AsIGV0Yy4gU28gd2UgcGFyc2UgdGhlIHZhbHVlIHN0cmFpZ2h0IGZyb20gdmFycyBhbmQgZGVmYXVsdCB0byAwLlxuXG4gICAgICAgICAgY29weS5kdXJhdGlvbiA9ICtfcGFyc2VGdW5jT3JTdHJpbmcoZHVyYXRpb24sIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKTtcbiAgICAgICAgICBjb3B5LmRlbGF5ID0gKCtfcGFyc2VGdW5jT3JTdHJpbmcoZGVsYXksIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKSB8fCAwKSAtIF90aGlzMy5fZGVsYXk7XG5cbiAgICAgICAgICBpZiAoIXN0YWdnZXIgJiYgbCA9PT0gMSAmJiBjb3B5LmRlbGF5KSB7XG4gICAgICAgICAgICAvLyBpZiBzb21lb25lIGRvZXMgZGVsYXk6XCJyYW5kb20oMSwgNSlcIiwgcmVwZWF0Oi0xLCBmb3IgZXhhbXBsZSwgdGhlIGRlbGF5IHNob3VsZG4ndCBiZSBpbnNpZGUgdGhlIHJlcGVhdC5cbiAgICAgICAgICAgIF90aGlzMy5fZGVsYXkgPSBkZWxheSA9IGNvcHkuZGVsYXk7XG4gICAgICAgICAgICBfdGhpczMuX3N0YXJ0ICs9IGRlbGF5O1xuICAgICAgICAgICAgY29weS5kZWxheSA9IDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGwudG8oY3VyVGFyZ2V0LCBjb3B5LCBzdGFnZ2VyRnVuYyA/IHN0YWdnZXJGdW5jKGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cykgOiAwKTtcbiAgICAgICAgICB0bC5fZWFzZSA9IF9lYXNlTWFwLm5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICB0bC5kdXJhdGlvbigpID8gZHVyYXRpb24gPSBkZWxheSA9IDAgOiBfdGhpczMudGltZWxpbmUgPSAwOyAvLyBpZiB0aGUgdGltZWxpbmUncyBkdXJhdGlvbiBpcyAwLCB3ZSBkb24ndCBuZWVkIGEgdGltZWxpbmUgaW50ZXJuYWxseSFcbiAgICAgIH0gZWxzZSBpZiAoa2V5ZnJhbWVzKSB7XG4gICAgICAgIF9pbmhlcml0RGVmYXVsdHMoX3NldERlZmF1bHRzKHRsLnZhcnMuZGVmYXVsdHMsIHtcbiAgICAgICAgICBlYXNlOiBcIm5vbmVcIlxuICAgICAgICB9KSk7XG5cbiAgICAgICAgdGwuX2Vhc2UgPSBfcGFyc2VFYXNlKGtleWZyYW1lcy5lYXNlIHx8IHZhcnMuZWFzZSB8fCBcIm5vbmVcIik7XG4gICAgICAgIHZhciB0aW1lID0gMCxcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBrZixcbiAgICAgICAgICAgIHY7XG5cbiAgICAgICAgaWYgKF9pc0FycmF5KGtleWZyYW1lcykpIHtcbiAgICAgICAgICBrZXlmcmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoZnJhbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0bC50byhwYXJzZWRUYXJnZXRzLCBmcmFtZSwgXCI+XCIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRsLmR1cmF0aW9uKCk7IC8vIHRvIGVuc3VyZSB0bC5fZHVyIGlzIGNhY2hlZCBiZWNhdXNlIHdlIHRhcCBpbnRvIGl0IGZvciBwZXJmb3JtYW5jZSBwdXJwb3NlcyBpbiB0aGUgcmVuZGVyKCkgbWV0aG9kLlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvcHkgPSB7fTtcblxuICAgICAgICAgIGZvciAocCBpbiBrZXlmcmFtZXMpIHtcbiAgICAgICAgICAgIHAgPT09IFwiZWFzZVwiIHx8IHAgPT09IFwiZWFzZUVhY2hcIiB8fCBfcGFyc2VLZXlmcmFtZShwLCBrZXlmcmFtZXNbcF0sIGNvcHksIGtleWZyYW1lcy5lYXNlRWFjaCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChwIGluIGNvcHkpIHtcbiAgICAgICAgICAgIGEgPSBjb3B5W3BdLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGEudCAtIGIudDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGltZSA9IDA7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGtmID0gYVtpXTtcbiAgICAgICAgICAgICAgdiA9IHtcbiAgICAgICAgICAgICAgICBlYXNlOiBrZi5lLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAoa2YudCAtIChpID8gYVtpIC0gMV0udCA6IDApKSAvIDEwMCAqIGR1cmF0aW9uXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHZbcF0gPSBrZi52O1xuICAgICAgICAgICAgICB0bC50byhwYXJzZWRUYXJnZXRzLCB2LCB0aW1lKTtcbiAgICAgICAgICAgICAgdGltZSArPSB2LmR1cmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRsLmR1cmF0aW9uKCkgPCBkdXJhdGlvbiAmJiB0bC50byh7fSwge1xuICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uIC0gdGwuZHVyYXRpb24oKVxuICAgICAgICAgIH0pOyAvLyBpbiBjYXNlIGtleWZyYW1lcyBkaWRuJ3QgZ28gdG8gMTAwJVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGR1cmF0aW9uIHx8IF90aGlzMy5kdXJhdGlvbihkdXJhdGlvbiA9IHRsLmR1cmF0aW9uKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpczMudGltZWxpbmUgPSAwOyAvL3NwZWVkIG9wdGltaXphdGlvbiwgZmFzdGVyIGxvb2t1cHMgKG5vIGdvaW5nIHVwIHRoZSBwcm90b3R5cGUgY2hhaW4pXG4gICAgfVxuXG4gICAgaWYgKG92ZXJ3cml0ZSA9PT0gdHJ1ZSAmJiAhX3N1cHByZXNzT3ZlcndyaXRlcykge1xuICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyk7XG5cbiAgICAgIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YocGFyc2VkVGFyZ2V0cyk7XG5cbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gMDtcbiAgICB9XG5cbiAgICBfYWRkVG9UaW1lbGluZShwYXJlbnQsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgcG9zaXRpb24pO1xuXG4gICAgdmFycy5yZXZlcnNlZCAmJiBfdGhpczMucmV2ZXJzZSgpO1xuICAgIHZhcnMucGF1c2VkICYmIF90aGlzMy5wYXVzZWQodHJ1ZSk7XG5cbiAgICBpZiAoaW1tZWRpYXRlUmVuZGVyIHx8ICFkdXJhdGlvbiAmJiAha2V5ZnJhbWVzICYmIF90aGlzMy5fc3RhcnQgPT09IF9yb3VuZFByZWNpc2UocGFyZW50Ll90aW1lKSAmJiBfaXNOb3RGYWxzZShpbW1lZGlhdGVSZW5kZXIpICYmIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMykpICYmIHBhcmVudC5kYXRhICE9PSBcIm5lc3RlZFwiKSB7XG4gICAgICBfdGhpczMuX3RUaW1lID0gLV90aW55TnVtOyAvL2ZvcmNlcyBhIHJlbmRlciB3aXRob3V0IGhhdmluZyB0byBzZXQgdGhlIHJlbmRlcigpIFwiZm9yY2VcIiBwYXJhbWV0ZXIgdG8gdHJ1ZSBiZWNhdXNlIHdlIHdhbnQgdG8gYWxsb3cgbGF6eWluZyBieSBkZWZhdWx0ICh1c2luZyB0aGUgXCJmb3JjZVwiIHBhcmFtZXRlciBhbHdheXMgZm9yY2VzIGFuIGltbWVkaWF0ZSBmdWxsIHJlbmRlcilcblxuICAgICAgX3RoaXMzLnJlbmRlcihNYXRoLm1heCgwLCAtZGVsYXkpIHx8IDApOyAvL2luIGNhc2UgZGVsYXkgaXMgbmVnYXRpdmVcblxuICAgIH1cblxuICAgIHNjcm9sbFRyaWdnZXIgJiYgX3Njcm9sbFRyaWdnZXIoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBzY3JvbGxUcmlnZ2VyKTtcbiAgICByZXR1cm4gX3RoaXMzO1xuICB9XG5cbiAgdmFyIF9wcm90bzMgPSBUd2Vlbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgICB2YXIgcHJldlRpbWUgPSB0aGlzLl90aW1lLFxuICAgICAgICB0RHVyID0gdGhpcy5fdER1cixcbiAgICAgICAgZHVyID0gdGhpcy5fZHVyLFxuICAgICAgICBpc05lZ2F0aXZlID0gdG90YWxUaW1lIDwgMCxcbiAgICAgICAgdFRpbWUgPSB0b3RhbFRpbWUgPiB0RHVyIC0gX3RpbnlOdW0gJiYgIWlzTmVnYXRpdmUgPyB0RHVyIDogdG90YWxUaW1lIDwgX3RpbnlOdW0gPyAwIDogdG90YWxUaW1lLFxuICAgICAgICB0aW1lLFxuICAgICAgICBwdCxcbiAgICAgICAgaXRlcmF0aW9uLFxuICAgICAgICBjeWNsZUR1cmF0aW9uLFxuICAgICAgICBwcmV2SXRlcmF0aW9uLFxuICAgICAgICBpc1lveW8sXG4gICAgICAgIHJhdGlvLFxuICAgICAgICB0aW1lbGluZSxcbiAgICAgICAgeW95b0Vhc2U7XG5cbiAgICBpZiAoIWR1cikge1xuICAgICAgX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuKHRoaXMsIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICB9IGVsc2UgaWYgKHRUaW1lICE9PSB0aGlzLl90VGltZSB8fCAhdG90YWxUaW1lIHx8IGZvcmNlIHx8ICF0aGlzLl9pbml0dGVkICYmIHRoaXMuX3RUaW1lIHx8IHRoaXMuX3N0YXJ0QXQgJiYgdGhpcy5felRpbWUgPCAwICE9PSBpc05lZ2F0aXZlKSB7XG4gICAgICAvL3RoaXMgc2Vuc2VzIGlmIHdlJ3JlIGNyb3NzaW5nIG92ZXIgdGhlIHN0YXJ0IHRpbWUsIGluIHdoaWNoIGNhc2Ugd2UgbXVzdCByZWNvcmQgX3pUaW1lIGFuZCBmb3JjZSB0aGUgcmVuZGVyLCBidXQgd2UgZG8gaXQgaW4gdGhpcyBsZW5ndGh5IGNvbmRpdGlvbmFsIHdheSBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucyAodXN1YWxseSB3ZSBjYW4gc2tpcCB0aGUgY2FsY3VsYXRpb25zKTogdGhpcy5faW5pdHRlZCAmJiAodGhpcy5felRpbWUgPCAwKSAhPT0gKHRvdGFsVGltZSA8IDApXG4gICAgICB0aW1lID0gdFRpbWU7XG4gICAgICB0aW1lbGluZSA9IHRoaXMudGltZWxpbmU7XG5cbiAgICAgIGlmICh0aGlzLl9yZXBlYXQpIHtcbiAgICAgICAgLy9hZGp1c3QgdGhlIHRpbWUgZm9yIHJlcGVhdHMgYW5kIHlveW9zXG4gICAgICAgIGN5Y2xlRHVyYXRpb24gPSBkdXIgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlcGVhdCA8IC0xICYmIGlzTmVnYXRpdmUpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoY3ljbGVEdXJhdGlvbiAqIDEwMCArIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWUgPSBfcm91bmRQcmVjaXNlKHRUaW1lICUgY3ljbGVEdXJhdGlvbik7IC8vcm91bmQgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzLiAoNCAlIDAuOCBzaG91bGQgYmUgMCBidXQgc29tZSBicm93c2VycyByZXBvcnQgaXQgYXMgMC43OTk5OTk5OSEpXG5cbiAgICAgICAgaWYgKHRUaW1lID09PSB0RHVyKSB7XG4gICAgICAgICAgLy8gdGhlIHREdXIgPT09IHRUaW1lIGlzIGZvciBlZGdlIGNhc2VzIHdoZXJlIHRoZXJlJ3MgYSBsZW5ndGh5IGRlY2ltYWwgb24gdGhlIGR1cmF0aW9uIGFuZCBpdCBtYXkgcmVhY2ggdGhlIHZlcnkgZW5kIGJ1dCB0aGUgdGltZSBpcyByZW5kZXJlZCBhcyBub3QtcXVpdGUtdGhlcmUgKHJlbWVtYmVyLCB0RHVyIGlzIHJvdW5kZWQgdG8gNCBkZWNpbWFscyB3aGVyZWFzIGR1ciBpc24ndClcbiAgICAgICAgICBpdGVyYXRpb24gPSB0aGlzLl9yZXBlYXQ7XG4gICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVyYXRpb24gPSB+fih0VGltZSAvIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgICAgaWYgKGl0ZXJhdGlvbiAmJiBpdGVyYXRpb24gPT09IF9yb3VuZFByZWNpc2UodFRpbWUgLyBjeWNsZUR1cmF0aW9uKSkge1xuICAgICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgICAgIGl0ZXJhdGlvbi0tO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRpbWUgPiBkdXIgJiYgKHRpbWUgPSBkdXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaXNZb3lvID0gdGhpcy5feW95byAmJiBpdGVyYXRpb24gJiAxO1xuXG4gICAgICAgIGlmIChpc1lveW8pIHtcbiAgICAgICAgICB5b3lvRWFzZSA9IHRoaXMuX3lFYXNlO1xuICAgICAgICAgIHRpbWUgPSBkdXIgLSB0aW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldkl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKHRpbWUgPT09IHByZXZUaW1lICYmICFmb3JjZSAmJiB0aGlzLl9pbml0dGVkICYmIGl0ZXJhdGlvbiA9PT0gcHJldkl0ZXJhdGlvbikge1xuICAgICAgICAgIC8vY291bGQgYmUgZHVyaW5nIHRoZSByZXBlYXREZWxheSBwYXJ0LiBObyBuZWVkIHRvIHJlbmRlciBhbmQgZmlyZSBjYWxsYmFja3MuXG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24pIHtcbiAgICAgICAgICB0aW1lbGluZSAmJiB0aGlzLl95RWFzZSAmJiBfcHJvcGFnYXRlWW95b0Vhc2UodGltZWxpbmUsIGlzWW95byk7IC8vcmVwZWF0UmVmcmVzaCBmdW5jdGlvbmFsaXR5XG5cbiAgICAgICAgICBpZiAodGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiAhdGhpcy5fbG9jayAmJiB0aGlzLl90aW1lICE9PSBjeWNsZUR1cmF0aW9uICYmIHRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgICAgIC8vIHRoaXMuX3RpbWUgd2lsbCA9PT0gY3ljbGVEdXJhdGlvbiB3aGVuIHdlIHJlbmRlciBhdCBFWEFDVExZIHRoZSBlbmQgb2YgYW4gaXRlcmF0aW9uLiBXaXRob3V0IHRoaXMgY29uZGl0aW9uLCBpdCdkIG9mdGVuIGRvIHRoZSByZXBlYXRSZWZyZXNoIHJlbmRlciBUV0lDRSAoYWdhaW4gb24gdGhlIHZlcnkgbmV4dCB0aWNrKS5cbiAgICAgICAgICAgIHRoaXMuX2xvY2sgPSBmb3JjZSA9IDE7IC8vZm9yY2UsIG90aGVyd2lzZSBpZiBsYXp5IGlzIHRydWUsIHRoZSBfYXR0ZW1wdEluaXRUd2VlbigpIHdpbGwgcmV0dXJuIGFuZCB3ZSdsbCBqdW1wIG91dCBhbmQgZ2V0IGNhdWdodCBib3VuY2luZyBvbiBlYWNoIHRpY2suXG5cbiAgICAgICAgICAgIHRoaXMucmVuZGVyKF9yb3VuZFByZWNpc2UoY3ljbGVEdXJhdGlvbiAqIGl0ZXJhdGlvbiksIHRydWUpLmludmFsaWRhdGUoKS5fbG9jayA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5faW5pdHRlZCkge1xuICAgICAgICBpZiAoX2F0dGVtcHRJbml0VHdlZW4odGhpcywgaXNOZWdhdGl2ZSA/IHRvdGFsVGltZSA6IHRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cywgdFRpbWUpKSB7XG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSAwOyAvLyBpbiBjb25zdHJ1Y3RvciBpZiBpbW1lZGlhdGVSZW5kZXIgaXMgdHJ1ZSwgd2Ugc2V0IF90VGltZSB0byAtX3RpbnlOdW0gdG8gaGF2ZSB0aGUgcGxheWhlYWQgY3Jvc3MgdGhlIHN0YXJ0aW5nIHBvaW50IGJ1dCB3ZSBjYW4ndCBsZWF2ZSBfdFRpbWUgYXMgYSBuZWdhdGl2ZSBudW1iZXIuXG5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmV2VGltZSAhPT0gdGhpcy5fdGltZSAmJiAhKGZvcmNlICYmIHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmIGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbikpIHtcbiAgICAgICAgICAvLyByYXJlIGVkZ2UgY2FzZSAtIGR1cmluZyBpbml0aWFsaXphdGlvbiwgYW4gb25VcGRhdGUgaW4gdGhlIF9zdGFydEF0ICguZnJvbVRvKCkpIG1pZ2h0IGZvcmNlIHRoaXMgdHdlZW4gdG8gcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QgaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgZGl0Y2ggdGhpcyByZW5kZXIoKSBjYWxsIHNvIHRoYXQgaXQgZG9lc24ndCByZXZlcnQgdGhlIHZhbHVlcy4gQnV0IHdlIGFsc28gZG9uJ3Qgd2FudCB0byBkdW1wIGlmIHdlJ3JlIGRvaW5nIGEgcmVwZWF0UmVmcmVzaCByZW5kZXIhXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZHVyICE9PSB0aGlzLl9kdXIpIHtcbiAgICAgICAgICAvLyB3aGlsZSBpbml0dGluZywgYSBwbHVnaW4gbGlrZSBJbmVydGlhUGx1Z2luIG1pZ2h0IGFsdGVyIHRoZSBkdXJhdGlvbiwgc28gcmVydW4gZnJvbSB0aGUgc3RhcnQgdG8gZW5zdXJlIGV2ZXJ5dGhpbmcgcmVuZGVycyBhcyBpdCBzaG91bGQuXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XG5cbiAgICAgIGlmICghdGhpcy5fYWN0ICYmIHRoaXMuX3RzKSB7XG4gICAgICAgIHRoaXMuX2FjdCA9IDE7IC8vYXMgbG9uZyBhcyBpdCdzIG5vdCBwYXVzZWQsIGZvcmNlIGl0IHRvIGJlIGFjdGl2ZSBzbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhcmVudCB0aW1lbGluZSwgaXQnbGwgYmUgZm9yY2VkIHRvIHJlLXJlbmRlciBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgICAgIHRoaXMuX2xhenkgPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJhdGlvID0gcmF0aW8gPSAoeW95b0Vhc2UgfHwgdGhpcy5fZWFzZSkodGltZSAvIGR1cik7XG5cbiAgICAgIGlmICh0aGlzLl9mcm9tKSB7XG4gICAgICAgIHRoaXMucmF0aW8gPSByYXRpbyA9IDEgLSByYXRpbztcbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgJiYgIXByZXZUaW1lICYmICFzdXBwcmVzc0V2ZW50cyAmJiAhaXRlcmF0aW9uKSB7XG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RUaW1lICE9PSB0VGltZSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgdGhlIG9uU3RhcnQgdHJpZ2dlcmVkIGEgcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QsIGVqZWN0LiBMaWtlIGlmIHNvbWVvbmUgZGlkIGFuaW1hdGlvbi5wYXVzZSgwLjUpIG9yIHNvbWV0aGluZyBpbnNpZGUgdGhlIG9uU3RhcnQuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcHQgPSB0aGlzLl9wdDtcblxuICAgICAgd2hpbGUgKHB0KSB7XG4gICAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgfVxuXG4gICAgICB0aW1lbGluZSAmJiB0aW1lbGluZS5yZW5kZXIodG90YWxUaW1lIDwgMCA/IHRvdGFsVGltZSA6IHRpbWVsaW5lLl9kdXIgKiB0aW1lbGluZS5fZWFzZSh0aW1lIC8gdGhpcy5fZHVyKSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB8fCB0aGlzLl9zdGFydEF0ICYmICh0aGlzLl96VGltZSA9IHRvdGFsVGltZSk7XG5cbiAgICAgIGlmICh0aGlzLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgaXNOZWdhdGl2ZSAmJiBfcmV3aW5kU3RhcnRBdCh0aGlzLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7IC8vbm90ZTogZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIHdlIHR1Y2sgdGhpcyBjb25kaXRpb25hbCBsb2dpYyBpbnNpZGUgbGVzcyB0cmF2ZWxlZCBhcmVhcyAobW9zdCB0d2VlbnMgZG9uJ3QgaGF2ZSBhbiBvblVwZGF0ZSkuIFdlJ2QganVzdCBoYXZlIGl0IGF0IHRoZSBlbmQgYmVmb3JlIHRoZSBvbkNvbXBsZXRlLCBidXQgdGhlIHZhbHVlcyBzaG91bGQgYmUgdXBkYXRlZCBiZWZvcmUgYW55IG9uVXBkYXRlIGlzIGNhbGxlZCwgc28gd2UgQUxTTyBwdXQgaXQgaGVyZSBhbmQgdGhlbiBpZiBpdCdzIG5vdCBjYWxsZWQsIHdlIGRvIHNvIGxhdGVyIG5lYXIgdGhlIG9uQ29tcGxldGUuXG5cbiAgICAgICAgX2NhbGxiYWNrKHRoaXMsIFwib25VcGRhdGVcIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlcGVhdCAmJiBpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24gJiYgdGhpcy52YXJzLm9uUmVwZWF0ICYmICFzdXBwcmVzc0V2ZW50cyAmJiB0aGlzLnBhcmVudCAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJlcGVhdFwiKTtcblxuICAgICAgaWYgKCh0VGltZSA9PT0gdGhpcy5fdER1ciB8fCAhdFRpbWUpICYmIHRoaXMuX3RUaW1lID09PSB0VGltZSkge1xuICAgICAgICBpc05lZ2F0aXZlICYmICF0aGlzLl9vblVwZGF0ZSAmJiBfcmV3aW5kU3RhcnRBdCh0aGlzLCB0b3RhbFRpbWUsIHRydWUsIHRydWUpO1xuICAgICAgICAodG90YWxUaW1lIHx8ICFkdXIpICYmICh0VGltZSA9PT0gdGhpcy5fdER1ciAmJiB0aGlzLl90cyA+IDAgfHwgIXRUaW1lICYmIHRoaXMuX3RzIDwgMCkgJiYgX3JlbW92ZUZyb21QYXJlbnQodGhpcywgMSk7IC8vIGRvbid0IHJlbW92ZSBpZiB3ZSdyZSByZW5kZXJpbmcgYXQgZXhhY3RseSBhIHRpbWUgb2YgMCwgYXMgdGhlcmUgY291bGQgYmUgYXV0b1JldmVydCB2YWx1ZXMgdGhhdCBzaG91bGQgZ2V0IHNldCBvbiB0aGUgbmV4dCB0aWNrIChpZiB0aGUgcGxheWhlYWQgZ29lcyBiYWNrd2FyZCBiZXlvbmQgdGhlIHN0YXJ0VGltZSwgbmVnYXRpdmUgdG90YWxUaW1lKS4gRG9uJ3QgcmVtb3ZlIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIHBsYXloZWFkIGlzbid0IGF0IDAsIG90aGVyd2lzZSB0bC5wcm9ncmVzcygxKS5yZXZlcnNlKCkgd29uJ3Qgd29yay4gT25seSByZW1vdmUgaWYgdGhlIHBsYXloZWFkIGlzIGF0IHRoZSBlbmQgYW5kIHRpbWVTY2FsZSBpcyBwb3NpdGl2ZSwgb3IgaWYgdGhlIHBsYXloZWFkIGlzIGF0IDAgYW5kIHRoZSB0aW1lU2NhbGUgaXMgbmVnYXRpdmUuXG5cbiAgICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhKGlzTmVnYXRpdmUgJiYgIXByZXZUaW1lKSAmJiAodFRpbWUgfHwgcHJldlRpbWUgfHwgaXNZb3lvKSkge1xuICAgICAgICAgIC8vIGlmIHByZXZUaW1lIGFuZCB0VGltZSBhcmUgemVybywgd2Ugc2hvdWxkbid0IGZpcmUgdGhlIG9uUmV2ZXJzZUNvbXBsZXRlLiBUaGlzIGNvdWxkIGhhcHBlbiBpZiB5b3UgZ3NhcC50byguLi4ge3BhdXNlZDp0cnVlfSkucGxheSgpO1xuICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCB0VGltZSA9PT0gdER1ciA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICAgIHRoaXMuX3Byb20gJiYgISh0VGltZSA8IHREdXIgJiYgdGhpcy50aW1lU2NhbGUoKSA+IDApICYmIHRoaXMuX3Byb20oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzMudGFyZ2V0cyA9IGZ1bmN0aW9uIHRhcmdldHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RhcmdldHM7XG4gIH07XG5cbiAgX3Byb3RvMy5pbnZhbGlkYXRlID0gZnVuY3Rpb24gaW52YWxpZGF0ZShzb2Z0KSB7XG4gICAgLy8gXCJzb2Z0XCIgZ2l2ZXMgdXMgYSB3YXkgdG8gY2xlYXIgb3V0IGV2ZXJ5dGhpbmcgRVhDRVBUIHRoZSByZWNvcmRlZCBwcmUtXCJmcm9tXCIgcG9ydGlvbiBvZiBmcm9tKCkgdHdlZW5zLiBPdGhlcndpc2UsIGZvciBleGFtcGxlLCBpZiB5b3UgdHdlZW4ucHJvZ3Jlc3MoMSkucmVuZGVyKDAsIHRydWUgdHJ1ZSkuaW52YWxpZGF0ZSgpLCB0aGUgXCJmcm9tXCIgdmFsdWVzIHdvdWxkIHBlcnNpc3QgYW5kIHRoZW4gb24gdGhlIG5leHQgcmVuZGVyLCB0aGUgZnJvbSgpIHR3ZWVucyB3b3VsZCBpbml0aWFsaXplIGFuZCB0aGUgY3VycmVudCB2YWx1ZSB3b3VsZCBtYXRjaCB0aGUgXCJmcm9tXCIgdmFsdWVzLCB0aHVzIGFuaW1hdGUgZnJvbSB0aGUgc2FtZSB2YWx1ZSB0byB0aGUgc2FtZSB2YWx1ZSAobm8gYW5pbWF0aW9uKS4gV2UgdGFwIGludG8gdGhpcyBpbiBTY3JvbGxUcmlnZ2VyJ3MgcmVmcmVzaCgpIHdoZXJlIHdlIG11c3QgcHVzaCBhIHR3ZWVuIHRvIGNvbXBsZXRpb24gYW5kIHRoZW4gYmFjayBhZ2FpbiBidXQgaG9ub3IgaXRzIGluaXQgc3RhdGUgaW4gY2FzZSB0aGUgdHdlZW4gaXMgZGVwZW5kZW50IG9uIGFub3RoZXIgdHdlZW4gZnVydGhlciB1cCBvbiB0aGUgcGFnZS5cbiAgICAoIXNvZnQgfHwgIXRoaXMudmFycy5ydW5CYWNrd2FyZHMpICYmICh0aGlzLl9zdGFydEF0ID0gMCk7XG4gICAgdGhpcy5fcHQgPSB0aGlzLl9vcCA9IHRoaXMuX29uVXBkYXRlID0gdGhpcy5fbGF6eSA9IHRoaXMucmF0aW8gPSAwO1xuICAgIHRoaXMuX3B0TG9va3VwID0gW107XG4gICAgdGhpcy50aW1lbGluZSAmJiB0aGlzLnRpbWVsaW5lLmludmFsaWRhdGUoc29mdCk7XG4gICAgcmV0dXJuIF9BbmltYXRpb24yLnByb3RvdHlwZS5pbnZhbGlkYXRlLmNhbGwodGhpcywgc29mdCk7XG4gIH07XG5cbiAgX3Byb3RvMy5yZXNldFRvID0gZnVuY3Rpb24gcmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUsIHNraXBSZWN1cnNpb24pIHtcbiAgICBfdGlja2VyQWN0aXZlIHx8IF90aWNrZXIud2FrZSgpO1xuICAgIHRoaXMuX3RzIHx8IHRoaXMucGxheSgpO1xuICAgIHZhciB0aW1lID0gTWF0aC5taW4odGhpcy5fZHVyLCAodGhpcy5fZHAuX3RpbWUgLSB0aGlzLl9zdGFydCkgKiB0aGlzLl90cyksXG4gICAgICAgIHJhdGlvO1xuICAgIHRoaXMuX2luaXR0ZWQgfHwgX2luaXRUd2Vlbih0aGlzLCB0aW1lKTtcbiAgICByYXRpbyA9IHRoaXMuX2Vhc2UodGltZSAvIHRoaXMuX2R1cik7IC8vIGRvbid0IGp1c3QgZ2V0IHR3ZWVuLnJhdGlvIGJlY2F1c2UgaXQgbWF5IG5vdCBoYXZlIHJlbmRlcmVkIHlldC5cbiAgICAvLyBwb3NzaWJsZSBmdXR1cmUgYWRkaXRpb24gdG8gYWxsb3cgYW4gb2JqZWN0IHdpdGggbXVsdGlwbGUgdmFsdWVzIHRvIHVwZGF0ZSwgbGlrZSB0d2Vlbi5yZXNldFRvKHt4OiAxMDAsIHk6IDIwMH0pOyBBdCB0aGlzIHBvaW50LCBpdCBkb2Vzbid0IHNlZW0gd29ydGggdGhlIGFkZGVkIGtiIGdpdmVuIHRoZSBmYWN0IHRoYXQgbW9zdCB1c2VycyB3aWxsIGxpa2VseSBvcHQgZm9yIHRoZSBjb252ZW5pZW50IGdzYXAucXVpY2tUbygpIHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIHRoaXMgbWV0aG9kLlxuICAgIC8vIGlmIChfaXNPYmplY3QocHJvcGVydHkpKSB7IC8vIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvblxuICAgIC8vIFx0Zm9yIChwIGluIHByb3BlcnR5KSB7XG4gICAgLy8gXHRcdGlmIChfdXBkYXRlUHJvcFR3ZWVucyh0aGlzLCBwLCBwcm9wZXJ0eVtwXSwgdmFsdWUgPyB2YWx1ZVtwXSA6IG51bGwsIHN0YXJ0LCByYXRpbywgdGltZSkpIHtcbiAgICAvLyBcdFx0XHRyZXR1cm4gdGhpcy5yZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSk7IC8vIGlmIGEgUHJvcFR3ZWVuIHdhc24ndCBmb3VuZCBmb3IgdGhlIHByb3BlcnR5LCBpdCdsbCBnZXQgZm9yY2VkIHdpdGggYSByZS1pbml0aWFsaXphdGlvbiBzbyB3ZSBuZWVkIHRvIGp1bXAgb3V0IGFuZCBzdGFydCBvdmVyIGFnYWluLlxuICAgIC8vIFx0XHR9XG4gICAgLy8gXHR9XG4gICAgLy8gfSBlbHNlIHtcblxuICAgIGlmIChfdXBkYXRlUHJvcFR3ZWVucyh0aGlzLCBwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUsIHJhdGlvLCB0aW1lLCBza2lwUmVjdXJzaW9uKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUsIDEpOyAvLyBpZiBhIFByb3BUd2VlbiB3YXNuJ3QgZm91bmQgZm9yIHRoZSBwcm9wZXJ0eSwgaXQnbGwgZ2V0IGZvcmNlZCB3aXRoIGEgcmUtaW5pdGlhbGl6YXRpb24gc28gd2UgbmVlZCB0byBqdW1wIG91dCBhbmQgc3RhcnQgb3ZlciBhZ2Fpbi5cbiAgICB9IC8vfVxuXG5cbiAgICBfYWxpZ25QbGF5aGVhZCh0aGlzLCAwKTtcblxuICAgIHRoaXMucGFyZW50IHx8IF9hZGRMaW5rZWRMaXN0SXRlbSh0aGlzLl9kcCwgdGhpcywgXCJfZmlyc3RcIiwgXCJfbGFzdFwiLCB0aGlzLl9kcC5fc29ydCA/IFwiX3N0YXJ0XCIgOiAwKTtcbiAgICByZXR1cm4gdGhpcy5yZW5kZXIoMCk7XG4gIH07XG5cbiAgX3Byb3RvMy5raWxsID0gZnVuY3Rpb24ga2lsbCh0YXJnZXRzLCB2YXJzKSB7XG4gICAgaWYgKHZhcnMgPT09IHZvaWQgMCkge1xuICAgICAgdmFycyA9IFwiYWxsXCI7XG4gICAgfVxuXG4gICAgaWYgKCF0YXJnZXRzICYmICghdmFycyB8fCB2YXJzID09PSBcImFsbFwiKSkge1xuICAgICAgdGhpcy5fbGF6eSA9IHRoaXMuX3B0ID0gMDtcbiAgICAgIHJldHVybiB0aGlzLnBhcmVudCA/IF9pbnRlcnJ1cHQodGhpcykgOiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRpbWVsaW5lKSB7XG4gICAgICB2YXIgdER1ciA9IHRoaXMudGltZWxpbmUudG90YWxEdXJhdGlvbigpO1xuICAgICAgdGhpcy50aW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0cywgdmFycywgX292ZXJ3cml0aW5nVHdlZW4gJiYgX292ZXJ3cml0aW5nVHdlZW4udmFycy5vdmVyd3JpdGUgIT09IHRydWUpLl9maXJzdCB8fCBfaW50ZXJydXB0KHRoaXMpOyAvLyBpZiBub3RoaW5nIGlzIGxlZnQgdHdlZW5pbmcsIGludGVycnVwdC5cblxuICAgICAgdGhpcy5wYXJlbnQgJiYgdER1ciAhPT0gdGhpcy50aW1lbGluZS50b3RhbER1cmF0aW9uKCkgJiYgX3NldER1cmF0aW9uKHRoaXMsIHRoaXMuX2R1ciAqIHRoaXMudGltZWxpbmUuX3REdXIgLyB0RHVyLCAwLCAxKTsgLy8gaWYgYSBuZXN0ZWQgdHdlZW4gaXMga2lsbGVkIHRoYXQgY2hhbmdlcyB0aGUgZHVyYXRpb24sIGl0IHNob3VsZCBhZmZlY3QgdGhpcyB0d2VlbidzIGR1cmF0aW9uLiBXZSBtdXN0IHVzZSB0aGUgcmF0aW8sIHRob3VnaCwgYmVjYXVzZSBzb21ldGltZXMgdGhlIGludGVybmFsIHRpbWVsaW5lIGlzIHN0cmV0Y2hlZCBsaWtlIGZvciBrZXlmcmFtZXMgd2hlcmUgdGhleSBkb24ndCBhbGwgYWRkIHVwIHRvIHdoYXRldmVyIHRoZSBwYXJlbnQgdHdlZW4ncyBkdXJhdGlvbiB3YXMgc2V0IHRvLlxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgcGFyc2VkVGFyZ2V0cyA9IHRoaXMuX3RhcmdldHMsXG4gICAgICAgIGtpbGxpbmdUYXJnZXRzID0gdGFyZ2V0cyA/IHRvQXJyYXkodGFyZ2V0cykgOiBwYXJzZWRUYXJnZXRzLFxuICAgICAgICBwcm9wVHdlZW5Mb29rdXAgPSB0aGlzLl9wdExvb2t1cCxcbiAgICAgICAgZmlyc3RQVCA9IHRoaXMuX3B0LFxuICAgICAgICBvdmVyd3JpdHRlblByb3BzLFxuICAgICAgICBjdXJMb29rdXAsXG4gICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzLFxuICAgICAgICBwcm9wcyxcbiAgICAgICAgcCxcbiAgICAgICAgcHQsXG4gICAgICAgIGk7XG5cbiAgICBpZiAoKCF2YXJzIHx8IHZhcnMgPT09IFwiYWxsXCIpICYmIF9hcnJheXNNYXRjaChwYXJzZWRUYXJnZXRzLCBraWxsaW5nVGFyZ2V0cykpIHtcbiAgICAgIHZhcnMgPT09IFwiYWxsXCIgJiYgKHRoaXMuX3B0ID0gMCk7XG4gICAgICByZXR1cm4gX2ludGVycnVwdCh0aGlzKTtcbiAgICB9XG5cbiAgICBvdmVyd3JpdHRlblByb3BzID0gdGhpcy5fb3AgPSB0aGlzLl9vcCB8fCBbXTtcblxuICAgIGlmICh2YXJzICE9PSBcImFsbFwiKSB7XG4gICAgICAvL3NvIHBlb3BsZSBjYW4gcGFzcyBpbiBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzXG4gICAgICBpZiAoX2lzU3RyaW5nKHZhcnMpKSB7XG4gICAgICAgIHAgPSB7fTtcblxuICAgICAgICBfZm9yRWFjaE5hbWUodmFycywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gcFtuYW1lXSA9IDE7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhcnMgPSBwO1xuICAgICAgfVxuXG4gICAgICB2YXJzID0gX2FkZEFsaWFzZXNUb1ZhcnMocGFyc2VkVGFyZ2V0cywgdmFycyk7XG4gICAgfVxuXG4gICAgaSA9IHBhcnNlZFRhcmdldHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKH5raWxsaW5nVGFyZ2V0cy5pbmRleE9mKHBhcnNlZFRhcmdldHNbaV0pKSB7XG4gICAgICAgIGN1ckxvb2t1cCA9IHByb3BUd2Vlbkxvb2t1cFtpXTtcblxuICAgICAgICBpZiAodmFycyA9PT0gXCJhbGxcIikge1xuICAgICAgICAgIG92ZXJ3cml0dGVuUHJvcHNbaV0gPSB2YXJzO1xuICAgICAgICAgIHByb3BzID0gY3VyTG9va3VwO1xuICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzID0ge307XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMgPSBvdmVyd3JpdHRlblByb3BzW2ldID0gb3ZlcndyaXR0ZW5Qcm9wc1tpXSB8fCB7fTtcbiAgICAgICAgICBwcm9wcyA9IHZhcnM7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHAgaW4gcHJvcHMpIHtcbiAgICAgICAgICBwdCA9IGN1ckxvb2t1cCAmJiBjdXJMb29rdXBbcF07XG5cbiAgICAgICAgICBpZiAocHQpIHtcbiAgICAgICAgICAgIGlmICghKFwia2lsbFwiIGluIHB0LmQpIHx8IHB0LmQua2lsbChwKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgcHQsIFwiX3B0XCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWxldGUgY3VyTG9va3VwW3BdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjdXJPdmVyd3JpdGVQcm9wcyAhPT0gXCJhbGxcIikge1xuICAgICAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHNbcF0gPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2luaXR0ZWQgJiYgIXRoaXMuX3B0ICYmIGZpcnN0UFQgJiYgX2ludGVycnVwdCh0aGlzKTsgLy9pZiBhbGwgdHdlZW5pbmcgcHJvcGVydGllcyBhcmUga2lsbGVkLCBraWxsIHRoZSB0d2Vlbi4gV2l0aG91dCB0aGlzIGxpbmUsIGlmIHRoZXJlJ3MgYSB0d2VlbiB3aXRoIG11bHRpcGxlIHRhcmdldHMgYW5kIHRoZW4geW91IGtpbGxUd2VlbnNPZigpIGVhY2ggdGFyZ2V0IGluZGl2aWR1YWxseSwgdGhlIHR3ZWVuIHdvdWxkIHRlY2huaWNhbGx5IHN0aWxsIHJlbWFpbiBhY3RpdmUgYW5kIGZpcmUgaXRzIG9uQ29tcGxldGUgZXZlbiB0aG91Z2ggdGhlcmUgYXJlbid0IGFueSBtb3JlIHByb3BlcnRpZXMgdHdlZW5pbmcuXG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBUd2Vlbi50byA9IGZ1bmN0aW9uIHRvKHRhcmdldHMsIHZhcnMpIHtcbiAgICByZXR1cm4gbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMsIGFyZ3VtZW50c1syXSk7XG4gIH07XG5cbiAgVHdlZW4uZnJvbSA9IGZ1bmN0aW9uIGZyb20odGFyZ2V0cywgdmFycykge1xuICAgIHJldHVybiBfY3JlYXRlVHdlZW5UeXBlKDEsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgVHdlZW4uZGVsYXllZENhbGwgPSBmdW5jdGlvbiBkZWxheWVkQ2FsbChkZWxheSwgY2FsbGJhY2ssIHBhcmFtcywgc2NvcGUpIHtcbiAgICByZXR1cm4gbmV3IFR3ZWVuKGNhbGxiYWNrLCAwLCB7XG4gICAgICBpbW1lZGlhdGVSZW5kZXI6IGZhbHNlLFxuICAgICAgbGF6eTogZmFsc2UsXG4gICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgZGVsYXk6IGRlbGF5LFxuICAgICAgb25Db21wbGV0ZTogY2FsbGJhY2ssXG4gICAgICBvblJldmVyc2VDb21wbGV0ZTogY2FsbGJhY2ssXG4gICAgICBvbkNvbXBsZXRlUGFyYW1zOiBwYXJhbXMsXG4gICAgICBvblJldmVyc2VDb21wbGV0ZVBhcmFtczogcGFyYW1zLFxuICAgICAgY2FsbGJhY2tTY29wZTogc2NvcGVcbiAgICB9KTsgLy8gd2UgbXVzdCB1c2Ugb25SZXZlcnNlQ29tcGxldGUgdG9vIGZvciB0aGluZ3MgbGlrZSB0aW1lbGluZS5hZGQoKCkgPT4gey4uLn0pIHdoaWNoIHNob3VsZCBiZSB0cmlnZ2VyZWQgaW4gQk9USCBkaXJlY3Rpb25zIChmb3J3YXJkIGFuZCByZXZlcnNlKVxuICB9O1xuXG4gIFR3ZWVuLmZyb21UbyA9IGZ1bmN0aW9uIGZyb21Ubyh0YXJnZXRzLCBmcm9tVmFycywgdG9WYXJzKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVUd2VlblR5cGUoMiwgYXJndW1lbnRzKTtcbiAgfTtcblxuICBUd2Vlbi5zZXQgPSBmdW5jdGlvbiBzZXQodGFyZ2V0cywgdmFycykge1xuICAgIHZhcnMuZHVyYXRpb24gPSAwO1xuICAgIHZhcnMucmVwZWF0RGVsYXkgfHwgKHZhcnMucmVwZWF0ID0gMCk7XG4gICAgcmV0dXJuIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzKTtcbiAgfTtcblxuICBUd2Vlbi5raWxsVHdlZW5zT2YgPSBmdW5jdGlvbiBraWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSk7XG4gIH07XG5cbiAgcmV0dXJuIFR3ZWVuO1xufShBbmltYXRpb24pO1xuXG5fc2V0RGVmYXVsdHMoVHdlZW4ucHJvdG90eXBlLCB7XG4gIF90YXJnZXRzOiBbXSxcbiAgX2xhenk6IDAsXG4gIF9zdGFydEF0OiAwLFxuICBfb3A6IDAsXG4gIF9vbkluaXQ6IDBcbn0pOyAvL2FkZCB0aGUgcGVydGluZW50IHRpbWVsaW5lIG1ldGhvZHMgdG8gVHdlZW4gaW5zdGFuY2VzIHNvIHRoYXQgdXNlcnMgY2FuIGNoYWluIGNvbnZlbmllbnRseSBhbmQgY3JlYXRlIGEgdGltZWxpbmUgYXV0b21hdGljYWxseS4gKHJlbW92ZWQgZHVlIHRvIGNvbmNlcm5zIHRoYXQgaXQnZCB1bHRpbWF0ZWx5IGFkZCB0byBtb3JlIGNvbmZ1c2lvbiBlc3BlY2lhbGx5IGZvciBiZWdpbm5lcnMpXG4vLyBfZm9yRWFjaE5hbWUoXCJ0byxmcm9tLGZyb21UbyxzZXQsY2FsbCxhZGQsYWRkTGFiZWwsYWRkUGF1c2VcIiwgbmFtZSA9PiB7XG4vLyBcdFR3ZWVuLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuLy8gXHRcdGxldCB0bCA9IG5ldyBUaW1lbGluZSgpO1xuLy8gXHRcdHJldHVybiBfYWRkVG9UaW1lbGluZSh0bCwgdGhpcylbbmFtZV0uYXBwbHkodGwsIHRvQXJyYXkoYXJndW1lbnRzKSk7XG4vLyBcdH1cbi8vIH0pO1xuLy9mb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS4gTGV2ZXJhZ2UgdGhlIHRpbWVsaW5lIGNhbGxzLlxuXG5cbl9mb3JFYWNoTmFtZShcInN0YWdnZXJUbyxzdGFnZ2VyRnJvbSxzdGFnZ2VyRnJvbVRvXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIFR3ZWVuW25hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0bCA9IG5ldyBUaW1lbGluZSgpLFxuICAgICAgICBwYXJhbXMgPSBfc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgcGFyYW1zLnNwbGljZShuYW1lID09PSBcInN0YWdnZXJGcm9tVG9cIiA/IDUgOiA0LCAwLCAwKTtcbiAgICByZXR1cm4gdGxbbmFtZV0uYXBwbHkodGwsIHBhcmFtcyk7XG4gIH07XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogUFJPUFRXRUVOXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxudmFyIF9zZXR0ZXJQbGFpbiA9IGZ1bmN0aW9uIF9zZXR0ZXJQbGFpbih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyRnVuYyA9IGZ1bmN0aW9uIF9zZXR0ZXJGdW5jKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldKHZhbHVlKTtcbn0sXG4gICAgX3NldHRlckZ1bmNXaXRoUGFyYW0gPSBmdW5jdGlvbiBfc2V0dGVyRnVuY1dpdGhQYXJhbSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XShkYXRhLmZwLCB2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJBdHRyaWJ1dGUgPSBmdW5jdGlvbiBfc2V0dGVyQXR0cmlidXRlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuc2V0QXR0cmlidXRlKHByb3BlcnR5LCB2YWx1ZSk7XG59LFxuICAgIF9nZXRTZXR0ZXIgPSBmdW5jdGlvbiBfZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHRhcmdldFtwcm9wZXJ0eV0pID8gX3NldHRlckZ1bmMgOiBfaXNVbmRlZmluZWQodGFyZ2V0W3Byb3BlcnR5XSkgJiYgdGFyZ2V0LnNldEF0dHJpYnV0ZSA/IF9zZXR0ZXJBdHRyaWJ1dGUgOiBfc2V0dGVyUGxhaW47XG59LFxuICAgIF9yZW5kZXJQbGFpbiA9IGZ1bmN0aW9uIF9yZW5kZXJQbGFpbihyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwMDApIC8gMTAwMDAwMCwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJCb29sZWFuID0gZnVuY3Rpb24gX3JlbmRlckJvb2xlYW4ocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCAhIShkYXRhLnMgKyBkYXRhLmMgKiByYXRpbyksIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyQ29tcGxleFN0cmluZyA9IGZ1bmN0aW9uIF9yZW5kZXJDb21wbGV4U3RyaW5nKHJhdGlvLCBkYXRhKSB7XG4gIHZhciBwdCA9IGRhdGEuX3B0LFxuICAgICAgcyA9IFwiXCI7XG5cbiAgaWYgKCFyYXRpbyAmJiBkYXRhLmIpIHtcbiAgICAvL2IgPSBiZWdpbm5pbmcgc3RyaW5nXG4gICAgcyA9IGRhdGEuYjtcbiAgfSBlbHNlIGlmIChyYXRpbyA9PT0gMSAmJiBkYXRhLmUpIHtcbiAgICAvL2UgPSBlbmRpbmcgc3RyaW5nXG4gICAgcyA9IGRhdGEuZTtcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIHMgPSBwdC5wICsgKHB0Lm0gPyBwdC5tKHB0LnMgKyBwdC5jICogcmF0aW8pIDogTWF0aC5yb3VuZCgocHQucyArIHB0LmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCkgKyBzOyAvL3dlIHVzZSB0aGUgXCJwXCIgcHJvcGVydHkgZm9yIHRoZSB0ZXh0IGluYmV0d2VlbiAobGlrZSBhIHN1ZmZpeCkuIEFuZCBpbiB0aGUgY29udGV4dCBvZiBhIGNvbXBsZXggc3RyaW5nLCB0aGUgbW9kaWZpZXIgKG0pIGlzIHR5cGljYWxseSBqdXN0IE1hdGgucm91bmQoKSwgbGlrZSBmb3IgUkdCIGNvbG9ycy5cblxuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG5cbiAgICBzICs9IGRhdGEuYzsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIGNodW5rIG9mIG5vbi1udW1lcmljIHRleHQuXG4gIH1cblxuICBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcywgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJQcm9wVHdlZW5zID0gZnVuY3Rpb24gX3JlbmRlclByb3BUd2VlbnMocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgcHQgPSBwdC5fbmV4dDtcbiAgfVxufSxcbiAgICBfYWRkUGx1Z2luTW9kaWZpZXIgPSBmdW5jdGlvbiBfYWRkUGx1Z2luTW9kaWZpZXIobW9kaWZpZXIsIHR3ZWVuLCB0YXJnZXQsIHByb3BlcnR5KSB7XG4gIHZhciBwdCA9IHRoaXMuX3B0LFxuICAgICAgbmV4dDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG4gICAgcHQucCA9PT0gcHJvcGVydHkgJiYgcHQubW9kaWZpZXIobW9kaWZpZXIsIHR3ZWVuLCB0YXJnZXQpO1xuICAgIHB0ID0gbmV4dDtcbiAgfVxufSxcbiAgICBfa2lsbFByb3BUd2VlbnNPZiA9IGZ1bmN0aW9uIF9raWxsUHJvcFR3ZWVuc09mKHByb3BlcnR5KSB7XG4gIHZhciBwdCA9IHRoaXMuX3B0LFxuICAgICAgaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nLFxuICAgICAgbmV4dDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG5cbiAgICBpZiAocHQucCA9PT0gcHJvcGVydHkgJiYgIXB0Lm9wIHx8IHB0Lm9wID09PSBwcm9wZXJ0eSkge1xuICAgICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIHB0LCBcIl9wdFwiKTtcbiAgICB9IGVsc2UgaWYgKCFwdC5kZXApIHtcbiAgICAgIGhhc05vbkRlcGVuZGVudFJlbWFpbmluZyA9IDE7XG4gICAgfVxuXG4gICAgcHQgPSBuZXh0O1xuICB9XG5cbiAgcmV0dXJuICFoYXNOb25EZXBlbmRlbnRSZW1haW5pbmc7XG59LFxuICAgIF9zZXR0ZXJXaXRoTW9kaWZpZXIgPSBmdW5jdGlvbiBfc2V0dGVyV2l0aE1vZGlmaWVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhKSB7XG4gIGRhdGEubVNldCh0YXJnZXQsIHByb3BlcnR5LCBkYXRhLm0uY2FsbChkYXRhLnR3ZWVuLCB2YWx1ZSwgZGF0YS5tdCksIGRhdGEpO1xufSxcbiAgICBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5ID0gZnVuY3Rpb24gX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eShwYXJlbnQpIHtcbiAgdmFyIHB0ID0gcGFyZW50Ll9wdCxcbiAgICAgIG5leHQsXG4gICAgICBwdDIsXG4gICAgICBmaXJzdCxcbiAgICAgIGxhc3Q7IC8vc29ydHMgdGhlIFByb3BUd2VlbiBsaW5rZWQgbGlzdCBpbiBvcmRlciBvZiBwcmlvcml0eSBiZWNhdXNlIHNvbWUgcGx1Z2lucyBuZWVkIHRvIGRvIHRoZWlyIHdvcmsgYWZ0ZXIgQUxMIG9mIHRoZSBQcm9wVHdlZW5zIHdlcmUgY3JlYXRlZCAobGlrZSBSb3VuZFByb3BzUGx1Z2luIGFuZCBNb2RpZmllcnNQbHVnaW4pXG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgbmV4dCA9IHB0Ll9uZXh0O1xuICAgIHB0MiA9IGZpcnN0O1xuXG4gICAgd2hpbGUgKHB0MiAmJiBwdDIucHIgPiBwdC5wcikge1xuICAgICAgcHQyID0gcHQyLl9uZXh0O1xuICAgIH1cblxuICAgIGlmIChwdC5fcHJldiA9IHB0MiA/IHB0Mi5fcHJldiA6IGxhc3QpIHtcbiAgICAgIHB0Ll9wcmV2Ll9uZXh0ID0gcHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZpcnN0ID0gcHQ7XG4gICAgfVxuXG4gICAgaWYgKHB0Ll9uZXh0ID0gcHQyKSB7XG4gICAgICBwdDIuX3ByZXYgPSBwdDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdCA9IHB0O1xuICAgIH1cblxuICAgIHB0ID0gbmV4dDtcbiAgfVxuXG4gIHBhcmVudC5fcHQgPSBmaXJzdDtcbn07IC8vUHJvcFR3ZWVuIGtleTogdCA9IHRhcmdldCwgcCA9IHByb3AsIHIgPSByZW5kZXJlciwgZCA9IGRhdGEsIHMgPSBzdGFydCwgYyA9IGNoYW5nZSwgb3AgPSBvdmVyd3JpdGVQcm9wZXJ0eSAoT05MWSBwb3B1bGF0ZWQgd2hlbiBpdCdzIGRpZmZlcmVudCB0aGFuIHApLCBwciA9IHByaW9yaXR5LCBfbmV4dC9fcHJldiBmb3IgdGhlIGxpbmtlZCBsaXN0IHNpYmxpbmdzLCBzZXQgPSBzZXR0ZXIsIG0gPSBtb2RpZmllciwgbVNldCA9IG1vZGlmaWVyU2V0dGVyICh0aGUgb3JpZ2luYWwgc2V0dGVyLCBiZWZvcmUgYSBtb2RpZmllciB3YXMgYWRkZWQpXG5cblxuZXhwb3J0IHZhciBQcm9wVHdlZW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQcm9wVHdlZW4obmV4dCwgdGFyZ2V0LCBwcm9wLCBzdGFydCwgY2hhbmdlLCByZW5kZXJlciwgZGF0YSwgc2V0dGVyLCBwcmlvcml0eSkge1xuICAgIHRoaXMudCA9IHRhcmdldDtcbiAgICB0aGlzLnMgPSBzdGFydDtcbiAgICB0aGlzLmMgPSBjaGFuZ2U7XG4gICAgdGhpcy5wID0gcHJvcDtcbiAgICB0aGlzLnIgPSByZW5kZXJlciB8fCBfcmVuZGVyUGxhaW47XG4gICAgdGhpcy5kID0gZGF0YSB8fCB0aGlzO1xuICAgIHRoaXMuc2V0ID0gc2V0dGVyIHx8IF9zZXR0ZXJQbGFpbjtcbiAgICB0aGlzLnByID0gcHJpb3JpdHkgfHwgMDtcbiAgICB0aGlzLl9uZXh0ID0gbmV4dDtcblxuICAgIGlmIChuZXh0KSB7XG4gICAgICBuZXh0Ll9wcmV2ID0gdGhpcztcbiAgICB9XG4gIH1cblxuICB2YXIgX3Byb3RvNCA9IFByb3BUd2Vlbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNC5tb2RpZmllciA9IGZ1bmN0aW9uIG1vZGlmaWVyKGZ1bmMsIHR3ZWVuLCB0YXJnZXQpIHtcbiAgICB0aGlzLm1TZXQgPSB0aGlzLm1TZXQgfHwgdGhpcy5zZXQ7IC8vaW4gY2FzZSBpdCB3YXMgYWxyZWFkeSBzZXQgKGEgUHJvcFR3ZWVuIGNhbiBvbmx5IGhhdmUgb25lIG1vZGlmaWVyKVxuXG4gICAgdGhpcy5zZXQgPSBfc2V0dGVyV2l0aE1vZGlmaWVyO1xuICAgIHRoaXMubSA9IGZ1bmM7XG4gICAgdGhpcy5tdCA9IHRhcmdldDsgLy9tb2RpZmllciB0YXJnZXRcblxuICAgIHRoaXMudHdlZW4gPSB0d2VlbjtcbiAgfTtcblxuICByZXR1cm4gUHJvcFR3ZWVuO1xufSgpOyAvL0luaXRpYWxpemF0aW9uIHRhc2tzXG5cbl9mb3JFYWNoTmFtZShfY2FsbGJhY2tOYW1lcyArIFwicGFyZW50LGR1cmF0aW9uLGVhc2UsZGVsYXksb3ZlcndyaXRlLHJ1bkJhY2t3YXJkcyxzdGFydEF0LHlveW8saW1tZWRpYXRlUmVuZGVyLHJlcGVhdCxyZXBlYXREZWxheSxkYXRhLHBhdXNlZCxyZXZlcnNlZCxsYXp5LGNhbGxiYWNrU2NvcGUsc3RyaW5nRmlsdGVyLGlkLHlveW9FYXNlLHN0YWdnZXIsaW5oZXJpdCxyZXBlYXRSZWZyZXNoLGtleWZyYW1lcyxhdXRvUmV2ZXJ0LHNjcm9sbFRyaWdnZXJcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9yZXNlcnZlZFByb3BzW25hbWVdID0gMTtcbn0pO1xuXG5fZ2xvYmFscy5Ud2Vlbk1heCA9IF9nbG9iYWxzLlR3ZWVuTGl0ZSA9IFR3ZWVuO1xuX2dsb2JhbHMuVGltZWxpbmVMaXRlID0gX2dsb2JhbHMuVGltZWxpbmVNYXggPSBUaW1lbGluZTtcbl9nbG9iYWxUaW1lbGluZSA9IG5ldyBUaW1lbGluZSh7XG4gIHNvcnRDaGlsZHJlbjogZmFsc2UsXG4gIGRlZmF1bHRzOiBfZGVmYXVsdHMsXG4gIGF1dG9SZW1vdmVDaGlsZHJlbjogdHJ1ZSxcbiAgaWQ6IFwicm9vdFwiLFxuICBzbW9vdGhDaGlsZFRpbWluZzogdHJ1ZVxufSk7XG5fY29uZmlnLnN0cmluZ0ZpbHRlciA9IF9jb2xvclN0cmluZ0ZpbHRlcjtcblxudmFyIF9tZWRpYSA9IFtdLFxuICAgIF9saXN0ZW5lcnMgPSB7fSxcbiAgICBfZW1wdHlBcnJheSA9IFtdLFxuICAgIF9sYXN0TWVkaWFUaW1lID0gMCxcbiAgICBfY29udGV4dElEID0gMCxcbiAgICBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBfZGlzcGF0Y2godHlwZSkge1xuICByZXR1cm4gKF9saXN0ZW5lcnNbdHlwZV0gfHwgX2VtcHR5QXJyYXkpLm1hcChmdW5jdGlvbiAoZikge1xuICAgIHJldHVybiBmKCk7XG4gIH0pO1xufSxcbiAgICBfb25NZWRpYUNoYW5nZSA9IGZ1bmN0aW9uIF9vbk1lZGlhQ2hhbmdlKCkge1xuICB2YXIgdGltZSA9IERhdGUubm93KCksXG4gICAgICBtYXRjaGVzID0gW107XG5cbiAgaWYgKHRpbWUgLSBfbGFzdE1lZGlhVGltZSA+IDIpIHtcbiAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhSW5pdFwiKTtcblxuICAgIF9tZWRpYS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICB2YXIgcXVlcmllcyA9IGMucXVlcmllcyxcbiAgICAgICAgICBjb25kaXRpb25zID0gYy5jb25kaXRpb25zLFxuICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgIHAsXG4gICAgICAgICAgYW55TWF0Y2gsXG4gICAgICAgICAgdG9nZ2xlZDtcblxuICAgICAgZm9yIChwIGluIHF1ZXJpZXMpIHtcbiAgICAgICAgbWF0Y2ggPSBfd2luLm1hdGNoTWVkaWEocXVlcmllc1twXSkubWF0Y2hlczsgLy8gRmlyZWZveCBkb2Vzbid0IHVwZGF0ZSB0aGUgXCJtYXRjaGVzXCIgcHJvcGVydHkgb2YgdGhlIE1lZGlhUXVlcnlMaXN0IG9iamVjdCBjb3JyZWN0bHkgLSBpdCBvbmx5IGRvZXMgc28gYXMgaXQgY2FsbHMgaXRzIGNoYW5nZSBoYW5kbGVyIC0gc28gd2UgbXVzdCByZS1jcmVhdGUgYSBtZWRpYSBxdWVyeSBoZXJlIHRvIGVuc3VyZSBpdCdzIGFjY3VyYXRlLlxuXG4gICAgICAgIG1hdGNoICYmIChhbnlNYXRjaCA9IDEpO1xuXG4gICAgICAgIGlmIChtYXRjaCAhPT0gY29uZGl0aW9uc1twXSkge1xuICAgICAgICAgIGNvbmRpdGlvbnNbcF0gPSBtYXRjaDtcbiAgICAgICAgICB0b2dnbGVkID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodG9nZ2xlZCkge1xuICAgICAgICBjLnJldmVydCgpO1xuICAgICAgICBhbnlNYXRjaCAmJiBtYXRjaGVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhUmV2ZXJ0XCIpO1xuXG4gICAgbWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5vbk1hdGNoKGMsIGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgICAgIHJldHVybiBjLmFkZChudWxsLCBmdW5jKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9sYXN0TWVkaWFUaW1lID0gdGltZTtcblxuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFcIik7XG4gIH1cbn07XG5cbnZhciBDb250ZXh0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29udGV4dChmdW5jLCBzY29wZSkge1xuICAgIHRoaXMuc2VsZWN0b3IgPSBzY29wZSAmJiBzZWxlY3RvcihzY29wZSk7XG4gICAgdGhpcy5kYXRhID0gW107XG4gICAgdGhpcy5fciA9IFtdOyAvLyByZXR1cm5lZC9jbGVhbnVwIGZ1bmN0aW9uc1xuXG4gICAgdGhpcy5pc1JldmVydGVkID0gZmFsc2U7XG4gICAgdGhpcy5pZCA9IF9jb250ZXh0SUQrKzsgLy8gdG8gd29yayBhcm91bmQgaXNzdWVzIHRoYXQgZnJhbWV3b3JrcyBsaWtlIFZ1ZSBjYXVzZSBieSBtYWtpbmcgdGhpbmdzIGludG8gUHJveGllcyB3aGljaCBtYWtlIGl0IGltcG9zc2libGUgdG8gZG8gc29tZXRoaW5nIGxpa2UgX21lZGlhLmluZGV4T2YodGhpcykgYmVjYXVzZSBcInRoaXNcIiB3b3VsZCBubyBsb25nZXIgcmVmZXIgdG8gdGhlIENvbnRleHQgaW5zdGFuY2UgaXRzZWxmIC0gaXQnZCByZWZlciB0byBhIFByb3h5ISBXZSBuZWVkZWQgYSB3YXkgdG8gaWRlbnRpZnkgdGhlIGNvbnRleHQgdW5pcXVlbHlcblxuICAgIGZ1bmMgJiYgdGhpcy5hZGQoZnVuYyk7XG4gIH1cblxuICB2YXIgX3Byb3RvNSA9IENvbnRleHQucHJvdG90eXBlO1xuXG4gIF9wcm90bzUuYWRkID0gZnVuY3Rpb24gYWRkKG5hbWUsIGZ1bmMsIHNjb3BlKSB7XG4gICAgLy8gcG9zc2libGUgZnV0dXJlIGFkZGl0aW9uIGlmIHdlIG5lZWQgdGhlIGFiaWxpdHkgdG8gYWRkKCkgYW4gYW5pbWF0aW9uIHRvIGEgY29udGV4dCBhbmQgZm9yIHdoYXRldmVyIHJlYXNvbiBjYW5ub3QgY3JlYXRlIHRoYXQgYW5pbWF0aW9uIGluc2lkZSBvZiBhIGNvbnRleHQuYWRkKCgpID0+IHsuLi59KSBmdW5jdGlvbi5cbiAgICAvLyBpZiAobmFtZSAmJiBfaXNGdW5jdGlvbihuYW1lLnJldmVydCkpIHtcbiAgICAvLyBcdHRoaXMuZGF0YS5wdXNoKG5hbWUpO1xuICAgIC8vIFx0cmV0dXJuIChuYW1lLl9jdHggPSB0aGlzKTtcbiAgICAvLyB9XG4gICAgaWYgKF9pc0Z1bmN0aW9uKG5hbWUpKSB7XG4gICAgICBzY29wZSA9IGZ1bmM7XG4gICAgICBmdW5jID0gbmFtZTtcbiAgICAgIG5hbWUgPSBfaXNGdW5jdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGYgPSBmdW5jdGlvbiBmKCkge1xuICAgICAgdmFyIHByZXYgPSBfY29udGV4dCxcbiAgICAgICAgICBwcmV2U2VsZWN0b3IgPSBzZWxmLnNlbGVjdG9yLFxuICAgICAgICAgIHJlc3VsdDtcbiAgICAgIHByZXYgJiYgcHJldiAhPT0gc2VsZiAmJiBwcmV2LmRhdGEucHVzaChzZWxmKTtcbiAgICAgIHNjb3BlICYmIChzZWxmLnNlbGVjdG9yID0gc2VsZWN0b3Ioc2NvcGUpKTtcbiAgICAgIF9jb250ZXh0ID0gc2VsZjtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICAgIF9pc0Z1bmN0aW9uKHJlc3VsdCkgJiYgc2VsZi5fci5wdXNoKHJlc3VsdCk7XG4gICAgICBfY29udGV4dCA9IHByZXY7XG4gICAgICBzZWxmLnNlbGVjdG9yID0gcHJldlNlbGVjdG9yO1xuICAgICAgc2VsZi5pc1JldmVydGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBzZWxmLmxhc3QgPSBmO1xuICAgIHJldHVybiBuYW1lID09PSBfaXNGdW5jdGlvbiA/IGYoc2VsZiwgZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICAgIHJldHVybiBzZWxmLmFkZChudWxsLCBmdW5jKTtcbiAgICB9KSA6IG5hbWUgPyBzZWxmW25hbWVdID0gZiA6IGY7XG4gIH07XG5cbiAgX3Byb3RvNS5pZ25vcmUgPSBmdW5jdGlvbiBpZ25vcmUoZnVuYykge1xuICAgIHZhciBwcmV2ID0gX2NvbnRleHQ7XG4gICAgX2NvbnRleHQgPSBudWxsO1xuICAgIGZ1bmModGhpcyk7XG4gICAgX2NvbnRleHQgPSBwcmV2O1xuICB9O1xuXG4gIF9wcm90bzUuZ2V0VHdlZW5zID0gZnVuY3Rpb24gZ2V0VHdlZW5zKCkge1xuICAgIHZhciBhID0gW107XG4gICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgQ29udGV4dCA/IGEucHVzaC5hcHBseShhLCBlLmdldFR3ZWVucygpKSA6IGUgaW5zdGFuY2VvZiBUd2VlbiAmJiAhKGUucGFyZW50ICYmIGUucGFyZW50LmRhdGEgPT09IFwibmVzdGVkXCIpICYmIGEucHVzaChlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYTtcbiAgfTtcblxuICBfcHJvdG81LmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5fci5sZW5ndGggPSB0aGlzLmRhdGEubGVuZ3RoID0gMDtcbiAgfTtcblxuICBfcHJvdG81LmtpbGwgPSBmdW5jdGlvbiBraWxsKHJldmVydCwgbWF0Y2hNZWRpYSkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgaWYgKHJldmVydCkge1xuICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHR3ZWVucyA9IF90aGlzNC5nZXRUd2VlbnMoKSxcbiAgICAgICAgICAgIGkgPSBfdGhpczQuZGF0YS5sZW5ndGgsXG4gICAgICAgICAgICB0O1xuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAvLyBGbGlwIHBsdWdpbiB0d2VlbnMgYXJlIHZlcnkgZGlmZmVyZW50IGluIHRoYXQgdGhleSBzaG91bGQgYWN0dWFsbHkgYmUgcHVzaGVkIHRvIHRoZWlyIGVuZC4gVGhlIHBsdWdpbiByZXBsYWNlcyB0aGUgdGltZWxpbmUncyAucmV2ZXJ0KCkgbWV0aG9kIHRvIGRvIGV4YWN0bHkgdGhhdC4gQnV0IHdlIGFsc28gbmVlZCB0byByZW1vdmUgYW55IG9mIHRob3NlIG5lc3RlZCB0d2VlbnMgaW5zaWRlIHRoZSBmbGlwIHRpbWVsaW5lIHNvIHRoYXQgdGhleSBkb24ndCBnZXQgaW5kaXZpZHVhbGx5IHJldmVydGVkLlxuICAgICAgICAgIHQgPSBfdGhpczQuZGF0YVtpXTtcblxuICAgICAgICAgIGlmICh0LmRhdGEgPT09IFwiaXNGbGlwXCIpIHtcbiAgICAgICAgICAgIHQucmV2ZXJ0KCk7XG4gICAgICAgICAgICB0LmdldENoaWxkcmVuKHRydWUsIHRydWUsIGZhbHNlKS5mb3JFYWNoKGZ1bmN0aW9uICh0d2Vlbikge1xuICAgICAgICAgICAgICByZXR1cm4gdHdlZW5zLnNwbGljZSh0d2VlbnMuaW5kZXhPZih0d2VlbiksIDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIHNhdmUgYXMgYW4gb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGNhY2hlIHRoZSBnbG9iYWxUaW1lIGZvciBlYWNoIHR3ZWVuIHRvIG9wdGltaXplIHBlcmZvcm1hbmNlIGR1cmluZyB0aGUgc29ydFxuXG5cbiAgICAgICAgdHdlZW5zLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnOiB0Ll9kdXIgfHwgdC5fZGVsYXkgfHwgdC5fc2F0ICYmICF0Ll9zYXQudmFycy5pbW1lZGlhdGVSZW5kZXIgPyB0Lmdsb2JhbFRpbWUoMCkgOiAtSW5maW5pdHksXG4gICAgICAgICAgICB0OiB0XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHJldHVybiBiLmcgLSBhLmcgfHwgLUluZmluaXR5O1xuICAgICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgcmV0dXJuIG8udC5yZXZlcnQocmV2ZXJ0KTtcbiAgICAgICAgfSk7IC8vIG5vdGU6IGFsbCBvZiB0aGUgX3N0YXJ0QXQgdHdlZW5zIHNob3VsZCBiZSByZXZlcnRlZCBpbiByZXZlcnNlIG9yZGVyIHRoYXQgdGhleSB3ZXJlIGNyZWF0ZWQsIGFuZCB0aGV5J2xsIGFsbCBoYXZlIHRoZSBzYW1lIGdsb2JhbFRpbWUgKC0xKSBzbyB0aGUgXCIgfHwgLTFcIiBpbiB0aGUgc29ydCBrZWVwcyB0aGUgb3JkZXIgcHJvcGVybHkuXG5cbiAgICAgICAgaSA9IF90aGlzNC5kYXRhLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHdlIGxvb3AgYmFja3dhcmRzIHNvIHRoYXQsIGZvciBleGFtcGxlLCBTcGxpdFRleHRzIHRoYXQgd2VyZSBjcmVhdGVkIGxhdGVyIG9uIHRoZSBzYW1lIGVsZW1lbnQgZ2V0IHJldmVydGVkIGZpcnN0XG4gICAgICAgICAgdCA9IF90aGlzNC5kYXRhW2ldO1xuXG4gICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBUaW1lbGluZSkge1xuICAgICAgICAgICAgaWYgKHQuZGF0YSAhPT0gXCJuZXN0ZWRcIikge1xuICAgICAgICAgICAgICB0LnNjcm9sbFRyaWdnZXIgJiYgdC5zY3JvbGxUcmlnZ2VyLnJldmVydCgpO1xuICAgICAgICAgICAgICB0LmtpbGwoKTsgLy8gZG9uJ3QgcmV2ZXJ0KCkgdGhlIHRpbWVsaW5lIGJlY2F1c2UgdGhhdCdzIGR1cGxpY2F0aW5nIGVmZm9ydHMgc2luY2Ugd2UgYWxyZWFkeSByZXZlcnRlZCBhbGwgdGhlIHR3ZWVuc1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAhKHQgaW5zdGFuY2VvZiBUd2VlbikgJiYgdC5yZXZlcnQgJiYgdC5yZXZlcnQocmV2ZXJ0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczQuX3IuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgICAgIHJldHVybiBmKHJldmVydCwgX3RoaXM0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3RoaXM0LmlzUmV2ZXJ0ZWQgPSB0cnVlO1xuICAgICAgfSkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGUua2lsbCAmJiBlLmtpbGwoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuY2xlYXIoKTtcblxuICAgIGlmIChtYXRjaE1lZGlhKSB7XG4gICAgICB2YXIgaSA9IF9tZWRpYS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgLy8gcHJldmlvdXNseSwgd2UgY2hlY2tlZCBfbWVkaWEuaW5kZXhPZih0aGlzKSwgYnV0IHNvbWUgZnJhbWV3b3JrcyBsaWtlIFZ1ZSBlbmZvcmNlIFByb3h5IG9iamVjdHMgdGhhdCBtYWtlIGl0IGltcG9zc2libGUgdG8gZ2V0IHRoZSBwcm9wZXIgcmVzdWx0IHRoYXQgd2F5LCBzbyB3ZSBtdXN0IHVzZSBhIHVuaXF1ZSBJRCBudW1iZXIgaW5zdGVhZC5cbiAgICAgICAgX21lZGlhW2ldLmlkID09PSB0aGlzLmlkICYmIF9tZWRpYS5zcGxpY2UoaSwgMSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzUucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIHRoaXMua2lsbChjb25maWcgfHwge30pO1xuICB9O1xuXG4gIHJldHVybiBDb250ZXh0O1xufSgpO1xuXG52YXIgTWF0Y2hNZWRpYSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1hdGNoTWVkaWEoc2NvcGUpIHtcbiAgICB0aGlzLmNvbnRleHRzID0gW107XG4gICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgIF9jb250ZXh0ICYmIF9jb250ZXh0LmRhdGEucHVzaCh0aGlzKTtcbiAgfVxuXG4gIHZhciBfcHJvdG82ID0gTWF0Y2hNZWRpYS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNi5hZGQgPSBmdW5jdGlvbiBhZGQoY29uZGl0aW9ucywgZnVuYywgc2NvcGUpIHtcbiAgICBfaXNPYmplY3QoY29uZGl0aW9ucykgfHwgKGNvbmRpdGlvbnMgPSB7XG4gICAgICBtYXRjaGVzOiBjb25kaXRpb25zXG4gICAgfSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCgwLCBzY29wZSB8fCB0aGlzLnNjb3BlKSxcbiAgICAgICAgY29uZCA9IGNvbnRleHQuY29uZGl0aW9ucyA9IHt9LFxuICAgICAgICBtcSxcbiAgICAgICAgcCxcbiAgICAgICAgYWN0aXZlO1xuICAgIF9jb250ZXh0ICYmICFjb250ZXh0LnNlbGVjdG9yICYmIChjb250ZXh0LnNlbGVjdG9yID0gX2NvbnRleHQuc2VsZWN0b3IpOyAvLyBpbiBjYXNlIGEgY29udGV4dCBpcyBjcmVhdGVkIGluc2lkZSBhIGNvbnRleHQuIExpa2UgYSBnc2FwLm1hdGNoTWVkaWEoKSB0aGF0J3MgaW5zaWRlIGEgc2NvcGVkIGdzYXAuY29udGV4dCgpXG5cbiAgICB0aGlzLmNvbnRleHRzLnB1c2goY29udGV4dCk7XG4gICAgZnVuYyA9IGNvbnRleHQuYWRkKFwib25NYXRjaFwiLCBmdW5jKTtcbiAgICBjb250ZXh0LnF1ZXJpZXMgPSBjb25kaXRpb25zO1xuXG4gICAgZm9yIChwIGluIGNvbmRpdGlvbnMpIHtcbiAgICAgIGlmIChwID09PSBcImFsbFwiKSB7XG4gICAgICAgIGFjdGl2ZSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtcSA9IF93aW4ubWF0Y2hNZWRpYShjb25kaXRpb25zW3BdKTtcblxuICAgICAgICBpZiAobXEpIHtcbiAgICAgICAgICBfbWVkaWEuaW5kZXhPZihjb250ZXh0KSA8IDAgJiYgX21lZGlhLnB1c2goY29udGV4dCk7XG4gICAgICAgICAgKGNvbmRbcF0gPSBtcS5tYXRjaGVzKSAmJiAoYWN0aXZlID0gMSk7XG4gICAgICAgICAgbXEuYWRkTGlzdGVuZXIgPyBtcS5hZGRMaXN0ZW5lcihfb25NZWRpYUNoYW5nZSkgOiBtcS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIF9vbk1lZGlhQ2hhbmdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGFjdGl2ZSAmJiBmdW5jKGNvbnRleHQsIGZ1bmN0aW9uIChmKSB7XG4gICAgICByZXR1cm4gY29udGV4dC5hZGQobnVsbCwgZik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gcmVmcmVzaCgpIHtcbiAgLy8gXHRsZXQgdGltZSA9IF9sYXN0TWVkaWFUaW1lLFxuICAvLyBcdFx0bWVkaWEgPSBfbWVkaWE7XG4gIC8vIFx0X2xhc3RNZWRpYVRpbWUgPSAtMTtcbiAgLy8gXHRfbWVkaWEgPSB0aGlzLmNvbnRleHRzO1xuICAvLyBcdF9vbk1lZGlhQ2hhbmdlKCk7XG4gIC8vIFx0X2xhc3RNZWRpYVRpbWUgPSB0aW1lO1xuICAvLyBcdF9tZWRpYSA9IG1lZGlhO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG82LnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICB0aGlzLmtpbGwoY29uZmlnIHx8IHt9KTtcbiAgfTtcblxuICBfcHJvdG82LmtpbGwgPSBmdW5jdGlvbiBraWxsKHJldmVydCkge1xuICAgIHRoaXMuY29udGV4dHMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMua2lsbChyZXZlcnQsIHRydWUpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBNYXRjaE1lZGlhO1xufSgpO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBHU0FQXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxudmFyIF9nc2FwID0ge1xuICByZWdpc3RlclBsdWdpbjogZnVuY3Rpb24gcmVnaXN0ZXJQbHVnaW4oKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgIHJldHVybiBfY3JlYXRlUGx1Z2luKGNvbmZpZyk7XG4gICAgfSk7XG4gIH0sXG4gIHRpbWVsaW5lOiBmdW5jdGlvbiB0aW1lbGluZSh2YXJzKSB7XG4gICAgcmV0dXJuIG5ldyBUaW1lbGluZSh2YXJzKTtcbiAgfSxcbiAgZ2V0VHdlZW5zT2Y6IGZ1bmN0aW9uIGdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpO1xuICB9LFxuICBnZXRQcm9wZXJ0eTogZnVuY3Rpb24gZ2V0UHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICAgIF9pc1N0cmluZyh0YXJnZXQpICYmICh0YXJnZXQgPSB0b0FycmF5KHRhcmdldClbMF0pOyAvL2luIGNhc2Ugc2VsZWN0b3IgdGV4dCBvciBhbiBhcnJheSBpcyBwYXNzZWQgaW5cblxuICAgIHZhciBnZXR0ZXIgPSBfZ2V0Q2FjaGUodGFyZ2V0IHx8IHt9KS5nZXQsXG4gICAgICAgIGZvcm1hdCA9IHVuaXQgPyBfcGFzc1Rocm91Z2ggOiBfbnVtZXJpY0lmUG9zc2libGU7XG5cbiAgICB1bml0ID09PSBcIm5hdGl2ZVwiICYmICh1bml0ID0gXCJcIik7XG4gICAgcmV0dXJuICF0YXJnZXQgPyB0YXJnZXQgOiAhcHJvcGVydHkgPyBmdW5jdGlvbiAocHJvcGVydHksIHVuaXQsIHVuY2FjaGUpIHtcbiAgICAgIHJldHVybiBmb3JtYXQoKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiBfcGx1Z2luc1twcm9wZXJ0eV0uZ2V0IHx8IGdldHRlcikodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkpO1xuICAgIH0gOiBmb3JtYXQoKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiBfcGx1Z2luc1twcm9wZXJ0eV0uZ2V0IHx8IGdldHRlcikodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkpO1xuICB9LFxuICBxdWlja1NldHRlcjogZnVuY3Rpb24gcXVpY2tTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCkge1xuICAgIHRhcmdldCA9IHRvQXJyYXkodGFyZ2V0KTtcblxuICAgIGlmICh0YXJnZXQubGVuZ3RoID4gMSkge1xuICAgICAgdmFyIHNldHRlcnMgPSB0YXJnZXQubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiBnc2FwLnF1aWNrU2V0dGVyKHQsIHByb3BlcnR5LCB1bml0KTtcbiAgICAgIH0pLFxuICAgICAgICAgIGwgPSBzZXR0ZXJzLmxlbmd0aDtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGkgPSBsO1xuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICBzZXR0ZXJzW2ldKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB0YXJnZXQgPSB0YXJnZXRbMF0gfHwge307XG5cbiAgICB2YXIgUGx1Z2luID0gX3BsdWdpbnNbcHJvcGVydHldLFxuICAgICAgICBjYWNoZSA9IF9nZXRDYWNoZSh0YXJnZXQpLFxuICAgICAgICBwID0gY2FjaGUuaGFybmVzcyAmJiAoY2FjaGUuaGFybmVzcy5hbGlhc2VzIHx8IHt9KVtwcm9wZXJ0eV0gfHwgcHJvcGVydHksXG4gICAgICAgIC8vIGluIGNhc2UgaXQncyBhbiBhbGlhcywgbGlrZSBcInJvdGF0ZVwiIGZvciBcInJvdGF0aW9uXCIuXG4gICAgc2V0dGVyID0gUGx1Z2luID8gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICB2YXIgcCA9IG5ldyBQbHVnaW4oKTtcbiAgICAgIF9xdWlja1R3ZWVuLl9wdCA9IDA7XG4gICAgICBwLmluaXQodGFyZ2V0LCB1bml0ID8gdmFsdWUgKyB1bml0IDogdmFsdWUsIF9xdWlja1R3ZWVuLCAwLCBbdGFyZ2V0XSk7XG4gICAgICBwLnJlbmRlcigxLCBwKTtcbiAgICAgIF9xdWlja1R3ZWVuLl9wdCAmJiBfcmVuZGVyUHJvcFR3ZWVucygxLCBfcXVpY2tUd2Vlbik7XG4gICAgfSA6IGNhY2hlLnNldCh0YXJnZXQsIHApO1xuXG4gICAgcmV0dXJuIFBsdWdpbiA/IHNldHRlciA6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHNldHRlcih0YXJnZXQsIHAsIHVuaXQgPyB2YWx1ZSArIHVuaXQgOiB2YWx1ZSwgY2FjaGUsIDEpO1xuICAgIH07XG4gIH0sXG4gIHF1aWNrVG86IGZ1bmN0aW9uIHF1aWNrVG8odGFyZ2V0LCBwcm9wZXJ0eSwgdmFycykge1xuICAgIHZhciBfbWVyZ2UyO1xuXG4gICAgdmFyIHR3ZWVuID0gZ3NhcC50byh0YXJnZXQsIF9tZXJnZSgoX21lcmdlMiA9IHt9LCBfbWVyZ2UyW3Byb3BlcnR5XSA9IFwiKz0wLjFcIiwgX21lcmdlMi5wYXVzZWQgPSB0cnVlLCBfbWVyZ2UyKSwgdmFycyB8fCB7fSkpLFxuICAgICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyh2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSkge1xuICAgICAgcmV0dXJuIHR3ZWVuLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKTtcbiAgICB9O1xuXG4gICAgZnVuYy50d2VlbiA9IHR3ZWVuO1xuICAgIHJldHVybiBmdW5jO1xuICB9LFxuICBpc1R3ZWVuaW5nOiBmdW5jdGlvbiBpc1R3ZWVuaW5nKHRhcmdldHMpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldFR3ZWVuc09mKHRhcmdldHMsIHRydWUpLmxlbmd0aCA+IDA7XG4gIH0sXG4gIGRlZmF1bHRzOiBmdW5jdGlvbiBkZWZhdWx0cyh2YWx1ZSkge1xuICAgIHZhbHVlICYmIHZhbHVlLmVhc2UgJiYgKHZhbHVlLmVhc2UgPSBfcGFyc2VFYXNlKHZhbHVlLmVhc2UsIF9kZWZhdWx0cy5lYXNlKSk7XG4gICAgcmV0dXJuIF9tZXJnZURlZXAoX2RlZmF1bHRzLCB2YWx1ZSB8fCB7fSk7XG4gIH0sXG4gIGNvbmZpZzogZnVuY3Rpb24gY29uZmlnKHZhbHVlKSB7XG4gICAgcmV0dXJuIF9tZXJnZURlZXAoX2NvbmZpZywgdmFsdWUgfHwge30pO1xuICB9LFxuICByZWdpc3RlckVmZmVjdDogZnVuY3Rpb24gcmVnaXN0ZXJFZmZlY3QoX3JlZjMpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYzLm5hbWUsXG4gICAgICAgIGVmZmVjdCA9IF9yZWYzLmVmZmVjdCxcbiAgICAgICAgcGx1Z2lucyA9IF9yZWYzLnBsdWdpbnMsXG4gICAgICAgIGRlZmF1bHRzID0gX3JlZjMuZGVmYXVsdHMsXG4gICAgICAgIGV4dGVuZFRpbWVsaW5lID0gX3JlZjMuZXh0ZW5kVGltZWxpbmU7XG4gICAgKHBsdWdpbnMgfHwgXCJcIikuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbk5hbWUpIHtcbiAgICAgIHJldHVybiBwbHVnaW5OYW1lICYmICFfcGx1Z2luc1twbHVnaW5OYW1lXSAmJiAhX2dsb2JhbHNbcGx1Z2luTmFtZV0gJiYgX3dhcm4obmFtZSArIFwiIGVmZmVjdCByZXF1aXJlcyBcIiArIHBsdWdpbk5hbWUgKyBcIiBwbHVnaW4uXCIpO1xuICAgIH0pO1xuXG4gICAgX2VmZmVjdHNbbmFtZV0gPSBmdW5jdGlvbiAodGFyZ2V0cywgdmFycywgdGwpIHtcbiAgICAgIHJldHVybiBlZmZlY3QodG9BcnJheSh0YXJnZXRzKSwgX3NldERlZmF1bHRzKHZhcnMgfHwge30sIGRlZmF1bHRzKSwgdGwpO1xuICAgIH07XG5cbiAgICBpZiAoZXh0ZW5kVGltZWxpbmUpIHtcbiAgICAgIFRpbWVsaW5lLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGQoX2VmZmVjdHNbbmFtZV0odGFyZ2V0cywgX2lzT2JqZWN0KHZhcnMpID8gdmFycyA6IChwb3NpdGlvbiA9IHZhcnMpICYmIHt9LCB0aGlzKSwgcG9zaXRpb24pO1xuICAgICAgfTtcbiAgICB9XG4gIH0sXG4gIHJlZ2lzdGVyRWFzZTogZnVuY3Rpb24gcmVnaXN0ZXJFYXNlKG5hbWUsIGVhc2UpIHtcbiAgICBfZWFzZU1hcFtuYW1lXSA9IF9wYXJzZUVhc2UoZWFzZSk7XG4gIH0sXG4gIHBhcnNlRWFzZTogZnVuY3Rpb24gcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSA6IF9lYXNlTWFwO1xuICB9LFxuICBnZXRCeUlkOiBmdW5jdGlvbiBnZXRCeUlkKGlkKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRCeUlkKGlkKTtcbiAgfSxcbiAgZXhwb3J0Um9vdDogZnVuY3Rpb24gZXhwb3J0Um9vdCh2YXJzLCBpbmNsdWRlRGVsYXllZENhbGxzKSB7XG4gICAgaWYgKHZhcnMgPT09IHZvaWQgMCkge1xuICAgICAgdmFycyA9IHt9O1xuICAgIH1cblxuICAgIHZhciB0bCA9IG5ldyBUaW1lbGluZSh2YXJzKSxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIG5leHQ7XG4gICAgdGwuc21vb3RoQ2hpbGRUaW1pbmcgPSBfaXNOb3RGYWxzZSh2YXJzLnNtb290aENoaWxkVGltaW5nKTtcblxuICAgIF9nbG9iYWxUaW1lbGluZS5yZW1vdmUodGwpO1xuXG4gICAgdGwuX2RwID0gMDsgLy9vdGhlcndpc2UgaXQnbGwgZ2V0IHJlLWFjdGl2YXRlZCB3aGVuIGFkZGluZyBjaGlsZHJlbiBhbmQgYmUgcmUtaW50cm9kdWNlZCBpbnRvIF9nbG9iYWxUaW1lbGluZSdzIGxpbmtlZCBsaXN0ICh0aGVuIGFkZGVkIHRvIGl0c2VsZikuXG5cbiAgICB0bC5fdGltZSA9IHRsLl90VGltZSA9IF9nbG9iYWxUaW1lbGluZS5fdGltZTtcbiAgICBjaGlsZCA9IF9nbG9iYWxUaW1lbGluZS5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICAgICAgaWYgKGluY2x1ZGVEZWxheWVkQ2FsbHMgfHwgISghY2hpbGQuX2R1ciAmJiBjaGlsZCBpbnN0YW5jZW9mIFR3ZWVuICYmIGNoaWxkLnZhcnMub25Db21wbGV0ZSA9PT0gY2hpbGQuX3RhcmdldHNbMF0pKSB7XG4gICAgICAgIF9hZGRUb1RpbWVsaW5lKHRsLCBjaGlsZCwgY2hpbGQuX3N0YXJ0IC0gY2hpbGQuX2RlbGF5KTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBuZXh0O1xuICAgIH1cblxuICAgIF9hZGRUb1RpbWVsaW5lKF9nbG9iYWxUaW1lbGluZSwgdGwsIDApO1xuXG4gICAgcmV0dXJuIHRsO1xuICB9LFxuICBjb250ZXh0OiBmdW5jdGlvbiBjb250ZXh0KGZ1bmMsIHNjb3BlKSB7XG4gICAgcmV0dXJuIGZ1bmMgPyBuZXcgQ29udGV4dChmdW5jLCBzY29wZSkgOiBfY29udGV4dDtcbiAgfSxcbiAgbWF0Y2hNZWRpYTogZnVuY3Rpb24gbWF0Y2hNZWRpYShzY29wZSkge1xuICAgIHJldHVybiBuZXcgTWF0Y2hNZWRpYShzY29wZSk7XG4gIH0sXG4gIG1hdGNoTWVkaWFSZWZyZXNoOiBmdW5jdGlvbiBtYXRjaE1lZGlhUmVmcmVzaCgpIHtcbiAgICByZXR1cm4gX21lZGlhLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHZhciBjb25kID0gYy5jb25kaXRpb25zLFxuICAgICAgICAgIGZvdW5kLFxuICAgICAgICAgIHA7XG5cbiAgICAgIGZvciAocCBpbiBjb25kKSB7XG4gICAgICAgIGlmIChjb25kW3BdKSB7XG4gICAgICAgICAgY29uZFtwXSA9IGZhbHNlO1xuICAgICAgICAgIGZvdW5kID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3VuZCAmJiBjLnJldmVydCgpO1xuICAgIH0pIHx8IF9vbk1lZGlhQ2hhbmdlKCk7XG4gIH0sXG4gIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgYSA9IF9saXN0ZW5lcnNbdHlwZV0gfHwgKF9saXN0ZW5lcnNbdHlwZV0gPSBbXSk7XG4gICAgfmEuaW5kZXhPZihjYWxsYmFjaykgfHwgYS5wdXNoKGNhbGxiYWNrKTtcbiAgfSxcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaykge1xuICAgIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSxcbiAgICAgICAgaSA9IGEgJiYgYS5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICBpID49IDAgJiYgYS5zcGxpY2UoaSwgMSk7XG4gIH0sXG4gIHV0aWxzOiB7XG4gICAgd3JhcDogd3JhcCxcbiAgICB3cmFwWW95bzogd3JhcFlveW8sXG4gICAgZGlzdHJpYnV0ZTogZGlzdHJpYnV0ZSxcbiAgICByYW5kb206IHJhbmRvbSxcbiAgICBzbmFwOiBzbmFwLFxuICAgIG5vcm1hbGl6ZTogbm9ybWFsaXplLFxuICAgIGdldFVuaXQ6IGdldFVuaXQsXG4gICAgY2xhbXA6IGNsYW1wLFxuICAgIHNwbGl0Q29sb3I6IHNwbGl0Q29sb3IsXG4gICAgdG9BcnJheTogdG9BcnJheSxcbiAgICBzZWxlY3Rvcjogc2VsZWN0b3IsXG4gICAgbWFwUmFuZ2U6IG1hcFJhbmdlLFxuICAgIHBpcGU6IHBpcGUsXG4gICAgdW5pdGl6ZTogdW5pdGl6ZSxcbiAgICBpbnRlcnBvbGF0ZTogaW50ZXJwb2xhdGUsXG4gICAgc2h1ZmZsZTogc2h1ZmZsZVxuICB9LFxuICBpbnN0YWxsOiBfaW5zdGFsbCxcbiAgZWZmZWN0czogX2VmZmVjdHMsXG4gIHRpY2tlcjogX3RpY2tlcixcbiAgdXBkYXRlUm9vdDogVGltZWxpbmUudXBkYXRlUm9vdCxcbiAgcGx1Z2luczogX3BsdWdpbnMsXG4gIGdsb2JhbFRpbWVsaW5lOiBfZ2xvYmFsVGltZWxpbmUsXG4gIGNvcmU6IHtcbiAgICBQcm9wVHdlZW46IFByb3BUd2VlbixcbiAgICBnbG9iYWxzOiBfYWRkR2xvYmFsLFxuICAgIFR3ZWVuOiBUd2VlbixcbiAgICBUaW1lbGluZTogVGltZWxpbmUsXG4gICAgQW5pbWF0aW9uOiBBbmltYXRpb24sXG4gICAgZ2V0Q2FjaGU6IF9nZXRDYWNoZSxcbiAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW06IF9yZW1vdmVMaW5rZWRMaXN0SXRlbSxcbiAgICByZXZlcnRpbmc6IGZ1bmN0aW9uIHJldmVydGluZygpIHtcbiAgICAgIHJldHVybiBfcmV2ZXJ0aW5nO1xuICAgIH0sXG4gICAgY29udGV4dDogZnVuY3Rpb24gY29udGV4dCh0b0FkZCkge1xuICAgICAgaWYgKHRvQWRkICYmIF9jb250ZXh0KSB7XG4gICAgICAgIF9jb250ZXh0LmRhdGEucHVzaCh0b0FkZCk7XG5cbiAgICAgICAgdG9BZGQuX2N0eCA9IF9jb250ZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2NvbnRleHQ7XG4gICAgfSxcbiAgICBzdXBwcmVzc092ZXJ3cml0ZXM6IGZ1bmN0aW9uIHN1cHByZXNzT3ZlcndyaXRlcyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIF9zdXBwcmVzc092ZXJ3cml0ZXMgPSB2YWx1ZTtcbiAgICB9XG4gIH1cbn07XG5cbl9mb3JFYWNoTmFtZShcInRvLGZyb20sZnJvbVRvLGRlbGF5ZWRDYWxsLHNldCxraWxsVHdlZW5zT2ZcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9nc2FwW25hbWVdID0gVHdlZW5bbmFtZV07XG59KTtcblxuX3RpY2tlci5hZGQoVGltZWxpbmUudXBkYXRlUm9vdCk7XG5cbl9xdWlja1R3ZWVuID0gX2dzYXAudG8oe30sIHtcbiAgZHVyYXRpb246IDBcbn0pOyAvLyAtLS0tIEVYVFJBIFBMVUdJTlMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIF9nZXRQbHVnaW5Qcm9wVHdlZW4gPSBmdW5jdGlvbiBfZ2V0UGx1Z2luUHJvcFR3ZWVuKHBsdWdpbiwgcHJvcCkge1xuICB2YXIgcHQgPSBwbHVnaW4uX3B0O1xuXG4gIHdoaWxlIChwdCAmJiBwdC5wICE9PSBwcm9wICYmIHB0Lm9wICE9PSBwcm9wICYmIHB0LmZwICE9PSBwcm9wKSB7XG4gICAgcHQgPSBwdC5fbmV4dDtcbiAgfVxuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX2FkZE1vZGlmaWVycyA9IGZ1bmN0aW9uIF9hZGRNb2RpZmllcnModHdlZW4sIG1vZGlmaWVycykge1xuICB2YXIgdGFyZ2V0cyA9IHR3ZWVuLl90YXJnZXRzLFxuICAgICAgcCxcbiAgICAgIGksXG4gICAgICBwdDtcblxuICBmb3IgKHAgaW4gbW9kaWZpZXJzKSB7XG4gICAgaSA9IHRhcmdldHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgcHQgPSB0d2Vlbi5fcHRMb29rdXBbaV1bcF07XG5cbiAgICAgIGlmIChwdCAmJiAocHQgPSBwdC5kKSkge1xuICAgICAgICBpZiAocHQuX3B0KSB7XG4gICAgICAgICAgLy8gaXMgYSBwbHVnaW5cbiAgICAgICAgICBwdCA9IF9nZXRQbHVnaW5Qcm9wVHdlZW4ocHQsIHApO1xuICAgICAgICB9XG5cbiAgICAgICAgcHQgJiYgcHQubW9kaWZpZXIgJiYgcHQubW9kaWZpZXIobW9kaWZpZXJzW3BdLCB0d2VlbiwgdGFyZ2V0c1tpXSwgcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59LFxuICAgIF9idWlsZE1vZGlmaWVyUGx1Z2luID0gZnVuY3Rpb24gX2J1aWxkTW9kaWZpZXJQbHVnaW4obmFtZSwgbW9kaWZpZXIpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHJhd1ZhcnM6IDEsXG4gICAgLy9kb24ndCBwcmUtcHJvY2VzcyBmdW5jdGlvbi1iYXNlZCB2YWx1ZXMgb3IgXCJyYW5kb20oKVwiIHN0cmluZ3MuXG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuKSB7XG4gICAgICB0d2Vlbi5fb25Jbml0ID0gZnVuY3Rpb24gKHR3ZWVuKSB7XG4gICAgICAgIHZhciB0ZW1wLCBwO1xuXG4gICAgICAgIGlmIChfaXNTdHJpbmcodmFycykpIHtcbiAgICAgICAgICB0ZW1wID0ge307XG5cbiAgICAgICAgICBfZm9yRWFjaE5hbWUodmFycywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0ZW1wW25hbWVdID0gMTtcbiAgICAgICAgICB9KTsgLy9pZiB0aGUgdXNlciBwYXNzZXMgaW4gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lcyB0byByb3VuZFByb3BzLCBsaWtlIFwieCx5XCIsIHdlIHJvdW5kIHRvIHdob2xlIG51bWJlcnMuXG5cblxuICAgICAgICAgIHZhcnMgPSB0ZW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vZGlmaWVyKSB7XG4gICAgICAgICAgdGVtcCA9IHt9O1xuXG4gICAgICAgICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgICAgICAgIHRlbXBbcF0gPSBtb2RpZmllcih2YXJzW3BdKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXJzID0gdGVtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIF9hZGRNb2RpZmllcnModHdlZW4sIHZhcnMpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59OyAvL3JlZ2lzdGVyIGNvcmUgcGx1Z2luc1xuXG5cbmV4cG9ydCB2YXIgZ3NhcCA9IF9nc2FwLnJlZ2lzdGVyUGx1Z2luKHtcbiAgbmFtZTogXCJhdHRyXCIsXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpIHtcbiAgICB2YXIgcCwgcHQsIHY7XG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuXG4gICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgIHYgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKHApIHx8IFwiXCI7XG4gICAgICBwdCA9IHRoaXMuYWRkKHRhcmdldCwgXCJzZXRBdHRyaWJ1dGVcIiwgKHYgfHwgMCkgKyBcIlwiLCB2YXJzW3BdLCBpbmRleCwgdGFyZ2V0cywgMCwgMCwgcCk7XG4gICAgICBwdC5vcCA9IHA7XG4gICAgICBwdC5iID0gdjsgLy8gcmVjb3JkIHRoZSBiZWdpbm5pbmcgdmFsdWUgc28gd2UgY2FuIHJldmVydCgpXG5cbiAgICAgIHRoaXMuX3Byb3BzLnB1c2gocCk7XG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihyYXRpbywgZGF0YSkge1xuICAgIHZhciBwdCA9IGRhdGEuX3B0O1xuXG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBfcmV2ZXJ0aW5nID8gcHQuc2V0KHB0LnQsIHB0LnAsIHB0LmIsIHB0KSA6IHB0LnIocmF0aW8sIHB0LmQpOyAvLyBpZiByZXZlcnRpbmcsIGdvIGJhY2sgdG8gdGhlIG9yaWdpbmFsIChwdC5iKVxuXG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cbiAgfVxufSwge1xuICBuYW1lOiBcImVuZEFycmF5XCIsXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YWx1ZSkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5hZGQodGFyZ2V0LCBpLCB0YXJnZXRbaV0gfHwgMCwgdmFsdWVbaV0sIDAsIDAsIDAsIDAsIDAsIDEpO1xuICAgIH1cbiAgfVxufSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJyb3VuZFByb3BzXCIsIF9yb3VuZE1vZGlmaWVyKSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJtb2RpZmllcnNcIiksIF9idWlsZE1vZGlmaWVyUGx1Z2luKFwic25hcFwiLCBzbmFwKSkgfHwgX2dzYXA7IC8vdG8gcHJldmVudCB0aGUgY29yZSBwbHVnaW5zIGZyb20gYmVpbmcgZHJvcHBlZCB2aWEgYWdncmVzc2l2ZSB0cmVlIHNoYWtpbmcsIHdlIG11c3QgaW5jbHVkZSB0aGVtIGluIHRoZSB2YXJpYWJsZSBkZWNsYXJhdGlvbiBpbiB0aGlzIHdheS5cblxuVHdlZW4udmVyc2lvbiA9IFRpbWVsaW5lLnZlcnNpb24gPSBnc2FwLnZlcnNpb24gPSBcIjMuMTIuNVwiO1xuX2NvcmVSZWFkeSA9IDE7XG5fd2luZG93RXhpc3RzKCkgJiYgX3dha2UoKTtcbnZhciBQb3dlcjAgPSBfZWFzZU1hcC5Qb3dlcjAsXG4gICAgUG93ZXIxID0gX2Vhc2VNYXAuUG93ZXIxLFxuICAgIFBvd2VyMiA9IF9lYXNlTWFwLlBvd2VyMixcbiAgICBQb3dlcjMgPSBfZWFzZU1hcC5Qb3dlcjMsXG4gICAgUG93ZXI0ID0gX2Vhc2VNYXAuUG93ZXI0LFxuICAgIExpbmVhciA9IF9lYXNlTWFwLkxpbmVhcixcbiAgICBRdWFkID0gX2Vhc2VNYXAuUXVhZCxcbiAgICBDdWJpYyA9IF9lYXNlTWFwLkN1YmljLFxuICAgIFF1YXJ0ID0gX2Vhc2VNYXAuUXVhcnQsXG4gICAgUXVpbnQgPSBfZWFzZU1hcC5RdWludCxcbiAgICBTdHJvbmcgPSBfZWFzZU1hcC5TdHJvbmcsXG4gICAgRWxhc3RpYyA9IF9lYXNlTWFwLkVsYXN0aWMsXG4gICAgQmFjayA9IF9lYXNlTWFwLkJhY2ssXG4gICAgU3RlcHBlZEVhc2UgPSBfZWFzZU1hcC5TdGVwcGVkRWFzZSxcbiAgICBCb3VuY2UgPSBfZWFzZU1hcC5Cb3VuY2UsXG4gICAgU2luZSA9IF9lYXNlTWFwLlNpbmUsXG4gICAgRXhwbyA9IF9lYXNlTWFwLkV4cG8sXG4gICAgQ2lyYyA9IF9lYXNlTWFwLkNpcmM7XG5leHBvcnQgeyBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIEVsYXN0aWMsIEJhY2ssIFN0ZXBwZWRFYXNlLCBCb3VuY2UsIFNpbmUsIEV4cG8sIENpcmMgfTtcbmV4cG9ydCB7IFR3ZWVuIGFzIFR3ZWVuTWF4LCBUd2VlbiBhcyBUd2VlbkxpdGUsIFRpbWVsaW5lIGFzIFRpbWVsaW5lTWF4LCBUaW1lbGluZSBhcyBUaW1lbGluZUxpdGUsIGdzYXAgYXMgZGVmYXVsdCwgd3JhcCwgd3JhcFlveW8sIGRpc3RyaWJ1dGUsIHJhbmRvbSwgc25hcCwgbm9ybWFsaXplLCBnZXRVbml0LCBjbGFtcCwgc3BsaXRDb2xvciwgdG9BcnJheSwgc2VsZWN0b3IsIG1hcFJhbmdlLCBwaXBlLCB1bml0aXplLCBpbnRlcnBvbGF0ZSwgc2h1ZmZsZSB9OyAvL2V4cG9ydCBzb21lIGludGVybmFsIG1ldGhvZHMvb3JvamVjdHMgZm9yIHVzZSBpbiBDU1NQbHVnaW4gc28gdGhhdCB3ZSBjYW4gZXh0ZXJuYWxpemUgdGhhdCBmaWxlIGFuZCBhbGxvdyBjdXN0b20gYnVpbGRzIHRoYXQgZXhjbHVkZSBpdC5cblxuZXhwb3J0IHsgX2dldFByb3BlcnR5LCBfbnVtRXhwLCBfbnVtV2l0aFVuaXRFeHAsIF9pc1N0cmluZywgX2lzVW5kZWZpbmVkLCBfcmVuZGVyQ29tcGxleFN0cmluZywgX3JlbEV4cCwgX3NldERlZmF1bHRzLCBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0sIF9mb3JFYWNoTmFtZSwgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSwgX2NvbG9yU3RyaW5nRmlsdGVyLCBfcmVwbGFjZVJhbmRvbSwgX2NoZWNrUGx1Z2luLCBfcGx1Z2lucywgX3RpY2tlciwgX2NvbmZpZywgX3JvdW5kTW9kaWZpZXIsIF9yb3VuZCwgX21pc3NpbmdQbHVnaW4sIF9nZXRTZXR0ZXIsIF9nZXRDYWNoZSwgX2NvbG9yRXhwLCBfcGFyc2VSZWxhdGl2ZSB9OyIsIi8qIVxuICogQ1NTUGx1Z2luIDMuMTIuNVxuICogaHR0cHM6Ly9nc2FwLmNvbVxuICpcbiAqIENvcHlyaWdodCAyMDA4LTIwMjQsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3NhcC5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR1NBUCBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IGdzYXAsIF9nZXRQcm9wZXJ0eSwgX251bUV4cCwgX251bVdpdGhVbml0RXhwLCBnZXRVbml0LCBfaXNTdHJpbmcsIF9pc1VuZGVmaW5lZCwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIF9yZWxFeHAsIF9mb3JFYWNoTmFtZSwgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSwgX2NvbG9yU3RyaW5nRmlsdGVyLCBfY2hlY2tQbHVnaW4sIF9yZXBsYWNlUmFuZG9tLCBfcGx1Z2lucywgR1NDYWNoZSwgUHJvcFR3ZWVuLCBfY29uZmlnLCBfdGlja2VyLCBfcm91bmQsIF9taXNzaW5nUGx1Z2luLCBfZ2V0U2V0dGVyLCBfZ2V0Q2FjaGUsIF9jb2xvckV4cCwgX3BhcnNlUmVsYXRpdmUsIF9zZXREZWZhdWx0cywgX3JlbW92ZUxpbmtlZExpc3RJdGVtIC8vZm9yIHRoZSBjb21tZW50ZWQtb3V0IGNsYXNzTmFtZSBmZWF0dXJlLlxufSBmcm9tIFwiLi9nc2FwLWNvcmUuanNcIjtcblxudmFyIF93aW4sXG4gICAgX2RvYyxcbiAgICBfZG9jRWxlbWVudCxcbiAgICBfcGx1Z2luSW5pdHRlZCxcbiAgICBfdGVtcERpdixcbiAgICBfdGVtcERpdlN0eWxlcixcbiAgICBfcmVjZW50U2V0dGVyUGx1Z2luLFxuICAgIF9yZXZlcnRpbmcsXG4gICAgX3dpbmRvd0V4aXN0cyA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfdHJhbnNmb3JtUHJvcHMgPSB7fSxcbiAgICBfUkFEMkRFRyA9IDE4MCAvIE1hdGguUEksXG4gICAgX0RFRzJSQUQgPSBNYXRoLlBJIC8gMTgwLFxuICAgIF9hdGFuMiA9IE1hdGguYXRhbjIsXG4gICAgX2JpZ051bSA9IDFlOCxcbiAgICBfY2Fwc0V4cCA9IC8oW0EtWl0pL2csXG4gICAgX2hvcml6b250YWxFeHAgPSAvKGxlZnR8cmlnaHR8d2lkdGh8bWFyZ2lufHBhZGRpbmd8eCkvaSxcbiAgICBfY29tcGxleEV4cCA9IC9bXFxzLFxcKF1cXFMvLFxuICAgIF9wcm9wZXJ0eUFsaWFzZXMgPSB7XG4gIGF1dG9BbHBoYTogXCJvcGFjaXR5LHZpc2liaWxpdHlcIixcbiAgc2NhbGU6IFwic2NhbGVYLHNjYWxlWVwiLFxuICBhbHBoYTogXCJvcGFjaXR5XCJcbn0sXG4gICAgX3JlbmRlckNTU1Byb3AgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTUHJvcChyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlclByb3BXaXRoRW5kID0gZnVuY3Rpb24gX3JlbmRlclByb3BXaXRoRW5kKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPT09IDEgPyBkYXRhLmUgOiBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyhyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvID8gTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUgOiBkYXRhLmIsIGRhdGEpO1xufSxcbiAgICAvL2lmIHVuaXRzIGNoYW5nZSwgd2UgbmVlZCBhIHdheSB0byByZW5kZXIgdGhlIG9yaWdpbmFsIHVuaXQvdmFsdWUgd2hlbiB0aGUgdHdlZW4gZ29lcyBhbGwgdGhlIHdheSBiYWNrIHRvIHRoZSBiZWdpbm5pbmcgKHJhdGlvOjApXG5fcmVuZGVyUm91bmRlZENTU1Byb3AgPSBmdW5jdGlvbiBfcmVuZGVyUm91bmRlZENTU1Byb3AocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHZhbHVlID0gZGF0YS5zICsgZGF0YS5jICogcmF0aW87XG4gIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCB+fih2YWx1ZSArICh2YWx1ZSA8IDAgPyAtLjUgOiAuNSkpICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUgPSBmdW5jdGlvbiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZShyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvID8gZGF0YS5lIDogZGF0YS5iLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgPSBmdW5jdGlvbiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZChyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvICE9PSAxID8gZGF0YS5iIDogZGF0YS5lLCBkYXRhKTtcbn0sXG4gICAgX3NldHRlckNTU1N0eWxlID0gZnVuY3Rpb24gX3NldHRlckNTU1N0eWxlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuc3R5bGVbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJDU1NQcm9wID0gZnVuY3Rpb24gX3NldHRlckNTU1Byb3AodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xufSxcbiAgICBfc2V0dGVyVHJhbnNmb3JtID0gZnVuY3Rpb24gX3NldHRlclRyYW5zZm9ybSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwW3Byb3BlcnR5XSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyU2NhbGUgPSBmdW5jdGlvbiBfc2V0dGVyU2NhbGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5fZ3NhcC5zY2FsZVggPSB0YXJnZXQuX2dzYXAuc2NhbGVZID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIgPSBmdW5jdGlvbiBfc2V0dGVyU2NhbGVXaXRoUmVuZGVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhLCByYXRpbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gIGNhY2hlLnNjYWxlWCA9IGNhY2hlLnNjYWxlWSA9IHZhbHVlO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0ocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIgPSBmdW5jdGlvbiBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlcih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSwgcmF0aW8pIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICBjYWNoZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKHJhdGlvLCBjYWNoZSk7XG59LFxuICAgIF90cmFuc2Zvcm1Qcm9wID0gXCJ0cmFuc2Zvcm1cIixcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF90cmFuc2Zvcm1Qcm9wICsgXCJPcmlnaW5cIixcbiAgICBfc2F2ZVN0eWxlID0gZnVuY3Rpb24gX3NhdmVTdHlsZShwcm9wZXJ0eSwgaXNOb3RDU1MpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgc3R5bGUpIHtcbiAgICB0aGlzLnRmbSA9IHRoaXMudGZtIHx8IHt9O1xuXG4gICAgaWYgKHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICBwcm9wZXJ0eSA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldIHx8IHByb3BlcnR5O1xuICAgICAgfnByb3BlcnR5LmluZGV4T2YoXCIsXCIpID8gcHJvcGVydHkuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnRmbVthXSA9IF9nZXQodGFyZ2V0LCBhKTtcbiAgICAgIH0pIDogdGhpcy50Zm1bcHJvcGVydHldID0gY2FjaGUueCA/IGNhY2hlW3Byb3BlcnR5XSA6IF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSk7IC8vIG5vdGU6IHNjYWxlIHdvdWxkIG1hcCB0byBcInNjYWxlWCxzY2FsZVlcIiwgdGh1cyB3ZSBsb29wIGFuZCBhcHBseSB0aGVtIGJvdGguXG5cbiAgICAgIHByb3BlcnR5ID09PSBfdHJhbnNmb3JtT3JpZ2luUHJvcCAmJiAodGhpcy50Zm0uek9yaWdpbiA9IGNhY2hlLnpPcmlnaW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gX3Byb3BlcnR5QWxpYXNlcy50cmFuc2Zvcm0uc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICAgICAgcmV0dXJuIF9zYXZlU3R5bGUuY2FsbChfdGhpcywgcCwgaXNOb3RDU1MpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuaW5kZXhPZihfdHJhbnNmb3JtUHJvcCkgPj0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIHRoaXMuc3ZnbyA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIik7XG4gICAgICB0aGlzLnByb3BzLnB1c2goX3RyYW5zZm9ybU9yaWdpblByb3AsIGlzTm90Q1NTLCBcIlwiKTtcbiAgICB9XG5cbiAgICBwcm9wZXJ0eSA9IF90cmFuc2Zvcm1Qcm9wO1xuICB9XG5cbiAgKHN0eWxlIHx8IGlzTm90Q1NTKSAmJiB0aGlzLnByb3BzLnB1c2gocHJvcGVydHksIGlzTm90Q1NTLCBzdHlsZVtwcm9wZXJ0eV0pO1xufSxcbiAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSkge1xuICBpZiAoc3R5bGUudHJhbnNsYXRlKSB7XG4gICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ0cmFuc2xhdGVcIik7XG4gICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJzY2FsZVwiKTtcbiAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShcInJvdGF0ZVwiKTtcbiAgfVxufSxcbiAgICBfcmV2ZXJ0U3R5bGUgPSBmdW5jdGlvbiBfcmV2ZXJ0U3R5bGUoKSB7XG4gIHZhciBwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICBpLFxuICAgICAgcDtcblxuICBmb3IgKGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAvLyBzdG9yZWQgbGlrZSB0aGlzOiBwcm9wZXJ0eSwgaXNOb3RDU1MsIHZhbHVlXG4gICAgcHJvcHNbaSArIDFdID8gdGFyZ2V0W3Byb3BzW2ldXSA9IHByb3BzW2kgKyAyXSA6IHByb3BzW2kgKyAyXSA/IHN0eWxlW3Byb3BzW2ldXSA9IHByb3BzW2kgKyAyXSA6IHN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3BzW2ldLnN1YnN0cigwLCAyKSA9PT0gXCItLVwiID8gcHJvcHNbaV0gOiBwcm9wc1tpXS5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcbiAgfVxuXG4gIGlmICh0aGlzLnRmbSkge1xuICAgIGZvciAocCBpbiB0aGlzLnRmbSkge1xuICAgICAgY2FjaGVbcF0gPSB0aGlzLnRmbVtwXTtcbiAgICB9XG5cbiAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0oKTtcbiAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIiwgdGhpcy5zdmdvIHx8IFwiXCIpO1xuICAgIH1cblxuICAgIGkgPSBfcmV2ZXJ0aW5nKCk7XG5cbiAgICBpZiAoKCFpIHx8ICFpLmlzU3RhcnQpICYmICFzdHlsZVtfdHJhbnNmb3JtUHJvcF0pIHtcbiAgICAgIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMoc3R5bGUpO1xuXG4gICAgICBpZiAoY2FjaGUuek9yaWdpbiAmJiBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0pIHtcbiAgICAgICAgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdICs9IFwiIFwiICsgY2FjaGUuek9yaWdpbiArIFwicHhcIjsgLy8gc2luY2Ugd2UncmUgdW5jYWNoaW5nLCB3ZSBtdXN0IHB1dCB0aGUgek9yaWdpbiBiYWNrIGludG8gdGhlIHRyYW5zZm9ybU9yaWdpbiBzbyB0aGF0IHdlIGNhbiBwdWxsIGl0IG91dCBhY2N1cmF0ZWx5IHdoZW4gd2UgcGFyc2UgYWdhaW4uIE90aGVyd2lzZSwgd2UnZCBsb3NlIHRoZSB6IHBvcnRpb24gb2YgdGhlIG9yaWdpbiBzaW5jZSB3ZSBleHRyYWN0IGl0IHRvIHByb3RlY3QgZnJvbSBTYWZhcmkgYnVncy5cblxuICAgICAgICBjYWNoZS56T3JpZ2luID0gMDtcbiAgICAgICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKCk7XG4gICAgICB9XG5cbiAgICAgIGNhY2hlLnVuY2FjaGUgPSAxOyAvLyBpZiBpdCdzIGEgc3RhcnRBdCB0aGF0J3MgYmVpbmcgcmV2ZXJ0ZWQgaW4gdGhlIF9pbml0VHdlZW4oKSBvZiB0aGUgY29yZSwgd2UgZG9uJ3QgbmVlZCB0byB1bmNhY2hlIHRyYW5zZm9ybXMuIFRoaXMgaXMgcHVyZWx5IGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLlxuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0U3R5bGVTYXZlciA9IGZ1bmN0aW9uIF9nZXRTdHlsZVNhdmVyKHRhcmdldCwgcHJvcGVydGllcykge1xuICB2YXIgc2F2ZXIgPSB7XG4gICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgcHJvcHM6IFtdLFxuICAgIHJldmVydDogX3JldmVydFN0eWxlLFxuICAgIHNhdmU6IF9zYXZlU3R5bGVcbiAgfTtcbiAgdGFyZ2V0Ll9nc2FwIHx8IGdzYXAuY29yZS5nZXRDYWNoZSh0YXJnZXQpOyAvLyBqdXN0IG1ha2Ugc3VyZSB0aGVyZSdzIGEgX2dzYXAgY2FjaGUgZGVmaW5lZCBiZWNhdXNlIHdlIHJlYWQgZnJvbSBpdCBpbiBfc2F2ZVN0eWxlKCkgYW5kIGl0J3MgbW9yZSBlZmZpY2llbnQgdG8ganVzdCBjaGVjayBpdCBoZXJlIG9uY2UuXG5cbiAgcHJvcGVydGllcyAmJiBwcm9wZXJ0aWVzLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHNhdmVyLnNhdmUocCk7XG4gIH0pO1xuICByZXR1cm4gc2F2ZXI7XG59LFxuICAgIF9zdXBwb3J0czNELFxuICAgIF9jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQodHlwZSwgbnMpIHtcbiAgdmFyIGUgPSBfZG9jLmNyZWF0ZUVsZW1lbnROUyA/IF9kb2MuY3JlYXRlRWxlbWVudE5TKChucyB8fCBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIikucmVwbGFjZSgvXmh0dHBzLywgXCJodHRwXCIpLCB0eXBlKSA6IF9kb2MuY3JlYXRlRWxlbWVudCh0eXBlKTsgLy9zb21lIHNlcnZlcnMgc3dhcCBpbiBodHRwcyBmb3IgaHR0cCBpbiB0aGUgbmFtZXNwYWNlIHdoaWNoIGNhbiBicmVhayB0aGluZ3MsIG1ha2luZyBcInN0eWxlXCIgaW5hY2Nlc3NpYmxlLlxuXG4gIHJldHVybiBlICYmIGUuc3R5bGUgPyBlIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgZW52aXJvbm1lbnRzIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgZWxlbWVudCdzIHN0eWxlIHdoZW4gY3JlYXRlZCB3aXRoIGEgbmFtZXNwYWNlIGluIHdoaWNoIGNhc2Ugd2UgZGVmYXVsdCB0byB0aGUgc3RhbmRhcmQgY3JlYXRlRWxlbWVudCgpIHRvIHdvcmsgYXJvdW5kIHRoZSBpc3N1ZS4gQWxzbyBub3RlIHRoYXQgd2hlbiBHU0FQIGlzIGVtYmVkZGVkIGRpcmVjdGx5IGluc2lkZSBhbiBTVkcgZmlsZSwgY3JlYXRlRWxlbWVudCgpIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgc3R5bGUgb2JqZWN0IGluIEZpcmVmb3ggKHNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8yMDIxNS1wcm9ibGVtLXVzaW5nLXR3ZWVubWF4LWluLXN0YW5kYWxvbmUtc2VsZi1jb250YWluaW5nLXN2Zy1maWxlLWVyci1jYW5ub3Qtc2V0LXByb3BlcnR5LWNzc3RleHQtb2YtdW5kZWZpbmVkLykuXG59LFxuICAgIF9nZXRDb21wdXRlZFByb3BlcnR5ID0gZnVuY3Rpb24gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgc2tpcFByZWZpeEZhbGxiYWNrKSB7XG4gIHZhciBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KTtcbiAgcmV0dXJuIGNzW3Byb3BlcnR5XSB8fCBjcy5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5LnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpIHx8ICFza2lwUHJlZml4RmFsbGJhY2sgJiYgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfY2hlY2tQcm9wUHJlZml4KHByb3BlcnR5KSB8fCBwcm9wZXJ0eSwgMSkgfHwgXCJcIjsgLy9jc3MgdmFyaWFibGVzIG1heSBub3QgbmVlZCBjYXBzIHN3YXBwZWQgb3V0IGZvciBkYXNoZXMgYW5kIGxvd2VyY2FzZS5cbn0sXG4gICAgX3ByZWZpeGVzID0gXCJPLE1veixtcyxNcyxXZWJraXRcIi5zcGxpdChcIixcIiksXG4gICAgX2NoZWNrUHJvcFByZWZpeCA9IGZ1bmN0aW9uIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHksIGVsZW1lbnQsIHByZWZlclByZWZpeCkge1xuICB2YXIgZSA9IGVsZW1lbnQgfHwgX3RlbXBEaXYsXG4gICAgICBzID0gZS5zdHlsZSxcbiAgICAgIGkgPSA1O1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBzICYmICFwcmVmZXJQcmVmaXgpIHtcbiAgICByZXR1cm4gcHJvcGVydHk7XG4gIH1cblxuICBwcm9wZXJ0eSA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc3Vic3RyKDEpO1xuXG4gIHdoaWxlIChpLS0gJiYgIShfcHJlZml4ZXNbaV0gKyBwcm9wZXJ0eSBpbiBzKSkge31cblxuICByZXR1cm4gaSA8IDAgPyBudWxsIDogKGkgPT09IDMgPyBcIm1zXCIgOiBpID49IDAgPyBfcHJlZml4ZXNbaV0gOiBcIlwiKSArIHByb3BlcnR5O1xufSxcbiAgICBfaW5pdENvcmUgPSBmdW5jdGlvbiBfaW5pdENvcmUoKSB7XG4gIGlmIChfd2luZG93RXhpc3RzKCkgJiYgd2luZG93LmRvY3VtZW50KSB7XG4gICAgX3dpbiA9IHdpbmRvdztcbiAgICBfZG9jID0gX3dpbi5kb2N1bWVudDtcbiAgICBfZG9jRWxlbWVudCA9IF9kb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgIF90ZW1wRGl2ID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIikgfHwge1xuICAgICAgc3R5bGU6IHt9XG4gICAgfTtcbiAgICBfdGVtcERpdlN0eWxlciA9IF9jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIF90cmFuc2Zvcm1Qcm9wID0gX2NoZWNrUHJvcFByZWZpeChfdHJhbnNmb3JtUHJvcCk7XG4gICAgX3RyYW5zZm9ybU9yaWdpblByb3AgPSBfdHJhbnNmb3JtUHJvcCArIFwiT3JpZ2luXCI7XG4gICAgX3RlbXBEaXYuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyLXdpZHRoOjA7bGluZS1oZWlnaHQ6MDtwb3NpdGlvbjphYnNvbHV0ZTtwYWRkaW5nOjBcIjsgLy9tYWtlIHN1cmUgdG8gb3ZlcnJpZGUgY2VydGFpbiBwcm9wZXJ0aWVzIHRoYXQgbWF5IGNvbnRhbWluYXRlIG1lYXN1cmVtZW50cywgaW4gY2FzZSB0aGUgdXNlciBoYXMgb3ZlcnJlYWNoaW5nIHN0eWxlIHNoZWV0cy5cblxuICAgIF9zdXBwb3J0czNEID0gISFfY2hlY2tQcm9wUHJlZml4KFwicGVyc3BlY3RpdmVcIik7XG4gICAgX3JldmVydGluZyA9IGdzYXAuY29yZS5yZXZlcnRpbmc7XG4gICAgX3BsdWdpbkluaXR0ZWQgPSAxO1xuICB9XG59LFxuICAgIF9nZXRCQm94SGFjayA9IGZ1bmN0aW9uIF9nZXRCQm94SGFjayhzd2FwSWZQb3NzaWJsZSkge1xuICAvL3dvcmtzIGFyb3VuZCBpc3N1ZXMgaW4gc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSB0aGF0IGRvbid0IGNvcnJlY3RseSByZXBvcnQgZ2V0QkJveCgpIG9uIFNWRyBlbGVtZW50cyBpbnNpZGUgYSA8ZGVmcz4gZWxlbWVudCBhbmQvb3IgPG1hc2s+LiBXZSB0cnkgY3JlYXRpbmcgYW4gU1ZHLCBhZGRpbmcgaXQgdG8gdGhlIGRvY3VtZW50RWxlbWVudCBhbmQgdG9zcyB0aGUgZWxlbWVudCBpbiB0aGVyZSBzbyB0aGF0IGl0J3MgZGVmaW5pdGVseSBwYXJ0IG9mIHRoZSByZW5kZXJpbmcgdHJlZSwgdGhlbiBncmFiIHRoZSBiYm94IGFuZCBpZiBpdCB3b3Jrcywgd2UgYWN0dWFsbHkgc3dhcCBvdXQgdGhlIG9yaWdpbmFsIGdldEJCb3goKSBtZXRob2QgZm9yIG91ciBvd24gdGhhdCBkb2VzIHRoZXNlIGV4dHJhIHN0ZXBzIHdoZW5ldmVyIGdldEJCb3ggaXMgbmVlZGVkLiBUaGlzIGhlbHBzIGVuc3VyZSB0aGF0IHBlcmZvcm1hbmNlIGlzIG9wdGltYWwgKG9ubHkgZG8gYWxsIHRoZXNlIGV4dHJhIHN0ZXBzIHdoZW4gYWJzb2x1dGVseSBuZWNlc3NhcnkuLi5tb3N0IGVsZW1lbnRzIGRvbid0IG5lZWQgaXQpLlxuICB2YXIgc3ZnID0gX2NyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgdGhpcy5vd25lclNWR0VsZW1lbnQgJiYgdGhpcy5vd25lclNWR0VsZW1lbnQuZ2V0QXR0cmlidXRlKFwieG1sbnNcIikgfHwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKSxcbiAgICAgIG9sZFBhcmVudCA9IHRoaXMucGFyZW50Tm9kZSxcbiAgICAgIG9sZFNpYmxpbmcgPSB0aGlzLm5leHRTaWJsaW5nLFxuICAgICAgb2xkQ1NTID0gdGhpcy5zdHlsZS5jc3NUZXh0LFxuICAgICAgYmJveDtcblxuICBfZG9jRWxlbWVudC5hcHBlbmRDaGlsZChzdmcpO1xuXG4gIHN2Zy5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgdGhpcy5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gIGlmIChzd2FwSWZQb3NzaWJsZSkge1xuICAgIHRyeSB7XG4gICAgICBiYm94ID0gdGhpcy5nZXRCQm94KCk7XG4gICAgICB0aGlzLl9nc2FwQkJveCA9IHRoaXMuZ2V0QkJveDsgLy9zdG9yZSB0aGUgb3JpZ2luYWxcblxuICAgICAgdGhpcy5nZXRCQm94ID0gX2dldEJCb3hIYWNrO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0gZWxzZSBpZiAodGhpcy5fZ3NhcEJCb3gpIHtcbiAgICBiYm94ID0gdGhpcy5fZ3NhcEJCb3goKTtcbiAgfVxuXG4gIGlmIChvbGRQYXJlbnQpIHtcbiAgICBpZiAob2xkU2libGluZykge1xuICAgICAgb2xkUGFyZW50Lmluc2VydEJlZm9yZSh0aGlzLCBvbGRTaWJsaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2xkUGFyZW50LmFwcGVuZENoaWxkKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHN2Zyk7XG5cbiAgdGhpcy5zdHlsZS5jc3NUZXh0ID0gb2xkQ1NTO1xuICByZXR1cm4gYmJveDtcbn0sXG4gICAgX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyA9IGZ1bmN0aW9uIF9nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBhdHRyaWJ1dGVzQXJyYXkpIHtcbiAgdmFyIGkgPSBhdHRyaWJ1dGVzQXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAodGFyZ2V0Lmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGVzQXJyYXlbaV0pKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzQXJyYXlbaV0pO1xuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0QkJveCA9IGZ1bmN0aW9uIF9nZXRCQm94KHRhcmdldCkge1xuICB2YXIgYm91bmRzO1xuXG4gIHRyeSB7XG4gICAgYm91bmRzID0gdGFyZ2V0LmdldEJCb3goKTsgLy9GaXJlZm94IHRocm93cyBlcnJvcnMgaWYgeW91IHRyeSBjYWxsaW5nIGdldEJCb3goKSBvbiBhbiBTVkcgZWxlbWVudCB0aGF0J3Mgbm90IHJlbmRlcmVkIChsaWtlIGluIGEgPHN5bWJvbD4gb3IgPGRlZnM+KS4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjEyMTE4XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgYm91bmRzID0gX2dldEJCb3hIYWNrLmNhbGwodGFyZ2V0LCB0cnVlKTtcbiAgfVxuXG4gIGJvdW5kcyAmJiAoYm91bmRzLndpZHRoIHx8IGJvdW5kcy5oZWlnaHQpIHx8IHRhcmdldC5nZXRCQm94ID09PSBfZ2V0QkJveEhhY2sgfHwgKGJvdW5kcyA9IF9nZXRCQm94SGFjay5jYWxsKHRhcmdldCwgdHJ1ZSkpOyAvL3NvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCkgbWlzcmVwb3J0IHRoZSBib3VuZHMgaWYgdGhlIGVsZW1lbnQgaGFzIHplcm8gd2lkdGggYW5kIGhlaWdodCAoaXQganVzdCBhc3N1bWVzIGl0J3MgYXQgeDowLCB5OjApLCB0aHVzIHdlIG5lZWQgdG8gbWFudWFsbHkgZ3JhYiB0aGUgcG9zaXRpb24gaW4gdGhhdCBjYXNlLlxuXG4gIHJldHVybiBib3VuZHMgJiYgIWJvdW5kcy53aWR0aCAmJiAhYm91bmRzLnggJiYgIWJvdW5kcy55ID8ge1xuICAgIHg6ICtfZ2V0QXR0cmlidXRlRmFsbGJhY2tzKHRhcmdldCwgW1wieFwiLCBcImN4XCIsIFwieDFcIl0pIHx8IDAsXG4gICAgeTogK19nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBbXCJ5XCIsIFwiY3lcIiwgXCJ5MVwiXSkgfHwgMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDBcbiAgfSA6IGJvdW5kcztcbn0sXG4gICAgX2lzU1ZHID0gZnVuY3Rpb24gX2lzU1ZHKGUpIHtcbiAgcmV0dXJuICEhKGUuZ2V0Q1RNICYmICghZS5wYXJlbnROb2RlIHx8IGUub3duZXJTVkdFbGVtZW50KSAmJiBfZ2V0QkJveChlKSk7XG59LFxuICAgIC8vcmVwb3J0cyBpZiB0aGUgZWxlbWVudCBpcyBhbiBTVkcgb24gd2hpY2ggZ2V0QkJveCgpIGFjdHVhbGx5IHdvcmtzXG5fcmVtb3ZlUHJvcGVydHkgPSBmdW5jdGlvbiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICBpZiAocHJvcGVydHkpIHtcbiAgICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIGZpcnN0MkNoYXJzO1xuXG4gICAgaWYgKHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBwcm9wZXJ0eSAhPT0gX3RyYW5zZm9ybU9yaWdpblByb3ApIHtcbiAgICAgIHByb3BlcnR5ID0gX3RyYW5zZm9ybVByb3A7XG4gICAgfVxuXG4gICAgaWYgKHN0eWxlLnJlbW92ZVByb3BlcnR5KSB7XG4gICAgICBmaXJzdDJDaGFycyA9IHByb3BlcnR5LnN1YnN0cigwLCAyKTtcblxuICAgICAgaWYgKGZpcnN0MkNoYXJzID09PSBcIm1zXCIgfHwgcHJvcGVydHkuc3Vic3RyKDAsIDYpID09PSBcIndlYmtpdFwiKSB7XG4gICAgICAgIC8vTWljcm9zb2Z0IGFuZCBzb21lIFdlYmtpdCBicm93c2VycyBkb24ndCBjb25mb3JtIHRvIHRoZSBzdGFuZGFyZCBvZiBjYXBpdGFsaXppbmcgdGhlIGZpcnN0IHByZWZpeCBjaGFyYWN0ZXIsIHNvIHdlIGFkanVzdCBzbyB0aGF0IHdoZW4gd2UgcHJlZml4IHRoZSBjYXBzIHdpdGggYSBkYXNoLCBpdCdzIGNvcnJlY3QgKG90aGVyd2lzZSBpdCdkIGJlIFwibXMtdHJhbnNmb3JtXCIgaW5zdGVhZCBvZiBcIi1tcy10cmFuc2Zvcm1cIiBmb3IgSUU5LCBmb3IgZXhhbXBsZSlcbiAgICAgICAgcHJvcGVydHkgPSBcIi1cIiArIHByb3BlcnR5O1xuICAgICAgfVxuXG4gICAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShmaXJzdDJDaGFycyA9PT0gXCItLVwiID8gcHJvcGVydHkgOiBwcm9wZXJ0eS5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy9ub3RlOiBvbGQgdmVyc2lvbnMgb2YgSUUgdXNlIFwicmVtb3ZlQXR0cmlidXRlKClcIiBpbnN0ZWFkIG9mIFwicmVtb3ZlUHJvcGVydHkoKVwiXG4gICAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUocHJvcGVydHkpO1xuICAgIH1cbiAgfVxufSxcbiAgICBfYWRkTm9uVHdlZW5pbmdQVCA9IGZ1bmN0aW9uIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgYmVnaW5uaW5nLCBlbmQsIG9ubHlTZXRBdEVuZCkge1xuICB2YXIgcHQgPSBuZXcgUHJvcFR3ZWVuKHBsdWdpbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDEsIG9ubHlTZXRBdEVuZCA/IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kIDogX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUpO1xuICBwbHVnaW4uX3B0ID0gcHQ7XG4gIHB0LmIgPSBiZWdpbm5pbmc7XG4gIHB0LmUgPSBlbmQ7XG5cbiAgcGx1Z2luLl9wcm9wcy5wdXNoKHByb3BlcnR5KTtcblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9ub25Db252ZXJ0aWJsZVVuaXRzID0ge1xuICBkZWc6IDEsXG4gIHJhZDogMSxcbiAgdHVybjogMVxufSxcbiAgICBfbm9uU3RhbmRhcmRMYXlvdXRzID0ge1xuICBncmlkOiAxLFxuICBmbGV4OiAxXG59LFxuICAgIC8vdGFrZXMgYSBzaW5nbGUgdmFsdWUgbGlrZSAyMHB4IGFuZCBjb252ZXJ0cyBpdCB0byB0aGUgdW5pdCBzcGVjaWZpZWQsIGxpa2UgXCIlXCIsIHJldHVybmluZyBvbmx5IHRoZSBudW1lcmljIGFtb3VudC5cbl9jb252ZXJ0VG9Vbml0ID0gZnVuY3Rpb24gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHVuaXQpIHtcbiAgdmFyIGN1clZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMCxcbiAgICAgIGN1clVuaXQgPSAodmFsdWUgKyBcIlwiKS50cmltKCkuc3Vic3RyKChjdXJWYWx1ZSArIFwiXCIpLmxlbmd0aCkgfHwgXCJweFwiLFxuICAgICAgLy8gc29tZSBicm93c2VycyBsZWF2ZSBleHRyYSB3aGl0ZXNwYWNlIGF0IHRoZSBiZWdpbm5pbmcgb2YgQ1NTIHZhcmlhYmxlcywgaGVuY2UgdGhlIG5lZWQgdG8gdHJpbSgpXG4gIHN0eWxlID0gX3RlbXBEaXYuc3R5bGUsXG4gICAgICBob3Jpem9udGFsID0gX2hvcml6b250YWxFeHAudGVzdChwcm9wZXJ0eSksXG4gICAgICBpc1Jvb3RTVkcgPSB0YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInN2Z1wiLFxuICAgICAgbWVhc3VyZVByb3BlcnR5ID0gKGlzUm9vdFNWRyA/IFwiY2xpZW50XCIgOiBcIm9mZnNldFwiKSArIChob3Jpem9udGFsID8gXCJXaWR0aFwiIDogXCJIZWlnaHRcIiksXG4gICAgICBhbW91bnQgPSAxMDAsXG4gICAgICB0b1BpeGVscyA9IHVuaXQgPT09IFwicHhcIixcbiAgICAgIHRvUGVyY2VudCA9IHVuaXQgPT09IFwiJVwiLFxuICAgICAgcHgsXG4gICAgICBwYXJlbnQsXG4gICAgICBjYWNoZSxcbiAgICAgIGlzU1ZHO1xuXG4gIGlmICh1bml0ID09PSBjdXJVbml0IHx8ICFjdXJWYWx1ZSB8fCBfbm9uQ29udmVydGlibGVVbml0c1t1bml0XSB8fCBfbm9uQ29udmVydGlibGVVbml0c1tjdXJVbml0XSkge1xuICAgIHJldHVybiBjdXJWYWx1ZTtcbiAgfVxuXG4gIGN1clVuaXQgIT09IFwicHhcIiAmJiAhdG9QaXhlbHMgJiYgKGN1clZhbHVlID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIFwicHhcIikpO1xuICBpc1NWRyA9IHRhcmdldC5nZXRDVE0gJiYgX2lzU1ZHKHRhcmdldCk7XG5cbiAgaWYgKCh0b1BlcmNlbnQgfHwgY3VyVW5pdCA9PT0gXCIlXCIpICYmIChfdHJhbnNmb3JtUHJvcHNbcHJvcGVydHldIHx8IH5wcm9wZXJ0eS5pbmRleE9mKFwiYWRpdXNcIikpKSB7XG4gICAgcHggPSBpc1NWRyA/IHRhcmdldC5nZXRCQm94KClbaG9yaXpvbnRhbCA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCJdIDogdGFyZ2V0W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgcmV0dXJuIF9yb3VuZCh0b1BlcmNlbnQgPyBjdXJWYWx1ZSAvIHB4ICogYW1vdW50IDogY3VyVmFsdWUgLyAxMDAgKiBweCk7XG4gIH1cblxuICBzdHlsZVtob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gPSBhbW91bnQgKyAodG9QaXhlbHMgPyBjdXJVbml0IDogdW5pdCk7XG4gIHBhcmVudCA9IH5wcm9wZXJ0eS5pbmRleE9mKFwiYWRpdXNcIikgfHwgdW5pdCA9PT0gXCJlbVwiICYmIHRhcmdldC5hcHBlbmRDaGlsZCAmJiAhaXNSb290U1ZHID8gdGFyZ2V0IDogdGFyZ2V0LnBhcmVudE5vZGU7XG5cbiAgaWYgKGlzU1ZHKSB7XG4gICAgcGFyZW50ID0gKHRhcmdldC5vd25lclNWR0VsZW1lbnQgfHwge30pLnBhcmVudE5vZGU7XG4gIH1cblxuICBpZiAoIXBhcmVudCB8fCBwYXJlbnQgPT09IF9kb2MgfHwgIXBhcmVudC5hcHBlbmRDaGlsZCkge1xuICAgIHBhcmVudCA9IF9kb2MuYm9keTtcbiAgfVxuXG4gIGNhY2hlID0gcGFyZW50Ll9nc2FwO1xuXG4gIGlmIChjYWNoZSAmJiB0b1BlcmNlbnQgJiYgY2FjaGUud2lkdGggJiYgaG9yaXpvbnRhbCAmJiBjYWNoZS50aW1lID09PSBfdGlja2VyLnRpbWUgJiYgIWNhY2hlLnVuY2FjaGUpIHtcbiAgICByZXR1cm4gX3JvdW5kKGN1clZhbHVlIC8gY2FjaGUud2lkdGggKiBhbW91bnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0b1BlcmNlbnQgJiYgKHByb3BlcnR5ID09PSBcImhlaWdodFwiIHx8IHByb3BlcnR5ID09PSBcIndpZHRoXCIpKSB7XG4gICAgICAvLyBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggd2lkdGgvaGVpZ2h0IHRoYXQncyBpbnNpZGUgYSBjb250YWluZXIgd2l0aCBwYWRkaW5nIGFuZC9vciBpdCdzIGEgZmxleGJveC9ncmlkIGNvbnRhaW5lciwgd2UgbXVzdCBhcHBseSBpdCB0byB0aGUgdGFyZ2V0IGl0c2VsZiByYXRoZXIgdGhhbiB0aGUgX3RlbXBEaXYgaW4gb3JkZXIgdG8gZW5zdXJlIGNvbXBsZXRlIGFjY3VyYWN5LCBmYWN0b3JpbmcgaW4gdGhlIHBhcmVudCdzIHBhZGRpbmcuXG4gICAgICB2YXIgdiA9IHRhcmdldC5zdHlsZVtwcm9wZXJ0eV07XG4gICAgICB0YXJnZXQuc3R5bGVbcHJvcGVydHldID0gYW1vdW50ICsgdW5pdDtcbiAgICAgIHB4ID0gdGFyZ2V0W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgICB2ID8gdGFyZ2V0LnN0eWxlW3Byb3BlcnR5XSA9IHYgOiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICh0b1BlcmNlbnQgfHwgY3VyVW5pdCA9PT0gXCIlXCIpICYmICFfbm9uU3RhbmRhcmRMYXlvdXRzW19nZXRDb21wdXRlZFByb3BlcnR5KHBhcmVudCwgXCJkaXNwbGF5XCIpXSAmJiAoc3R5bGUucG9zaXRpb24gPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIFwicG9zaXRpb25cIikpO1xuICAgICAgcGFyZW50ID09PSB0YXJnZXQgJiYgKHN0eWxlLnBvc2l0aW9uID0gXCJzdGF0aWNcIik7IC8vIGxpa2UgZm9yIGJvcmRlclJhZGl1cywgaWYgaXQncyBhICUgd2UgbXVzdCBoYXZlIGl0IHJlbGF0aXZlIHRvIHRoZSB0YXJnZXQgaXRzZWxmIGJ1dCB0aGF0IG1heSBub3QgaGF2ZSBwb3NpdGlvbjogcmVsYXRpdmUgb3IgcG9zaXRpb246IGFic29sdXRlIGluIHdoaWNoIGNhc2UgaXQnZCBnbyB1cCB0aGUgY2hhaW4gdW50aWwgaXQgZmluZHMgaXRzIG9mZnNldFBhcmVudCAoYmFkKS4gcG9zaXRpb246IHN0YXRpYyBwcm90ZWN0cyBhZ2FpbnN0IHRoYXQuXG5cbiAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChfdGVtcERpdik7XG4gICAgICBweCA9IF90ZW1wRGl2W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoX3RlbXBEaXYpO1xuICAgICAgc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgfVxuXG4gICAgaWYgKGhvcml6b250YWwgJiYgdG9QZXJjZW50KSB7XG4gICAgICBjYWNoZSA9IF9nZXRDYWNoZShwYXJlbnQpO1xuICAgICAgY2FjaGUudGltZSA9IF90aWNrZXIudGltZTtcbiAgICAgIGNhY2hlLndpZHRoID0gcGFyZW50W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9yb3VuZCh0b1BpeGVscyA/IHB4ICogY3VyVmFsdWUgLyBhbW91bnQgOiBweCAmJiBjdXJWYWx1ZSA/IGFtb3VudCAvIHB4ICogY3VyVmFsdWUgOiAwKTtcbn0sXG4gICAgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICB2YXIgdmFsdWU7XG4gIF9wbHVnaW5Jbml0dGVkIHx8IF9pbml0Q29yZSgpO1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBfcHJvcGVydHlBbGlhc2VzICYmIHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgcHJvcGVydHkgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XTtcblxuICAgIGlmICh+cHJvcGVydHkuaW5kZXhPZihcIixcIikpIHtcbiAgICAgIHByb3BlcnR5ID0gcHJvcGVydHkuc3BsaXQoXCIsXCIpWzBdO1xuICAgIH1cbiAgfVxuXG4gIGlmIChfdHJhbnNmb3JtUHJvcHNbcHJvcGVydHldICYmIHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgdmFsdWUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB1bmNhY2hlKTtcbiAgICB2YWx1ZSA9IHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybU9yaWdpblwiID8gdmFsdWVbcHJvcGVydHldIDogdmFsdWUuc3ZnID8gdmFsdWUub3JpZ2luIDogX2ZpcnN0VHdvT25seShfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSkgKyBcIiBcIiArIHZhbHVlLnpPcmlnaW4gKyBcInB4XCI7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSB0YXJnZXQuc3R5bGVbcHJvcGVydHldO1xuXG4gICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZSA9PT0gXCJhdXRvXCIgfHwgdW5jYWNoZSB8fCB+KHZhbHVlICsgXCJcIikuaW5kZXhPZihcImNhbGMoXCIpKSB7XG4gICAgICB2YWx1ZSA9IF9zcGVjaWFsUHJvcHNbcHJvcGVydHldICYmIF9zcGVjaWFsUHJvcHNbcHJvcGVydHldKHRhcmdldCwgcHJvcGVydHksIHVuaXQpIHx8IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHx8IF9nZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB8fCAocHJvcGVydHkgPT09IFwib3BhY2l0eVwiID8gMSA6IDApOyAvLyBub3RlOiBzb21lIGJyb3dzZXJzLCBsaWtlIEZpcmVmb3gsIGRvbid0IHJlcG9ydCBib3JkZXJSYWRpdXMgY29ycmVjdGx5ISBJbnN0ZWFkLCBpdCBvbmx5IHJlcG9ydHMgZXZlcnkgY29ybmVyIGxpa2UgIGJvcmRlclRvcExlZnRSYWRpdXNcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5pdCAmJiAhfih2YWx1ZSArIFwiXCIpLnRyaW0oKS5pbmRleE9mKFwiIFwiKSA/IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCB1bml0KSArIHVuaXQgOiB2YWx1ZTtcbn0sXG4gICAgX3R3ZWVuQ29tcGxleENTU1N0cmluZyA9IGZ1bmN0aW9uIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcodGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kKSB7XG4gIC8vIG5vdGU6IHdlIGNhbGwgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHBsdWdpbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPT09IFwibm9uZVwiKSB7XG4gICAgLy8gc29tZSBicm93c2VycyBsaWtlIFNhZmFyaSBhY3R1YWxseSBQUkVGRVIgdGhlIHByZWZpeGVkIHByb3BlcnR5IGFuZCBtaXMtcmVwb3J0IHRoZSB1bnByZWZpeGVkIHZhbHVlIGxpa2UgY2xpcFBhdGggKEJVRykuIEluIG90aGVyIHdvcmRzLCBldmVuIHRob3VnaCBjbGlwUGF0aCBleGlzdHMgaW4gdGhlIHN0eWxlIChcImNsaXBQYXRoXCIgaW4gdGFyZ2V0LnN0eWxlKSBhbmQgaXQncyBzZXQgaW4gdGhlIENTUyBwcm9wZXJseSAoYWxvbmcgd2l0aCAtd2Via2l0LWNsaXAtcGF0aCksIFNhZmFyaSByZXBvcnRzIGNsaXBQYXRoIGFzIFwibm9uZVwiIHdoZXJlYXMgV2Via2l0Q2xpcFBhdGggcmVwb3J0cyBhY2N1cmF0ZWx5IGxpa2UgXCJlbGxpcHNlKDEwMCUgMCUgYXQgNTAlIDAlKVwiLCBzbyBpbiB0aGlzIGNhc2Ugd2UgbXVzdCBTV0lUQ0ggdG8gdXNpbmcgdGhlIHByZWZpeGVkIHByb3BlcnR5IGluc3RlYWQuIFNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8xODMxMC1jbGlwcGF0aC1kb2VzbnQtd29yay1vbi1pb3MvXG4gICAgdmFyIHAgPSBfY2hlY2tQcm9wUHJlZml4KHByb3AsIHRhcmdldCwgMSksXG4gICAgICAgIHMgPSBwICYmIF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcCwgMSk7XG5cbiAgICBpZiAocyAmJiBzICE9PSBzdGFydCkge1xuICAgICAgcHJvcCA9IHA7XG4gICAgICBzdGFydCA9IHM7XG4gICAgfSBlbHNlIGlmIChwcm9wID09PSBcImJvcmRlckNvbG9yXCIpIHtcbiAgICAgIHN0YXJ0ID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBcImJvcmRlclRvcENvbG9yXCIpOyAvLyBGaXJlZm94IGJ1ZzogYWx3YXlzIHJlcG9ydHMgXCJib3JkZXJDb2xvclwiIGFzIFwiXCIsIHNvIHdlIG11c3QgZmFsbCBiYWNrIHRvIGJvcmRlclRvcENvbG9yLiBTZWUgaHR0cHM6Ly9nc2FwLmNvbS9mb3J1bXMvdG9waWMvMjQ1ODMtaG93LXRvLXJldHVybi1jb2xvcnMtdGhhdC1pLWhhZC1hZnRlci1yZXZlcnNlL1xuICAgIH1cbiAgfVxuXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldC5zdHlsZSwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcpLFxuICAgICAgaW5kZXggPSAwLFxuICAgICAgbWF0Y2hJbmRleCA9IDAsXG4gICAgICBhLFxuICAgICAgcmVzdWx0LFxuICAgICAgc3RhcnRWYWx1ZXMsXG4gICAgICBzdGFydE51bSxcbiAgICAgIGNvbG9yLFxuICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgIGVuZFZhbHVlLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBlbmRVbml0LFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgZW5kVmFsdWVzO1xuICBwdC5iID0gc3RhcnQ7XG4gIHB0LmUgPSBlbmQ7XG4gIHN0YXJ0ICs9IFwiXCI7IC8vIGVuc3VyZSB2YWx1ZXMgYXJlIHN0cmluZ3NcblxuICBlbmQgKz0gXCJcIjtcblxuICBpZiAoZW5kID09PSBcImF1dG9cIikge1xuICAgIHN0YXJ0VmFsdWUgPSB0YXJnZXQuc3R5bGVbcHJvcF07XG4gICAgdGFyZ2V0LnN0eWxlW3Byb3BdID0gZW5kO1xuICAgIGVuZCA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcHJvcCkgfHwgZW5kO1xuICAgIHN0YXJ0VmFsdWUgPyB0YXJnZXQuc3R5bGVbcHJvcF0gPSBzdGFydFZhbHVlIDogX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gIH1cblxuICBhID0gW3N0YXJ0LCBlbmRdO1xuXG4gIF9jb2xvclN0cmluZ0ZpbHRlcihhKTsgLy8gcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy4gSWYgY29sb3JzIGFyZSBmb3VuZCwgaXQgcmV0dXJucyB0cnVlIGFuZCB0aGVuIHdlIG11c3QgbWF0Y2ggd2hlcmUgdGhlIGNvbG9yIHNob3dzIHVwIG9yZGVyLXdpc2UgYmVjYXVzZSBmb3IgdGhpbmdzIGxpa2UgYm94U2hhZG93LCBzb21ldGltZXMgdGhlIGJyb3dzZXIgcHJvdmlkZXMgdGhlIGNvbXB1dGVkIHZhbHVlcyB3aXRoIHRoZSBjb2xvciBGSVJTVCwgYnV0IHRoZSB1c2VyIHByb3ZpZGVzIGl0IHdpdGggdGhlIGNvbG9yIExBU1QsIHNvIGZsaXAgdGhlbSBpZiBuZWNlc3NhcnkuIFNhbWUgZm9yIGRyb3Atc2hhZG93KCkuXG5cblxuICBzdGFydCA9IGFbMF07XG4gIGVuZCA9IGFbMV07XG4gIHN0YXJ0VmFsdWVzID0gc3RhcnQubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcbiAgZW5kVmFsdWVzID0gZW5kLm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG5cbiAgaWYgKGVuZFZhbHVlcy5sZW5ndGgpIHtcbiAgICB3aGlsZSAocmVzdWx0ID0gX251bVdpdGhVbml0RXhwLmV4ZWMoZW5kKSkge1xuICAgICAgZW5kVmFsdWUgPSByZXN1bHRbMF07XG4gICAgICBjaHVuayA9IGVuZC5zdWJzdHJpbmcoaW5kZXgsIHJlc3VsdC5pbmRleCk7XG5cbiAgICAgIGlmIChjb2xvcikge1xuICAgICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICAgIH0gZWxzZSBpZiAoY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJyZ2JhKFwiIHx8IGNodW5rLnN1YnN0cigtNSkgPT09IFwiaHNsYShcIikge1xuICAgICAgICBjb2xvciA9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmRWYWx1ZSAhPT0gKHN0YXJ0VmFsdWUgPSBzdGFydFZhbHVlc1ttYXRjaEluZGV4KytdIHx8IFwiXCIpKSB7XG4gICAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydFZhbHVlKSB8fCAwO1xuICAgICAgICBzdGFydFVuaXQgPSBzdGFydFZhbHVlLnN1YnN0cigoc3RhcnROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICBlbmRWYWx1ZS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIChlbmRWYWx1ZSA9IF9wYXJzZVJlbGF0aXZlKHN0YXJ0TnVtLCBlbmRWYWx1ZSkgKyBzdGFydFVuaXQpO1xuICAgICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKTtcbiAgICAgICAgZW5kVW5pdCA9IGVuZFZhbHVlLnN1YnN0cigoZW5kTnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgaW5kZXggPSBfbnVtV2l0aFVuaXRFeHAubGFzdEluZGV4IC0gZW5kVW5pdC5sZW5ndGg7XG5cbiAgICAgICAgaWYgKCFlbmRVbml0KSB7XG4gICAgICAgICAgLy9pZiBzb21ldGhpbmcgbGlrZSBcInBlcnNwZWN0aXZlOjMwMFwiIGlzIHBhc3NlZCBpbiBhbmQgd2UgbXVzdCBhZGQgYSB1bml0IHRvIHRoZSBlbmRcbiAgICAgICAgICBlbmRVbml0ID0gZW5kVW5pdCB8fCBfY29uZmlnLnVuaXRzW3Byb3BdIHx8IHN0YXJ0VW5pdDtcblxuICAgICAgICAgIGlmIChpbmRleCA9PT0gZW5kLmxlbmd0aCkge1xuICAgICAgICAgICAgZW5kICs9IGVuZFVuaXQ7XG4gICAgICAgICAgICBwdC5lICs9IGVuZFVuaXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCkge1xuICAgICAgICAgIHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wLCBzdGFydFZhbHVlLCBlbmRVbml0KSB8fCAwO1xuICAgICAgICB9IC8vIHRoZXNlIG5lc3RlZCBQcm9wVHdlZW5zIGFyZSBoYW5kbGVkIGluIGEgc3BlY2lhbCB3YXkgLSB3ZSdsbCBuZXZlciBhY3R1YWxseSBjYWxsIGEgcmVuZGVyIG9yIHNldHRlciBtZXRob2Qgb24gdGhlbS4gV2UnbGwganVzdCBsb29wIHRocm91Z2ggdGhlbSBpbiB0aGUgcGFyZW50IGNvbXBsZXggc3RyaW5nIFByb3BUd2VlbidzIHJlbmRlciBtZXRob2QuXG5cblxuICAgICAgICBwdC5fcHQgPSB7XG4gICAgICAgICAgX25leHQ6IHB0Ll9wdCxcbiAgICAgICAgICBwOiBjaHVuayB8fCBtYXRjaEluZGV4ID09PSAxID8gY2h1bmsgOiBcIixcIixcbiAgICAgICAgICAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgICBzOiBzdGFydE51bSxcbiAgICAgICAgICBjOiBlbmROdW0gLSBzdGFydE51bSxcbiAgICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgfHwgcHJvcCA9PT0gXCJ6SW5kZXhcIiA/IE1hdGgucm91bmQgOiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHQuYyA9IGluZGV4IDwgZW5kLmxlbmd0aCA/IGVuZC5zdWJzdHJpbmcoaW5kZXgsIGVuZC5sZW5ndGgpIDogXCJcIjsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIHBhcnQgb2YgdGhlIHN0cmluZyAoYWZ0ZXIgdGhlIGxhc3QgbnVtYmVyKVxuICB9IGVsc2Uge1xuICAgIHB0LnIgPSBwcm9wID09PSBcImRpc3BsYXlcIiAmJiBlbmQgPT09IFwibm9uZVwiID8gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgOiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZTtcbiAgfVxuXG4gIF9yZWxFeHAudGVzdChlbmQpICYmIChwdC5lID0gMCk7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cblxuICB0aGlzLl9wdCA9IHB0OyAvL3N0YXJ0IHRoZSBsaW5rZWQgbGlzdCB3aXRoIHRoaXMgbmV3IFByb3BUd2Vlbi4gUmVtZW1iZXIsIHdlIGNhbGwgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHBsdWdpbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYW5vdGhlciBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfa2V5d29yZFRvUGVyY2VudCA9IHtcbiAgdG9wOiBcIjAlXCIsXG4gIGJvdHRvbTogXCIxMDAlXCIsXG4gIGxlZnQ6IFwiMCVcIixcbiAgcmlnaHQ6IFwiMTAwJVwiLFxuICBjZW50ZXI6IFwiNTAlXCJcbn0sXG4gICAgX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMgPSBmdW5jdGlvbiBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyh2YWx1ZSkge1xuICB2YXIgc3BsaXQgPSB2YWx1ZS5zcGxpdChcIiBcIiksXG4gICAgICB4ID0gc3BsaXRbMF0sXG4gICAgICB5ID0gc3BsaXRbMV0gfHwgXCI1MCVcIjtcblxuICBpZiAoeCA9PT0gXCJ0b3BcIiB8fCB4ID09PSBcImJvdHRvbVwiIHx8IHkgPT09IFwibGVmdFwiIHx8IHkgPT09IFwicmlnaHRcIikge1xuICAgIC8vdGhlIHVzZXIgcHJvdmlkZWQgdGhlbSBpbiB0aGUgd3Jvbmcgb3JkZXIsIHNvIGZsaXAgdGhlbVxuICAgIHZhbHVlID0geDtcbiAgICB4ID0geTtcbiAgICB5ID0gdmFsdWU7XG4gIH1cblxuICBzcGxpdFswXSA9IF9rZXl3b3JkVG9QZXJjZW50W3hdIHx8IHg7XG4gIHNwbGl0WzFdID0gX2tleXdvcmRUb1BlcmNlbnRbeV0gfHwgeTtcbiAgcmV0dXJuIHNwbGl0LmpvaW4oXCIgXCIpO1xufSxcbiAgICBfcmVuZGVyQ2xlYXJQcm9wcyA9IGZ1bmN0aW9uIF9yZW5kZXJDbGVhclByb3BzKHJhdGlvLCBkYXRhKSB7XG4gIGlmIChkYXRhLnR3ZWVuICYmIGRhdGEudHdlZW4uX3RpbWUgPT09IGRhdGEudHdlZW4uX2R1cikge1xuICAgIHZhciB0YXJnZXQgPSBkYXRhLnQsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBwcm9wcyA9IGRhdGEudSxcbiAgICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICAgIHByb3AsXG4gICAgICAgIGNsZWFyVHJhbnNmb3JtcyxcbiAgICAgICAgaTtcblxuICAgIGlmIChwcm9wcyA9PT0gXCJhbGxcIiB8fCBwcm9wcyA9PT0gdHJ1ZSkge1xuICAgICAgc3R5bGUuY3NzVGV4dCA9IFwiXCI7XG4gICAgICBjbGVhclRyYW5zZm9ybXMgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcyA9IHByb3BzLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgtLWkgPiAtMSkge1xuICAgICAgICBwcm9wID0gcHJvcHNbaV07XG5cbiAgICAgICAgaWYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wXSkge1xuICAgICAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgICAgICAgcHJvcCA9IHByb3AgPT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyBfdHJhbnNmb3JtT3JpZ2luUHJvcCA6IF90cmFuc2Zvcm1Qcm9wO1xuICAgICAgICB9XG5cbiAgICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNsZWFyVHJhbnNmb3Jtcykge1xuICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgY2FjaGUuc3ZnICYmIHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG5cbiAgICAgICAgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7IC8vIGZvcmNlIGFsbCB0aGUgY2FjaGVkIHZhbHVlcyBiYWNrIHRvIFwibm9ybWFsXCIvaWRlbnRpdHksIG90aGVyd2lzZSBpZiB0aGVyZSdzIGFub3RoZXIgdHdlZW4gdGhhdCdzIGFscmVhZHkgc2V0IHRvIHJlbmRlciB0cmFuc2Zvcm1zIG9uIHRoaXMgZWxlbWVudCwgaXQgY291bGQgZGlzcGxheSB0aGUgd3JvbmcgdmFsdWVzLlxuXG5cbiAgICAgICAgY2FjaGUudW5jYWNoZSA9IDE7XG5cbiAgICAgICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59LFxuICAgIC8vIG5vdGU6IHNwZWNpYWxQcm9wcyBzaG91bGQgcmV0dXJuIDEgaWYgKGFuZCBvbmx5IGlmKSB0aGV5IGhhdmUgYSBub24temVybyBwcmlvcml0eS4gSXQgaW5kaWNhdGVzIHdlIG5lZWQgdG8gc29ydCB0aGUgbGlua2VkIGxpc3QuXG5fc3BlY2lhbFByb3BzID0ge1xuICBjbGVhclByb3BzOiBmdW5jdGlvbiBjbGVhclByb3BzKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gICAgaWYgKHR3ZWVuLmRhdGEgIT09IFwiaXNGcm9tU3RhcnRcIikge1xuICAgICAgdmFyIHB0ID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMCwgX3JlbmRlckNsZWFyUHJvcHMpO1xuICAgICAgcHQudSA9IGVuZFZhbHVlO1xuICAgICAgcHQucHIgPSAtMTA7XG4gICAgICBwdC50d2VlbiA9IHR3ZWVuO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cbiAgLyogY2xhc3NOYW1lIGZlYXR1cmUgKGFib3V0IDAuNGtiIGd6aXBwZWQpLlxuICAsIGNsYXNzTmFtZShwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICBcdGxldCBfcmVuZGVyQ2xhc3NOYW1lID0gKHJhdGlvLCBkYXRhKSA9PiB7XG4gIFx0XHRcdGRhdGEuY3NzLnJlbmRlcihyYXRpbywgZGF0YS5jc3MpO1xuICBcdFx0XHRpZiAoIXJhdGlvIHx8IHJhdGlvID09PSAxKSB7XG4gIFx0XHRcdFx0bGV0IGlubGluZSA9IGRhdGEucm12LFxuICBcdFx0XHRcdFx0dGFyZ2V0ID0gZGF0YS50LFxuICBcdFx0XHRcdFx0cDtcbiAgXHRcdFx0XHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIpO1xuICBcdFx0XHRcdGZvciAocCBpbiBpbmxpbmUpIHtcbiAgXHRcdFx0XHRcdF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHApO1xuICBcdFx0XHRcdH1cbiAgXHRcdFx0fVxuICBcdFx0fSxcbiAgXHRcdF9nZXRBbGxTdHlsZXMgPSAodGFyZ2V0KSA9PiB7XG4gIFx0XHRcdGxldCBzdHlsZXMgPSB7fSxcbiAgXHRcdFx0XHRjb21wdXRlZCA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgXHRcdFx0XHRwO1xuICBcdFx0XHRmb3IgKHAgaW4gY29tcHV0ZWQpIHtcbiAgXHRcdFx0XHRpZiAoaXNOYU4ocCkgJiYgcCAhPT0gXCJjc3NUZXh0XCIgJiYgcCAhPT0gXCJsZW5ndGhcIikge1xuICBcdFx0XHRcdFx0c3R5bGVzW3BdID0gY29tcHV0ZWRbcF07XG4gIFx0XHRcdFx0fVxuICBcdFx0XHR9XG4gIFx0XHRcdF9zZXREZWZhdWx0cyhzdHlsZXMsIF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpKTtcbiAgXHRcdFx0cmV0dXJuIHN0eWxlcztcbiAgXHRcdH0sXG4gIFx0XHRzdGFydENsYXNzTGlzdCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSxcbiAgXHRcdHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICBcdFx0Y3NzVGV4dCA9IHN0eWxlLmNzc1RleHQsXG4gIFx0XHRjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgXHRcdGNsYXNzUFQgPSBjYWNoZS5jbGFzc1BULFxuICBcdFx0aW5saW5lVG9SZW1vdmVBdEVuZCA9IHt9LFxuICBcdFx0ZGF0YSA9IHt0OnRhcmdldCwgcGx1Z2luOnBsdWdpbiwgcm12OmlubGluZVRvUmVtb3ZlQXRFbmQsIGI6c3RhcnRDbGFzc0xpc3QsIGU6KGVuZFZhbHVlLmNoYXJBdCgxKSAhPT0gXCI9XCIpID8gZW5kVmFsdWUgOiBzdGFydENsYXNzTGlzdC5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoPzpcXFxcc3xeKVwiICsgZW5kVmFsdWUuc3Vic3RyKDIpICsgXCIoPyFbXFxcXHctXSlcIiksIFwiXCIpICsgKChlbmRWYWx1ZS5jaGFyQXQoMCkgPT09IFwiK1wiKSA/IFwiIFwiICsgZW5kVmFsdWUuc3Vic3RyKDIpIDogXCJcIil9LFxuICBcdFx0Y2hhbmdpbmdWYXJzID0ge30sXG4gIFx0XHRzdGFydFZhcnMgPSBfZ2V0QWxsU3R5bGVzKHRhcmdldCksXG4gIFx0XHR0cmFuc2Zvcm1SZWxhdGVkID0gLyh0cmFuc2Zvcm18cGVyc3BlY3RpdmUpL2ksXG4gIFx0XHRlbmRWYXJzLCBwO1xuICBcdGlmIChjbGFzc1BUKSB7XG4gIFx0XHRjbGFzc1BULnIoMSwgY2xhc3NQVC5kKTtcbiAgXHRcdF9yZW1vdmVMaW5rZWRMaXN0SXRlbShjbGFzc1BULmQucGx1Z2luLCBjbGFzc1BULCBcIl9wdFwiKTtcbiAgXHR9XG4gIFx0dGFyZ2V0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGRhdGEuZSk7XG4gIFx0ZW5kVmFycyA9IF9nZXRBbGxTdHlsZXModGFyZ2V0LCB0cnVlKTtcbiAgXHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgc3RhcnRDbGFzc0xpc3QpO1xuICBcdGZvciAocCBpbiBlbmRWYXJzKSB7XG4gIFx0XHRpZiAoZW5kVmFyc1twXSAhPT0gc3RhcnRWYXJzW3BdICYmICF0cmFuc2Zvcm1SZWxhdGVkLnRlc3QocCkpIHtcbiAgXHRcdFx0Y2hhbmdpbmdWYXJzW3BdID0gZW5kVmFyc1twXTtcbiAgXHRcdFx0aWYgKCFzdHlsZVtwXSAmJiBzdHlsZVtwXSAhPT0gXCIwXCIpIHtcbiAgXHRcdFx0XHRpbmxpbmVUb1JlbW92ZUF0RW5kW3BdID0gMTtcbiAgXHRcdFx0fVxuICBcdFx0fVxuICBcdH1cbiAgXHRjYWNoZS5jbGFzc1BUID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBcImNsYXNzTmFtZVwiLCAwLCAwLCBfcmVuZGVyQ2xhc3NOYW1lLCBkYXRhLCAwLCAtMTEpO1xuICBcdGlmIChzdHlsZS5jc3NUZXh0ICE9PSBjc3NUZXh0KSB7IC8vb25seSBhcHBseSBpZiB0aGluZ3MgY2hhbmdlLiBPdGhlcndpc2UsIGluIGNhc2VzIGxpa2UgYSBiYWNrZ3JvdW5kLWltYWdlIHRoYXQncyBwdWxsZWQgZHluYW1pY2FsbHksIGl0IGNvdWxkIGNhdXNlIGEgcmVmcmVzaC4gU2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzIwMzY4LXBvc3NpYmxlLWdzYXAtYnVnLXN3aXRjaGluZy1jbGFzc25hbWVzLWluLWNocm9tZS8uXG4gIFx0XHRzdHlsZS5jc3NUZXh0ID0gY3NzVGV4dDsgLy93ZSByZWNvcmRlZCBjc3NUZXh0IGJlZm9yZSB3ZSBzd2FwcGVkIGNsYXNzZXMgYW5kIHJhbiBfZ2V0QWxsU3R5bGVzKCkgYmVjYXVzZSBpbiBjYXNlcyB3aGVuIGEgY2xhc3NOYW1lIHR3ZWVuIGlzIG92ZXJ3cml0dGVuLCB3ZSByZW1vdmUgYWxsIHRoZSByZWxhdGVkIHR3ZWVuaW5nIHByb3BlcnRpZXMgZnJvbSB0aGF0IGNsYXNzIGNoYW5nZSAob3RoZXJ3aXNlIGNsYXNzLXNwZWNpZmljIHN0dWZmIGNhbid0IG92ZXJyaWRlIHByb3BlcnRpZXMgd2UndmUgZGlyZWN0bHkgc2V0IG9uIHRoZSB0YXJnZXQncyBzdHlsZSBvYmplY3QgZHVlIHRvIHNwZWNpZmljaXR5KS5cbiAgXHR9XG4gIFx0X3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdHJ1ZSk7IC8vdG8gY2xlYXIgdGhlIGNhY2hpbmcgb2YgdHJhbnNmb3Jtc1xuICBcdGRhdGEuY3NzID0gbmV3IGdzYXAucGx1Z2lucy5jc3MoKTtcbiAgXHRkYXRhLmNzcy5pbml0KHRhcmdldCwgY2hhbmdpbmdWYXJzLCB0d2Vlbik7XG4gIFx0cGx1Z2luLl9wcm9wcy5wdXNoKC4uLmRhdGEuY3NzLl9wcm9wcyk7XG4gIFx0cmV0dXJuIDE7XG4gIH1cbiAgKi9cblxufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUUkFOU0ZPUk1TXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5faWRlbnRpdHkyRE1hdHJpeCA9IFsxLCAwLCAwLCAxLCAwLCAwXSxcbiAgICBfcm90YXRpb25hbFByb3BlcnRpZXMgPSB7fSxcbiAgICBfaXNOdWxsVHJhbnNmb3JtID0gZnVuY3Rpb24gX2lzTnVsbFRyYW5zZm9ybSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IFwibWF0cml4KDEsIDAsIDAsIDEsIDAsIDApXCIgfHwgdmFsdWUgPT09IFwibm9uZVwiIHx8ICF2YWx1ZTtcbn0sXG4gICAgX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSA9IGZ1bmN0aW9uIF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KSB7XG4gIHZhciBtYXRyaXhTdHJpbmcgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKTtcblxuICByZXR1cm4gX2lzTnVsbFRyYW5zZm9ybShtYXRyaXhTdHJpbmcpID8gX2lkZW50aXR5MkRNYXRyaXggOiBtYXRyaXhTdHJpbmcuc3Vic3RyKDcpLm1hdGNoKF9udW1FeHApLm1hcChfcm91bmQpO1xufSxcbiAgICBfZ2V0TWF0cml4ID0gZnVuY3Rpb24gX2dldE1hdHJpeCh0YXJnZXQsIGZvcmNlMkQpIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwIHx8IF9nZXRDYWNoZSh0YXJnZXQpLFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBtYXRyaXggPSBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5KHRhcmdldCksXG4gICAgICBwYXJlbnQsXG4gICAgICBuZXh0U2libGluZyxcbiAgICAgIHRlbXAsXG4gICAgICBhZGRlZFRvRE9NO1xuXG4gIGlmIChjYWNoZS5zdmcgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKSkge1xuICAgIHRlbXAgPSB0YXJnZXQudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKS5tYXRyaXg7IC8vZW5zdXJlcyB0aGF0IGV2ZW4gY29tcGxleCB2YWx1ZXMgbGlrZSBcInRyYW5zbGF0ZSg1MCw2MCkgcm90YXRlKDEzNSwwLDApXCIgYXJlIHBhcnNlZCBiZWNhdXNlIGl0IG1hc2hlcyBpdCBpbnRvIGEgbWF0cml4LlxuXG4gICAgbWF0cml4ID0gW3RlbXAuYSwgdGVtcC5iLCB0ZW1wLmMsIHRlbXAuZCwgdGVtcC5lLCB0ZW1wLmZdO1xuICAgIHJldHVybiBtYXRyaXguam9pbihcIixcIikgPT09IFwiMSwwLDAsMSwwLDBcIiA/IF9pZGVudGl0eTJETWF0cml4IDogbWF0cml4O1xuICB9IGVsc2UgaWYgKG1hdHJpeCA9PT0gX2lkZW50aXR5MkRNYXRyaXggJiYgIXRhcmdldC5vZmZzZXRQYXJlbnQgJiYgdGFyZ2V0ICE9PSBfZG9jRWxlbWVudCAmJiAhY2FjaGUuc3ZnKSB7XG4gICAgLy9ub3RlOiBpZiBvZmZzZXRQYXJlbnQgaXMgbnVsbCwgdGhhdCBtZWFucyB0aGUgZWxlbWVudCBpc24ndCBpbiB0aGUgbm9ybWFsIGRvY3VtZW50IGZsb3csIGxpa2UgaWYgaXQgaGFzIGRpc3BsYXk6bm9uZSBvciBvbmUgb2YgaXRzIGFuY2VzdG9ycyBoYXMgZGlzcGxheTpub25lKS4gRmlyZWZveCByZXR1cm5zIG51bGwgZm9yIGdldENvbXB1dGVkU3R5bGUoKSBpZiB0aGUgZWxlbWVudCBpcyBpbiBhbiBpZnJhbWUgdGhhdCBoYXMgZGlzcGxheTpub25lLiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NDgzOTdcbiAgICAvL2Jyb3dzZXJzIGRvbid0IHJlcG9ydCB0cmFuc2Zvcm1zIGFjY3VyYXRlbHkgdW5sZXNzIHRoZSBlbGVtZW50IGlzIGluIHRoZSBET00gYW5kIGhhcyBhIGRpc3BsYXkgdmFsdWUgdGhhdCdzIG5vdCBcIm5vbmVcIi4gRmlyZWZveCBhbmQgTWljcm9zb2Z0IGJyb3dzZXJzIGhhdmUgYSBwYXJ0aWFsIGJ1ZyB3aGVyZSB0aGV5J2xsIHJlcG9ydCB0cmFuc2Zvcm1zIGV2ZW4gaWYgZGlzcGxheTpub25lIEJVVCBub3QgYW55IHBlcmNlbnRhZ2UtYmFzZWQgdmFsdWVzIGxpa2UgdHJhbnNsYXRlKC01MCUsIDhweCkgd2lsbCBiZSByZXBvcnRlZCBhcyBpZiBpdCdzIHRyYW5zbGF0ZSgwLCA4cHgpLlxuICAgIHRlbXAgPSBzdHlsZS5kaXNwbGF5O1xuICAgIHN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgcGFyZW50ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG5cbiAgICBpZiAoIXBhcmVudCB8fCAhdGFyZ2V0Lm9mZnNldFBhcmVudCkge1xuICAgICAgLy8gbm90ZTogaW4gMy4zLjAgd2Ugc3dpdGNoZWQgdGFyZ2V0Lm9mZnNldFBhcmVudCB0byBfZG9jLmJvZHkuY29udGFpbnModGFyZ2V0KSB0byBhdm9pZCBbc29tZXRpbWVzIHVubmVjZXNzYXJ5XSBNdXRhdGlvbk9ic2VydmVyIGNhbGxzIGJ1dCB0aGF0IHdhc24ndCBhZGVxdWF0ZSBiZWNhdXNlIHRoZXJlIGFyZSBlZGdlIGNhc2VzIHdoZXJlIG5lc3RlZCBwb3NpdGlvbjogZml4ZWQgZWxlbWVudHMgbmVlZCB0byBnZXQgcmVwYXJlbnRlZCB0byBhY2N1cmF0ZWx5IHNlbnNlIHRyYW5zZm9ybXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzM4OCBhbmQgaHR0cHM6Ly9naXRodWIuY29tL2dyZWVuc29jay9HU0FQL2lzc3Vlcy8zNzVcbiAgICAgIGFkZGVkVG9ET00gPSAxOyAvL2ZsYWdcblxuICAgICAgbmV4dFNpYmxpbmcgPSB0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nO1xuXG4gICAgICBfZG9jRWxlbWVudC5hcHBlbmRDaGlsZCh0YXJnZXQpOyAvL3dlIG11c3QgYWRkIGl0IHRvIHRoZSBET00gaW4gb3JkZXIgdG8gZ2V0IHZhbHVlcyBwcm9wZXJseVxuXG4gICAgfVxuXG4gICAgbWF0cml4ID0gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpO1xuICAgIHRlbXAgPyBzdHlsZS5kaXNwbGF5ID0gdGVtcCA6IF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIFwiZGlzcGxheVwiKTtcblxuICAgIGlmIChhZGRlZFRvRE9NKSB7XG4gICAgICBuZXh0U2libGluZyA/IHBhcmVudC5pbnNlcnRCZWZvcmUodGFyZ2V0LCBuZXh0U2libGluZykgOiBwYXJlbnQgPyBwYXJlbnQuYXBwZW5kQ2hpbGQodGFyZ2V0KSA6IF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHRhcmdldCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZvcmNlMkQgJiYgbWF0cml4Lmxlbmd0aCA+IDYgPyBbbWF0cml4WzBdLCBtYXRyaXhbMV0sIG1hdHJpeFs0XSwgbWF0cml4WzVdLCBtYXRyaXhbMTJdLCBtYXRyaXhbMTNdXSA6IG1hdHJpeDtcbn0sXG4gICAgX2FwcGx5U1ZHT3JpZ2luID0gZnVuY3Rpb24gX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgb3JpZ2luLCBvcmlnaW5Jc0Fic29sdXRlLCBzbW9vdGgsIG1hdHJpeEFycmF5LCBwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICBtYXRyaXggPSBtYXRyaXhBcnJheSB8fCBfZ2V0TWF0cml4KHRhcmdldCwgdHJ1ZSksXG4gICAgICB4T3JpZ2luT2xkID0gY2FjaGUueE9yaWdpbiB8fCAwLFxuICAgICAgeU9yaWdpbk9sZCA9IGNhY2hlLnlPcmlnaW4gfHwgMCxcbiAgICAgIHhPZmZzZXRPbGQgPSBjYWNoZS54T2Zmc2V0IHx8IDAsXG4gICAgICB5T2Zmc2V0T2xkID0gY2FjaGUueU9mZnNldCB8fCAwLFxuICAgICAgYSA9IG1hdHJpeFswXSxcbiAgICAgIGIgPSBtYXRyaXhbMV0sXG4gICAgICBjID0gbWF0cml4WzJdLFxuICAgICAgZCA9IG1hdHJpeFszXSxcbiAgICAgIHR4ID0gbWF0cml4WzRdLFxuICAgICAgdHkgPSBtYXRyaXhbNV0sXG4gICAgICBvcmlnaW5TcGxpdCA9IG9yaWdpbi5zcGxpdChcIiBcIiksXG4gICAgICB4T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW5TcGxpdFswXSkgfHwgMCxcbiAgICAgIHlPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpblNwbGl0WzFdKSB8fCAwLFxuICAgICAgYm91bmRzLFxuICAgICAgZGV0ZXJtaW5hbnQsXG4gICAgICB4LFxuICAgICAgeTtcblxuICBpZiAoIW9yaWdpbklzQWJzb2x1dGUpIHtcbiAgICBib3VuZHMgPSBfZ2V0QkJveCh0YXJnZXQpO1xuICAgIHhPcmlnaW4gPSBib3VuZHMueCArICh+b3JpZ2luU3BsaXRbMF0uaW5kZXhPZihcIiVcIikgPyB4T3JpZ2luIC8gMTAwICogYm91bmRzLndpZHRoIDogeE9yaWdpbik7XG4gICAgeU9yaWdpbiA9IGJvdW5kcy55ICsgKH4ob3JpZ2luU3BsaXRbMV0gfHwgb3JpZ2luU3BsaXRbMF0pLmluZGV4T2YoXCIlXCIpID8geU9yaWdpbiAvIDEwMCAqIGJvdW5kcy5oZWlnaHQgOiB5T3JpZ2luKTsgLy8gaWYgKCEoXCJ4T3JpZ2luXCIgaW4gY2FjaGUpICYmICh4T3JpZ2luIHx8IHlPcmlnaW4pKSB7IC8vIGFkZGVkIGluIDMuMTIuMywgcmV2ZXJ0ZWQgaW4gMy4xMi40OyByZXF1aXJlcyBtb3JlIGV4cGxvcmF0aW9uXG4gICAgLy8gXHR4T3JpZ2luIC09IGJvdW5kcy54O1xuICAgIC8vIFx0eU9yaWdpbiAtPSBib3VuZHMueTtcbiAgICAvLyB9XG4gIH0gZWxzZSBpZiAobWF0cml4ICE9PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAoZGV0ZXJtaW5hbnQgPSBhICogZCAtIGIgKiBjKSkge1xuICAgIC8vaWYgaXQncyB6ZXJvIChsaWtlIGlmIHNjYWxlWCBhbmQgc2NhbGVZIGFyZSB6ZXJvKSwgc2tpcCBpdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBkaXZpZGluZyBieSB6ZXJvLlxuICAgIHggPSB4T3JpZ2luICogKGQgLyBkZXRlcm1pbmFudCkgKyB5T3JpZ2luICogKC1jIC8gZGV0ZXJtaW5hbnQpICsgKGMgKiB0eSAtIGQgKiB0eCkgLyBkZXRlcm1pbmFudDtcbiAgICB5ID0geE9yaWdpbiAqICgtYiAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoYSAvIGRldGVybWluYW50KSAtIChhICogdHkgLSBiICogdHgpIC8gZGV0ZXJtaW5hbnQ7XG4gICAgeE9yaWdpbiA9IHg7XG4gICAgeU9yaWdpbiA9IHk7IC8vIHRoZW9yeTogd2Ugb25seSBoYWQgdG8gZG8gdGhpcyBmb3Igc21vb3RoaW5nIGFuZCBpdCBhc3N1bWVzIHRoYXQgdGhlIHByZXZpb3VzIG9uZSB3YXMgbm90IG9yaWdpbklzQWJzb2x1dGUuXG4gIH1cblxuICBpZiAoc21vb3RoIHx8IHNtb290aCAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoKSB7XG4gICAgdHggPSB4T3JpZ2luIC0geE9yaWdpbk9sZDtcbiAgICB0eSA9IHlPcmlnaW4gLSB5T3JpZ2luT2xkO1xuICAgIGNhY2hlLnhPZmZzZXQgPSB4T2Zmc2V0T2xkICsgKHR4ICogYSArIHR5ICogYykgLSB0eDtcbiAgICBjYWNoZS55T2Zmc2V0ID0geU9mZnNldE9sZCArICh0eCAqIGIgKyB0eSAqIGQpIC0gdHk7XG4gIH0gZWxzZSB7XG4gICAgY2FjaGUueE9mZnNldCA9IGNhY2hlLnlPZmZzZXQgPSAwO1xuICB9XG5cbiAgY2FjaGUueE9yaWdpbiA9IHhPcmlnaW47XG4gIGNhY2hlLnlPcmlnaW4gPSB5T3JpZ2luO1xuICBjYWNoZS5zbW9vdGggPSAhIXNtb290aDtcbiAgY2FjaGUub3JpZ2luID0gb3JpZ2luO1xuICBjYWNoZS5vcmlnaW5Jc0Fic29sdXRlID0gISFvcmlnaW5Jc0Fic29sdXRlO1xuICB0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gXCIwcHggMHB4XCI7IC8vb3RoZXJ3aXNlLCBpZiBzb21lb25lIHNldHMgIGFuIG9yaWdpbiB2aWEgQ1NTLCBpdCB3aWxsIGxpa2VseSBpbnRlcmZlcmUgd2l0aCB0aGUgU1ZHIHRyYW5zZm9ybSBhdHRyaWJ1dGUgb25lcyAoYmVjYXVzZSByZW1lbWJlciwgd2UncmUgYmFraW5nIHRoZSBvcmlnaW4gaW50byB0aGUgbWF0cml4KCkgdmFsdWUpLlxuXG4gIGlmIChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ4T3JpZ2luXCIsIHhPcmlnaW5PbGQsIHhPcmlnaW4pO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInlPcmlnaW5cIiwgeU9yaWdpbk9sZCwgeU9yaWdpbik7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieE9mZnNldFwiLCB4T2Zmc2V0T2xkLCBjYWNoZS54T2Zmc2V0KTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ5T2Zmc2V0XCIsIHlPZmZzZXRPbGQsIGNhY2hlLnlPZmZzZXQpO1xuICB9XG5cbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB4T3JpZ2luICsgXCIgXCIgKyB5T3JpZ2luKTtcbn0sXG4gICAgX3BhcnNlVHJhbnNmb3JtID0gZnVuY3Rpb24gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdW5jYWNoZSkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgbmV3IEdTQ2FjaGUodGFyZ2V0KTtcblxuICBpZiAoXCJ4XCIgaW4gY2FjaGUgJiYgIXVuY2FjaGUgJiYgIWNhY2hlLnVuY2FjaGUpIHtcbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cblxuICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBpbnZlcnRlZFNjYWxlWCA9IGNhY2hlLnNjYWxlWCA8IDAsXG4gICAgICBweCA9IFwicHhcIixcbiAgICAgIGRlZyA9IFwiZGVnXCIsXG4gICAgICBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgICAgIG9yaWdpbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApIHx8IFwiMFwiLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB6LFxuICAgICAgc2NhbGVYLFxuICAgICAgc2NhbGVZLFxuICAgICAgcm90YXRpb24sXG4gICAgICByb3RhdGlvblgsXG4gICAgICByb3RhdGlvblksXG4gICAgICBza2V3WCxcbiAgICAgIHNrZXdZLFxuICAgICAgcGVyc3BlY3RpdmUsXG4gICAgICB4T3JpZ2luLFxuICAgICAgeU9yaWdpbixcbiAgICAgIG1hdHJpeCxcbiAgICAgIGFuZ2xlLFxuICAgICAgY29zLFxuICAgICAgc2luLFxuICAgICAgYSxcbiAgICAgIGIsXG4gICAgICBjLFxuICAgICAgZCxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHQxLFxuICAgICAgdDIsXG4gICAgICB0MyxcbiAgICAgIGExMyxcbiAgICAgIGEyMyxcbiAgICAgIGEzMyxcbiAgICAgIGE0MixcbiAgICAgIGE0MyxcbiAgICAgIGEzMjtcbiAgeCA9IHkgPSB6ID0gcm90YXRpb24gPSByb3RhdGlvblggPSByb3RhdGlvblkgPSBza2V3WCA9IHNrZXdZID0gcGVyc3BlY3RpdmUgPSAwO1xuICBzY2FsZVggPSBzY2FsZVkgPSAxO1xuICBjYWNoZS5zdmcgPSAhISh0YXJnZXQuZ2V0Q1RNICYmIF9pc1NWRyh0YXJnZXQpKTtcblxuICBpZiAoY3MudHJhbnNsYXRlKSB7XG4gICAgLy8gYWNjb21tb2RhdGUgaW5kZXBlbmRlbnQgdHJhbnNmb3JtcyBieSBjb21iaW5pbmcgdGhlbSBpbnRvIG5vcm1hbCBvbmVzLlxuICAgIGlmIChjcy50cmFuc2xhdGUgIT09IFwibm9uZVwiIHx8IGNzLnNjYWxlICE9PSBcIm5vbmVcIiB8fCBjcy5yb3RhdGUgIT09IFwibm9uZVwiKSB7XG4gICAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSAoY3MudHJhbnNsYXRlICE9PSBcIm5vbmVcIiA/IFwidHJhbnNsYXRlM2QoXCIgKyAoY3MudHJhbnNsYXRlICsgXCIgMCAwXCIpLnNwbGl0KFwiIFwiKS5zbGljZSgwLCAzKS5qb2luKFwiLCBcIikgKyBcIikgXCIgOiBcIlwiKSArIChjcy5yb3RhdGUgIT09IFwibm9uZVwiID8gXCJyb3RhdGUoXCIgKyBjcy5yb3RhdGUgKyBcIikgXCIgOiBcIlwiKSArIChjcy5zY2FsZSAhPT0gXCJub25lXCIgPyBcInNjYWxlKFwiICsgY3Muc2NhbGUuc3BsaXQoXCIgXCIpLmpvaW4oXCIsXCIpICsgXCIpIFwiIDogXCJcIikgKyAoY3NbX3RyYW5zZm9ybVByb3BdICE9PSBcIm5vbmVcIiA/IGNzW190cmFuc2Zvcm1Qcm9wXSA6IFwiXCIpO1xuICAgIH1cblxuICAgIHN0eWxlLnNjYWxlID0gc3R5bGUucm90YXRlID0gc3R5bGUudHJhbnNsYXRlID0gXCJub25lXCI7XG4gIH1cblxuICBtYXRyaXggPSBfZ2V0TWF0cml4KHRhcmdldCwgY2FjaGUuc3ZnKTtcblxuICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgaWYgKGNhY2hlLnVuY2FjaGUpIHtcbiAgICAgIC8vIGlmIGNhY2hlLnVuY2FjaGUgaXMgdHJ1ZSAoYW5kIG1heWJlIGlmIG9yaWdpbiBpcyAwLDApLCB3ZSBuZWVkIHRvIHNldCBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IChjYWNoZS54T3JpZ2luIC0gYmJveC54KSArIFwicHggXCIgKyAoY2FjaGUueU9yaWdpbiAtIGJib3gueSkgKyBcInB4XCIuIFByZXZpb3VzbHkgd2UgbGV0IHRoZSBkYXRhLXN2Zy1vcmlnaW4gc3RheSBpbnN0ZWFkLCBidXQgd2hlbiBpbnRyb2R1Y2luZyByZXZlcnQoKSwgaXQgY29tcGxpY2F0ZWQgdGhpbmdzLlxuICAgICAgdDIgPSB0YXJnZXQuZ2V0QkJveCgpO1xuICAgICAgb3JpZ2luID0gY2FjaGUueE9yaWdpbiAtIHQyLnggKyBcInB4IFwiICsgKGNhY2hlLnlPcmlnaW4gLSB0Mi55KSArIFwicHhcIjtcbiAgICAgIHQxID0gXCJcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgdDEgPSAhdW5jYWNoZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIpOyAvLyAgUmVtZW1iZXIsIHRvIHdvcmsgYXJvdW5kIGJyb3dzZXIgaW5jb25zaXN0ZW5jaWVzIHdlIGFsd2F5cyBmb3JjZSBTVkcgZWxlbWVudHMnIHRyYW5zZm9ybU9yaWdpbiB0byAwLDAgYW5kIG9mZnNldCB0aGUgdHJhbnNsYXRpb24gYWNjb3JkaW5nbHkuXG4gICAgfVxuXG4gICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgdDEgfHwgb3JpZ2luLCAhIXQxIHx8IGNhY2hlLm9yaWdpbklzQWJzb2x1dGUsIGNhY2hlLnNtb290aCAhPT0gZmFsc2UsIG1hdHJpeCk7XG4gIH1cblxuICB4T3JpZ2luID0gY2FjaGUueE9yaWdpbiB8fCAwO1xuICB5T3JpZ2luID0gY2FjaGUueU9yaWdpbiB8fCAwO1xuXG4gIGlmIChtYXRyaXggIT09IF9pZGVudGl0eTJETWF0cml4KSB7XG4gICAgYSA9IG1hdHJpeFswXTsgLy9hMTFcblxuICAgIGIgPSBtYXRyaXhbMV07IC8vYTIxXG5cbiAgICBjID0gbWF0cml4WzJdOyAvL2EzMVxuXG4gICAgZCA9IG1hdHJpeFszXTsgLy9hNDFcblxuICAgIHggPSBhMTIgPSBtYXRyaXhbNF07XG4gICAgeSA9IGEyMiA9IG1hdHJpeFs1XTsgLy8yRCBtYXRyaXhcblxuICAgIGlmIChtYXRyaXgubGVuZ3RoID09PSA2KSB7XG4gICAgICBzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG4gICAgICBzY2FsZVkgPSBNYXRoLnNxcnQoZCAqIGQgKyBjICogYyk7XG4gICAgICByb3RhdGlvbiA9IGEgfHwgYiA/IF9hdGFuMihiLCBhKSAqIF9SQUQyREVHIDogMDsgLy9ub3RlOiBpZiBzY2FsZVggaXMgMCwgd2UgY2Fubm90IGFjY3VyYXRlbHkgbWVhc3VyZSByb3RhdGlvbi4gU2FtZSBmb3Igc2tld1ggd2l0aCBhIHNjYWxlWSBvZiAwLiBUaGVyZWZvcmUsIHdlIGRlZmF1bHQgdG8gdGhlIHByZXZpb3VzbHkgcmVjb3JkZWQgdmFsdWUgKG9yIHplcm8gaWYgdGhhdCBkb2Vzbid0IGV4aXN0KS5cblxuICAgICAgc2tld1ggPSBjIHx8IGQgPyBfYXRhbjIoYywgZCkgKiBfUkFEMkRFRyArIHJvdGF0aW9uIDogMDtcbiAgICAgIHNrZXdYICYmIChzY2FsZVkgKj0gTWF0aC5hYnMoTWF0aC5jb3Moc2tld1ggKiBfREVHMlJBRCkpKTtcblxuICAgICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgICB4IC09IHhPcmlnaW4gLSAoeE9yaWdpbiAqIGEgKyB5T3JpZ2luICogYyk7XG4gICAgICAgIHkgLT0geU9yaWdpbiAtICh4T3JpZ2luICogYiArIHlPcmlnaW4gKiBkKTtcbiAgICAgIH0gLy8zRCBtYXRyaXhcblxuICAgIH0gZWxzZSB7XG4gICAgICBhMzIgPSBtYXRyaXhbNl07XG4gICAgICBhNDIgPSBtYXRyaXhbN107XG4gICAgICBhMTMgPSBtYXRyaXhbOF07XG4gICAgICBhMjMgPSBtYXRyaXhbOV07XG4gICAgICBhMzMgPSBtYXRyaXhbMTBdO1xuICAgICAgYTQzID0gbWF0cml4WzExXTtcbiAgICAgIHggPSBtYXRyaXhbMTJdO1xuICAgICAgeSA9IG1hdHJpeFsxM107XG4gICAgICB6ID0gbWF0cml4WzE0XTtcbiAgICAgIGFuZ2xlID0gX2F0YW4yKGEzMiwgYTMzKTtcbiAgICAgIHJvdGF0aW9uWCA9IGFuZ2xlICogX1JBRDJERUc7IC8vcm90YXRpb25YXG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuICAgICAgICB0MSA9IGExMiAqIGNvcyArIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBhMjIgKiBjb3MgKyBhMjMgKiBzaW47XG4gICAgICAgIHQzID0gYTMyICogY29zICsgYTMzICogc2luO1xuICAgICAgICBhMTMgPSBhMTIgKiAtc2luICsgYTEzICogY29zO1xuICAgICAgICBhMjMgPSBhMjIgKiAtc2luICsgYTIzICogY29zO1xuICAgICAgICBhMzMgPSBhMzIgKiAtc2luICsgYTMzICogY29zO1xuICAgICAgICBhNDMgPSBhNDIgKiAtc2luICsgYTQzICogY29zO1xuICAgICAgICBhMTIgPSB0MTtcbiAgICAgICAgYTIyID0gdDI7XG4gICAgICAgIGEzMiA9IHQzO1xuICAgICAgfSAvL3JvdGF0aW9uWVxuXG5cbiAgICAgIGFuZ2xlID0gX2F0YW4yKC1jLCBhMzMpO1xuICAgICAgcm90YXRpb25ZID0gYW5nbGUgKiBfUkFEMkRFRztcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKC1hbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKC1hbmdsZSk7XG4gICAgICAgIHQxID0gYSAqIGNvcyAtIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBiICogY29zIC0gYTIzICogc2luO1xuICAgICAgICB0MyA9IGMgKiBjb3MgLSBhMzMgKiBzaW47XG4gICAgICAgIGE0MyA9IGQgKiBzaW4gKyBhNDMgKiBjb3M7XG4gICAgICAgIGEgPSB0MTtcbiAgICAgICAgYiA9IHQyO1xuICAgICAgICBjID0gdDM7XG4gICAgICB9IC8vcm90YXRpb25aXG5cblxuICAgICAgYW5nbGUgPSBfYXRhbjIoYiwgYSk7XG4gICAgICByb3RhdGlvbiA9IGFuZ2xlICogX1JBRDJERUc7XG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgdDEgPSBhICogY29zICsgYiAqIHNpbjtcbiAgICAgICAgdDIgPSBhMTIgKiBjb3MgKyBhMjIgKiBzaW47XG4gICAgICAgIGIgPSBiICogY29zIC0gYSAqIHNpbjtcbiAgICAgICAgYTIyID0gYTIyICogY29zIC0gYTEyICogc2luO1xuICAgICAgICBhID0gdDE7XG4gICAgICAgIGExMiA9IHQyO1xuICAgICAgfVxuXG4gICAgICBpZiAocm90YXRpb25YICYmIE1hdGguYWJzKHJvdGF0aW9uWCkgKyBNYXRoLmFicyhyb3RhdGlvbikgPiAzNTkuOSkge1xuICAgICAgICAvL3doZW4gcm90YXRpb25ZIGlzIHNldCwgaXQgd2lsbCBvZnRlbiBiZSBwYXJzZWQgYXMgMTgwIGRlZ3JlZXMgZGlmZmVyZW50IHRoYW4gaXQgc2hvdWxkIGJlLCBhbmQgcm90YXRpb25YIGFuZCByb3RhdGlvbiBib3RoIGJlaW5nIDE4MCAoaXQgbG9va3MgdGhlIHNhbWUpLCBzbyB3ZSBhZGp1c3QgZm9yIHRoYXQgaGVyZS5cbiAgICAgICAgcm90YXRpb25YID0gcm90YXRpb24gPSAwO1xuICAgICAgICByb3RhdGlvblkgPSAxODAgLSByb3RhdGlvblk7XG4gICAgICB9XG5cbiAgICAgIHNjYWxlWCA9IF9yb3VuZChNYXRoLnNxcnQoYSAqIGEgKyBiICogYiArIGMgKiBjKSk7XG4gICAgICBzY2FsZVkgPSBfcm91bmQoTWF0aC5zcXJ0KGEyMiAqIGEyMiArIGEzMiAqIGEzMikpO1xuICAgICAgYW5nbGUgPSBfYXRhbjIoYTEyLCBhMjIpO1xuICAgICAgc2tld1ggPSBNYXRoLmFicyhhbmdsZSkgPiAwLjAwMDIgPyBhbmdsZSAqIF9SQUQyREVHIDogMDtcbiAgICAgIHBlcnNwZWN0aXZlID0gYTQzID8gMSAvIChhNDMgPCAwID8gLWE0MyA6IGE0MykgOiAwO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIC8vc2Vuc2UgaWYgdGhlcmUgYXJlIENTUyB0cmFuc2Zvcm1zIGFwcGxpZWQgb24gYW4gU1ZHIGVsZW1lbnQgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHdoZW4gcmVuZGVyaW5nLiBUaGUgdHJhbnNmb3JtIGF0dHJpYnV0ZSBpcyBtb3JlIHJlbGlhYmxlIGNyb3NzLWJyb3dzZXIsIGJ1dCB3ZSBjYW4ndCBqdXN0IHJlbW92ZSB0aGUgQ1NTIG9uZXMgYmVjYXVzZSB0aGV5IG1heSBiZSBhcHBsaWVkIGluIGEgQ1NTIHJ1bGUgc29tZXdoZXJlIChub3QganVzdCBpbmxpbmUpLlxuICAgICAgdDEgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuICAgICAgY2FjaGUuZm9yY2VDU1MgPSB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpIHx8ICFfaXNOdWxsVHJhbnNmb3JtKF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApKTtcbiAgICAgIHQxICYmIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdDEpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChNYXRoLmFicyhza2V3WCkgPiA5MCAmJiBNYXRoLmFicyhza2V3WCkgPCAyNzApIHtcbiAgICBpZiAoaW52ZXJ0ZWRTY2FsZVgpIHtcbiAgICAgIHNjYWxlWCAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHJvdGF0aW9uIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgICAgcm90YXRpb24gKz0gcm90YXRpb24gPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjYWxlWSAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHNrZXdYIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgIH1cbiAgfVxuXG4gIHVuY2FjaGUgPSB1bmNhY2hlIHx8IGNhY2hlLnVuY2FjaGU7XG4gIGNhY2hlLnggPSB4IC0gKChjYWNoZS54UGVyY2VudCA9IHggJiYgKCF1bmNhY2hlICYmIGNhY2hlLnhQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRXaWR0aCAvIDIpID09PSBNYXRoLnJvdW5kKC14KSA/IC01MCA6IDApKSkgPyB0YXJnZXQub2Zmc2V0V2lkdGggKiBjYWNoZS54UGVyY2VudCAvIDEwMCA6IDApICsgcHg7XG4gIGNhY2hlLnkgPSB5IC0gKChjYWNoZS55UGVyY2VudCA9IHkgJiYgKCF1bmNhY2hlICYmIGNhY2hlLnlQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRIZWlnaHQgLyAyKSA9PT0gTWF0aC5yb3VuZCgteSkgPyAtNTAgOiAwKSkpID8gdGFyZ2V0Lm9mZnNldEhlaWdodCAqIGNhY2hlLnlQZXJjZW50IC8gMTAwIDogMCkgKyBweDtcbiAgY2FjaGUueiA9IHogKyBweDtcbiAgY2FjaGUuc2NhbGVYID0gX3JvdW5kKHNjYWxlWCk7XG4gIGNhY2hlLnNjYWxlWSA9IF9yb3VuZChzY2FsZVkpO1xuICBjYWNoZS5yb3RhdGlvbiA9IF9yb3VuZChyb3RhdGlvbikgKyBkZWc7XG4gIGNhY2hlLnJvdGF0aW9uWCA9IF9yb3VuZChyb3RhdGlvblgpICsgZGVnO1xuICBjYWNoZS5yb3RhdGlvblkgPSBfcm91bmQocm90YXRpb25ZKSArIGRlZztcbiAgY2FjaGUuc2tld1ggPSBza2V3WCArIGRlZztcbiAgY2FjaGUuc2tld1kgPSBza2V3WSArIGRlZztcbiAgY2FjaGUudHJhbnNmb3JtUGVyc3BlY3RpdmUgPSBwZXJzcGVjdGl2ZSArIHB4O1xuXG4gIGlmIChjYWNoZS56T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW4uc3BsaXQoXCIgXCIpWzJdKSB8fCAhdW5jYWNoZSAmJiBjYWNoZS56T3JpZ2luIHx8IDApIHtcbiAgICBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0gPSBfZmlyc3RUd29Pbmx5KG9yaWdpbik7XG4gIH1cblxuICBjYWNoZS54T2Zmc2V0ID0gY2FjaGUueU9mZnNldCA9IDA7XG4gIGNhY2hlLmZvcmNlM0QgPSBfY29uZmlnLmZvcmNlM0Q7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybSA9IGNhY2hlLnN2ZyA/IF9yZW5kZXJTVkdUcmFuc2Zvcm1zIDogX3N1cHBvcnRzM0QgPyBfcmVuZGVyQ1NTVHJhbnNmb3JtcyA6IF9yZW5kZXJOb24zRFRyYW5zZm9ybXM7XG4gIGNhY2hlLnVuY2FjaGUgPSAwO1xuICByZXR1cm4gY2FjaGU7XG59LFxuICAgIF9maXJzdFR3b09ubHkgPSBmdW5jdGlvbiBfZmlyc3RUd29Pbmx5KHZhbHVlKSB7XG4gIHJldHVybiAodmFsdWUgPSB2YWx1ZS5zcGxpdChcIiBcIikpWzBdICsgXCIgXCIgKyB2YWx1ZVsxXTtcbn0sXG4gICAgLy9mb3IgaGFuZGxpbmcgdHJhbnNmb3JtT3JpZ2luIHZhbHVlcywgc3RyaXBwaW5nIG91dCB0aGUgM3JkIGRpbWVuc2lvblxuX2FkZFB4VHJhbnNsYXRlID0gZnVuY3Rpb24gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgc3RhcnQsIHZhbHVlKSB7XG4gIHZhciB1bml0ID0gZ2V0VW5pdChzdGFydCk7XG4gIHJldHVybiBfcm91bmQocGFyc2VGbG9hdChzdGFydCkgKyBwYXJzZUZsb2F0KF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ4XCIsIHZhbHVlICsgXCJweFwiLCB1bml0KSkpICsgdW5pdDtcbn0sXG4gICAgX3JlbmRlck5vbjNEVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJOb24zRFRyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIGNhY2hlLnogPSBcIjBweFwiO1xuICBjYWNoZS5yb3RhdGlvblkgPSBjYWNoZS5yb3RhdGlvblggPSBcIjBkZWdcIjtcbiAgY2FjaGUuZm9yY2UzRCA9IDA7XG5cbiAgX3JlbmRlckNTU1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3plcm9EZWcgPSBcIjBkZWdcIixcbiAgICBfemVyb1B4ID0gXCIwcHhcIixcbiAgICBfZW5kUGFyZW50aGVzaXMgPSBcIikgXCIsXG4gICAgX3JlbmRlckNTU1RyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgdmFyIF9yZWYgPSBjYWNoZSB8fCB0aGlzLFxuICAgICAgeFBlcmNlbnQgPSBfcmVmLnhQZXJjZW50LFxuICAgICAgeVBlcmNlbnQgPSBfcmVmLnlQZXJjZW50LFxuICAgICAgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnksXG4gICAgICB6ID0gX3JlZi56LFxuICAgICAgcm90YXRpb24gPSBfcmVmLnJvdGF0aW9uLFxuICAgICAgcm90YXRpb25ZID0gX3JlZi5yb3RhdGlvblksXG4gICAgICByb3RhdGlvblggPSBfcmVmLnJvdGF0aW9uWCxcbiAgICAgIHNrZXdYID0gX3JlZi5za2V3WCxcbiAgICAgIHNrZXdZID0gX3JlZi5za2V3WSxcbiAgICAgIHNjYWxlWCA9IF9yZWYuc2NhbGVYLFxuICAgICAgc2NhbGVZID0gX3JlZi5zY2FsZVksXG4gICAgICB0cmFuc2Zvcm1QZXJzcGVjdGl2ZSA9IF9yZWYudHJhbnNmb3JtUGVyc3BlY3RpdmUsXG4gICAgICBmb3JjZTNEID0gX3JlZi5mb3JjZTNELFxuICAgICAgdGFyZ2V0ID0gX3JlZi50YXJnZXQsXG4gICAgICB6T3JpZ2luID0gX3JlZi56T3JpZ2luLFxuICAgICAgdHJhbnNmb3JtcyA9IFwiXCIsXG4gICAgICB1c2UzRCA9IGZvcmNlM0QgPT09IFwiYXV0b1wiICYmIHJhdGlvICYmIHJhdGlvICE9PSAxIHx8IGZvcmNlM0QgPT09IHRydWU7IC8vIFNhZmFyaSBoYXMgYSBidWcgdGhhdCBjYXVzZXMgaXQgbm90IHRvIHJlbmRlciAzRCB0cmFuc2Zvcm0tb3JpZ2luIHZhbHVlcyBwcm9wZXJseSwgc28gd2UgZm9yY2UgdGhlIHogb3JpZ2luIHRvIDAsIHJlY29yZCBpdCBpbiB0aGUgY2FjaGUsIGFuZCB0aGVuIGRvIHRoZSBtYXRoIGhlcmUgdG8gb2Zmc2V0IHRoZSB0cmFuc2xhdGUgdmFsdWVzIGFjY29yZGluZ2x5IChiYXNpY2FsbHkgZG8gdGhlIDNEIHRyYW5zZm9ybS1vcmlnaW4gcGFydCBtYW51YWxseSlcblxuXG4gIGlmICh6T3JpZ2luICYmIChyb3RhdGlvblggIT09IF96ZXJvRGVnIHx8IHJvdGF0aW9uWSAhPT0gX3plcm9EZWcpKSB7XG4gICAgdmFyIGFuZ2xlID0gcGFyc2VGbG9hdChyb3RhdGlvblkpICogX0RFRzJSQUQsXG4gICAgICAgIGExMyA9IE1hdGguc2luKGFuZ2xlKSxcbiAgICAgICAgYTMzID0gTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICBjb3M7XG5cbiAgICBhbmdsZSA9IHBhcnNlRmxvYXQocm90YXRpb25YKSAqIF9ERUcyUkFEO1xuICAgIGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICB4ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeCwgYTEzICogY29zICogLXpPcmlnaW4pO1xuICAgIHkgPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB5LCAtTWF0aC5zaW4oYW5nbGUpICogLXpPcmlnaW4pO1xuICAgIHogPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB6LCBhMzMgKiBjb3MgKiAtek9yaWdpbiArIHpPcmlnaW4pO1xuICB9XG5cbiAgaWYgKHRyYW5zZm9ybVBlcnNwZWN0aXZlICE9PSBfemVyb1B4KSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInBlcnNwZWN0aXZlKFwiICsgdHJhbnNmb3JtUGVyc3BlY3RpdmUgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoeFBlcmNlbnQgfHwgeVBlcmNlbnQpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwidHJhbnNsYXRlKFwiICsgeFBlcmNlbnQgKyBcIiUsIFwiICsgeVBlcmNlbnQgKyBcIiUpIFwiO1xuICB9XG5cbiAgaWYgKHVzZTNEIHx8IHggIT09IF96ZXJvUHggfHwgeSAhPT0gX3plcm9QeCB8fCB6ICE9PSBfemVyb1B4KSB7XG4gICAgdHJhbnNmb3JtcyArPSB6ICE9PSBfemVyb1B4IHx8IHVzZTNEID8gXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcIiwgXCIgKyB5ICsgXCIsIFwiICsgeiArIFwiKSBcIiA6IFwidHJhbnNsYXRlKFwiICsgeCArIFwiLCBcIiArIHkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb24gIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZShcIiArIHJvdGF0aW9uICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uWSAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlWShcIiArIHJvdGF0aW9uWSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvblggIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZVgoXCIgKyByb3RhdGlvblggKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoc2tld1ggIT09IF96ZXJvRGVnIHx8IHNrZXdZICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJza2V3KFwiICsgc2tld1ggKyBcIiwgXCIgKyBza2V3WSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChzY2FsZVggIT09IDEgfHwgc2NhbGVZICE9PSAxKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInNjYWxlKFwiICsgc2NhbGVYICsgXCIsIFwiICsgc2NhbGVZICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgdGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXMgfHwgXCJ0cmFuc2xhdGUoMCwgMClcIjtcbn0sXG4gICAgX3JlbmRlclNWR1RyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyU1ZHVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgdmFyIF9yZWYyID0gY2FjaGUgfHwgdGhpcyxcbiAgICAgIHhQZXJjZW50ID0gX3JlZjIueFBlcmNlbnQsXG4gICAgICB5UGVyY2VudCA9IF9yZWYyLnlQZXJjZW50LFxuICAgICAgeCA9IF9yZWYyLngsXG4gICAgICB5ID0gX3JlZjIueSxcbiAgICAgIHJvdGF0aW9uID0gX3JlZjIucm90YXRpb24sXG4gICAgICBza2V3WCA9IF9yZWYyLnNrZXdYLFxuICAgICAgc2tld1kgPSBfcmVmMi5za2V3WSxcbiAgICAgIHNjYWxlWCA9IF9yZWYyLnNjYWxlWCxcbiAgICAgIHNjYWxlWSA9IF9yZWYyLnNjYWxlWSxcbiAgICAgIHRhcmdldCA9IF9yZWYyLnRhcmdldCxcbiAgICAgIHhPcmlnaW4gPSBfcmVmMi54T3JpZ2luLFxuICAgICAgeU9yaWdpbiA9IF9yZWYyLnlPcmlnaW4sXG4gICAgICB4T2Zmc2V0ID0gX3JlZjIueE9mZnNldCxcbiAgICAgIHlPZmZzZXQgPSBfcmVmMi55T2Zmc2V0LFxuICAgICAgZm9yY2VDU1MgPSBfcmVmMi5mb3JjZUNTUyxcbiAgICAgIHR4ID0gcGFyc2VGbG9hdCh4KSxcbiAgICAgIHR5ID0gcGFyc2VGbG9hdCh5KSxcbiAgICAgIGExMSxcbiAgICAgIGEyMSxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHRlbXA7XG5cbiAgcm90YXRpb24gPSBwYXJzZUZsb2F0KHJvdGF0aW9uKTtcbiAgc2tld1ggPSBwYXJzZUZsb2F0KHNrZXdYKTtcbiAgc2tld1kgPSBwYXJzZUZsb2F0KHNrZXdZKTtcblxuICBpZiAoc2tld1kpIHtcbiAgICAvL2ZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSBjb21iaW5lIGFsbCBza2V3aW5nIGludG8gdGhlIHNrZXdYIGFuZCByb3RhdGlvbiB2YWx1ZXMuIFJlbWVtYmVyLCBhIHNrZXdZIG9mIDEwIGRlZ3JlZXMgbG9va3MgdGhlIHNhbWUgYXMgYSByb3RhdGlvbiBvZiAxMCBkZWdyZWVzIHBsdXMgYSBza2V3WCBvZiAxMCBkZWdyZWVzLlxuICAgIHNrZXdZID0gcGFyc2VGbG9hdChza2V3WSk7XG4gICAgc2tld1ggKz0gc2tld1k7XG4gICAgcm90YXRpb24gKz0gc2tld1k7XG4gIH1cblxuICBpZiAocm90YXRpb24gfHwgc2tld1gpIHtcbiAgICByb3RhdGlvbiAqPSBfREVHMlJBRDtcbiAgICBza2V3WCAqPSBfREVHMlJBRDtcbiAgICBhMTEgPSBNYXRoLmNvcyhyb3RhdGlvbikgKiBzY2FsZVg7XG4gICAgYTIxID0gTWF0aC5zaW4ocm90YXRpb24pICogc2NhbGVYO1xuICAgIGExMiA9IE1hdGguc2luKHJvdGF0aW9uIC0gc2tld1gpICogLXNjYWxlWTtcbiAgICBhMjIgPSBNYXRoLmNvcyhyb3RhdGlvbiAtIHNrZXdYKSAqIHNjYWxlWTtcblxuICAgIGlmIChza2V3WCkge1xuICAgICAgc2tld1kgKj0gX0RFRzJSQUQ7XG4gICAgICB0ZW1wID0gTWF0aC50YW4oc2tld1ggLSBza2V3WSk7XG4gICAgICB0ZW1wID0gTWF0aC5zcXJ0KDEgKyB0ZW1wICogdGVtcCk7XG4gICAgICBhMTIgKj0gdGVtcDtcbiAgICAgIGEyMiAqPSB0ZW1wO1xuXG4gICAgICBpZiAoc2tld1kpIHtcbiAgICAgICAgdGVtcCA9IE1hdGgudGFuKHNrZXdZKTtcbiAgICAgICAgdGVtcCA9IE1hdGguc3FydCgxICsgdGVtcCAqIHRlbXApO1xuICAgICAgICBhMTEgKj0gdGVtcDtcbiAgICAgICAgYTIxICo9IHRlbXA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYTExID0gX3JvdW5kKGExMSk7XG4gICAgYTIxID0gX3JvdW5kKGEyMSk7XG4gICAgYTEyID0gX3JvdW5kKGExMik7XG4gICAgYTIyID0gX3JvdW5kKGEyMik7XG4gIH0gZWxzZSB7XG4gICAgYTExID0gc2NhbGVYO1xuICAgIGEyMiA9IHNjYWxlWTtcbiAgICBhMjEgPSBhMTIgPSAwO1xuICB9XG5cbiAgaWYgKHR4ICYmICF+KHggKyBcIlwiKS5pbmRleE9mKFwicHhcIikgfHwgdHkgJiYgIX4oeSArIFwiXCIpLmluZGV4T2YoXCJweFwiKSkge1xuICAgIHR4ID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInhcIiwgeCwgXCJweFwiKTtcbiAgICB0eSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ5XCIsIHksIFwicHhcIik7XG4gIH1cblxuICBpZiAoeE9yaWdpbiB8fCB5T3JpZ2luIHx8IHhPZmZzZXQgfHwgeU9mZnNldCkge1xuICAgIHR4ID0gX3JvdW5kKHR4ICsgeE9yaWdpbiAtICh4T3JpZ2luICogYTExICsgeU9yaWdpbiAqIGExMikgKyB4T2Zmc2V0KTtcbiAgICB0eSA9IF9yb3VuZCh0eSArIHlPcmlnaW4gLSAoeE9yaWdpbiAqIGEyMSArIHlPcmlnaW4gKiBhMjIpICsgeU9mZnNldCk7XG4gIH1cblxuICBpZiAoeFBlcmNlbnQgfHwgeVBlcmNlbnQpIHtcbiAgICAvL1RoZSBTVkcgc3BlYyBkb2Vzbid0IHN1cHBvcnQgcGVyY2VudGFnZS1iYXNlZCB0cmFuc2xhdGlvbiBpbiB0aGUgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUsIHNvIHdlIG1lcmdlIGl0IGludG8gdGhlIHRyYW5zbGF0aW9uIHRvIHNpbXVsYXRlIGl0LlxuICAgIHRlbXAgPSB0YXJnZXQuZ2V0QkJveCgpO1xuICAgIHR4ID0gX3JvdW5kKHR4ICsgeFBlcmNlbnQgLyAxMDAgKiB0ZW1wLndpZHRoKTtcbiAgICB0eSA9IF9yb3VuZCh0eSArIHlQZXJjZW50IC8gMTAwICogdGVtcC5oZWlnaHQpO1xuICB9XG5cbiAgdGVtcCA9IFwibWF0cml4KFwiICsgYTExICsgXCIsXCIgKyBhMjEgKyBcIixcIiArIGExMiArIFwiLFwiICsgYTIyICsgXCIsXCIgKyB0eCArIFwiLFwiICsgdHkgKyBcIilcIjtcbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB0ZW1wKTtcbiAgZm9yY2VDU1MgJiYgKHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0ZW1wKTsgLy9zb21lIGJyb3dzZXJzIHByaW9yaXRpemUgQ1NTIHRyYW5zZm9ybXMgb3ZlciB0aGUgdHJhbnNmb3JtIGF0dHJpYnV0ZS4gV2hlbiB3ZSBzZW5zZSB0aGF0IHRoZSB1c2VyIGhhcyBDU1MgdHJhbnNmb3JtcyBhcHBsaWVkLCB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHRoaXMgd2F5IChvdGhlcndpc2Ugc29tZSBicm93c2VyIHNpbXBseSB3b24ndCByZW5kZXIgdGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUgY2hhbmdlcyEpXG59LFxuICAgIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4ocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBzdGFydE51bSwgZW5kVmFsdWUpIHtcbiAgdmFyIGNhcCA9IDM2MCxcbiAgICAgIGlzU3RyaW5nID0gX2lzU3RyaW5nKGVuZFZhbHVlKSxcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpICogKGlzU3RyaW5nICYmIH5lbmRWYWx1ZS5pbmRleE9mKFwicmFkXCIpID8gX1JBRDJERUcgOiAxKSxcbiAgICAgIGNoYW5nZSA9IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgZmluYWxWYWx1ZSA9IHN0YXJ0TnVtICsgY2hhbmdlICsgXCJkZWdcIixcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHB0O1xuXG4gIGlmIChpc1N0cmluZykge1xuICAgIGRpcmVjdGlvbiA9IGVuZFZhbHVlLnNwbGl0KFwiX1wiKVsxXTtcblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwic2hvcnRcIikge1xuICAgICAgY2hhbmdlICU9IGNhcDtcblxuICAgICAgaWYgKGNoYW5nZSAhPT0gY2hhbmdlICUgKGNhcCAvIDIpKSB7XG4gICAgICAgIGNoYW5nZSArPSBjaGFuZ2UgPCAwID8gY2FwIDogLWNhcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSBcImN3XCIgJiYgY2hhbmdlIDwgMCkge1xuICAgICAgY2hhbmdlID0gKGNoYW5nZSArIGNhcCAqIF9iaWdOdW0pICUgY2FwIC0gfn4oY2hhbmdlIC8gY2FwKSAqIGNhcDtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJjY3dcIiAmJiBjaGFuZ2UgPiAwKSB7XG4gICAgICBjaGFuZ2UgPSAoY2hhbmdlIC0gY2FwICogX2JpZ051bSkgJSBjYXAgLSB+fihjaGFuZ2UgLyBjYXApICogY2FwO1xuICAgIH1cbiAgfVxuXG4gIHBsdWdpbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgc3RhcnROdW0sIGNoYW5nZSwgX3JlbmRlclByb3BXaXRoRW5kKTtcbiAgcHQuZSA9IGZpbmFsVmFsdWU7XG4gIHB0LnUgPSBcImRlZ1wiO1xuXG4gIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYXNzaWduID0gZnVuY3Rpb24gX2Fzc2lnbih0YXJnZXQsIHNvdXJjZSkge1xuICAvLyBJbnRlcm5ldCBFeHBsb3JlciBkb2Vzbid0IGhhdmUgT2JqZWN0LmFzc2lnbigpLCBzbyB3ZSByZWNyZWF0ZSBpdCBoZXJlLlxuICBmb3IgKHZhciBwIGluIHNvdXJjZSkge1xuICAgIHRhcmdldFtwXSA9IHNvdXJjZVtwXTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59LFxuICAgIF9hZGRSYXdUcmFuc2Zvcm1QVHMgPSBmdW5jdGlvbiBfYWRkUmF3VHJhbnNmb3JtUFRzKHBsdWdpbiwgdHJhbnNmb3JtcywgdGFyZ2V0KSB7XG4gIC8vZm9yIGhhbmRsaW5nIGNhc2VzIHdoZXJlIHNvbWVvbmUgcGFzc2VzIGluIGEgd2hvbGUgdHJhbnNmb3JtIHN0cmluZywgbGlrZSB0cmFuc2Zvcm06IFwic2NhbGUoMiwgMykgcm90YXRlKDIwZGVnKSB0cmFuc2xhdGVZKDMwZW0pXCJcbiAgdmFyIHN0YXJ0Q2FjaGUgPSBfYXNzaWduKHt9LCB0YXJnZXQuX2dzYXApLFxuICAgICAgZXhjbHVkZSA9IFwicGVyc3BlY3RpdmUsZm9yY2UzRCx0cmFuc2Zvcm1PcmlnaW4sc3ZnT3JpZ2luXCIsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGVuZENhY2hlLFxuICAgICAgcCxcbiAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICBlbmRWYWx1ZSxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgZW5kTnVtLFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgZW5kVW5pdDtcblxuICBpZiAoc3RhcnRDYWNoZS5zdmcpIHtcbiAgICBzdGFydFZhbHVlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcbiAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXM7XG4gICAgZW5kQ2FjaGUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTtcblxuICAgIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKTtcblxuICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgc3RhcnRWYWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnRWYWx1ZSA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KVtfdHJhbnNmb3JtUHJvcF07XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcztcbiAgICBlbmRDYWNoZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHN0YXJ0VmFsdWU7XG4gIH1cblxuICBmb3IgKHAgaW4gX3RyYW5zZm9ybVByb3BzKSB7XG4gICAgc3RhcnRWYWx1ZSA9IHN0YXJ0Q2FjaGVbcF07XG4gICAgZW5kVmFsdWUgPSBlbmRDYWNoZVtwXTtcblxuICAgIGlmIChzdGFydFZhbHVlICE9PSBlbmRWYWx1ZSAmJiBleGNsdWRlLmluZGV4T2YocCkgPCAwKSB7XG4gICAgICAvL3R3ZWVuaW5nIHRvIG5vIHBlcnNwZWN0aXZlIGdpdmVzIHZlcnkgdW5pbnR1aXRpdmUgcmVzdWx0cyAtIGp1c3Qga2VlcCB0aGUgc2FtZSBwZXJzcGVjdGl2ZSBpbiB0aGF0IGNhc2UuXG4gICAgICBzdGFydFVuaXQgPSBnZXRVbml0KHN0YXJ0VmFsdWUpO1xuICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgc3RhcnROdW0gPSBzdGFydFVuaXQgIT09IGVuZFVuaXQgPyBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIDogcGFyc2VGbG9hdChzdGFydFZhbHVlKTtcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgZW5kQ2FjaGUsIHAsIHN0YXJ0TnVtLCBlbmROdW0gLSBzdGFydE51bSwgX3JlbmRlckNTU1Byb3ApO1xuICAgICAgcGx1Z2luLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocCk7XG4gICAgfVxuICB9XG5cbiAgX2Fzc2lnbihlbmRDYWNoZSwgc3RhcnRDYWNoZSk7XG59OyAvLyBoYW5kbGUgc3BsaXR0aW5nIGFwYXJ0IHBhZGRpbmcsIG1hcmdpbiwgYm9yZGVyV2lkdGgsIGFuZCBib3JkZXJSYWRpdXMgaW50byB0aGVpciA0IGNvbXBvbmVudHMuIEZpcmVmb3gsIGZvciBleGFtcGxlLCB3b24ndCByZXBvcnQgYm9yZGVyUmFkaXVzIGNvcnJlY3RseSAtIGl0IHdpbGwgb25seSBkbyBib3JkZXJUb3BMZWZ0UmFkaXVzIGFuZCB0aGUgb3RoZXIgY29ybmVycy4gV2UgYWxzbyB3YW50IHRvIGhhbmRsZSBwYWRkaW5nVG9wLCBtYXJnaW5MZWZ0LCBib3JkZXJSaWdodFdpZHRoLCBldGMuXG5cblxuX2ZvckVhY2hOYW1lKFwicGFkZGluZyxtYXJnaW4sV2lkdGgsUmFkaXVzXCIsIGZ1bmN0aW9uIChuYW1lLCBpbmRleCkge1xuICB2YXIgdCA9IFwiVG9wXCIsXG4gICAgICByID0gXCJSaWdodFwiLFxuICAgICAgYiA9IFwiQm90dG9tXCIsXG4gICAgICBsID0gXCJMZWZ0XCIsXG4gICAgICBwcm9wcyA9IChpbmRleCA8IDMgPyBbdCwgciwgYiwgbF0gOiBbdCArIGwsIHQgKyByLCBiICsgciwgYiArIGxdKS5tYXAoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gaW5kZXggPCAyID8gbmFtZSArIHNpZGUgOiBcImJvcmRlclwiICsgc2lkZSArIG5hbWU7XG4gIH0pO1xuXG4gIF9zcGVjaWFsUHJvcHNbaW5kZXggPiAxID8gXCJib3JkZXJcIiArIG5hbWUgOiBuYW1lXSA9IGZ1bmN0aW9uIChwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICAgIHZhciBhLCB2YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCA0KSB7XG4gICAgICAvLyBnZXR0ZXIsIHBhc3NlZCB0YXJnZXQsIHByb3BlcnR5LCBhbmQgdW5pdCAoZnJvbSBfZ2V0KCkpXG4gICAgICBhID0gcHJvcHMubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiBfZ2V0KHBsdWdpbiwgcHJvcCwgcHJvcGVydHkpO1xuICAgICAgfSk7XG4gICAgICB2YXJzID0gYS5qb2luKFwiIFwiKTtcbiAgICAgIHJldHVybiB2YXJzLnNwbGl0KGFbMF0pLmxlbmd0aCA9PT0gNSA/IGFbMF0gOiB2YXJzO1xuICAgIH1cblxuICAgIGEgPSAoZW5kVmFsdWUgKyBcIlwiKS5zcGxpdChcIiBcIik7XG4gICAgdmFycyA9IHt9O1xuICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3AsIGkpIHtcbiAgICAgIHJldHVybiB2YXJzW3Byb3BdID0gYVtpXSA9IGFbaV0gfHwgYVsoaSAtIDEpIC8gMiB8IDBdO1xuICAgIH0pO1xuICAgIHBsdWdpbi5pbml0KHRhcmdldCwgdmFycywgdHdlZW4pO1xuICB9O1xufSk7XG5cbmV4cG9ydCB2YXIgQ1NTUGx1Z2luID0ge1xuICBuYW1lOiBcImNzc1wiLFxuICByZWdpc3RlcjogX2luaXRDb3JlLFxuICB0YXJnZXRUZXN0OiBmdW5jdGlvbiB0YXJnZXRUZXN0KHRhcmdldCkge1xuICAgIHJldHVybiB0YXJnZXQuc3R5bGUgJiYgdGFyZ2V0Lm5vZGVUeXBlO1xuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSB7XG4gICAgdmFyIHByb3BzID0gdGhpcy5fcHJvcHMsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBzdGFydEF0ID0gdHdlZW4udmFycy5zdGFydEF0LFxuICAgICAgICBzdGFydFZhbHVlLFxuICAgICAgICBlbmRWYWx1ZSxcbiAgICAgICAgZW5kTnVtLFxuICAgICAgICBzdGFydE51bSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgc3BlY2lhbFByb3AsXG4gICAgICAgIHAsXG4gICAgICAgIHN0YXJ0VW5pdCxcbiAgICAgICAgZW5kVW5pdCxcbiAgICAgICAgcmVsYXRpdmUsXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCxcbiAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLFxuICAgICAgICBjYWNoZSxcbiAgICAgICAgc21vb3RoLFxuICAgICAgICBoYXNQcmlvcml0eSxcbiAgICAgICAgaW5saW5lUHJvcHM7XG4gICAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7IC8vIHdlIG1heSBjYWxsIGluaXQoKSBtdWx0aXBsZSB0aW1lcyBvbiB0aGUgc2FtZSBwbHVnaW4gaW5zdGFuY2UsIGxpa2Ugd2hlbiBhZGRpbmcgc3BlY2lhbCBwcm9wZXJ0aWVzLCBzbyBtYWtlIHN1cmUgd2UgZG9uJ3Qgb3ZlcndyaXRlIHRoZSByZXZlcnQgZGF0YSBvciBpbmxpbmVQcm9wc1xuXG4gICAgdGhpcy5zdHlsZXMgPSB0aGlzLnN0eWxlcyB8fCBfZ2V0U3R5bGVTYXZlcih0YXJnZXQpO1xuICAgIGlubGluZVByb3BzID0gdGhpcy5zdHlsZXMucHJvcHM7XG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuXG4gICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgIGlmIChwID09PSBcImF1dG9Sb3VuZFwiKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBlbmRWYWx1ZSA9IHZhcnNbcF07XG5cbiAgICAgIGlmIChfcGx1Z2luc1twXSAmJiBfY2hlY2tQbHVnaW4ocCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKSB7XG4gICAgICAgIC8vIHBsdWdpbnNcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHR5cGUgPSB0eXBlb2YgZW5kVmFsdWU7XG4gICAgICBzcGVjaWFsUHJvcCA9IF9zcGVjaWFsUHJvcHNbcF07XG5cbiAgICAgIGlmICh0eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZW5kVmFsdWUgPSBlbmRWYWx1ZS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKTtcbiAgICAgICAgdHlwZSA9IHR5cGVvZiBlbmRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIgJiYgfmVuZFZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgICAgIGVuZFZhbHVlID0gX3JlcGxhY2VSYW5kb20oZW5kVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3BlY2lhbFByb3ApIHtcbiAgICAgICAgc3BlY2lhbFByb3AodGhpcywgdGFyZ2V0LCBwLCBlbmRWYWx1ZSwgdHdlZW4pICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgfSBlbHNlIGlmIChwLnN1YnN0cigwLCAyKSA9PT0gXCItLVwiKSB7XG4gICAgICAgIC8vQ1NTIHZhcmlhYmxlXG4gICAgICAgIHN0YXJ0VmFsdWUgPSAoZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmdldFByb3BlcnR5VmFsdWUocCkgKyBcIlwiKS50cmltKCk7XG4gICAgICAgIGVuZFZhbHVlICs9IFwiXCI7XG4gICAgICAgIF9jb2xvckV4cC5sYXN0SW5kZXggPSAwO1xuXG4gICAgICAgIGlmICghX2NvbG9yRXhwLnRlc3Qoc3RhcnRWYWx1ZSkpIHtcbiAgICAgICAgICAvLyBjb2xvcnMgZG9uJ3QgaGF2ZSB1bml0c1xuICAgICAgICAgIHN0YXJ0VW5pdCA9IGdldFVuaXQoc3RhcnRWYWx1ZSk7XG4gICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZW5kVW5pdCA/IHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnRWYWx1ZSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkgKyBlbmRVbml0KSA6IHN0YXJ0VW5pdCAmJiAoZW5kVmFsdWUgKz0gc3RhcnRVbml0KTtcbiAgICAgICAgdGhpcy5hZGQoc3R5bGUsIFwic2V0UHJvcGVydHlcIiwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgICAgcHJvcHMucHVzaChwKTtcbiAgICAgICAgaW5saW5lUHJvcHMucHVzaChwLCAwLCBzdHlsZVtwXSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHN0YXJ0QXQgJiYgcCBpbiBzdGFydEF0KSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSBzb21lb25lIGhhcmQtY29kZXMgYSBjb21wbGV4IHZhbHVlIGFzIHRoZSBzdGFydCwgbGlrZSB0b3A6IFwiY2FsYygydmggLyAyKVwiLiBXaXRob3V0IHRoaXMsIGl0J2QgdXNlIHRoZSBjb21wdXRlZCB2YWx1ZSAoYWx3YXlzIGluIHB4KVxuICAgICAgICAgIHN0YXJ0VmFsdWUgPSB0eXBlb2Ygc3RhcnRBdFtwXSA9PT0gXCJmdW5jdGlvblwiID8gc3RhcnRBdFtwXS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSA6IHN0YXJ0QXRbcF07XG4gICAgICAgICAgX2lzU3RyaW5nKHN0YXJ0VmFsdWUpICYmIH5zdGFydFZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpICYmIChzdGFydFZhbHVlID0gX3JlcGxhY2VSYW5kb20oc3RhcnRWYWx1ZSkpO1xuICAgICAgICAgIGdldFVuaXQoc3RhcnRWYWx1ZSArIFwiXCIpIHx8IHN0YXJ0VmFsdWUgPT09IFwiYXV0b1wiIHx8IChzdGFydFZhbHVlICs9IF9jb25maWcudW5pdHNbcF0gfHwgZ2V0VW5pdChfZ2V0KHRhcmdldCwgcCkpIHx8IFwiXCIpOyAvLyBmb3IgY2FzZXMgd2hlbiBzb21lb25lIHBhc3NlcyBpbiBhIHVuaXRsZXNzIHZhbHVlIGxpa2Uge3g6IDEwMH07IGlmIHdlIHRyeSBzZXR0aW5nIHRyYW5zbGF0ZSgxMDAsIDBweCkgaXQgd29uJ3Qgd29yay5cblxuICAgICAgICAgIChzdGFydFZhbHVlICsgXCJcIikuY2hhckF0KDEpID09PSBcIj1cIiAmJiAoc3RhcnRWYWx1ZSA9IF9nZXQodGFyZ2V0LCBwKSk7IC8vIGNhbid0IHdvcmsgd2l0aCByZWxhdGl2ZSB2YWx1ZXNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGFydFZhbHVlID0gX2dldCh0YXJnZXQsIHApO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpO1xuICAgICAgICByZWxhdGl2ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgJiYgZW5kVmFsdWUuY2hhckF0KDEpID09PSBcIj1cIiAmJiBlbmRWYWx1ZS5zdWJzdHIoMCwgMik7XG4gICAgICAgIHJlbGF0aXZlICYmIChlbmRWYWx1ZSA9IGVuZFZhbHVlLnN1YnN0cigyKSk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuXG4gICAgICAgIGlmIChwIGluIF9wcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICAgICAgICBpZiAocCA9PT0gXCJhdXRvQWxwaGFcIikge1xuICAgICAgICAgICAgLy9zcGVjaWFsIGNhc2Ugd2hlcmUgd2UgY29udHJvbCB0aGUgdmlzaWJpbGl0eSBhbG9uZyB3aXRoIG9wYWNpdHkuIFdlIHN0aWxsIGFsbG93IHRoZSBvcGFjaXR5IHZhbHVlIHRvIHBhc3MgdGhyb3VnaCBhbmQgZ2V0IHR3ZWVuZWQuXG4gICAgICAgICAgICBpZiAoc3RhcnROdW0gPT09IDEgJiYgX2dldCh0YXJnZXQsIFwidmlzaWJpbGl0eVwiKSA9PT0gXCJoaWRkZW5cIiAmJiBlbmROdW0pIHtcbiAgICAgICAgICAgICAgLy9pZiB2aXNpYmlsaXR5IGlzIGluaXRpYWxseSBzZXQgdG8gXCJoaWRkZW5cIiwgd2Ugc2hvdWxkIGludGVycHJldCB0aGF0IGFzIGludGVudCB0byBtYWtlIG9wYWNpdHkgMCAoYSBjb252ZW5pZW5jZSlcbiAgICAgICAgICAgICAgc3RhcnROdW0gPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKFwidmlzaWJpbGl0eVwiLCAwLCBzdHlsZS52aXNpYmlsaXR5KTtcblxuICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgc3R5bGUsIFwidmlzaWJpbGl0eVwiLCBzdGFydE51bSA/IFwiaW5oZXJpdFwiIDogXCJoaWRkZW5cIiwgZW5kTnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCAhZW5kTnVtKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCAhPT0gXCJzY2FsZVwiICYmIHAgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIHAgPSBfcHJvcGVydHlBbGlhc2VzW3BdO1xuICAgICAgICAgICAgfnAuaW5kZXhPZihcIixcIikgJiYgKHAgPSBwLnNwbGl0KFwiLFwiKVswXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkID0gcCBpbiBfdHJhbnNmb3JtUHJvcHM7IC8vLS0tIFRSQU5TRk9STS1SRUxBVEVEIC0tLVxuXG4gICAgICAgIGlmIChpc1RyYW5zZm9ybVJlbGF0ZWQpIHtcbiAgICAgICAgICB0aGlzLnN0eWxlcy5zYXZlKHApO1xuXG4gICAgICAgICAgaWYgKCF0cmFuc2Zvcm1Qcm9wVHdlZW4pIHtcbiAgICAgICAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICAgICAgICAgICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtICYmICF2YXJzLnBhcnNlVHJhbnNmb3JtIHx8IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHZhcnMucGFyc2VUcmFuc2Zvcm0pOyAvLyBpZiwgZm9yIGV4YW1wbGUsIGdzYXAuc2V0KC4uLiB7dHJhbnNmb3JtOlwidHJhbnNsYXRlWCg1MHZ3KVwifSksIHRoZSBfZ2V0KCkgY2FsbCBkb2Vzbid0IHBhcnNlIHRoZSB0cmFuc2Zvcm0sIHRodXMgY2FjaGUucmVuZGVyVHJhbnNmb3JtIHdvbid0IGJlIHNldCB5ZXQgc28gZm9yY2UgdGhlIHBhcnNpbmcgb2YgdGhlIHRyYW5zZm9ybSBoZXJlLlxuXG4gICAgICAgICAgICBzbW9vdGggPSB2YXJzLnNtb290aE9yaWdpbiAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoO1xuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuID0gdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBzdHlsZSwgX3RyYW5zZm9ybVByb3AsIDAsIDEsIGNhY2hlLnJlbmRlclRyYW5zZm9ybSwgY2FjaGUsIDAsIC0xKTsgLy90aGUgZmlyc3QgdGltZSB0aHJvdWdoLCBjcmVhdGUgdGhlIHJlbmRlcmluZyBQcm9wVHdlZW4gc28gdGhhdCBpdCBydW5zIExBU1QgKGluIHRoZSBsaW5rZWQgbGlzdCwgd2Uga2VlcCBhZGRpbmcgdG8gdGhlIGJlZ2lubmluZylcblxuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLmRlcCA9IDE7IC8vZmxhZyBpdCBhcyBkZXBlbmRlbnQgc28gdGhhdCBpZiB0aGluZ3MgZ2V0IGtpbGxlZC9vdmVyd3JpdHRlbiBhbmQgdGhpcyBpcyB0aGUgb25seSBQcm9wVHdlZW4gbGVmdCwgd2UgY2FuIHNhZmVseSBraWxsIHRoZSB3aG9sZSB0d2Vlbi5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCA9PT0gXCJzY2FsZVwiKSB7XG4gICAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGNhY2hlLCBcInNjYWxlWVwiLCBjYWNoZS5zY2FsZVksIChyZWxhdGl2ZSA/IF9wYXJzZVJlbGF0aXZlKGNhY2hlLnNjYWxlWSwgcmVsYXRpdmUgKyBlbmROdW0pIDogZW5kTnVtKSAtIGNhY2hlLnNjYWxlWSB8fCAwLCBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICAgICAgICB0aGlzLl9wdC51ID0gMDtcbiAgICAgICAgICAgIHByb3BzLnB1c2goXCJzY2FsZVlcIiwgcCk7XG4gICAgICAgICAgICBwICs9IFwiWFwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIikge1xuICAgICAgICAgICAgaW5saW5lUHJvcHMucHVzaChfdHJhbnNmb3JtT3JpZ2luUHJvcCwgMCwgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdKTtcbiAgICAgICAgICAgIGVuZFZhbHVlID0gX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMoZW5kVmFsdWUpOyAvL2luIGNhc2Ugc29tZXRoaW5nIGxpa2UgXCJsZWZ0IHRvcFwiIG9yIFwiYm90dG9tIHJpZ2h0XCIgaXMgcGFzc2VkIGluLiBDb252ZXJ0IHRvIHBlcmNlbnRhZ2VzLlxuXG4gICAgICAgICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAwLCBzbW9vdGgsIDAsIHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZW5kVW5pdCA9IHBhcnNlRmxvYXQoZW5kVmFsdWUuc3BsaXQoXCIgXCIpWzJdKSB8fCAwOyAvL2hhbmRsZSB0aGUgek9yaWdpbiBzZXBhcmF0ZWx5IVxuXG4gICAgICAgICAgICAgIGVuZFVuaXQgIT09IGNhY2hlLnpPcmlnaW4gJiYgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwiek9yaWdpblwiLCBjYWNoZS56T3JpZ2luLCBlbmRVbml0KTtcblxuICAgICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgcCwgX2ZpcnN0VHdvT25seShzdGFydFZhbHVlKSwgX2ZpcnN0VHdvT25seShlbmRWYWx1ZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic3ZnT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAxLCBzbW9vdGgsIDAsIHRoaXMpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgaW4gX3JvdGF0aW9uYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBfYWRkUm90YXRpb25hbFByb3BUd2Vlbih0aGlzLCBjYWNoZSwgcCwgc3RhcnROdW0sIHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kVmFsdWUpIDogZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic21vb3RoT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIGNhY2hlLCBcInNtb290aFwiLCBjYWNoZS5zbW9vdGgsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcImZvcmNlM0RcIikge1xuICAgICAgICAgICAgY2FjaGVbcF0gPSBlbmRWYWx1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgX2FkZFJhd1RyYW5zZm9ybVBUcyh0aGlzLCBlbmRWYWx1ZSwgdGFyZ2V0KTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEocCBpbiBzdHlsZSkpIHtcbiAgICAgICAgICBwID0gX2NoZWNrUHJvcFByZWZpeChwKSB8fCBwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUmVsYXRlZCB8fCAoZW5kTnVtIHx8IGVuZE51bSA9PT0gMCkgJiYgKHN0YXJ0TnVtIHx8IHN0YXJ0TnVtID09PSAwKSAmJiAhX2NvbXBsZXhFeHAudGVzdChlbmRWYWx1ZSkgJiYgcCBpbiBzdHlsZSkge1xuICAgICAgICAgIHN0YXJ0VW5pdCA9IChzdGFydFZhbHVlICsgXCJcIikuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgICAgZW5kTnVtIHx8IChlbmROdW0gPSAwKTsgLy8gcHJvdGVjdCBhZ2FpbnN0IE5hTlxuXG4gICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpIHx8IChwIGluIF9jb25maWcudW5pdHMgPyBfY29uZmlnLnVuaXRzW3BdIDogc3RhcnRVbml0KTtcbiAgICAgICAgICBzdGFydFVuaXQgIT09IGVuZFVuaXQgJiYgKHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSk7XG4gICAgICAgICAgdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBpc1RyYW5zZm9ybVJlbGF0ZWQgPyBjYWNoZSA6IHN0eWxlLCBwLCBzdGFydE51bSwgKHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kTnVtKSA6IGVuZE51bSkgLSBzdGFydE51bSwgIWlzVHJhbnNmb3JtUmVsYXRlZCAmJiAoZW5kVW5pdCA9PT0gXCJweFwiIHx8IHAgPT09IFwiekluZGV4XCIpICYmIHZhcnMuYXV0b1JvdW5kICE9PSBmYWxzZSA/IF9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA6IF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgICAgICB0aGlzLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiBlbmRVbml0ICE9PSBcIiVcIikge1xuICAgICAgICAgICAgLy93aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZywgd2UgbmVlZCB0byByZXZlcnQgaXQgdG8gdGhlIE9MRC9PUklHSU5BTCB2YWx1ZSAod2l0aCB0aG9zZSB1bml0cykuIFdlIHJlY29yZCB0aGF0IGFzIGEgXCJiXCIgKGJlZ2lubmluZykgcHJvcGVydHkgYW5kIHBvaW50IHRvIGEgcmVuZGVyIG1ldGhvZCB0aGF0IGhhbmRsZXMgdGhhdC4gKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcbiAgICAgICAgICAgIHRoaXMuX3B0LmIgPSBzdGFydFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fcHQuciA9IF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIGlmIChwIGluIHRhcmdldCkge1xuICAgICAgICAgICAgLy9tYXliZSBpdCdzIG5vdCBhIHN0eWxlIC0gaXQgY291bGQgYmUgYSBwcm9wZXJ0eSBhZGRlZCBkaXJlY3RseSB0byBhbiBlbGVtZW50IGluIHdoaWNoIGNhc2Ugd2UnbGwgdHJ5IHRvIGFuaW1hdGUgdGhhdC5cbiAgICAgICAgICAgIHRoaXMuYWRkKHRhcmdldCwgcCwgc3RhcnRWYWx1ZSB8fCB0YXJnZXRbcF0sIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlLCBpbmRleCwgdGFyZ2V0cyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChwICE9PSBcInBhcnNlVHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIF9taXNzaW5nUGx1Z2luKHAsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcuY2FsbCh0aGlzLCB0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCB8fCAocCBpbiBzdHlsZSA/IGlubGluZVByb3BzLnB1c2gocCwgMCwgc3R5bGVbcF0pIDogaW5saW5lUHJvcHMucHVzaChwLCAxLCBzdGFydFZhbHVlIHx8IHRhcmdldFtwXSkpO1xuICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodGhpcyk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgaWYgKGRhdGEudHdlZW4uX3RpbWUgfHwgIV9yZXZlcnRpbmcoKSkge1xuICAgICAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YS5zdHlsZXMucmV2ZXJ0KCk7XG4gICAgfVxuICB9LFxuICBnZXQ6IF9nZXQsXG4gIGFsaWFzZXM6IF9wcm9wZXJ0eUFsaWFzZXMsXG4gIGdldFNldHRlcjogZnVuY3Rpb24gZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHksIHBsdWdpbikge1xuICAgIC8vcmV0dXJucyBhIHNldHRlciBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUgYW5kIGFwcGxpZXMgaXQgYWNjb3JkaW5nbHkuIFJlbWVtYmVyLCBwcm9wZXJ0aWVzIGxpa2UgXCJ4XCIgYXJlbid0IGFzIHNpbXBsZSBhcyB0YXJnZXQuc3R5bGUucHJvcGVydHkgPSB2YWx1ZSBiZWNhdXNlIHRoZXkndmUgZ290IHRvIGJlIGFwcGxpZWQgdG8gYSBwcm94eSBvYmplY3QgYW5kIHRoZW4gbWVyZ2VkIGludG8gYSB0cmFuc2Zvcm0gc3RyaW5nIGluIGEgcmVuZGVyZXIuXG4gICAgdmFyIHAgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XTtcbiAgICBwICYmIHAuaW5kZXhPZihcIixcIikgPCAwICYmIChwcm9wZXJ0eSA9IHApO1xuICAgIHJldHVybiBwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgcHJvcGVydHkgIT09IF90cmFuc2Zvcm1PcmlnaW5Qcm9wICYmICh0YXJnZXQuX2dzYXAueCB8fCBfZ2V0KHRhcmdldCwgXCJ4XCIpKSA/IHBsdWdpbiAmJiBfcmVjZW50U2V0dGVyUGx1Z2luID09PSBwbHVnaW4gPyBwcm9wZXJ0eSA9PT0gXCJzY2FsZVwiID8gX3NldHRlclNjYWxlIDogX3NldHRlclRyYW5zZm9ybSA6IChfcmVjZW50U2V0dGVyUGx1Z2luID0gcGx1Z2luIHx8IHt9KSAmJiAocHJvcGVydHkgPT09IFwic2NhbGVcIiA/IF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIgOiBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlcikgOiB0YXJnZXQuc3R5bGUgJiYgIV9pc1VuZGVmaW5lZCh0YXJnZXQuc3R5bGVbcHJvcGVydHldKSA/IF9zZXR0ZXJDU1NTdHlsZSA6IH5wcm9wZXJ0eS5pbmRleE9mKFwiLVwiKSA/IF9zZXR0ZXJDU1NQcm9wIDogX2dldFNldHRlcih0YXJnZXQsIHByb3BlcnR5KTtcbiAgfSxcbiAgY29yZToge1xuICAgIF9yZW1vdmVQcm9wZXJ0eTogX3JlbW92ZVByb3BlcnR5LFxuICAgIF9nZXRNYXRyaXg6IF9nZXRNYXRyaXhcbiAgfVxufTtcbmdzYXAudXRpbHMuY2hlY2tQcmVmaXggPSBfY2hlY2tQcm9wUHJlZml4O1xuZ3NhcC5jb3JlLmdldFN0eWxlU2F2ZXIgPSBfZ2V0U3R5bGVTYXZlcjtcblxuKGZ1bmN0aW9uIChwb3NpdGlvbkFuZFNjYWxlLCByb3RhdGlvbiwgb3RoZXJzLCBhbGlhc2VzKSB7XG4gIHZhciBhbGwgPSBfZm9yRWFjaE5hbWUocG9zaXRpb25BbmRTY2FsZSArIFwiLFwiICsgcm90YXRpb24gKyBcIixcIiArIG90aGVycywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfdHJhbnNmb3JtUHJvcHNbbmFtZV0gPSAxO1xuICB9KTtcblxuICBfZm9yRWFjaE5hbWUocm90YXRpb24sIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX2NvbmZpZy51bml0c1tuYW1lXSA9IFwiZGVnXCI7XG4gICAgX3JvdGF0aW9uYWxQcm9wZXJ0aWVzW25hbWVdID0gMTtcbiAgfSk7XG5cbiAgX3Byb3BlcnR5QWxpYXNlc1thbGxbMTNdXSA9IHBvc2l0aW9uQW5kU2NhbGUgKyBcIixcIiArIHJvdGF0aW9uO1xuXG4gIF9mb3JFYWNoTmFtZShhbGlhc2VzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBzcGxpdCA9IG5hbWUuc3BsaXQoXCI6XCIpO1xuICAgIF9wcm9wZXJ0eUFsaWFzZXNbc3BsaXRbMV1dID0gYWxsW3NwbGl0WzBdXTtcbiAgfSk7XG59KShcIngseSx6LHNjYWxlLHNjYWxlWCxzY2FsZVkseFBlcmNlbnQseVBlcmNlbnRcIiwgXCJyb3RhdGlvbixyb3RhdGlvblgscm90YXRpb25ZLHNrZXdYLHNrZXdZXCIsIFwidHJhbnNmb3JtLHRyYW5zZm9ybU9yaWdpbixzdmdPcmlnaW4sZm9yY2UzRCxzbW9vdGhPcmlnaW4sdHJhbnNmb3JtUGVyc3BlY3RpdmVcIiwgXCIwOnRyYW5zbGF0ZVgsMTp0cmFuc2xhdGVZLDI6dHJhbnNsYXRlWiw4OnJvdGF0ZSw4OnJvdGF0aW9uWiw4OnJvdGF0ZVosOTpyb3RhdGVYLDEwOnJvdGF0ZVlcIik7XG5cbl9mb3JFYWNoTmFtZShcIngseSx6LHRvcCxyaWdodCxib3R0b20sbGVmdCx3aWR0aCxoZWlnaHQsZm9udFNpemUscGFkZGluZyxtYXJnaW4scGVyc3BlY3RpdmVcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgX2NvbmZpZy51bml0c1tuYW1lXSA9IFwicHhcIjtcbn0pO1xuXG5nc2FwLnJlZ2lzdGVyUGx1Z2luKENTU1BsdWdpbik7XG5leHBvcnQgeyBDU1NQbHVnaW4gYXMgZGVmYXVsdCwgX2dldEJCb3gsIF9jcmVhdGVFbGVtZW50LCBfY2hlY2tQcm9wUHJlZml4IGFzIGNoZWNrUHJlZml4IH07IiwiaW1wb3J0IHsgZ3NhcCwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjLCBUd2VlbkxpdGUsIFRpbWVsaW5lTGl0ZSwgVGltZWxpbmVNYXggfSBmcm9tIFwiLi9nc2FwLWNvcmUuanNcIjtcbmltcG9ydCB7IENTU1BsdWdpbiB9IGZyb20gXCIuL0NTU1BsdWdpbi5qc1wiO1xudmFyIGdzYXBXaXRoQ1NTID0gZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4pIHx8IGdzYXAsXG4gICAgLy8gdG8gcHJvdGVjdCBmcm9tIHRyZWUgc2hha2luZ1xuVHdlZW5NYXhXaXRoQ1NTID0gZ3NhcFdpdGhDU1MuY29yZS5Ud2VlbjtcbmV4cG9ydCB7IGdzYXBXaXRoQ1NTIGFzIGdzYXAsIGdzYXBXaXRoQ1NTIGFzIGRlZmF1bHQsIENTU1BsdWdpbiwgVHdlZW5NYXhXaXRoQ1NTIGFzIFR3ZWVuTWF4LCBUd2VlbkxpdGUsIFRpbWVsaW5lTWF4LCBUaW1lbGluZUxpdGUsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9OyIsImltcG9ydCBnc2FwIGZyb20gJ2dzYXAnO1xyXG5cclxuY29uc3Qgc21hbGxEZXZpY2UgPSB3aW5kb3cubWF0Y2hNZWRpYSgnKG1heC13aWR0aDogMTAyNHB4KScpO1xyXG5jb25zdCBkcm9wRG93bk1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGluay1pdGVtcycpO1xyXG5jb25zdCBiYXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJhcicpO1xyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICBpZiAoZS50YXJnZXQubWF0Y2hlcygnLmhhbWJ1cmdlci1tZW51JykgfHwgZS50YXJnZXQubWF0Y2hlcygnLm5hdi1saW5rJykpIHtcclxuICAgIGlmIChzbWFsbERldmljZS5tYXRjaGVzKSB7XHJcbiAgICAgIGlmICghZHJvcERvd25NZW51LmNsYXNzTGlzdC5jb250YWlucygnT3BlbicpKSB7XHJcbiAgICAgICAgZHJvcERvd25NZW51LmNsYXNzTGlzdC5hZGQoJ09wZW4nKTtcclxuICAgICAgICBidXJnZXJNZW51QW5pbWF0aW9uT3BlbigpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGJ1cmdlck1lbnVBbmltYXRpb25DbG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59KTtcclxuZnVuY3Rpb24gYnVyZ2VyTWVudUFuaW1hdGlvbk9wZW4oKSB7XHJcbiAgYmFycy5mb3JFYWNoKChiYXIsIGtleSkgPT4ge1xyXG4gICAgYmFyLnNldEF0dHJpYnV0ZSgnaWQnLCBiYXIuY2xhc3NOYW1lICsga2V5KTtcclxuXHJcbiAgICBzd2l0Y2ggKGJhci5pZCkge1xyXG4gICAgICBjYXNlICdiYXIwJzoge1xyXG4gICAgICAgIGdzYXAudG8oJyNiYXIwJywge1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDQ1ZGVnKScsXHJcbiAgICAgICAgICB0cmFuc2xhdGVZOiAnLTAuN3JlbScsXHJcbiAgICAgICAgICBkdXJhdGlvbjogMC41LFxyXG4gICAgICAgICAgZWFzZTogJ2V4cG9TY2FsZScsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnYmFyMSc6IHtcclxuICAgICAgICBnc2FwLnRvKCcjYmFyMScsIHsgb3BhY2l0eTogMCwgZHVyYXRpb246IDAuNSwgZWFzZTogJ2V4cG9TY2FsZScgfSk7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnYmFyMic6IHtcclxuICAgICAgICBnc2FwLnRvKCcjYmFyMicsIHtcclxuICAgICAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgtNDVkZWcpJyxcclxuICAgICAgICAgIGR1cmF0aW9uOiAwLjUsXHJcbiAgICAgICAgICBlYXNlOiAnZXhwb1NjYWxlJyxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG4gIGdzYXAudG8oZHJvcERvd25NZW51LCB7XHJcbiAgICB0cmFuc2xhdGVZOiAnMCUnLFxyXG4gIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGJ1cmdlck1lbnVBbmltYXRpb25DbG9zZSgpIHtcclxuICBkcm9wRG93bk1lbnUuY2xhc3NMaXN0LnJlbW92ZSgnT3BlbicpO1xyXG4gIGJhcnMuZm9yRWFjaCgoYmFyLCBrZXkpID0+IHtcclxuICAgIGJhci5zZXRBdHRyaWJ1dGUoJ2lkJywgYmFyLmNsYXNzTmFtZSArIGtleSk7XHJcblxyXG4gICAgc3dpdGNoIChiYXIuaWQpIHtcclxuICAgICAgY2FzZSAnYmFyMCc6IHtcclxuICAgICAgICBnc2FwLnRvKCcjYmFyMCcsIHtcclxuICAgICAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgwZGVnKScsXHJcbiAgICAgICAgICBkdXJhdGlvbjogMC41LFxyXG4gICAgICAgICAgZWFzZTogJ2V4cG9TY2FsZScsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnYmFyMSc6IHtcclxuICAgICAgICBnc2FwLnRvKCcjYmFyMScsIHsgb3BhY2l0eTogMSwgZHVyYXRpb246IDAuNSwgZWFzZTogJ2V4cG9TY2FsZScgfSk7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnYmFyMic6IHtcclxuICAgICAgICBnc2FwLnRvKCcjYmFyMicsIHtcclxuICAgICAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgwZGVnKScsXHJcbiAgICAgICAgICBkdXJhdGlvbjogMC41LFxyXG4gICAgICAgICAgZWFzZTogJ2V4cG9TY2FsZScsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuICBnc2FwLnRvKGRyb3BEb3duTWVudSwge1xyXG4gICAgdHJhbnNsYXRlWTogJy0xMDAlJyxcclxuICB9KTtcclxufVxyXG4iLCJpbXBvcnQgZ3NhcCBmcm9tICdnc2FwJztcclxuY29uc3QgbGF5ZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmxheWVyJyk7XHJcblxyXG5jb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcclxuICBnc2FwLmZyb21UbyhcclxuICAgICcubGF5ZXInLFxyXG4gICAge1xyXG4gICAgICBvcGFjaXR5OiAwLjEsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICBzdGFnZ2VyOiB7XHJcbiAgICAgICAgZWFjaDogMC41LFxyXG4gICAgICAgIGZyb206IDAsXHJcbiAgICAgIH0sXHJcbiAgICB9XHJcbiAgKTtcclxufSwgMTUwMCk7XHJcblxyXG5mdW5jdGlvbiBzaG93Q29udGVudCgpIHtcclxuICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmVsb2FkZXInKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKS5zdHlsZS5vcGFjaXR5ID0gJzEnO1xyXG4gICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XHJcbiAgfSwgMTUwMCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEFuaW1hdGlvbigpIHtcclxuICBjb25zb2xlLmxvZyhsYXllcnMpO1xyXG59XHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHNob3dDb250ZW50KTtcclxuXHJcbi8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGZ1bmN0aW9uIChldmVudCkge1xyXG4vLyAgIGlmIChldmVudC5sZW5ndGhDb21wdXRhYmxlKSB7XHJcbi8vICAgICB2YXIgcGVyY2VudGFnZSA9IE1hdGgucm91bmQoKGV2ZW50LmxvYWRlZCAqIDEwMCkgLyBldmVudC50b3RhbCk7XHJcbi8vICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9hZGluZ1BlcmNlbnRhZ2UnKS5pbm5lclRleHQgPSBwZXJjZW50YWdlICsgJyUnO1xyXG4vLyAgIH1cclxuLy8gfSk7XHJcbiIsInZhciBfX2Fzc2lnbj1mdW5jdGlvbigpe3JldHVybiBfX2Fzc2lnbj1PYmplY3QuYXNzaWdufHxmdW5jdGlvbiBfX2Fzc2lnbih0KXtmb3IodmFyIGUsaT0xLG89YXJndW1lbnRzLmxlbmd0aDtpPG87aSsrKWZvcih2YXIgcyBpbiBlPWFyZ3VtZW50c1tpXSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxzKSYmKHRbc109ZVtzXSk7cmV0dXJuIHR9LF9fYXNzaWduLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07XCJmdW5jdGlvblwiPT10eXBlb2YgU3VwcHJlc3NlZEVycm9yJiZTdXBwcmVzc2VkRXJyb3I7ZnVuY3Rpb24gY2xhbXAodCxlLGkpe3JldHVybiBNYXRoLm1heCh0LE1hdGgubWluKGUsaSkpfWNsYXNzIEFuaW1hdGV7YWR2YW5jZSh0KXtpZighdGhpcy5pc1J1bm5pbmcpcmV0dXJuO2xldCBlPSExO2lmKHRoaXMubGVycCl0aGlzLnZhbHVlPWZ1bmN0aW9uIGRhbXAodCxlLGksbyl7cmV0dXJuIGZ1bmN0aW9uIGxlcnAodCxlLGkpe3JldHVybigxLWkpKnQraSplfSh0LGUsMS1NYXRoLmV4cCgtaSpvKSl9KHRoaXMudmFsdWUsdGhpcy50byw2MCp0aGlzLmxlcnAsdCksTWF0aC5yb3VuZCh0aGlzLnZhbHVlKT09PXRoaXMudG8mJih0aGlzLnZhbHVlPXRoaXMudG8sZT0hMCk7ZWxzZXt0aGlzLmN1cnJlbnRUaW1lKz10O2NvbnN0IGk9Y2xhbXAoMCx0aGlzLmN1cnJlbnRUaW1lL3RoaXMuZHVyYXRpb24sMSk7ZT1pPj0xO2NvbnN0IG89ZT8xOnRoaXMuZWFzaW5nKGkpO3RoaXMudmFsdWU9dGhpcy5mcm9tKyh0aGlzLnRvLXRoaXMuZnJvbSkqb31lJiZ0aGlzLnN0b3AoKSx0aGlzLm9uVXBkYXRlPy4odGhpcy52YWx1ZSxlKX1zdG9wKCl7dGhpcy5pc1J1bm5pbmc9ITF9ZnJvbVRvKHQsZSx7bGVycDppPS4xLGR1cmF0aW9uOm89MSxlYXNpbmc6cz0odD0+dCksb25TdGFydDpuLG9uVXBkYXRlOnJ9KXt0aGlzLmZyb209dGhpcy52YWx1ZT10LHRoaXMudG89ZSx0aGlzLmxlcnA9aSx0aGlzLmR1cmF0aW9uPW8sdGhpcy5lYXNpbmc9cyx0aGlzLmN1cnJlbnRUaW1lPTAsdGhpcy5pc1J1bm5pbmc9ITAsbj8uKCksdGhpcy5vblVwZGF0ZT1yfX1jbGFzcyBEaW1lbnNpb25ze2NvbnN0cnVjdG9yKHt3cmFwcGVyOnQsY29udGVudDplLGF1dG9SZXNpemU6aT0hMCxkZWJvdW5jZTpvPTI1MH09e30pe3RoaXMud3JhcHBlcj10LHRoaXMuY29udGVudD1lLGkmJih0aGlzLmRlYm91bmNlZFJlc2l6ZT1mdW5jdGlvbiBkZWJvdW5jZSh0LGUpe2xldCBpO3JldHVybiBmdW5jdGlvbigpe2xldCBvPWFyZ3VtZW50cyxzPXRoaXM7Y2xlYXJUaW1lb3V0KGkpLGk9c2V0VGltZW91dCgoZnVuY3Rpb24oKXt0LmFwcGx5KHMsbyl9KSxlKX19KHRoaXMucmVzaXplLG8pLHRoaXMud3JhcHBlcj09PXdpbmRvdz93aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHRoaXMuZGVib3VuY2VkUmVzaXplLCExKToodGhpcy53cmFwcGVyUmVzaXplT2JzZXJ2ZXI9bmV3IFJlc2l6ZU9ic2VydmVyKHRoaXMuZGVib3VuY2VkUmVzaXplKSx0aGlzLndyYXBwZXJSZXNpemVPYnNlcnZlci5vYnNlcnZlKHRoaXMud3JhcHBlcikpLHRoaXMuY29udGVudFJlc2l6ZU9ic2VydmVyPW5ldyBSZXNpemVPYnNlcnZlcih0aGlzLmRlYm91bmNlZFJlc2l6ZSksdGhpcy5jb250ZW50UmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmNvbnRlbnQpKSx0aGlzLnJlc2l6ZSgpfWRlc3Ryb3koKXt0aGlzLndyYXBwZXJSZXNpemVPYnNlcnZlcj8uZGlzY29ubmVjdCgpLHRoaXMuY29udGVudFJlc2l6ZU9ic2VydmVyPy5kaXNjb25uZWN0KCksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIix0aGlzLmRlYm91bmNlZFJlc2l6ZSwhMSl9cmVzaXplPSgpPT57dGhpcy5vbldyYXBwZXJSZXNpemUoKSx0aGlzLm9uQ29udGVudFJlc2l6ZSgpfTtvbldyYXBwZXJSZXNpemU9KCk9Pnt0aGlzLndyYXBwZXI9PT13aW5kb3c/KHRoaXMud2lkdGg9d2luZG93LmlubmVyV2lkdGgsdGhpcy5oZWlnaHQ9d2luZG93LmlubmVySGVpZ2h0KToodGhpcy53aWR0aD10aGlzLndyYXBwZXIuY2xpZW50V2lkdGgsdGhpcy5oZWlnaHQ9dGhpcy53cmFwcGVyLmNsaWVudEhlaWdodCl9O29uQ29udGVudFJlc2l6ZT0oKT0+e3RoaXMud3JhcHBlcj09PXdpbmRvdz8odGhpcy5zY3JvbGxIZWlnaHQ9dGhpcy5jb250ZW50LnNjcm9sbEhlaWdodCx0aGlzLnNjcm9sbFdpZHRoPXRoaXMuY29udGVudC5zY3JvbGxXaWR0aCk6KHRoaXMuc2Nyb2xsSGVpZ2h0PXRoaXMud3JhcHBlci5zY3JvbGxIZWlnaHQsdGhpcy5zY3JvbGxXaWR0aD10aGlzLndyYXBwZXIuc2Nyb2xsV2lkdGgpfTtnZXQgbGltaXQoKXtyZXR1cm57eDp0aGlzLnNjcm9sbFdpZHRoLXRoaXMud2lkdGgseTp0aGlzLnNjcm9sbEhlaWdodC10aGlzLmhlaWdodH19fWNsYXNzIEVtaXR0ZXJ7Y29uc3RydWN0b3IoKXt0aGlzLmV2ZW50cz17fX1lbWl0KHQsLi4uZSl7bGV0IGk9dGhpcy5ldmVudHNbdF18fFtdO2ZvcihsZXQgdD0wLG89aS5sZW5ndGg7dDxvO3QrKylpW3RdKC4uLmUpfW9uKHQsZSl7cmV0dXJuIHRoaXMuZXZlbnRzW3RdPy5wdXNoKGUpfHwodGhpcy5ldmVudHNbdF09W2VdKSwoKT0+e3RoaXMuZXZlbnRzW3RdPXRoaXMuZXZlbnRzW3RdPy5maWx0ZXIoKHQ9PmUhPT10KSl9fW9mZih0LGUpe3RoaXMuZXZlbnRzW3RdPXRoaXMuZXZlbnRzW3RdPy5maWx0ZXIoKHQ9PmUhPT10KSl9ZGVzdHJveSgpe3RoaXMuZXZlbnRzPXt9fX1jb25zdCB0PTEwMC82O2NsYXNzIFZpcnR1YWxTY3JvbGx7Y29uc3RydWN0b3IodCx7d2hlZWxNdWx0aXBsaWVyOmU9MSx0b3VjaE11bHRpcGxpZXI6aT0xfSl7dGhpcy5lbGVtZW50PXQsdGhpcy53aGVlbE11bHRpcGxpZXI9ZSx0aGlzLnRvdWNoTXVsdGlwbGllcj1pLHRoaXMudG91Y2hTdGFydD17eDpudWxsLHk6bnVsbH0sdGhpcy5lbWl0dGVyPW5ldyBFbWl0dGVyLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsdGhpcy5vbldpbmRvd1Jlc2l6ZSwhMSksdGhpcy5vbldpbmRvd1Jlc2l6ZSgpLHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIix0aGlzLm9uV2hlZWwse3Bhc3NpdmU6ITF9KSx0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIix0aGlzLm9uVG91Y2hTdGFydCx7cGFzc2l2ZTohMX0pLHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsdGhpcy5vblRvdWNoTW92ZSx7cGFzc2l2ZTohMX0pLHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIix0aGlzLm9uVG91Y2hFbmQse3Bhc3NpdmU6ITF9KX1vbih0LGUpe3JldHVybiB0aGlzLmVtaXR0ZXIub24odCxlKX1kZXN0cm95KCl7dGhpcy5lbWl0dGVyLmRlc3Ryb3koKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHRoaXMub25XaW5kb3dSZXNpemUsITEpLHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwid2hlZWxcIix0aGlzLm9uV2hlZWwse3Bhc3NpdmU6ITF9KSx0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIix0aGlzLm9uVG91Y2hTdGFydCx7cGFzc2l2ZTohMX0pLHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsdGhpcy5vblRvdWNoTW92ZSx7cGFzc2l2ZTohMX0pLHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIix0aGlzLm9uVG91Y2hFbmQse3Bhc3NpdmU6ITF9KX1vblRvdWNoU3RhcnQ9dD0+e2NvbnN0e2NsaWVudFg6ZSxjbGllbnRZOml9PXQudGFyZ2V0VG91Y2hlcz90LnRhcmdldFRvdWNoZXNbMF06dDt0aGlzLnRvdWNoU3RhcnQueD1lLHRoaXMudG91Y2hTdGFydC55PWksdGhpcy5sYXN0RGVsdGE9e3g6MCx5OjB9LHRoaXMuZW1pdHRlci5lbWl0KFwic2Nyb2xsXCIse2RlbHRhWDowLGRlbHRhWTowLGV2ZW50OnR9KX07b25Ub3VjaE1vdmU9dD0+e2NvbnN0e2NsaWVudFg6ZSxjbGllbnRZOml9PXQudGFyZ2V0VG91Y2hlcz90LnRhcmdldFRvdWNoZXNbMF06dCxvPS0oZS10aGlzLnRvdWNoU3RhcnQueCkqdGhpcy50b3VjaE11bHRpcGxpZXIscz0tKGktdGhpcy50b3VjaFN0YXJ0LnkpKnRoaXMudG91Y2hNdWx0aXBsaWVyO3RoaXMudG91Y2hTdGFydC54PWUsdGhpcy50b3VjaFN0YXJ0Lnk9aSx0aGlzLmxhc3REZWx0YT17eDpvLHk6c30sdGhpcy5lbWl0dGVyLmVtaXQoXCJzY3JvbGxcIix7ZGVsdGFYOm8sZGVsdGFZOnMsZXZlbnQ6dH0pfTtvblRvdWNoRW5kPXQ9Pnt0aGlzLmVtaXR0ZXIuZW1pdChcInNjcm9sbFwiLHtkZWx0YVg6dGhpcy5sYXN0RGVsdGEueCxkZWx0YVk6dGhpcy5sYXN0RGVsdGEueSxldmVudDp0fSl9O29uV2hlZWw9ZT0+e2xldHtkZWx0YVg6aSxkZWx0YVk6byxkZWx0YU1vZGU6c309ZTtpKj0xPT09cz90OjI9PT1zP3RoaXMud2luZG93V2lkdGg6MSxvKj0xPT09cz90OjI9PT1zP3RoaXMud2luZG93SGVpZ2h0OjEsaSo9dGhpcy53aGVlbE11bHRpcGxpZXIsbyo9dGhpcy53aGVlbE11bHRpcGxpZXIsdGhpcy5lbWl0dGVyLmVtaXQoXCJzY3JvbGxcIix7ZGVsdGFYOmksZGVsdGFZOm8sZXZlbnQ6ZX0pfTtvbldpbmRvd1Jlc2l6ZT0oKT0+e3RoaXMud2luZG93V2lkdGg9d2luZG93LmlubmVyV2lkdGgsdGhpcy53aW5kb3dIZWlnaHQ9d2luZG93LmlubmVySGVpZ2h0fX12YXIgZT1mdW5jdGlvbigpe2Z1bmN0aW9uIExlbmlzKHQpe3ZhciBlPXZvaWQgMD09PXQ/e306dCxpPWUud3JhcHBlcixvPXZvaWQgMD09PWk/d2luZG93Omkscz1lLmNvbnRlbnQsbj12b2lkIDA9PT1zP2RvY3VtZW50LmRvY3VtZW50RWxlbWVudDpzLHI9ZS53aGVlbEV2ZW50c1RhcmdldCxsPXZvaWQgMD09PXI/bzpyLGg9ZS5ldmVudHNUYXJnZXQsYT12b2lkIDA9PT1oP2w6aCxjPWUuc21vb3RoV2hlZWwscD12b2lkIDA9PT1jfHxjLHU9ZS5zeW5jVG91Y2gsZD12b2lkIDAhPT11JiZ1LG09ZS5zeW5jVG91Y2hMZXJwLHY9dm9pZCAwPT09bT8uMDc1Om0sZz1lLnRvdWNoSW5lcnRpYU11bHRpcGxpZXIsZj12b2lkIDA9PT1nPzM1OmcsUz1lLmR1cmF0aW9uLHc9ZS5lYXNpbmcseT12b2lkIDA9PT13P2Z1bmN0aW9uKHQpe3JldHVybiBNYXRoLm1pbigxLDEuMDAxLU1hdGgucG93KDIsLTEwKnQpKX06dyxiPWUubGVycCxMPXZvaWQgMD09PWI/IVMmJi4xOmIsXz1lLmluZmluaXRlLHo9dm9pZCAwIT09XyYmXyxFPWUub3JpZW50YXRpb24sVD12b2lkIDA9PT1FP1widmVydGljYWxcIjpFLE09ZS5nZXN0dXJlT3JpZW50YXRpb24sUj12b2lkIDA9PT1NP1widmVydGljYWxcIjpNLE89ZS50b3VjaE11bHRpcGxpZXIsVz12b2lkIDA9PT1PPzE6Tyx4PWUud2hlZWxNdWx0aXBsaWVyLEg9dm9pZCAwPT09eD8xOngsTj1lLmF1dG9SZXNpemUsaz12b2lkIDA9PT1OfHxOLEM9ZS5fX2V4cGVyaW1lbnRhbF9fbmFpdmVEaW1lbnNpb25zLGo9dm9pZCAwIT09QyYmQyxQPXRoaXM7dGhpcy5fX2lzU21vb3RoPSExLHRoaXMuX19pc1Njcm9sbGluZz0hMSx0aGlzLl9faXNTdG9wcGVkPSExLHRoaXMuX19pc0xvY2tlZD0hMSx0aGlzLm9uVmlydHVhbFNjcm9sbD1mdW5jdGlvbih0KXt2YXIgZT10LmRlbHRhWCxpPXQuZGVsdGFZLG89dC5ldmVudDtpZighby5jdHJsS2V5KXt2YXIgcz1vLnR5cGUuaW5jbHVkZXMoXCJ0b3VjaFwiKSxuPW8udHlwZS5pbmNsdWRlcyhcIndoZWVsXCIpO2lmKFAub3B0aW9ucy5zeW5jVG91Y2gmJnMmJlwidG91Y2hzdGFydFwiPT09by50eXBlJiYhUC5pc1N0b3BwZWQmJiFQLmlzTG9ja2VkKVAucmVzZXQoKTtlbHNle3ZhciByPTA9PT1lJiYwPT09aSxsPVwidmVydGljYWxcIj09PVAub3B0aW9ucy5nZXN0dXJlT3JpZW50YXRpb24mJjA9PT1pfHxcImhvcml6b250YWxcIj09PVAub3B0aW9ucy5nZXN0dXJlT3JpZW50YXRpb24mJjA9PT1lO2lmKCFyJiYhbCl7dmFyIGg9by5jb21wb3NlZFBhdGgoKTtpZighKGg9aC5zbGljZSgwLGguaW5kZXhPZihQLnJvb3RFbGVtZW50KSkpLmZpbmQoKGZ1bmN0aW9uKHQpe3ZhciBlLGksbyxyLGw7cmV0dXJuKG51bGw9PT0oZT10Lmhhc0F0dHJpYnV0ZSl8fHZvaWQgMD09PWU/dm9pZCAwOmUuY2FsbCh0LFwiZGF0YS1sZW5pcy1wcmV2ZW50XCIpKXx8cyYmKG51bGw9PT0oaT10Lmhhc0F0dHJpYnV0ZSl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0LFwiZGF0YS1sZW5pcy1wcmV2ZW50LXRvdWNoXCIpKXx8biYmKG51bGw9PT0obz10Lmhhc0F0dHJpYnV0ZSl8fHZvaWQgMD09PW8/dm9pZCAwOm8uY2FsbCh0LFwiZGF0YS1sZW5pcy1wcmV2ZW50LXdoZWVsXCIpKXx8KG51bGw9PT0ocj10LmNsYXNzTGlzdCl8fHZvaWQgMD09PXI/dm9pZCAwOnIuY29udGFpbnMoXCJsZW5pc1wiKSkmJiEobnVsbD09PShsPXQuY2xhc3NMaXN0KXx8dm9pZCAwPT09bD92b2lkIDA6bC5jb250YWlucyhcImxlbmlzLXN0b3BwZWRcIikpfSkpKWlmKFAuaXNTdG9wcGVkfHxQLmlzTG9ja2VkKW8ucHJldmVudERlZmF1bHQoKTtlbHNle2lmKFAuaXNTbW9vdGg9UC5vcHRpb25zLnN5bmNUb3VjaCYmc3x8UC5vcHRpb25zLnNtb290aFdoZWVsJiZuLCFQLmlzU21vb3RoKXJldHVybiBQLmlzU2Nyb2xsaW5nPSExLHZvaWQgUC5hbmltYXRlLnN0b3AoKTtvLnByZXZlbnREZWZhdWx0KCk7dmFyIGE9aTtcImJvdGhcIj09PVAub3B0aW9ucy5nZXN0dXJlT3JpZW50YXRpb24/YT1NYXRoLmFicyhpKT5NYXRoLmFicyhlKT9pOmU6XCJob3Jpem9udGFsXCI9PT1QLm9wdGlvbnMuZ2VzdHVyZU9yaWVudGF0aW9uJiYoYT1lKTt2YXIgYz1zJiZQLm9wdGlvbnMuc3luY1RvdWNoLHA9cyYmXCJ0b3VjaGVuZFwiPT09by50eXBlJiZNYXRoLmFicyhhKT41O3AmJihhPVAudmVsb2NpdHkqUC5vcHRpb25zLnRvdWNoSW5lcnRpYU11bHRpcGxpZXIpLFAuc2Nyb2xsVG8oUC50YXJnZXRTY3JvbGwrYSxfX2Fzc2lnbih7cHJvZ3JhbW1hdGljOiExfSxjP3tsZXJwOnA/UC5vcHRpb25zLnN5bmNUb3VjaExlcnA6MX06e2xlcnA6UC5vcHRpb25zLmxlcnAsZHVyYXRpb246UC5vcHRpb25zLmR1cmF0aW9uLGVhc2luZzpQLm9wdGlvbnMuZWFzaW5nfSkpfX19fX0sdGhpcy5vbk5hdGl2ZVNjcm9sbD1mdW5jdGlvbigpe2lmKCFQLl9fcHJldmVudE5leHRTY3JvbGxFdmVudCYmIVAuaXNTY3JvbGxpbmcpe3ZhciB0PVAuYW5pbWF0ZWRTY3JvbGw7UC5hbmltYXRlZFNjcm9sbD1QLnRhcmdldFNjcm9sbD1QLmFjdHVhbFNjcm9sbCxQLnZlbG9jaXR5PTAsUC5kaXJlY3Rpb249TWF0aC5zaWduKFAuYW5pbWF0ZWRTY3JvbGwtdCksUC5lbWl0KCl9fSx3aW5kb3cubGVuaXNWZXJzaW9uPVwiMS4wLjQ1XCIsbyE9PWRvY3VtZW50LmRvY3VtZW50RWxlbWVudCYmbyE9PWRvY3VtZW50LmJvZHl8fChvPXdpbmRvdyksdGhpcy5vcHRpb25zPXt3cmFwcGVyOm8sY29udGVudDpuLHdoZWVsRXZlbnRzVGFyZ2V0OmwsZXZlbnRzVGFyZ2V0OmEsc21vb3RoV2hlZWw6cCxzeW5jVG91Y2g6ZCxzeW5jVG91Y2hMZXJwOnYsdG91Y2hJbmVydGlhTXVsdGlwbGllcjpmLGR1cmF0aW9uOlMsZWFzaW5nOnksbGVycDpMLGluZmluaXRlOnosZ2VzdHVyZU9yaWVudGF0aW9uOlIsb3JpZW50YXRpb246VCx0b3VjaE11bHRpcGxpZXI6Vyx3aGVlbE11bHRpcGxpZXI6SCxhdXRvUmVzaXplOmssX19leHBlcmltZW50YWxfX25haXZlRGltZW5zaW9uczpqfSx0aGlzLmFuaW1hdGU9bmV3IEFuaW1hdGUsdGhpcy5lbWl0dGVyPW5ldyBFbWl0dGVyLHRoaXMuZGltZW5zaW9ucz1uZXcgRGltZW5zaW9ucyh7d3JhcHBlcjpvLGNvbnRlbnQ6bixhdXRvUmVzaXplOmt9KSx0aGlzLnRvZ2dsZUNsYXNzTmFtZShcImxlbmlzXCIsITApLHRoaXMudmVsb2NpdHk9MCx0aGlzLmlzTG9ja2VkPSExLHRoaXMuaXNTdG9wcGVkPSExLHRoaXMuaXNTbW9vdGg9ZHx8cCx0aGlzLmlzU2Nyb2xsaW5nPSExLHRoaXMudGFyZ2V0U2Nyb2xsPXRoaXMuYW5pbWF0ZWRTY3JvbGw9dGhpcy5hY3R1YWxTY3JvbGwsdGhpcy5vcHRpb25zLndyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLHRoaXMub25OYXRpdmVTY3JvbGwsITEpLHRoaXMudmlydHVhbFNjcm9sbD1uZXcgVmlydHVhbFNjcm9sbChhLHt0b3VjaE11bHRpcGxpZXI6Vyx3aGVlbE11bHRpcGxpZXI6SH0pLHRoaXMudmlydHVhbFNjcm9sbC5vbihcInNjcm9sbFwiLHRoaXMub25WaXJ0dWFsU2Nyb2xsKX1yZXR1cm4gTGVuaXMucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt0aGlzLmVtaXR0ZXIuZGVzdHJveSgpLHRoaXMub3B0aW9ucy53cmFwcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIix0aGlzLm9uTmF0aXZlU2Nyb2xsLCExKSx0aGlzLnZpcnR1YWxTY3JvbGwuZGVzdHJveSgpLHRoaXMuZGltZW5zaW9ucy5kZXN0cm95KCksdGhpcy50b2dnbGVDbGFzc05hbWUoXCJsZW5pc1wiLCExKSx0aGlzLnRvZ2dsZUNsYXNzTmFtZShcImxlbmlzLXNtb290aFwiLCExKSx0aGlzLnRvZ2dsZUNsYXNzTmFtZShcImxlbmlzLXNjcm9sbGluZ1wiLCExKSx0aGlzLnRvZ2dsZUNsYXNzTmFtZShcImxlbmlzLXN0b3BwZWRcIiwhMSksdGhpcy50b2dnbGVDbGFzc05hbWUoXCJsZW5pcy1sb2NrZWRcIiwhMSl9LExlbmlzLnByb3RvdHlwZS5vbj1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmVtaXR0ZXIub24odCxlKX0sTGVuaXMucHJvdG90eXBlLm9mZj1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmVtaXR0ZXIub2ZmKHQsZSl9LExlbmlzLnByb3RvdHlwZS5zZXRTY3JvbGw9ZnVuY3Rpb24odCl7dGhpcy5pc0hvcml6b250YWw/dGhpcy5yb290RWxlbWVudC5zY3JvbGxMZWZ0PXQ6dGhpcy5yb290RWxlbWVudC5zY3JvbGxUb3A9dH0sTGVuaXMucHJvdG90eXBlLnJlc2l6ZT1mdW5jdGlvbigpe3RoaXMuZGltZW5zaW9ucy5yZXNpemUoKX0sTGVuaXMucHJvdG90eXBlLmVtaXQ9ZnVuY3Rpb24oKXt0aGlzLmVtaXR0ZXIuZW1pdChcInNjcm9sbFwiLHRoaXMpfSxMZW5pcy5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmlzTG9ja2VkPSExLHRoaXMuaXNTY3JvbGxpbmc9ITEsdGhpcy5hbmltYXRlZFNjcm9sbD10aGlzLnRhcmdldFNjcm9sbD10aGlzLmFjdHVhbFNjcm9sbCx0aGlzLnZlbG9jaXR5PTAsdGhpcy5hbmltYXRlLnN0b3AoKX0sTGVuaXMucHJvdG90eXBlLnN0YXJ0PWZ1bmN0aW9uKCl7dGhpcy5pc1N0b3BwZWQmJih0aGlzLmlzU3RvcHBlZD0hMSx0aGlzLnJlc2V0KCkpfSxMZW5pcy5wcm90b3R5cGUuc3RvcD1mdW5jdGlvbigpe3RoaXMuaXNTdG9wcGVkfHwodGhpcy5pc1N0b3BwZWQ9ITAsdGhpcy5hbmltYXRlLnN0b3AoKSx0aGlzLnJlc2V0KCkpfSxMZW5pcy5wcm90b3R5cGUucmFmPWZ1bmN0aW9uKHQpe3ZhciBlPXQtKHRoaXMudGltZXx8dCk7dGhpcy50aW1lPXQsdGhpcy5hbmltYXRlLmFkdmFuY2UoLjAwMSplKX0sTGVuaXMucHJvdG90eXBlLnNjcm9sbFRvPWZ1bmN0aW9uKHQsZSl7dmFyIGk9dGhpcyxvPXZvaWQgMD09PWU/e306ZSxzPW8ub2Zmc2V0LG49dm9pZCAwPT09cz8wOnMscj1vLmltbWVkaWF0ZSxsPXZvaWQgMCE9PXImJnIsaD1vLmxvY2ssYT12b2lkIDAhPT1oJiZoLGM9by5kdXJhdGlvbixwPXZvaWQgMD09PWM/dGhpcy5vcHRpb25zLmR1cmF0aW9uOmMsdT1vLmVhc2luZyxkPXZvaWQgMD09PXU/dGhpcy5vcHRpb25zLmVhc2luZzp1LG09by5sZXJwLHY9dm9pZCAwPT09bT8hcCYmdGhpcy5vcHRpb25zLmxlcnA6bSxnPW8ub25Db21wbGV0ZSxmPW8uZm9yY2UsUz12b2lkIDAhPT1mJiZmLHc9by5wcm9ncmFtbWF0aWMseT12b2lkIDA9PT13fHx3O2lmKCF0aGlzLmlzU3RvcHBlZCYmIXRoaXMuaXNMb2NrZWR8fFMpe2lmKFtcInRvcFwiLFwibGVmdFwiLFwic3RhcnRcIl0uaW5jbHVkZXModCkpdD0wO2Vsc2UgaWYoW1wiYm90dG9tXCIsXCJyaWdodFwiLFwiZW5kXCJdLmluY2x1ZGVzKHQpKXQ9dGhpcy5saW1pdDtlbHNle3ZhciBiPXZvaWQgMDtpZihcInN0cmluZ1wiPT10eXBlb2YgdD9iPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodCk6KG51bGw9PXQ/dm9pZCAwOnQubm9kZVR5cGUpJiYoYj10KSxiKXtpZih0aGlzLm9wdGlvbnMud3JhcHBlciE9PXdpbmRvdyl7dmFyIEw9dGhpcy5vcHRpb25zLndyYXBwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7bi09dGhpcy5pc0hvcml6b250YWw/TC5sZWZ0OkwudG9wfXZhciBfPWIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7dD0odGhpcy5pc0hvcml6b250YWw/Xy5sZWZ0Ol8udG9wKSt0aGlzLmFuaW1hdGVkU2Nyb2xsfX1pZihcIm51bWJlclwiPT10eXBlb2YgdCl7aWYodCs9bix0PU1hdGgucm91bmQodCksdGhpcy5vcHRpb25zLmluZmluaXRlP3kmJih0aGlzLnRhcmdldFNjcm9sbD10aGlzLmFuaW1hdGVkU2Nyb2xsPXRoaXMuc2Nyb2xsKTp0PWNsYW1wKDAsdCx0aGlzLmxpbWl0KSxsKXJldHVybiB0aGlzLmFuaW1hdGVkU2Nyb2xsPXRoaXMudGFyZ2V0U2Nyb2xsPXQsdGhpcy5zZXRTY3JvbGwodGhpcy5zY3JvbGwpLHRoaXMucmVzZXQoKSx2b2lkKG51bGw9PWd8fGcodGhpcykpO2lmKCF5KXtpZih0PT09dGhpcy50YXJnZXRTY3JvbGwpcmV0dXJuO3RoaXMudGFyZ2V0U2Nyb2xsPXR9dGhpcy5hbmltYXRlLmZyb21Ubyh0aGlzLmFuaW1hdGVkU2Nyb2xsLHQse2R1cmF0aW9uOnAsZWFzaW5nOmQsbGVycDp2LG9uU3RhcnQ6ZnVuY3Rpb24oKXthJiYoaS5pc0xvY2tlZD0hMCksaS5pc1Njcm9sbGluZz0hMH0sb25VcGRhdGU6ZnVuY3Rpb24odCxlKXtpLmlzU2Nyb2xsaW5nPSEwLGkudmVsb2NpdHk9dC1pLmFuaW1hdGVkU2Nyb2xsLGkuZGlyZWN0aW9uPU1hdGguc2lnbihpLnZlbG9jaXR5KSxpLmFuaW1hdGVkU2Nyb2xsPXQsaS5zZXRTY3JvbGwoaS5zY3JvbGwpLHkmJihpLnRhcmdldFNjcm9sbD10KSxlfHxpLmVtaXQoKSxlJiYoaS5yZXNldCgpLGkuZW1pdCgpLG51bGw9PWd8fGcoaSksaS5fX3ByZXZlbnROZXh0U2Nyb2xsRXZlbnQ9ITAscmVxdWVzdEFuaW1hdGlvbkZyYW1lKChmdW5jdGlvbigpe2RlbGV0ZSBpLl9fcHJldmVudE5leHRTY3JvbGxFdmVudH0pKSl9fSl9fX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KExlbmlzLnByb3RvdHlwZSxcInJvb3RFbGVtZW50XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm9wdGlvbnMud3JhcHBlcj09PXdpbmRvdz9kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ6dGhpcy5vcHRpb25zLndyYXBwZXJ9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KExlbmlzLnByb3RvdHlwZSxcImxpbWl0XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm9wdGlvbnMuX19leHBlcmltZW50YWxfX25haXZlRGltZW5zaW9ucz90aGlzLmlzSG9yaXpvbnRhbD90aGlzLnJvb3RFbGVtZW50LnNjcm9sbFdpZHRoLXRoaXMucm9vdEVsZW1lbnQuY2xpZW50V2lkdGg6dGhpcy5yb290RWxlbWVudC5zY3JvbGxIZWlnaHQtdGhpcy5yb290RWxlbWVudC5jbGllbnRIZWlnaHQ6dGhpcy5kaW1lbnNpb25zLmxpbWl0W3RoaXMuaXNIb3Jpem9udGFsP1wieFwiOlwieVwiXX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoTGVuaXMucHJvdG90eXBlLFwiaXNIb3Jpem9udGFsXCIse2dldDpmdW5jdGlvbigpe3JldHVyblwiaG9yaXpvbnRhbFwiPT09dGhpcy5vcHRpb25zLm9yaWVudGF0aW9ufSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMZW5pcy5wcm90b3R5cGUsXCJhY3R1YWxTY3JvbGxcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNIb3Jpem9udGFsP3RoaXMucm9vdEVsZW1lbnQuc2Nyb2xsTGVmdDp0aGlzLnJvb3RFbGVtZW50LnNjcm9sbFRvcH0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoTGVuaXMucHJvdG90eXBlLFwic2Nyb2xsXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm9wdGlvbnMuaW5maW5pdGU/ZnVuY3Rpb24gbW9kdWxvKHQsZSl7cmV0dXJuKHQlZStlKSVlfSh0aGlzLmFuaW1hdGVkU2Nyb2xsLHRoaXMubGltaXQpOnRoaXMuYW5pbWF0ZWRTY3JvbGx9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KExlbmlzLnByb3RvdHlwZSxcInByb2dyZXNzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5saW1pdD8xOnRoaXMuc2Nyb2xsL3RoaXMubGltaXR9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KExlbmlzLnByb3RvdHlwZSxcImlzU21vb3RoXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9faXNTbW9vdGh9LHNldDpmdW5jdGlvbih0KXt0aGlzLl9faXNTbW9vdGghPT10JiYodGhpcy5fX2lzU21vb3RoPXQsdGhpcy50b2dnbGVDbGFzc05hbWUoXCJsZW5pcy1zbW9vdGhcIix0KSl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KExlbmlzLnByb3RvdHlwZSxcImlzU2Nyb2xsaW5nXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9faXNTY3JvbGxpbmd9LHNldDpmdW5jdGlvbih0KXt0aGlzLl9faXNTY3JvbGxpbmchPT10JiYodGhpcy5fX2lzU2Nyb2xsaW5nPXQsdGhpcy50b2dnbGVDbGFzc05hbWUoXCJsZW5pcy1zY3JvbGxpbmdcIix0KSl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KExlbmlzLnByb3RvdHlwZSxcImlzU3RvcHBlZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fX2lzU3RvcHBlZH0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuX19pc1N0b3BwZWQhPT10JiYodGhpcy5fX2lzU3RvcHBlZD10LHRoaXMudG9nZ2xlQ2xhc3NOYW1lKFwibGVuaXMtc3RvcHBlZFwiLHQpKX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoTGVuaXMucHJvdG90eXBlLFwiaXNMb2NrZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX19pc0xvY2tlZH0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuX19pc0xvY2tlZCE9PXQmJih0aGlzLl9faXNMb2NrZWQ9dCx0aGlzLnRvZ2dsZUNsYXNzTmFtZShcImxlbmlzLWxvY2tlZFwiLHQpKX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoTGVuaXMucHJvdG90eXBlLFwiY2xhc3NOYW1lXCIse2dldDpmdW5jdGlvbigpe3ZhciB0PVwibGVuaXNcIjtyZXR1cm4gdGhpcy5pc1N0b3BwZWQmJih0Kz1cIiBsZW5pcy1zdG9wcGVkXCIpLHRoaXMuaXNMb2NrZWQmJih0Kz1cIiBsZW5pcy1sb2NrZWRcIiksdGhpcy5pc1Njcm9sbGluZyYmKHQrPVwiIGxlbmlzLXNjcm9sbGluZ1wiKSx0aGlzLmlzU21vb3RoJiYodCs9XCIgbGVuaXMtc21vb3RoXCIpLHR9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksTGVuaXMucHJvdG90eXBlLnRvZ2dsZUNsYXNzTmFtZT1mdW5jdGlvbih0LGUpe3RoaXMucm9vdEVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSh0LGUpLHRoaXMuZW1pdHRlci5lbWl0KFwiY2xhc3NOYW1lIGNoYW5nZVwiLHRoaXMpfSxMZW5pc30oKTtleHBvcnR7ZSBhcyBkZWZhdWx0fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxlbmlzLm1qcy5tYXBcbiIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuLyohXG4gKiBPYnNlcnZlciAzLjEyLjVcbiAqIGh0dHBzOi8vZ3NhcC5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDI0LCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dzYXAuY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdTQVAgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG52YXIgZ3NhcCxcbiAgICBfY29yZUluaXR0ZWQsXG4gICAgX2NsYW1wLFxuICAgIF93aW4sXG4gICAgX2RvYyxcbiAgICBfZG9jRWwsXG4gICAgX2JvZHksXG4gICAgX2lzVG91Y2gsXG4gICAgX3BvaW50ZXJUeXBlLFxuICAgIFNjcm9sbFRyaWdnZXIsXG4gICAgX3Jvb3QsXG4gICAgX25vcm1hbGl6ZXIsXG4gICAgX2V2ZW50VHlwZXMsXG4gICAgX2NvbnRleHQsXG4gICAgX2dldEdTQVAgPSBmdW5jdGlvbiBfZ2V0R1NBUCgpIHtcbiAgcmV0dXJuIGdzYXAgfHwgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiAoZ3NhcCA9IHdpbmRvdy5nc2FwKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luICYmIGdzYXA7XG59LFxuICAgIF9zdGFydHVwID0gMSxcbiAgICBfb2JzZXJ2ZXJzID0gW10sXG4gICAgX3Njcm9sbGVycyA9IFtdLFxuICAgIF9wcm94aWVzID0gW10sXG4gICAgX2dldFRpbWUgPSBEYXRlLm5vdyxcbiAgICBfYnJpZGdlID0gZnVuY3Rpb24gX2JyaWRnZShuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59LFxuICAgIF9pbnRlZ3JhdGUgPSBmdW5jdGlvbiBfaW50ZWdyYXRlKCkge1xuICB2YXIgY29yZSA9IFNjcm9sbFRyaWdnZXIuY29yZSxcbiAgICAgIGRhdGEgPSBjb3JlLmJyaWRnZSB8fCB7fSxcbiAgICAgIHNjcm9sbGVycyA9IGNvcmUuX3Njcm9sbGVycyxcbiAgICAgIHByb3hpZXMgPSBjb3JlLl9wcm94aWVzO1xuICBzY3JvbGxlcnMucHVzaC5hcHBseShzY3JvbGxlcnMsIF9zY3JvbGxlcnMpO1xuICBwcm94aWVzLnB1c2guYXBwbHkocHJveGllcywgX3Byb3hpZXMpO1xuICBfc2Nyb2xsZXJzID0gc2Nyb2xsZXJzO1xuICBfcHJveGllcyA9IHByb3hpZXM7XG5cbiAgX2JyaWRnZSA9IGZ1bmN0aW9uIF9icmlkZ2UobmFtZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gZGF0YVtuYW1lXSh2YWx1ZSk7XG4gIH07XG59LFxuICAgIF9nZXRQcm94eVByb3AgPSBmdW5jdGlvbiBfZ2V0UHJveHlQcm9wKGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gIHJldHVybiB+X3Byb3hpZXMuaW5kZXhPZihlbGVtZW50KSAmJiBfcHJveGllc1tfcHJveGllcy5pbmRleE9mKGVsZW1lbnQpICsgMV1bcHJvcGVydHldO1xufSxcbiAgICBfaXNWaWV3cG9ydCA9IGZ1bmN0aW9uIF9pc1ZpZXdwb3J0KGVsKSB7XG4gIHJldHVybiAhIX5fcm9vdC5pbmRleE9mKGVsKTtcbn0sXG4gICAgX2FkZExpc3RlbmVyID0gZnVuY3Rpb24gX2FkZExpc3RlbmVyKGVsZW1lbnQsIHR5cGUsIGZ1bmMsIHBhc3NpdmUsIGNhcHR1cmUpIHtcbiAgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jLCB7XG4gICAgcGFzc2l2ZTogcGFzc2l2ZSAhPT0gZmFsc2UsXG4gICAgY2FwdHVyZTogISFjYXB0dXJlXG4gIH0pO1xufSxcbiAgICBfcmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiBfcmVtb3ZlTGlzdGVuZXIoZWxlbWVudCwgdHlwZSwgZnVuYywgY2FwdHVyZSkge1xuICByZXR1cm4gZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmMsICEhY2FwdHVyZSk7XG59LFxuICAgIF9zY3JvbGxMZWZ0ID0gXCJzY3JvbGxMZWZ0XCIsXG4gICAgX3Njcm9sbFRvcCA9IFwic2Nyb2xsVG9wXCIsXG4gICAgX29uU2Nyb2xsID0gZnVuY3Rpb24gX29uU2Nyb2xsKCkge1xuICByZXR1cm4gX25vcm1hbGl6ZXIgJiYgX25vcm1hbGl6ZXIuaXNQcmVzc2VkIHx8IF9zY3JvbGxlcnMuY2FjaGUrKztcbn0sXG4gICAgX3Njcm9sbENhY2hlRnVuYyA9IGZ1bmN0aW9uIF9zY3JvbGxDYWNoZUZ1bmMoZiwgZG9Ob3RDYWNoZSkge1xuICB2YXIgY2FjaGluZ0Z1bmMgPSBmdW5jdGlvbiBjYWNoaW5nRnVuYyh2YWx1ZSkge1xuICAgIC8vIHNpbmNlIHJlYWRpbmcgdGhlIHNjcm9sbFRvcC9zY3JvbGxMZWZ0L3BhZ2VPZmZzZXRZL3BhZ2VPZmZzZXRYIGNhbiB0cmlnZ2VyIGEgbGF5b3V0LCB0aGlzIGZ1bmN0aW9uIGFsbG93cyB1cyB0byBjYWNoZSB0aGUgdmFsdWUgc28gaXQgb25seSBnZXRzIHJlYWQgZnJlc2ggYWZ0ZXIgYSBcInNjcm9sbFwiIGV2ZW50IGZpcmVzIChvciB3aGlsZSB3ZSdyZSByZWZyZXNoaW5nIGJlY2F1c2UgdGhhdCBjYW4gbGVuZ3RoZW4gdGhlIHBhZ2UgYW5kIGFsdGVyIHRoZSBzY3JvbGwgcG9zaXRpb24pLiB3aGVuIFwic29mdFwiIGlzIHRydWUsIHRoYXQgbWVhbnMgZG9uJ3QgYWN0dWFsbHkgc2V0IHRoZSBzY3JvbGwsIGJ1dCBjYWNoZSB0aGUgbmV3IHZhbHVlIGluc3RlYWQgKHVzZWZ1bCBpbiBTY3JvbGxTbW9vdGhlcilcbiAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgIF9zdGFydHVwICYmIChfd2luLmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcIm1hbnVhbFwiKTsgLy8gb3RoZXJ3aXNlIHRoZSBuZXcgcG9zaXRpb24gd2lsbCBnZXQgb3ZlcndyaXR0ZW4gYnkgdGhlIGJyb3dzZXIgb25sb2FkLlxuXG4gICAgICB2YXIgaXNOb3JtYWxpemluZyA9IF9ub3JtYWxpemVyICYmIF9ub3JtYWxpemVyLmlzUHJlc3NlZDtcbiAgICAgIHZhbHVlID0gY2FjaGluZ0Z1bmMudiA9IE1hdGgucm91bmQodmFsdWUpIHx8IChfbm9ybWFsaXplciAmJiBfbm9ybWFsaXplci5pT1MgPyAxIDogMCk7IC8vVE9ETzogaU9TIEJ1ZzogaWYgeW91IGFsbG93IGl0IHRvIGdvIHRvIDAsIFNhZmFyaSBjYW4gc3RhcnQgdG8gcmVwb3J0IHN1cGVyIHN0cmFuZ2UgKHdpbGRseSBpbmFjY3VyYXRlKSB0b3VjaCBwb3NpdGlvbnMhXG5cbiAgICAgIGYodmFsdWUpO1xuICAgICAgY2FjaGluZ0Z1bmMuY2FjaGVJRCA9IF9zY3JvbGxlcnMuY2FjaGU7XG4gICAgICBpc05vcm1hbGl6aW5nICYmIF9icmlkZ2UoXCJzc1wiLCB2YWx1ZSk7IC8vIHNldCBzY3JvbGwgKG5vdGlmeSBTY3JvbGxUcmlnZ2VyIHNvIGl0IGNhbiBkaXNwYXRjaCBhIFwic2Nyb2xsU3RhcnRcIiBldmVudCBpZiBuZWNlc3NhcnlcbiAgICB9IGVsc2UgaWYgKGRvTm90Q2FjaGUgfHwgX3Njcm9sbGVycy5jYWNoZSAhPT0gY2FjaGluZ0Z1bmMuY2FjaGVJRCB8fCBfYnJpZGdlKFwicmVmXCIpKSB7XG4gICAgICBjYWNoaW5nRnVuYy5jYWNoZUlEID0gX3Njcm9sbGVycy5jYWNoZTtcbiAgICAgIGNhY2hpbmdGdW5jLnYgPSBmKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhY2hpbmdGdW5jLnYgKyBjYWNoaW5nRnVuYy5vZmZzZXQ7XG4gIH07XG5cbiAgY2FjaGluZ0Z1bmMub2Zmc2V0ID0gMDtcbiAgcmV0dXJuIGYgJiYgY2FjaGluZ0Z1bmM7XG59LFxuICAgIF9ob3Jpem9udGFsID0ge1xuICBzOiBfc2Nyb2xsTGVmdCxcbiAgcDogXCJsZWZ0XCIsXG4gIHAyOiBcIkxlZnRcIixcbiAgb3M6IFwicmlnaHRcIixcbiAgb3MyOiBcIlJpZ2h0XCIsXG4gIGQ6IFwid2lkdGhcIixcbiAgZDI6IFwiV2lkdGhcIixcbiAgYTogXCJ4XCIsXG4gIHNjOiBfc2Nyb2xsQ2FjaGVGdW5jKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gX3dpbi5zY3JvbGxUbyh2YWx1ZSwgX3ZlcnRpY2FsLnNjKCkpIDogX3dpbi5wYWdlWE9mZnNldCB8fCBfZG9jW19zY3JvbGxMZWZ0XSB8fCBfZG9jRWxbX3Njcm9sbExlZnRdIHx8IF9ib2R5W19zY3JvbGxMZWZ0XSB8fCAwO1xuICB9KVxufSxcbiAgICBfdmVydGljYWwgPSB7XG4gIHM6IF9zY3JvbGxUb3AsXG4gIHA6IFwidG9wXCIsXG4gIHAyOiBcIlRvcFwiLFxuICBvczogXCJib3R0b21cIixcbiAgb3MyOiBcIkJvdHRvbVwiLFxuICBkOiBcImhlaWdodFwiLFxuICBkMjogXCJIZWlnaHRcIixcbiAgYTogXCJ5XCIsXG4gIG9wOiBfaG9yaXpvbnRhbCxcbiAgc2M6IF9zY3JvbGxDYWNoZUZ1bmMoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfd2luLnNjcm9sbFRvKF9ob3Jpem9udGFsLnNjKCksIHZhbHVlKSA6IF93aW4ucGFnZVlPZmZzZXQgfHwgX2RvY1tfc2Nyb2xsVG9wXSB8fCBfZG9jRWxbX3Njcm9sbFRvcF0gfHwgX2JvZHlbX3Njcm9sbFRvcF0gfHwgMDtcbiAgfSlcbn0sXG4gICAgX2dldFRhcmdldCA9IGZ1bmN0aW9uIF9nZXRUYXJnZXQodCwgc2VsZikge1xuICByZXR1cm4gKHNlbGYgJiYgc2VsZi5fY3R4ICYmIHNlbGYuX2N0eC5zZWxlY3RvciB8fCBnc2FwLnV0aWxzLnRvQXJyYXkpKHQpWzBdIHx8ICh0eXBlb2YgdCA9PT0gXCJzdHJpbmdcIiAmJiBnc2FwLmNvbmZpZygpLm51bGxUYXJnZXRXYXJuICE9PSBmYWxzZSA/IGNvbnNvbGUud2FybihcIkVsZW1lbnQgbm90IGZvdW5kOlwiLCB0KSA6IG51bGwpO1xufSxcbiAgICBfZ2V0U2Nyb2xsRnVuYyA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxGdW5jKGVsZW1lbnQsIF9yZWYpIHtcbiAgdmFyIHMgPSBfcmVmLnMsXG4gICAgICBzYyA9IF9yZWYuc2M7XG4gIC8vIHdlIHN0b3JlIHRoZSBzY3JvbGxlciBmdW5jdGlvbnMgaW4gYW4gYWx0ZXJuYXRpbmcgc2VxdWVuY2VkIEFycmF5IGxpa2UgW2VsZW1lbnQsIHZlcnRpY2FsU2Nyb2xsRnVuYywgaG9yaXpvbnRhbFNjcm9sbEZ1bmMsIC4uLl0gc28gdGhhdCB3ZSBjYW4gbWluaW1pemUgbWVtb3J5LCBtYXhpbWl6ZSBwZXJmb3JtYW5jZSwgYW5kIHdlIGFsc28gcmVjb3JkIHRoZSBsYXN0IHBvc2l0aW9uIGFzIGEgXCIucmVjXCIgcHJvcGVydHkgaW4gb3JkZXIgdG8gcmV2ZXJ0IHRvIHRoYXQgYWZ0ZXIgcmVmcmVzaGluZyB0byBlbnN1cmUgdGhpbmdzIGRvbid0IHNoaWZ0IGFyb3VuZC5cbiAgX2lzVmlld3BvcnQoZWxlbWVudCkgJiYgKGVsZW1lbnQgPSBfZG9jLnNjcm9sbGluZ0VsZW1lbnQgfHwgX2RvY0VsKTtcblxuICB2YXIgaSA9IF9zY3JvbGxlcnMuaW5kZXhPZihlbGVtZW50KSxcbiAgICAgIG9mZnNldCA9IHNjID09PSBfdmVydGljYWwuc2MgPyAxIDogMjtcblxuICAhfmkgJiYgKGkgPSBfc2Nyb2xsZXJzLnB1c2goZWxlbWVudCkgLSAxKTtcbiAgX3Njcm9sbGVyc1tpICsgb2Zmc2V0XSB8fCBfYWRkTGlzdGVuZXIoZWxlbWVudCwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTsgLy8gY2xlYXIgdGhlIGNhY2hlIHdoZW4gYSBzY3JvbGwgb2NjdXJzXG5cbiAgdmFyIHByZXYgPSBfc2Nyb2xsZXJzW2kgKyBvZmZzZXRdLFxuICAgICAgZnVuYyA9IHByZXYgfHwgKF9zY3JvbGxlcnNbaSArIG9mZnNldF0gPSBfc2Nyb2xsQ2FjaGVGdW5jKF9nZXRQcm94eVByb3AoZWxlbWVudCwgcyksIHRydWUpIHx8IChfaXNWaWV3cG9ydChlbGVtZW50KSA/IHNjIDogX3Njcm9sbENhY2hlRnVuYyhmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGVsZW1lbnRbc10gPSB2YWx1ZSA6IGVsZW1lbnRbc107XG4gIH0pKSk7XG4gIGZ1bmMudGFyZ2V0ID0gZWxlbWVudDtcbiAgcHJldiB8fCAoZnVuYy5zbW9vdGggPSBnc2FwLmdldFByb3BlcnR5KGVsZW1lbnQsIFwic2Nyb2xsQmVoYXZpb3JcIikgPT09IFwic21vb3RoXCIpOyAvLyBvbmx5IHNldCBpdCB0aGUgZmlyc3QgdGltZSAoZG9uJ3QgcmVzZXQgZXZlcnkgdGltZSBhIHNjcm9sbEZ1bmMgaXMgcmVxdWVzdGVkIGJlY2F1c2UgcGVyaGFwcyBpdCBoYXBwZW5zIGR1cmluZyBhIHJlZnJlc2goKSB3aGVuIGl0J3MgZGlzYWJsZWQgaW4gU2Nyb2xsVHJpZ2dlci5cblxuICByZXR1cm4gZnVuYztcbn0sXG4gICAgX2dldFZlbG9jaXR5UHJvcCA9IGZ1bmN0aW9uIF9nZXRWZWxvY2l0eVByb3AodmFsdWUsIG1pblRpbWVSZWZyZXNoLCB1c2VEZWx0YSkge1xuICB2YXIgdjEgPSB2YWx1ZSxcbiAgICAgIHYyID0gdmFsdWUsXG4gICAgICB0MSA9IF9nZXRUaW1lKCksXG4gICAgICB0MiA9IHQxLFxuICAgICAgbWluID0gbWluVGltZVJlZnJlc2ggfHwgNTAsXG4gICAgICBkcm9wVG9aZXJvVGltZSA9IE1hdGgubWF4KDUwMCwgbWluICogMyksXG4gICAgICB1cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUodmFsdWUsIGZvcmNlKSB7XG4gICAgdmFyIHQgPSBfZ2V0VGltZSgpO1xuXG4gICAgaWYgKGZvcmNlIHx8IHQgLSB0MSA+IG1pbikge1xuICAgICAgdjIgPSB2MTtcbiAgICAgIHYxID0gdmFsdWU7XG4gICAgICB0MiA9IHQxO1xuICAgICAgdDEgPSB0O1xuICAgIH0gZWxzZSBpZiAodXNlRGVsdGEpIHtcbiAgICAgIHYxICs9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBub3QgdG90YWxseSBuZWNlc3NhcnksIGJ1dCBtYWtlcyBpdCBhIGJpdCBtb3JlIGFjY3VyYXRlIGJ5IGFkanVzdGluZyB0aGUgdjEgdmFsdWUgYWNjb3JkaW5nIHRvIHRoZSBuZXcgc2xvcGUuIFRoaXMgd2F5IHdlJ3JlIG5vdCBqdXN0IGlnbm9yaW5nIHRoZSBpbmNvbWluZyBkYXRhLiBSZW1vdmluZyBmb3Igbm93IGJlY2F1c2UgaXQgZG9lc24ndCBzZWVtIHRvIG1ha2UgbXVjaCBwcmFjdGljYWwgZGlmZmVyZW5jZSBhbmQgaXQncyBwcm9iYWJseSBub3Qgd29ydGggdGhlIGtiLlxuICAgICAgdjEgPSB2MiArICh2YWx1ZSAtIHYyKSAvICh0IC0gdDIpICogKHQxIC0gdDIpO1xuICAgIH1cbiAgfSxcbiAgICAgIHJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgdjIgPSB2MSA9IHVzZURlbHRhID8gMCA6IHYxO1xuICAgIHQyID0gdDEgPSAwO1xuICB9LFxuICAgICAgZ2V0VmVsb2NpdHkgPSBmdW5jdGlvbiBnZXRWZWxvY2l0eShsYXRlc3RWYWx1ZSkge1xuICAgIHZhciB0T2xkID0gdDIsXG4gICAgICAgIHZPbGQgPSB2MixcbiAgICAgICAgdCA9IF9nZXRUaW1lKCk7XG5cbiAgICAobGF0ZXN0VmFsdWUgfHwgbGF0ZXN0VmFsdWUgPT09IDApICYmIGxhdGVzdFZhbHVlICE9PSB2MSAmJiB1cGRhdGUobGF0ZXN0VmFsdWUpO1xuICAgIHJldHVybiB0MSA9PT0gdDIgfHwgdCAtIHQyID4gZHJvcFRvWmVyb1RpbWUgPyAwIDogKHYxICsgKHVzZURlbHRhID8gdk9sZCA6IC12T2xkKSkgLyAoKHVzZURlbHRhID8gdCA6IHQxKSAtIHRPbGQpICogMTAwMDtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogdXBkYXRlLFxuICAgIHJlc2V0OiByZXNldCxcbiAgICBnZXRWZWxvY2l0eTogZ2V0VmVsb2NpdHlcbiAgfTtcbn0sXG4gICAgX2dldEV2ZW50ID0gZnVuY3Rpb24gX2dldEV2ZW50KGUsIHByZXZlbnREZWZhdWx0KSB7XG4gIHByZXZlbnREZWZhdWx0ICYmICFlLl9nc2FwQWxsb3cgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICByZXR1cm4gZS5jaGFuZ2VkVG91Y2hlcyA/IGUuY2hhbmdlZFRvdWNoZXNbMF0gOiBlO1xufSxcbiAgICBfZ2V0QWJzb2x1dGVNYXggPSBmdW5jdGlvbiBfZ2V0QWJzb2x1dGVNYXgoYSkge1xuICB2YXIgbWF4ID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgYSksXG4gICAgICBtaW4gPSBNYXRoLm1pbi5hcHBseShNYXRoLCBhKTtcbiAgcmV0dXJuIE1hdGguYWJzKG1heCkgPj0gTWF0aC5hYnMobWluKSA/IG1heCA6IG1pbjtcbn0sXG4gICAgX3NldFNjcm9sbFRyaWdnZXIgPSBmdW5jdGlvbiBfc2V0U2Nyb2xsVHJpZ2dlcigpIHtcbiAgU2Nyb2xsVHJpZ2dlciA9IGdzYXAuY29yZS5nbG9iYWxzKCkuU2Nyb2xsVHJpZ2dlcjtcbiAgU2Nyb2xsVHJpZ2dlciAmJiBTY3JvbGxUcmlnZ2VyLmNvcmUgJiYgX2ludGVncmF0ZSgpO1xufSxcbiAgICBfaW5pdENvcmUgPSBmdW5jdGlvbiBfaW5pdENvcmUoY29yZSkge1xuICBnc2FwID0gY29yZSB8fCBfZ2V0R1NBUCgpO1xuXG4gIGlmICghX2NvcmVJbml0dGVkICYmIGdzYXAgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50LmJvZHkpIHtcbiAgICBfd2luID0gd2luZG93O1xuICAgIF9kb2MgPSBkb2N1bWVudDtcbiAgICBfZG9jRWwgPSBfZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICBfYm9keSA9IF9kb2MuYm9keTtcbiAgICBfcm9vdCA9IFtfd2luLCBfZG9jLCBfZG9jRWwsIF9ib2R5XTtcbiAgICBfY2xhbXAgPSBnc2FwLnV0aWxzLmNsYW1wO1xuXG4gICAgX2NvbnRleHQgPSBnc2FwLmNvcmUuY29udGV4dCB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAgIF9wb2ludGVyVHlwZSA9IFwib25wb2ludGVyZW50ZXJcIiBpbiBfYm9keSA/IFwicG9pbnRlclwiIDogXCJtb3VzZVwiOyAvLyBpc1RvdWNoIGlzIDAgaWYgbm8gdG91Y2gsIDEgaWYgT05MWSB0b3VjaCwgYW5kIDIgaWYgaXQgY2FuIGFjY29tbW9kYXRlIHRvdWNoIGJ1dCBhbHNvIG90aGVyIHR5cGVzIGxpa2UgbW91c2UvcG9pbnRlci5cblxuICAgIF9pc1RvdWNoID0gT2JzZXJ2ZXIuaXNUb3VjaCA9IF93aW4ubWF0Y2hNZWRpYSAmJiBfd2luLm1hdGNoTWVkaWEoXCIoaG92ZXI6IG5vbmUpLCAocG9pbnRlcjogY29hcnNlKVwiKS5tYXRjaGVzID8gMSA6IFwib250b3VjaHN0YXJ0XCIgaW4gX3dpbiB8fCBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwIHx8IG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID4gMCA/IDIgOiAwO1xuICAgIF9ldmVudFR5cGVzID0gT2JzZXJ2ZXIuZXZlbnRUeXBlcyA9IChcIm9udG91Y2hzdGFydFwiIGluIF9kb2NFbCA/IFwidG91Y2hzdGFydCx0b3VjaG1vdmUsdG91Y2hjYW5jZWwsdG91Y2hlbmRcIiA6ICEoXCJvbnBvaW50ZXJkb3duXCIgaW4gX2RvY0VsKSA/IFwibW91c2Vkb3duLG1vdXNlbW92ZSxtb3VzZXVwLG1vdXNldXBcIiA6IFwicG9pbnRlcmRvd24scG9pbnRlcm1vdmUscG9pbnRlcmNhbmNlbCxwb2ludGVydXBcIikuc3BsaXQoXCIsXCIpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9zdGFydHVwID0gMDtcbiAgICB9LCA1MDApO1xuXG4gICAgX3NldFNjcm9sbFRyaWdnZXIoKTtcblxuICAgIF9jb3JlSW5pdHRlZCA9IDE7XG4gIH1cblxuICByZXR1cm4gX2NvcmVJbml0dGVkO1xufTtcblxuX2hvcml6b250YWwub3AgPSBfdmVydGljYWw7XG5fc2Nyb2xsZXJzLmNhY2hlID0gMDtcbmV4cG9ydCB2YXIgT2JzZXJ2ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBPYnNlcnZlcih2YXJzKSB7XG4gICAgdGhpcy5pbml0KHZhcnMpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE9ic2VydmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaW5pdCA9IGZ1bmN0aW9uIGluaXQodmFycykge1xuICAgIF9jb3JlSW5pdHRlZCB8fCBfaW5pdENvcmUoZ3NhcCkgfHwgY29uc29sZS53YXJuKFwiUGxlYXNlIGdzYXAucmVnaXN0ZXJQbHVnaW4oT2JzZXJ2ZXIpXCIpO1xuICAgIFNjcm9sbFRyaWdnZXIgfHwgX3NldFNjcm9sbFRyaWdnZXIoKTtcbiAgICB2YXIgdG9sZXJhbmNlID0gdmFycy50b2xlcmFuY2UsXG4gICAgICAgIGRyYWdNaW5pbXVtID0gdmFycy5kcmFnTWluaW11bSxcbiAgICAgICAgdHlwZSA9IHZhcnMudHlwZSxcbiAgICAgICAgdGFyZ2V0ID0gdmFycy50YXJnZXQsXG4gICAgICAgIGxpbmVIZWlnaHQgPSB2YXJzLmxpbmVIZWlnaHQsXG4gICAgICAgIGRlYm91bmNlID0gdmFycy5kZWJvdW5jZSxcbiAgICAgICAgcHJldmVudERlZmF1bHQgPSB2YXJzLnByZXZlbnREZWZhdWx0LFxuICAgICAgICBvblN0b3AgPSB2YXJzLm9uU3RvcCxcbiAgICAgICAgb25TdG9wRGVsYXkgPSB2YXJzLm9uU3RvcERlbGF5LFxuICAgICAgICBpZ25vcmUgPSB2YXJzLmlnbm9yZSxcbiAgICAgICAgd2hlZWxTcGVlZCA9IHZhcnMud2hlZWxTcGVlZCxcbiAgICAgICAgZXZlbnQgPSB2YXJzLmV2ZW50LFxuICAgICAgICBvbkRyYWdTdGFydCA9IHZhcnMub25EcmFnU3RhcnQsXG4gICAgICAgIG9uRHJhZ0VuZCA9IHZhcnMub25EcmFnRW5kLFxuICAgICAgICBvbkRyYWcgPSB2YXJzLm9uRHJhZyxcbiAgICAgICAgb25QcmVzcyA9IHZhcnMub25QcmVzcyxcbiAgICAgICAgb25SZWxlYXNlID0gdmFycy5vblJlbGVhc2UsXG4gICAgICAgIG9uUmlnaHQgPSB2YXJzLm9uUmlnaHQsXG4gICAgICAgIG9uTGVmdCA9IHZhcnMub25MZWZ0LFxuICAgICAgICBvblVwID0gdmFycy5vblVwLFxuICAgICAgICBvbkRvd24gPSB2YXJzLm9uRG93bixcbiAgICAgICAgb25DaGFuZ2VYID0gdmFycy5vbkNoYW5nZVgsXG4gICAgICAgIG9uQ2hhbmdlWSA9IHZhcnMub25DaGFuZ2VZLFxuICAgICAgICBvbkNoYW5nZSA9IHZhcnMub25DaGFuZ2UsXG4gICAgICAgIG9uVG9nZ2xlWCA9IHZhcnMub25Ub2dnbGVYLFxuICAgICAgICBvblRvZ2dsZVkgPSB2YXJzLm9uVG9nZ2xlWSxcbiAgICAgICAgb25Ib3ZlciA9IHZhcnMub25Ib3ZlcixcbiAgICAgICAgb25Ib3ZlckVuZCA9IHZhcnMub25Ib3ZlckVuZCxcbiAgICAgICAgb25Nb3ZlID0gdmFycy5vbk1vdmUsXG4gICAgICAgIGlnbm9yZUNoZWNrID0gdmFycy5pZ25vcmVDaGVjayxcbiAgICAgICAgaXNOb3JtYWxpemVyID0gdmFycy5pc05vcm1hbGl6ZXIsXG4gICAgICAgIG9uR2VzdHVyZVN0YXJ0ID0gdmFycy5vbkdlc3R1cmVTdGFydCxcbiAgICAgICAgb25HZXN0dXJlRW5kID0gdmFycy5vbkdlc3R1cmVFbmQsXG4gICAgICAgIG9uV2hlZWwgPSB2YXJzLm9uV2hlZWwsXG4gICAgICAgIG9uRW5hYmxlID0gdmFycy5vbkVuYWJsZSxcbiAgICAgICAgb25EaXNhYmxlID0gdmFycy5vbkRpc2FibGUsXG4gICAgICAgIG9uQ2xpY2sgPSB2YXJzLm9uQ2xpY2ssXG4gICAgICAgIHNjcm9sbFNwZWVkID0gdmFycy5zY3JvbGxTcGVlZCxcbiAgICAgICAgY2FwdHVyZSA9IHZhcnMuY2FwdHVyZSxcbiAgICAgICAgYWxsb3dDbGlja3MgPSB2YXJzLmFsbG93Q2xpY2tzLFxuICAgICAgICBsb2NrQXhpcyA9IHZhcnMubG9ja0F4aXMsXG4gICAgICAgIG9uTG9ja0F4aXMgPSB2YXJzLm9uTG9ja0F4aXM7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQgPSBfZ2V0VGFyZ2V0KHRhcmdldCkgfHwgX2RvY0VsO1xuICAgIHRoaXMudmFycyA9IHZhcnM7XG4gICAgaWdub3JlICYmIChpZ25vcmUgPSBnc2FwLnV0aWxzLnRvQXJyYXkoaWdub3JlKSk7XG4gICAgdG9sZXJhbmNlID0gdG9sZXJhbmNlIHx8IDFlLTk7XG4gICAgZHJhZ01pbmltdW0gPSBkcmFnTWluaW11bSB8fCAwO1xuICAgIHdoZWVsU3BlZWQgPSB3aGVlbFNwZWVkIHx8IDE7XG4gICAgc2Nyb2xsU3BlZWQgPSBzY3JvbGxTcGVlZCB8fCAxO1xuICAgIHR5cGUgPSB0eXBlIHx8IFwid2hlZWwsdG91Y2gscG9pbnRlclwiO1xuICAgIGRlYm91bmNlID0gZGVib3VuY2UgIT09IGZhbHNlO1xuICAgIGxpbmVIZWlnaHQgfHwgKGxpbmVIZWlnaHQgPSBwYXJzZUZsb2F0KF93aW4uZ2V0Q29tcHV0ZWRTdHlsZShfYm9keSkubGluZUhlaWdodCkgfHwgMjIpOyAvLyBub3RlOiBicm93c2VyIG1heSByZXBvcnQgXCJub3JtYWxcIiwgc28gZGVmYXVsdCB0byAyMi5cblxuICAgIHZhciBpZCxcbiAgICAgICAgb25TdG9wRGVsYXllZENhbGwsXG4gICAgICAgIGRyYWdnZWQsXG4gICAgICAgIG1vdmVkLFxuICAgICAgICB3aGVlbGVkLFxuICAgICAgICBsb2NrZWQsXG4gICAgICAgIGF4aXMsXG4gICAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgICBwcmV2RGVsdGFYID0gMCxcbiAgICAgICAgcHJldkRlbHRhWSA9IDAsXG4gICAgICAgIHBhc3NpdmUgPSB2YXJzLnBhc3NpdmUgfHwgIXByZXZlbnREZWZhdWx0LFxuICAgICAgICBzY3JvbGxGdW5jWCA9IF9nZXRTY3JvbGxGdW5jKHRhcmdldCwgX2hvcml6b250YWwpLFxuICAgICAgICBzY3JvbGxGdW5jWSA9IF9nZXRTY3JvbGxGdW5jKHRhcmdldCwgX3ZlcnRpY2FsKSxcbiAgICAgICAgc2Nyb2xsWCA9IHNjcm9sbEZ1bmNYKCksXG4gICAgICAgIHNjcm9sbFkgPSBzY3JvbGxGdW5jWSgpLFxuICAgICAgICBsaW1pdFRvVG91Y2ggPSB+dHlwZS5pbmRleE9mKFwidG91Y2hcIikgJiYgIX50eXBlLmluZGV4T2YoXCJwb2ludGVyXCIpICYmIF9ldmVudFR5cGVzWzBdID09PSBcInBvaW50ZXJkb3duXCIsXG4gICAgICAgIC8vIGZvciBkZXZpY2VzIHRoYXQgYWNjb21tb2RhdGUgbW91c2UgZXZlbnRzIGFuZCB0b3VjaCBldmVudHMsIHdlIG5lZWQgdG8gZGlzdGluZ3Vpc2guXG4gICAgaXNWaWV3cG9ydCA9IF9pc1ZpZXdwb3J0KHRhcmdldCksXG4gICAgICAgIG93bmVyRG9jID0gdGFyZ2V0Lm93bmVyRG9jdW1lbnQgfHwgX2RvYyxcbiAgICAgICAgZGVsdGFYID0gWzAsIDAsIDBdLFxuICAgICAgICAvLyB3aGVlbCwgc2Nyb2xsLCBwb2ludGVyL3RvdWNoXG4gICAgZGVsdGFZID0gWzAsIDAsIDBdLFxuICAgICAgICBvbkNsaWNrVGltZSA9IDAsXG4gICAgICAgIGNsaWNrQ2FwdHVyZSA9IGZ1bmN0aW9uIGNsaWNrQ2FwdHVyZSgpIHtcbiAgICAgIHJldHVybiBvbkNsaWNrVGltZSA9IF9nZXRUaW1lKCk7XG4gICAgfSxcbiAgICAgICAgX2lnbm9yZUNoZWNrID0gZnVuY3Rpb24gX2lnbm9yZUNoZWNrKGUsIGlzUG9pbnRlck9yVG91Y2gpIHtcbiAgICAgIHJldHVybiAoc2VsZi5ldmVudCA9IGUpICYmIGlnbm9yZSAmJiB+aWdub3JlLmluZGV4T2YoZS50YXJnZXQpIHx8IGlzUG9pbnRlck9yVG91Y2ggJiYgbGltaXRUb1RvdWNoICYmIGUucG9pbnRlclR5cGUgIT09IFwidG91Y2hcIiB8fCBpZ25vcmVDaGVjayAmJiBpZ25vcmVDaGVjayhlLCBpc1BvaW50ZXJPclRvdWNoKTtcbiAgICB9LFxuICAgICAgICBvblN0b3BGdW5jID0gZnVuY3Rpb24gb25TdG9wRnVuYygpIHtcbiAgICAgIHNlbGYuX3Z4LnJlc2V0KCk7XG5cbiAgICAgIHNlbGYuX3Z5LnJlc2V0KCk7XG5cbiAgICAgIG9uU3RvcERlbGF5ZWRDYWxsLnBhdXNlKCk7XG4gICAgICBvblN0b3AgJiYgb25TdG9wKHNlbGYpO1xuICAgIH0sXG4gICAgICAgIHVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIHZhciBkeCA9IHNlbGYuZGVsdGFYID0gX2dldEFic29sdXRlTWF4KGRlbHRhWCksXG4gICAgICAgICAgZHkgPSBzZWxmLmRlbHRhWSA9IF9nZXRBYnNvbHV0ZU1heChkZWx0YVkpLFxuICAgICAgICAgIGNoYW5nZWRYID0gTWF0aC5hYnMoZHgpID49IHRvbGVyYW5jZSxcbiAgICAgICAgICBjaGFuZ2VkWSA9IE1hdGguYWJzKGR5KSA+PSB0b2xlcmFuY2U7XG5cbiAgICAgIG9uQ2hhbmdlICYmIChjaGFuZ2VkWCB8fCBjaGFuZ2VkWSkgJiYgb25DaGFuZ2Uoc2VsZiwgZHgsIGR5LCBkZWx0YVgsIGRlbHRhWSk7IC8vIGluIFNjcm9sbFRyaWdnZXIubm9ybWFsaXplU2Nyb2xsKCksIHdlIG5lZWQgdG8ga25vdyBpZiBpdCB3YXMgdG91Y2gvcG9pbnRlciBzbyB3ZSBuZWVkIGFjY2VzcyB0byB0aGUgZGVsdGFYL2RlbHRhWSBBcnJheXMgYmVmb3JlIHdlIGNsZWFyIHRoZW0gb3V0LlxuXG4gICAgICBpZiAoY2hhbmdlZFgpIHtcbiAgICAgICAgb25SaWdodCAmJiBzZWxmLmRlbHRhWCA+IDAgJiYgb25SaWdodChzZWxmKTtcbiAgICAgICAgb25MZWZ0ICYmIHNlbGYuZGVsdGFYIDwgMCAmJiBvbkxlZnQoc2VsZik7XG4gICAgICAgIG9uQ2hhbmdlWCAmJiBvbkNoYW5nZVgoc2VsZik7XG4gICAgICAgIG9uVG9nZ2xlWCAmJiBzZWxmLmRlbHRhWCA8IDAgIT09IHByZXZEZWx0YVggPCAwICYmIG9uVG9nZ2xlWChzZWxmKTtcbiAgICAgICAgcHJldkRlbHRhWCA9IHNlbGYuZGVsdGFYO1xuICAgICAgICBkZWx0YVhbMF0gPSBkZWx0YVhbMV0gPSBkZWx0YVhbMl0gPSAwO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hhbmdlZFkpIHtcbiAgICAgICAgb25Eb3duICYmIHNlbGYuZGVsdGFZID4gMCAmJiBvbkRvd24oc2VsZik7XG4gICAgICAgIG9uVXAgJiYgc2VsZi5kZWx0YVkgPCAwICYmIG9uVXAoc2VsZik7XG4gICAgICAgIG9uQ2hhbmdlWSAmJiBvbkNoYW5nZVkoc2VsZik7XG4gICAgICAgIG9uVG9nZ2xlWSAmJiBzZWxmLmRlbHRhWSA8IDAgIT09IHByZXZEZWx0YVkgPCAwICYmIG9uVG9nZ2xlWShzZWxmKTtcbiAgICAgICAgcHJldkRlbHRhWSA9IHNlbGYuZGVsdGFZO1xuICAgICAgICBkZWx0YVlbMF0gPSBkZWx0YVlbMV0gPSBkZWx0YVlbMl0gPSAwO1xuICAgICAgfVxuXG4gICAgICBpZiAobW92ZWQgfHwgZHJhZ2dlZCkge1xuICAgICAgICBvbk1vdmUgJiYgb25Nb3ZlKHNlbGYpO1xuXG4gICAgICAgIGlmIChkcmFnZ2VkKSB7XG4gICAgICAgICAgb25EcmFnKHNlbGYpO1xuICAgICAgICAgIGRyYWdnZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1vdmVkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGxvY2tlZCAmJiAhKGxvY2tlZCA9IGZhbHNlKSAmJiBvbkxvY2tBeGlzICYmIG9uTG9ja0F4aXMoc2VsZik7XG5cbiAgICAgIGlmICh3aGVlbGVkKSB7XG4gICAgICAgIG9uV2hlZWwoc2VsZik7XG4gICAgICAgIHdoZWVsZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWQgPSAwO1xuICAgIH0sXG4gICAgICAgIG9uRGVsdGEgPSBmdW5jdGlvbiBvbkRlbHRhKHgsIHksIGluZGV4KSB7XG4gICAgICBkZWx0YVhbaW5kZXhdICs9IHg7XG4gICAgICBkZWx0YVlbaW5kZXhdICs9IHk7XG5cbiAgICAgIHNlbGYuX3Z4LnVwZGF0ZSh4KTtcblxuICAgICAgc2VsZi5fdnkudXBkYXRlKHkpO1xuXG4gICAgICBkZWJvdW5jZSA/IGlkIHx8IChpZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGUpKSA6IHVwZGF0ZSgpO1xuICAgIH0sXG4gICAgICAgIG9uVG91Y2hPclBvaW50ZXJEZWx0YSA9IGZ1bmN0aW9uIG9uVG91Y2hPclBvaW50ZXJEZWx0YSh4LCB5KSB7XG4gICAgICBpZiAobG9ja0F4aXMgJiYgIWF4aXMpIHtcbiAgICAgICAgc2VsZi5heGlzID0gYXhpcyA9IE1hdGguYWJzKHgpID4gTWF0aC5hYnMoeSkgPyBcInhcIiA6IFwieVwiO1xuICAgICAgICBsb2NrZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXhpcyAhPT0gXCJ5XCIpIHtcbiAgICAgICAgZGVsdGFYWzJdICs9IHg7XG5cbiAgICAgICAgc2VsZi5fdngudXBkYXRlKHgsIHRydWUpOyAvLyB1cGRhdGUgdGhlIHZlbG9jaXR5IGFzIGZyZXF1ZW50bHkgYXMgcG9zc2libGUgaW5zdGVhZCBvZiBpbiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHNvIHRoYXQgdmVyeSBxdWljayB0b3VjaC1zY3JvbGxzIChmbGlja3MpIGZlZWwgbmF0dXJhbC4gSWYgaXQncyB0aGUgbW91c2UvdG91Y2gvcG9pbnRlciwgZm9yY2UgaXQgc28gdGhhdCB3ZSBnZXQgc25hcHB5L2FjY3VyYXRlIG1vbWVudHVtIHNjcm9sbC5cblxuICAgICAgfVxuXG4gICAgICBpZiAoYXhpcyAhPT0gXCJ4XCIpIHtcbiAgICAgICAgZGVsdGFZWzJdICs9IHk7XG5cbiAgICAgICAgc2VsZi5fdnkudXBkYXRlKHksIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBkZWJvdW5jZSA/IGlkIHx8IChpZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGUpKSA6IHVwZGF0ZSgpO1xuICAgIH0sXG4gICAgICAgIF9vbkRyYWcgPSBmdW5jdGlvbiBfb25EcmFnKGUpIHtcbiAgICAgIGlmIChfaWdub3JlQ2hlY2soZSwgMSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBlID0gX2dldEV2ZW50KGUsIHByZXZlbnREZWZhdWx0KTtcbiAgICAgIHZhciB4ID0gZS5jbGllbnRYLFxuICAgICAgICAgIHkgPSBlLmNsaWVudFksXG4gICAgICAgICAgZHggPSB4IC0gc2VsZi54LFxuICAgICAgICAgIGR5ID0geSAtIHNlbGYueSxcbiAgICAgICAgICBpc0RyYWdnaW5nID0gc2VsZi5pc0RyYWdnaW5nO1xuICAgICAgc2VsZi54ID0geDtcbiAgICAgIHNlbGYueSA9IHk7XG5cbiAgICAgIGlmIChpc0RyYWdnaW5nIHx8IE1hdGguYWJzKHNlbGYuc3RhcnRYIC0geCkgPj0gZHJhZ01pbmltdW0gfHwgTWF0aC5hYnMoc2VsZi5zdGFydFkgLSB5KSA+PSBkcmFnTWluaW11bSkge1xuICAgICAgICBvbkRyYWcgJiYgKGRyYWdnZWQgPSB0cnVlKTtcbiAgICAgICAgaXNEcmFnZ2luZyB8fCAoc2VsZi5pc0RyYWdnaW5nID0gdHJ1ZSk7XG4gICAgICAgIG9uVG91Y2hPclBvaW50ZXJEZWx0YShkeCwgZHkpO1xuICAgICAgICBpc0RyYWdnaW5nIHx8IG9uRHJhZ1N0YXJ0ICYmIG9uRHJhZ1N0YXJ0KHNlbGYpO1xuICAgICAgfVxuICAgIH0sXG4gICAgICAgIF9vblByZXNzID0gc2VsZi5vblByZXNzID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChfaWdub3JlQ2hlY2soZSwgMSkgfHwgZSAmJiBlLmJ1dHRvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNlbGYuYXhpcyA9IGF4aXMgPSBudWxsO1xuICAgICAgb25TdG9wRGVsYXllZENhbGwucGF1c2UoKTtcbiAgICAgIHNlbGYuaXNQcmVzc2VkID0gdHJ1ZTtcbiAgICAgIGUgPSBfZ2V0RXZlbnQoZSk7IC8vIG5vdGU6IG1heSBuZWVkIHRvIHByZXZlbnREZWZhdWx0KD8pIFdvbid0IHNpZGUtc2Nyb2xsIG9uIGlPUyBTYWZhcmkgaWYgd2UgZG8sIHRob3VnaC5cblxuICAgICAgcHJldkRlbHRhWCA9IHByZXZEZWx0YVkgPSAwO1xuICAgICAgc2VsZi5zdGFydFggPSBzZWxmLnggPSBlLmNsaWVudFg7XG4gICAgICBzZWxmLnN0YXJ0WSA9IHNlbGYueSA9IGUuY2xpZW50WTtcblxuICAgICAgc2VsZi5fdngucmVzZXQoKTsgLy8gb3RoZXJ3aXNlIHRoZSB0MiBtYXkgYmUgc3RhbGUgaWYgdGhlIHVzZXIgdG91Y2hlcyBhbmQgZmxpY2tzIHN1cGVyIGZhc3QgYW5kIHJlbGVhc2VzIGluIGxlc3MgdGhhbiAyIHJlcXVlc3RBbmltYXRpb25GcmFtZSB0aWNrcywgY2F1c2luZyB2ZWxvY2l0eSB0byBiZSAwLlxuXG5cbiAgICAgIHNlbGYuX3Z5LnJlc2V0KCk7XG5cbiAgICAgIF9hZGRMaXN0ZW5lcihpc05vcm1hbGl6ZXIgPyB0YXJnZXQgOiBvd25lckRvYywgX2V2ZW50VHlwZXNbMV0sIF9vbkRyYWcsIHBhc3NpdmUsIHRydWUpO1xuXG4gICAgICBzZWxmLmRlbHRhWCA9IHNlbGYuZGVsdGFZID0gMDtcbiAgICAgIG9uUHJlc3MgJiYgb25QcmVzcyhzZWxmKTtcbiAgICB9LFxuICAgICAgICBfb25SZWxlYXNlID0gc2VsZi5vblJlbGVhc2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKF9pZ25vcmVDaGVjayhlLCAxKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF9yZW1vdmVMaXN0ZW5lcihpc05vcm1hbGl6ZXIgPyB0YXJnZXQgOiBvd25lckRvYywgX2V2ZW50VHlwZXNbMV0sIF9vbkRyYWcsIHRydWUpO1xuXG4gICAgICB2YXIgaXNUcmFja2luZ0RyYWcgPSAhaXNOYU4oc2VsZi55IC0gc2VsZi5zdGFydFkpLFxuICAgICAgICAgIHdhc0RyYWdnaW5nID0gc2VsZi5pc0RyYWdnaW5nLFxuICAgICAgICAgIGlzRHJhZ05vdENsaWNrID0gd2FzRHJhZ2dpbmcgJiYgKE1hdGguYWJzKHNlbGYueCAtIHNlbGYuc3RhcnRYKSA+IDMgfHwgTWF0aC5hYnMoc2VsZi55IC0gc2VsZi5zdGFydFkpID4gMyksXG4gICAgICAgICAgLy8gc29tZSB0b3VjaCBkZXZpY2VzIG5lZWQgc29tZSB3aWdnbGUgcm9vbSBpbiB0ZXJtcyBvZiBzZW5zaW5nIGNsaWNrcyAtIHRoZSBmaW5nZXIgbWF5IG1vdmUgYSBmZXcgcGl4ZWxzLlxuICAgICAgZXZlbnREYXRhID0gX2dldEV2ZW50KGUpO1xuXG4gICAgICBpZiAoIWlzRHJhZ05vdENsaWNrICYmIGlzVHJhY2tpbmdEcmFnKSB7XG4gICAgICAgIHNlbGYuX3Z4LnJlc2V0KCk7XG5cbiAgICAgICAgc2VsZi5fdnkucmVzZXQoKTsgLy9pZiAocHJldmVudERlZmF1bHQgJiYgYWxsb3dDbGlja3MgJiYgc2VsZi5pc1ByZXNzZWQpIHsgLy8gY2hlY2sgaXNQcmVzc2VkIGJlY2F1c2UgaW4gYSByYXJlIGVkZ2UgY2FzZSwgdGhlIGlucHV0T2JzZXJ2ZXIgaW4gU2Nyb2xsVHJpZ2dlciBtYXkgc3RvcFByb3BhZ2F0aW9uKCkgb24gdGhlIHByZXNzL2RyYWcsIHNvIHRoZSBvblJlbGVhc2UgbWF5IGdldCBmaXJlZCB3aXRob3V0IHRoZSBvblByZXNzL29uRHJhZyBldmVyIGdldHRpbmcgY2FsbGVkLCB0aHVzIGl0IGNvdWxkIHRyaWdnZXIgYSBjbGljayB0byBvY2N1ciBvbiBhIGxpbmsgYWZ0ZXIgc2Nyb2xsLWRyYWdnaW5nIGl0LlxuXG5cbiAgICAgICAgaWYgKHByZXZlbnREZWZhdWx0ICYmIGFsbG93Q2xpY2tzKSB7XG4gICAgICAgICAgZ3NhcC5kZWxheWVkQ2FsbCgwLjA4LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBzb21lIGJyb3dzZXJzIChsaWtlIEZpcmVmb3gpIHdvbid0IHRydXN0IHNjcmlwdC1nZW5lcmF0ZWQgY2xpY2tzLCBzbyBpZiB0aGUgdXNlciB0cmllcyB0byBjbGljayBvbiBhIHZpZGVvIHRvIHBsYXkgaXQsIGZvciBleGFtcGxlLCBpdCBzaW1wbHkgd29uJ3Qgd29yay4gU2luY2UgYSByZWd1bGFyIFwiY2xpY2tcIiBldmVudCB3aWxsIG1vc3QgbGlrZWx5IGJlIGdlbmVyYXRlZCBhbnl3YXkgKG9uZSB0aGF0IGhhcyBpdHMgaXNUcnVzdGVkIGZsYWcgc2V0IHRvIHRydWUpLCB3ZSBtdXN0IHNsaWdodGx5IGRlbGF5IG91ciBzY3JpcHQtZ2VuZXJhdGVkIGNsaWNrIHNvIHRoYXQgdGhlIFwicmVhbFwiL3RydXN0ZWQgb25lIGlzIHByaW9yaXRpemVkLiBSZW1lbWJlciwgd2hlbiB0aGVyZSBhcmUgZHVwbGljYXRlIGV2ZW50cyBpbiBxdWljayBzdWNjZXNzaW9uLCB3ZSBzdXBwcmVzcyBhbGwgYnV0IHRoZSBmaXJzdCBvbmUuIFNvbWUgYnJvd3NlcnMgZG9uJ3QgZXZlbiB0cmlnZ2VyIHRoZSBcInJlYWxcIiBvbmUgYXQgYWxsLCBzbyBvdXIgc3ludGhldGljIG9uZSBpcyBhIHNhZmV0eSB2YWx2ZSB0aGF0IGVuc3VyZXMgdGhhdCBubyBtYXR0ZXIgd2hhdCwgYSBjbGljayBldmVudCBkb2VzIGdldCBkaXNwYXRjaGVkLlxuICAgICAgICAgICAgaWYgKF9nZXRUaW1lKCkgLSBvbkNsaWNrVGltZSA+IDMwMCAmJiAhZS5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgIGlmIChlLnRhcmdldC5jbGljaykge1xuICAgICAgICAgICAgICAgIC8vc29tZSBicm93c2VycyAobGlrZSBtb2JpbGUgU2FmYXJpKSBkb24ndCBwcm9wZXJseSB0cmlnZ2VyIHRoZSBjbGljayBldmVudFxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNsaWNrKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAob3duZXJEb2MuY3JlYXRlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3ludGhldGljRXZlbnQgPSBvd25lckRvYy5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRzXCIpO1xuICAgICAgICAgICAgICAgIHN5bnRoZXRpY0V2ZW50LmluaXRNb3VzZUV2ZW50KFwiY2xpY2tcIiwgdHJ1ZSwgdHJ1ZSwgX3dpbiwgMSwgZXZlbnREYXRhLnNjcmVlblgsIGV2ZW50RGF0YS5zY3JlZW5ZLCBldmVudERhdGEuY2xpZW50WCwgZXZlbnREYXRhLmNsaWVudFksIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAwLCBudWxsKTtcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5kaXNwYXRjaEV2ZW50KHN5bnRoZXRpY0V2ZW50KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNlbGYuaXNEcmFnZ2luZyA9IHNlbGYuaXNHZXN0dXJpbmcgPSBzZWxmLmlzUHJlc3NlZCA9IGZhbHNlO1xuICAgICAgb25TdG9wICYmIHdhc0RyYWdnaW5nICYmICFpc05vcm1hbGl6ZXIgJiYgb25TdG9wRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICAgIG9uRHJhZ0VuZCAmJiB3YXNEcmFnZ2luZyAmJiBvbkRyYWdFbmQoc2VsZik7XG4gICAgICBvblJlbGVhc2UgJiYgb25SZWxlYXNlKHNlbGYsIGlzRHJhZ05vdENsaWNrKTtcbiAgICB9LFxuICAgICAgICBfb25HZXN0dXJlU3RhcnQgPSBmdW5jdGlvbiBfb25HZXN0dXJlU3RhcnQoZSkge1xuICAgICAgcmV0dXJuIGUudG91Y2hlcyAmJiBlLnRvdWNoZXMubGVuZ3RoID4gMSAmJiAoc2VsZi5pc0dlc3R1cmluZyA9IHRydWUpICYmIG9uR2VzdHVyZVN0YXJ0KGUsIHNlbGYuaXNEcmFnZ2luZyk7XG4gICAgfSxcbiAgICAgICAgX29uR2VzdHVyZUVuZCA9IGZ1bmN0aW9uIF9vbkdlc3R1cmVFbmQoKSB7XG4gICAgICByZXR1cm4gKHNlbGYuaXNHZXN0dXJpbmcgPSBmYWxzZSkgfHwgb25HZXN0dXJlRW5kKHNlbGYpO1xuICAgIH0sXG4gICAgICAgIG9uU2Nyb2xsID0gZnVuY3Rpb24gb25TY3JvbGwoZSkge1xuICAgICAgaWYgKF9pZ25vcmVDaGVjayhlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB4ID0gc2Nyb2xsRnVuY1goKSxcbiAgICAgICAgICB5ID0gc2Nyb2xsRnVuY1koKTtcbiAgICAgIG9uRGVsdGEoKHggLSBzY3JvbGxYKSAqIHNjcm9sbFNwZWVkLCAoeSAtIHNjcm9sbFkpICogc2Nyb2xsU3BlZWQsIDEpO1xuICAgICAgc2Nyb2xsWCA9IHg7XG4gICAgICBzY3JvbGxZID0geTtcbiAgICAgIG9uU3RvcCAmJiBvblN0b3BEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgIH0sXG4gICAgICAgIF9vbldoZWVsID0gZnVuY3Rpb24gX29uV2hlZWwoZSkge1xuICAgICAgaWYgKF9pZ25vcmVDaGVjayhlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGUgPSBfZ2V0RXZlbnQoZSwgcHJldmVudERlZmF1bHQpO1xuICAgICAgb25XaGVlbCAmJiAod2hlZWxlZCA9IHRydWUpO1xuICAgICAgdmFyIG11bHRpcGxpZXIgPSAoZS5kZWx0YU1vZGUgPT09IDEgPyBsaW5lSGVpZ2h0IDogZS5kZWx0YU1vZGUgPT09IDIgPyBfd2luLmlubmVySGVpZ2h0IDogMSkgKiB3aGVlbFNwZWVkO1xuICAgICAgb25EZWx0YShlLmRlbHRhWCAqIG11bHRpcGxpZXIsIGUuZGVsdGFZICogbXVsdGlwbGllciwgMCk7XG4gICAgICBvblN0b3AgJiYgIWlzTm9ybWFsaXplciAmJiBvblN0b3BEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgIH0sXG4gICAgICAgIF9vbk1vdmUgPSBmdW5jdGlvbiBfb25Nb3ZlKGUpIHtcbiAgICAgIGlmIChfaWdub3JlQ2hlY2soZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgeCA9IGUuY2xpZW50WCxcbiAgICAgICAgICB5ID0gZS5jbGllbnRZLFxuICAgICAgICAgIGR4ID0geCAtIHNlbGYueCxcbiAgICAgICAgICBkeSA9IHkgLSBzZWxmLnk7XG4gICAgICBzZWxmLnggPSB4O1xuICAgICAgc2VsZi55ID0geTtcbiAgICAgIG1vdmVkID0gdHJ1ZTtcbiAgICAgIG9uU3RvcCAmJiBvblN0b3BEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgKGR4IHx8IGR5KSAmJiBvblRvdWNoT3JQb2ludGVyRGVsdGEoZHgsIGR5KTtcbiAgICB9LFxuICAgICAgICBfb25Ib3ZlciA9IGZ1bmN0aW9uIF9vbkhvdmVyKGUpIHtcbiAgICAgIHNlbGYuZXZlbnQgPSBlO1xuICAgICAgb25Ib3ZlcihzZWxmKTtcbiAgICB9LFxuICAgICAgICBfb25Ib3ZlckVuZCA9IGZ1bmN0aW9uIF9vbkhvdmVyRW5kKGUpIHtcbiAgICAgIHNlbGYuZXZlbnQgPSBlO1xuICAgICAgb25Ib3ZlckVuZChzZWxmKTtcbiAgICB9LFxuICAgICAgICBfb25DbGljayA9IGZ1bmN0aW9uIF9vbkNsaWNrKGUpIHtcbiAgICAgIHJldHVybiBfaWdub3JlQ2hlY2soZSkgfHwgX2dldEV2ZW50KGUsIHByZXZlbnREZWZhdWx0KSAmJiBvbkNsaWNrKHNlbGYpO1xuICAgIH07XG5cbiAgICBvblN0b3BEZWxheWVkQ2FsbCA9IHNlbGYuX2RjID0gZ3NhcC5kZWxheWVkQ2FsbChvblN0b3BEZWxheSB8fCAwLjI1LCBvblN0b3BGdW5jKS5wYXVzZSgpO1xuICAgIHNlbGYuZGVsdGFYID0gc2VsZi5kZWx0YVkgPSAwO1xuICAgIHNlbGYuX3Z4ID0gX2dldFZlbG9jaXR5UHJvcCgwLCA1MCwgdHJ1ZSk7XG4gICAgc2VsZi5fdnkgPSBfZ2V0VmVsb2NpdHlQcm9wKDAsIDUwLCB0cnVlKTtcbiAgICBzZWxmLnNjcm9sbFggPSBzY3JvbGxGdW5jWDtcbiAgICBzZWxmLnNjcm9sbFkgPSBzY3JvbGxGdW5jWTtcbiAgICBzZWxmLmlzRHJhZ2dpbmcgPSBzZWxmLmlzR2VzdHVyaW5nID0gc2VsZi5pc1ByZXNzZWQgPSBmYWxzZTtcblxuICAgIF9jb250ZXh0KHRoaXMpO1xuXG4gICAgc2VsZi5lbmFibGUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKCFzZWxmLmlzRW5hYmxlZCkge1xuICAgICAgICBfYWRkTGlzdGVuZXIoaXNWaWV3cG9ydCA/IG93bmVyRG9jIDogdGFyZ2V0LCBcInNjcm9sbFwiLCBfb25TY3JvbGwpO1xuXG4gICAgICAgIHR5cGUuaW5kZXhPZihcInNjcm9sbFwiKSA+PSAwICYmIF9hZGRMaXN0ZW5lcihpc1ZpZXdwb3J0ID8gb3duZXJEb2MgOiB0YXJnZXQsIFwic2Nyb2xsXCIsIG9uU2Nyb2xsLCBwYXNzaXZlLCBjYXB0dXJlKTtcbiAgICAgICAgdHlwZS5pbmRleE9mKFwid2hlZWxcIikgPj0gMCAmJiBfYWRkTGlzdGVuZXIodGFyZ2V0LCBcIndoZWVsXCIsIF9vbldoZWVsLCBwYXNzaXZlLCBjYXB0dXJlKTtcblxuICAgICAgICBpZiAodHlwZS5pbmRleE9mKFwidG91Y2hcIikgPj0gMCAmJiBfaXNUb3VjaCB8fCB0eXBlLmluZGV4T2YoXCJwb2ludGVyXCIpID49IDApIHtcbiAgICAgICAgICBfYWRkTGlzdGVuZXIodGFyZ2V0LCBfZXZlbnRUeXBlc1swXSwgX29uUHJlc3MsIHBhc3NpdmUsIGNhcHR1cmUpO1xuXG4gICAgICAgICAgX2FkZExpc3RlbmVyKG93bmVyRG9jLCBfZXZlbnRUeXBlc1syXSwgX29uUmVsZWFzZSk7XG5cbiAgICAgICAgICBfYWRkTGlzdGVuZXIob3duZXJEb2MsIF9ldmVudFR5cGVzWzNdLCBfb25SZWxlYXNlKTtcblxuICAgICAgICAgIGFsbG93Q2xpY2tzICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIFwiY2xpY2tcIiwgY2xpY2tDYXB0dXJlLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBvbkNsaWNrICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIFwiY2xpY2tcIiwgX29uQ2xpY2spO1xuICAgICAgICAgIG9uR2VzdHVyZVN0YXJ0ICYmIF9hZGRMaXN0ZW5lcihvd25lckRvYywgXCJnZXN0dXJlc3RhcnRcIiwgX29uR2VzdHVyZVN0YXJ0KTtcbiAgICAgICAgICBvbkdlc3R1cmVFbmQgJiYgX2FkZExpc3RlbmVyKG93bmVyRG9jLCBcImdlc3R1cmVlbmRcIiwgX29uR2VzdHVyZUVuZCk7XG4gICAgICAgICAgb25Ib3ZlciAmJiBfYWRkTGlzdGVuZXIodGFyZ2V0LCBfcG9pbnRlclR5cGUgKyBcImVudGVyXCIsIF9vbkhvdmVyKTtcbiAgICAgICAgICBvbkhvdmVyRW5kICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwibGVhdmVcIiwgX29uSG92ZXJFbmQpO1xuICAgICAgICAgIG9uTW92ZSAmJiBfYWRkTGlzdGVuZXIodGFyZ2V0LCBfcG9pbnRlclR5cGUgKyBcIm1vdmVcIiwgX29uTW92ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLmlzRW5hYmxlZCA9IHRydWU7XG4gICAgICAgIGUgJiYgZS50eXBlICYmIF9vblByZXNzKGUpO1xuICAgICAgICBvbkVuYWJsZSAmJiBvbkVuYWJsZShzZWxmKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfTtcblxuICAgIHNlbGYuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmlzRW5hYmxlZCkge1xuICAgICAgICAvLyBvbmx5IHJlbW92ZSB0aGUgX29uU2Nyb2xsIGxpc3RlbmVyIGlmIHRoZXJlIGFyZW4ndCBhbnkgb3RoZXJzIHRoYXQgcmVseSBvbiB0aGUgZnVuY3Rpb25hbGl0eS5cbiAgICAgICAgX29ic2VydmVycy5maWx0ZXIoZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICByZXR1cm4gbyAhPT0gc2VsZiAmJiBfaXNWaWV3cG9ydChvLnRhcmdldCk7XG4gICAgICAgIH0pLmxlbmd0aCB8fCBfcmVtb3ZlTGlzdGVuZXIoaXNWaWV3cG9ydCA/IG93bmVyRG9jIDogdGFyZ2V0LCBcInNjcm9sbFwiLCBfb25TY3JvbGwpO1xuXG4gICAgICAgIGlmIChzZWxmLmlzUHJlc3NlZCkge1xuICAgICAgICAgIHNlbGYuX3Z4LnJlc2V0KCk7XG5cbiAgICAgICAgICBzZWxmLl92eS5yZXNldCgpO1xuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKGlzTm9ybWFsaXplciA/IHRhcmdldCA6IG93bmVyRG9jLCBfZXZlbnRUeXBlc1sxXSwgX29uRHJhZywgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIoaXNWaWV3cG9ydCA/IG93bmVyRG9jIDogdGFyZ2V0LCBcInNjcm9sbFwiLCBvblNjcm9sbCwgY2FwdHVyZSk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgXCJ3aGVlbFwiLCBfb25XaGVlbCwgY2FwdHVyZSk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgX2V2ZW50VHlwZXNbMF0sIF9vblByZXNzLCBjYXB0dXJlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIob3duZXJEb2MsIF9ldmVudFR5cGVzWzJdLCBfb25SZWxlYXNlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIob3duZXJEb2MsIF9ldmVudFR5cGVzWzNdLCBfb25SZWxlYXNlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBcImNsaWNrXCIsIGNsaWNrQ2FwdHVyZSwgdHJ1ZSk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgXCJjbGlja1wiLCBfb25DbGljayk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKG93bmVyRG9jLCBcImdlc3R1cmVzdGFydFwiLCBfb25HZXN0dXJlU3RhcnQpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihvd25lckRvYywgXCJnZXN0dXJlZW5kXCIsIF9vbkdlc3R1cmVFbmQpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwiZW50ZXJcIiwgX29uSG92ZXIpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwibGVhdmVcIiwgX29uSG92ZXJFbmQpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwibW92ZVwiLCBfb25Nb3ZlKTtcblxuICAgICAgICBzZWxmLmlzRW5hYmxlZCA9IHNlbGYuaXNQcmVzc2VkID0gc2VsZi5pc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIG9uRGlzYWJsZSAmJiBvbkRpc2FibGUoc2VsZik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYua2lsbCA9IHNlbGYucmV2ZXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5kaXNhYmxlKCk7XG5cbiAgICAgIHZhciBpID0gX29ic2VydmVycy5pbmRleE9mKHNlbGYpO1xuXG4gICAgICBpID49IDAgJiYgX29ic2VydmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICBfbm9ybWFsaXplciA9PT0gc2VsZiAmJiAoX25vcm1hbGl6ZXIgPSAwKTtcbiAgICB9O1xuXG4gICAgX29ic2VydmVycy5wdXNoKHNlbGYpO1xuXG4gICAgaXNOb3JtYWxpemVyICYmIF9pc1ZpZXdwb3J0KHRhcmdldCkgJiYgKF9ub3JtYWxpemVyID0gc2VsZik7XG4gICAgc2VsZi5lbmFibGUoZXZlbnQpO1xuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhPYnNlcnZlciwgW3tcbiAgICBrZXk6IFwidmVsb2NpdHlYXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdnguZ2V0VmVsb2NpdHkoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidmVsb2NpdHlZXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdnkuZ2V0VmVsb2NpdHkoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gT2JzZXJ2ZXI7XG59KCk7XG5PYnNlcnZlci52ZXJzaW9uID0gXCIzLjEyLjVcIjtcblxuT2JzZXJ2ZXIuY3JlYXRlID0gZnVuY3Rpb24gKHZhcnMpIHtcbiAgcmV0dXJuIG5ldyBPYnNlcnZlcih2YXJzKTtcbn07XG5cbk9ic2VydmVyLnJlZ2lzdGVyID0gX2luaXRDb3JlO1xuXG5PYnNlcnZlci5nZXRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfb2JzZXJ2ZXJzLnNsaWNlKCk7XG59O1xuXG5PYnNlcnZlci5nZXRCeUlkID0gZnVuY3Rpb24gKGlkKSB7XG4gIHJldHVybiBfb2JzZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvLnZhcnMuaWQgPT09IGlkO1xuICB9KVswXTtcbn07XG5cbl9nZXRHU0FQKCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbihPYnNlcnZlcik7XG5leHBvcnQgeyBPYnNlcnZlciBhcyBkZWZhdWx0LCBfaXNWaWV3cG9ydCwgX3Njcm9sbGVycywgX2dldFNjcm9sbEZ1bmMsIF9nZXRQcm94eVByb3AsIF9wcm94aWVzLCBfZ2V0VmVsb2NpdHlQcm9wLCBfdmVydGljYWwsIF9ob3Jpem9udGFsLCBfZ2V0VGFyZ2V0IH07IiwiLyohXG4gKiBTY3JvbGxUcmlnZ2VyIDMuMTIuNVxuICogaHR0cHM6Ly9nc2FwLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAyMDA4LTIwMjQsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3NhcC5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR1NBUCBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IE9ic2VydmVyLCBfZ2V0VGFyZ2V0LCBfdmVydGljYWwsIF9ob3Jpem9udGFsLCBfc2Nyb2xsZXJzLCBfcHJveGllcywgX2dldFNjcm9sbEZ1bmMsIF9nZXRQcm94eVByb3AsIF9nZXRWZWxvY2l0eVByb3AgfSBmcm9tIFwiLi9PYnNlcnZlci5qc1wiO1xuXG52YXIgZ3NhcCxcbiAgICBfY29yZUluaXR0ZWQsXG4gICAgX3dpbixcbiAgICBfZG9jLFxuICAgIF9kb2NFbCxcbiAgICBfYm9keSxcbiAgICBfcm9vdCxcbiAgICBfcmVzaXplRGVsYXksXG4gICAgX3RvQXJyYXksXG4gICAgX2NsYW1wLFxuICAgIF90aW1lMixcbiAgICBfc3luY0ludGVydmFsLFxuICAgIF9yZWZyZXNoaW5nLFxuICAgIF9wb2ludGVySXNEb3duLFxuICAgIF90cmFuc2Zvcm1Qcm9wLFxuICAgIF9pLFxuICAgIF9wcmV2V2lkdGgsXG4gICAgX3ByZXZIZWlnaHQsXG4gICAgX2F1dG9SZWZyZXNoLFxuICAgIF9zb3J0LFxuICAgIF9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgX2lnbm9yZVJlc2l6ZSxcbiAgICBfbm9ybWFsaXplcixcbiAgICBfaWdub3JlTW9iaWxlUmVzaXplLFxuICAgIF9iYXNlU2NyZWVuSGVpZ2h0LFxuICAgIF9iYXNlU2NyZWVuV2lkdGgsXG4gICAgX2ZpeElPU0J1ZyxcbiAgICBfY29udGV4dCxcbiAgICBfc2Nyb2xsUmVzdG9yYXRpb24sXG4gICAgX2RpdjEwMHZoLFxuICAgIF8xMDB2aCxcbiAgICBfaXNSZXZlcnRlZCxcbiAgICBfY2xhbXBpbmdNYXgsXG4gICAgX2xpbWl0Q2FsbGJhY2tzLFxuICAgIC8vIGlmIHRydWUsIHdlJ2xsIG9ubHkgdHJpZ2dlciBjYWxsYmFja3MgaWYgdGhlIGFjdGl2ZSBzdGF0ZSB0b2dnbGVzLCBzbyBpZiB5b3Ugc2Nyb2xsIGltbWVkaWF0ZWx5IHBhc3QgYm90aCB0aGUgc3RhcnQgYW5kIGVuZCBwb3NpdGlvbnMgb2YgYSBTY3JvbGxUcmlnZ2VyICh0aHVzIGluYWN0aXZlIHRvIGluYWN0aXZlKSwgbmVpdGhlciBpdHMgb25FbnRlciBub3Igb25MZWF2ZSB3aWxsIGJlIGNhbGxlZC4gVGhpcyBpcyB1c2VmdWwgZHVyaW5nIHN0YXJ0dXAuXG5fc3RhcnR1cCA9IDEsXG4gICAgX2dldFRpbWUgPSBEYXRlLm5vdyxcbiAgICBfdGltZTEgPSBfZ2V0VGltZSgpLFxuICAgIF9sYXN0U2Nyb2xsVGltZSA9IDAsXG4gICAgX2VuYWJsZWQgPSAwLFxuICAgIF9wYXJzZUNsYW1wID0gZnVuY3Rpb24gX3BhcnNlQ2xhbXAodmFsdWUsIHR5cGUsIHNlbGYpIHtcbiAgdmFyIGNsYW1wID0gX2lzU3RyaW5nKHZhbHVlKSAmJiAodmFsdWUuc3Vic3RyKDAsIDYpID09PSBcImNsYW1wKFwiIHx8IHZhbHVlLmluZGV4T2YoXCJtYXhcIikgPiAtMSk7XG4gIHNlbGZbXCJfXCIgKyB0eXBlICsgXCJDbGFtcFwiXSA9IGNsYW1wO1xuICByZXR1cm4gY2xhbXAgPyB2YWx1ZS5zdWJzdHIoNiwgdmFsdWUubGVuZ3RoIC0gNykgOiB2YWx1ZTtcbn0sXG4gICAgX2tlZXBDbGFtcCA9IGZ1bmN0aW9uIF9rZWVwQ2xhbXAodmFsdWUsIGNsYW1wKSB7XG4gIHJldHVybiBjbGFtcCAmJiAoIV9pc1N0cmluZyh2YWx1ZSkgfHwgdmFsdWUuc3Vic3RyKDAsIDYpICE9PSBcImNsYW1wKFwiKSA/IFwiY2xhbXAoXCIgKyB2YWx1ZSArIFwiKVwiIDogdmFsdWU7XG59LFxuICAgIF9yYWZCdWdGaXggPSBmdW5jdGlvbiBfcmFmQnVnRml4KCkge1xuICByZXR1cm4gX2VuYWJsZWQgJiYgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKF9yYWZCdWdGaXgpO1xufSxcbiAgICAvLyBpbiBzb21lIGJyb3dzZXJzIChsaWtlIEZpcmVmb3gpLCBzY3JlZW4gcmVwYWludHMgd2VyZW4ndCBjb25zaXN0ZW50IHVubGVzcyB3ZSBoYWQgU09NRVRISU5HIHF1ZXVlZCB1cCBpbiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSEgU28gdGhpcyBqdXN0IGNyZWF0ZXMgYSBzdXBlciBzaW1wbGUgbG9vcCB0byBrZWVwIGl0IGFsaXZlIGFuZCBzbW9vdGggb3V0IHJlcGFpbnRzLlxuX3BvaW50ZXJEb3duSGFuZGxlciA9IGZ1bmN0aW9uIF9wb2ludGVyRG93bkhhbmRsZXIoKSB7XG4gIHJldHVybiBfcG9pbnRlcklzRG93biA9IDE7XG59LFxuICAgIF9wb2ludGVyVXBIYW5kbGVyID0gZnVuY3Rpb24gX3BvaW50ZXJVcEhhbmRsZXIoKSB7XG4gIHJldHVybiBfcG9pbnRlcklzRG93biA9IDA7XG59LFxuICAgIF9wYXNzVGhyb3VnaCA9IGZ1bmN0aW9uIF9wYXNzVGhyb3VnaCh2KSB7XG4gIHJldHVybiB2O1xufSxcbiAgICBfcm91bmQgPSBmdW5jdGlvbiBfcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDApIC8gMTAwMDAwIHx8IDA7XG59LFxuICAgIF93aW5kb3dFeGlzdHMgPSBmdW5jdGlvbiBfd2luZG93RXhpc3RzKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX2dldEdTQVAgPSBmdW5jdGlvbiBfZ2V0R1NBUCgpIHtcbiAgcmV0dXJuIGdzYXAgfHwgX3dpbmRvd0V4aXN0cygpICYmIChnc2FwID0gd2luZG93LmdzYXApICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4gJiYgZ3NhcDtcbn0sXG4gICAgX2lzVmlld3BvcnQgPSBmdW5jdGlvbiBfaXNWaWV3cG9ydChlKSB7XG4gIHJldHVybiAhIX5fcm9vdC5pbmRleE9mKGUpO1xufSxcbiAgICBfZ2V0Vmlld3BvcnREaW1lbnNpb24gPSBmdW5jdGlvbiBfZ2V0Vmlld3BvcnREaW1lbnNpb24oZGltZW5zaW9uUHJvcGVydHkpIHtcbiAgcmV0dXJuIChkaW1lbnNpb25Qcm9wZXJ0eSA9PT0gXCJIZWlnaHRcIiA/IF8xMDB2aCA6IF93aW5bXCJpbm5lclwiICsgZGltZW5zaW9uUHJvcGVydHldKSB8fCBfZG9jRWxbXCJjbGllbnRcIiArIGRpbWVuc2lvblByb3BlcnR5XSB8fCBfYm9keVtcImNsaWVudFwiICsgZGltZW5zaW9uUHJvcGVydHldO1xufSxcbiAgICBfZ2V0Qm91bmRzRnVuYyA9IGZ1bmN0aW9uIF9nZXRCb3VuZHNGdW5jKGVsZW1lbnQpIHtcbiAgcmV0dXJuIF9nZXRQcm94eVByb3AoZWxlbWVudCwgXCJnZXRCb3VuZGluZ0NsaWVudFJlY3RcIikgfHwgKF9pc1ZpZXdwb3J0KGVsZW1lbnQpID8gZnVuY3Rpb24gKCkge1xuICAgIF93aW5PZmZzZXRzLndpZHRoID0gX3dpbi5pbm5lcldpZHRoO1xuICAgIF93aW5PZmZzZXRzLmhlaWdodCA9IF8xMDB2aDtcbiAgICByZXR1cm4gX3dpbk9mZnNldHM7XG4gIH0gOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9nZXRCb3VuZHMoZWxlbWVudCk7XG4gIH0pO1xufSxcbiAgICBfZ2V0U2l6ZUZ1bmMgPSBmdW5jdGlvbiBfZ2V0U2l6ZUZ1bmMoc2Nyb2xsZXIsIGlzVmlld3BvcnQsIF9yZWYpIHtcbiAgdmFyIGQgPSBfcmVmLmQsXG4gICAgICBkMiA9IF9yZWYuZDIsXG4gICAgICBhID0gX3JlZi5hO1xuICByZXR1cm4gKGEgPSBfZ2V0UHJveHlQcm9wKHNjcm9sbGVyLCBcImdldEJvdW5kaW5nQ2xpZW50UmVjdFwiKSkgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGEoKVtkXTtcbiAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKGlzVmlld3BvcnQgPyBfZ2V0Vmlld3BvcnREaW1lbnNpb24oZDIpIDogc2Nyb2xsZXJbXCJjbGllbnRcIiArIGQyXSkgfHwgMDtcbiAgfTtcbn0sXG4gICAgX2dldE9mZnNldHNGdW5jID0gZnVuY3Rpb24gX2dldE9mZnNldHNGdW5jKGVsZW1lbnQsIGlzVmlld3BvcnQpIHtcbiAgcmV0dXJuICFpc1ZpZXdwb3J0IHx8IH5fcHJveGllcy5pbmRleE9mKGVsZW1lbnQpID8gX2dldEJvdW5kc0Z1bmMoZWxlbWVudCkgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF93aW5PZmZzZXRzO1xuICB9O1xufSxcbiAgICBfbWF4U2Nyb2xsID0gZnVuY3Rpb24gX21heFNjcm9sbChlbGVtZW50LCBfcmVmMikge1xuICB2YXIgcyA9IF9yZWYyLnMsXG4gICAgICBkMiA9IF9yZWYyLmQyLFxuICAgICAgZCA9IF9yZWYyLmQsXG4gICAgICBhID0gX3JlZjIuYTtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIChzID0gXCJzY3JvbGxcIiArIGQyKSAmJiAoYSA9IF9nZXRQcm94eVByb3AoZWxlbWVudCwgcykpID8gYSgpIC0gX2dldEJvdW5kc0Z1bmMoZWxlbWVudCkoKVtkXSA6IF9pc1ZpZXdwb3J0KGVsZW1lbnQpID8gKF9kb2NFbFtzXSB8fCBfYm9keVtzXSkgLSBfZ2V0Vmlld3BvcnREaW1lbnNpb24oZDIpIDogZWxlbWVudFtzXSAtIGVsZW1lbnRbXCJvZmZzZXRcIiArIGQyXSk7XG59LFxuICAgIF9pdGVyYXRlQXV0b1JlZnJlc2ggPSBmdW5jdGlvbiBfaXRlcmF0ZUF1dG9SZWZyZXNoKGZ1bmMsIGV2ZW50cykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IF9hdXRvUmVmcmVzaC5sZW5ndGg7IGkgKz0gMykge1xuICAgICghZXZlbnRzIHx8IH5ldmVudHMuaW5kZXhPZihfYXV0b1JlZnJlc2hbaSArIDFdKSkgJiYgZnVuYyhfYXV0b1JlZnJlc2hbaV0sIF9hdXRvUmVmcmVzaFtpICsgMV0sIF9hdXRvUmVmcmVzaFtpICsgMl0pO1xuICB9XG59LFxuICAgIF9pc1N0cmluZyA9IGZ1bmN0aW9uIF9pc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiO1xufSxcbiAgICBfaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIF9pc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn0sXG4gICAgX2lzTnVtYmVyID0gZnVuY3Rpb24gX2lzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCI7XG59LFxuICAgIF9pc09iamVjdCA9IGZ1bmN0aW9uIF9pc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xufSxcbiAgICBfZW5kQW5pbWF0aW9uID0gZnVuY3Rpb24gX2VuZEFuaW1hdGlvbihhbmltYXRpb24sIHJldmVyc2VkLCBwYXVzZSkge1xuICByZXR1cm4gYW5pbWF0aW9uICYmIGFuaW1hdGlvbi5wcm9ncmVzcyhyZXZlcnNlZCA/IDAgOiAxKSAmJiBwYXVzZSAmJiBhbmltYXRpb24ucGF1c2UoKTtcbn0sXG4gICAgX2NhbGxiYWNrID0gZnVuY3Rpb24gX2NhbGxiYWNrKHNlbGYsIGZ1bmMpIHtcbiAgaWYgKHNlbGYuZW5hYmxlZCkge1xuICAgIHZhciByZXN1bHQgPSBzZWxmLl9jdHggPyBzZWxmLl9jdHguYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmdW5jKHNlbGYpO1xuICAgIH0pIDogZnVuYyhzZWxmKTtcbiAgICByZXN1bHQgJiYgcmVzdWx0LnRvdGFsVGltZSAmJiAoc2VsZi5jYWxsYmFja0FuaW1hdGlvbiA9IHJlc3VsdCk7XG4gIH1cbn0sXG4gICAgX2FicyA9IE1hdGguYWJzLFxuICAgIF9sZWZ0ID0gXCJsZWZ0XCIsXG4gICAgX3RvcCA9IFwidG9wXCIsXG4gICAgX3JpZ2h0ID0gXCJyaWdodFwiLFxuICAgIF9ib3R0b20gPSBcImJvdHRvbVwiLFxuICAgIF93aWR0aCA9IFwid2lkdGhcIixcbiAgICBfaGVpZ2h0ID0gXCJoZWlnaHRcIixcbiAgICBfUmlnaHQgPSBcIlJpZ2h0XCIsXG4gICAgX0xlZnQgPSBcIkxlZnRcIixcbiAgICBfVG9wID0gXCJUb3BcIixcbiAgICBfQm90dG9tID0gXCJCb3R0b21cIixcbiAgICBfcGFkZGluZyA9IFwicGFkZGluZ1wiLFxuICAgIF9tYXJnaW4gPSBcIm1hcmdpblwiLFxuICAgIF9XaWR0aCA9IFwiV2lkdGhcIixcbiAgICBfSGVpZ2h0ID0gXCJIZWlnaHRcIixcbiAgICBfcHggPSBcInB4XCIsXG4gICAgX2dldENvbXB1dGVkU3R5bGUgPSBmdW5jdGlvbiBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSB7XG4gIHJldHVybiBfd2luLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG59LFxuICAgIF9tYWtlUG9zaXRpb25hYmxlID0gZnVuY3Rpb24gX21ha2VQb3NpdGlvbmFibGUoZWxlbWVudCkge1xuICAvLyBpZiB0aGUgZWxlbWVudCBhbHJlYWR5IGhhcyBwb3NpdGlvbjogYWJzb2x1dGUgb3IgZml4ZWQsIGxlYXZlIHRoYXQsIG90aGVyd2lzZSBtYWtlIGl0IHBvc2l0aW9uOiByZWxhdGl2ZVxuICB2YXIgcG9zaXRpb24gPSBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbjtcblxuICBlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiID8gcG9zaXRpb24gOiBcInJlbGF0aXZlXCI7XG59LFxuICAgIF9zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXREZWZhdWx0cyhvYmosIGRlZmF1bHRzKSB7XG4gIGZvciAodmFyIHAgaW4gZGVmYXVsdHMpIHtcbiAgICBwIGluIG9iaiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0sXG4gICAgX2dldEJvdW5kcyA9IGZ1bmN0aW9uIF9nZXRCb3VuZHMoZWxlbWVudCwgd2l0aG91dFRyYW5zZm9ybXMpIHtcbiAgdmFyIHR3ZWVuID0gd2l0aG91dFRyYW5zZm9ybXMgJiYgX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudClbX3RyYW5zZm9ybVByb3BdICE9PSBcIm1hdHJpeCgxLCAwLCAwLCAxLCAwLCAwKVwiICYmIGdzYXAudG8oZWxlbWVudCwge1xuICAgIHg6IDAsXG4gICAgeTogMCxcbiAgICB4UGVyY2VudDogMCxcbiAgICB5UGVyY2VudDogMCxcbiAgICByb3RhdGlvbjogMCxcbiAgICByb3RhdGlvblg6IDAsXG4gICAgcm90YXRpb25ZOiAwLFxuICAgIHNjYWxlOiAxLFxuICAgIHNrZXdYOiAwLFxuICAgIHNrZXdZOiAwXG4gIH0pLnByb2dyZXNzKDEpLFxuICAgICAgYm91bmRzID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdHdlZW4gJiYgdHdlZW4ucHJvZ3Jlc3MoMCkua2lsbCgpO1xuICByZXR1cm4gYm91bmRzO1xufSxcbiAgICBfZ2V0U2l6ZSA9IGZ1bmN0aW9uIF9nZXRTaXplKGVsZW1lbnQsIF9yZWYzKSB7XG4gIHZhciBkMiA9IF9yZWYzLmQyO1xuICByZXR1cm4gZWxlbWVudFtcIm9mZnNldFwiICsgZDJdIHx8IGVsZW1lbnRbXCJjbGllbnRcIiArIGQyXSB8fCAwO1xufSxcbiAgICBfZ2V0TGFiZWxSYXRpb0FycmF5ID0gZnVuY3Rpb24gX2dldExhYmVsUmF0aW9BcnJheSh0aW1lbGluZSkge1xuICB2YXIgYSA9IFtdLFxuICAgICAgbGFiZWxzID0gdGltZWxpbmUubGFiZWxzLFxuICAgICAgZHVyYXRpb24gPSB0aW1lbGluZS5kdXJhdGlvbigpLFxuICAgICAgcDtcblxuICBmb3IgKHAgaW4gbGFiZWxzKSB7XG4gICAgYS5wdXNoKGxhYmVsc1twXSAvIGR1cmF0aW9uKTtcbiAgfVxuXG4gIHJldHVybiBhO1xufSxcbiAgICBfZ2V0Q2xvc2VzdExhYmVsID0gZnVuY3Rpb24gX2dldENsb3Nlc3RMYWJlbChhbmltYXRpb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBnc2FwLnV0aWxzLnNuYXAoX2dldExhYmVsUmF0aW9BcnJheShhbmltYXRpb24pLCB2YWx1ZSk7XG4gIH07XG59LFxuICAgIF9zbmFwRGlyZWN0aW9uYWwgPSBmdW5jdGlvbiBfc25hcERpcmVjdGlvbmFsKHNuYXBJbmNyZW1lbnRPckFycmF5KSB7XG4gIHZhciBzbmFwID0gZ3NhcC51dGlscy5zbmFwKHNuYXBJbmNyZW1lbnRPckFycmF5KSxcbiAgICAgIGEgPSBBcnJheS5pc0FycmF5KHNuYXBJbmNyZW1lbnRPckFycmF5KSAmJiBzbmFwSW5jcmVtZW50T3JBcnJheS5zbGljZSgwKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGEgLSBiO1xuICB9KTtcbiAgcmV0dXJuIGEgPyBmdW5jdGlvbiAodmFsdWUsIGRpcmVjdGlvbiwgdGhyZXNob2xkKSB7XG4gICAgaWYgKHRocmVzaG9sZCA9PT0gdm9pZCAwKSB7XG4gICAgICB0aHJlc2hvbGQgPSAxZS0zO1xuICAgIH1cblxuICAgIHZhciBpO1xuXG4gICAgaWYgKCFkaXJlY3Rpb24pIHtcbiAgICAgIHJldHVybiBzbmFwKHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0aW9uID4gMCkge1xuICAgICAgdmFsdWUgLT0gdGhyZXNob2xkOyAvLyB0byBhdm9pZCByb3VuZGluZyBlcnJvcnMuIElmIHdlJ3JlIHRvbyBzdHJpY3QsIGl0IG1pZ2h0IHNuYXAgZm9yd2FyZCwgdGhlbiBpbW1lZGlhdGVseSBhZ2FpbiwgYW5kIGFnYWluLlxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYVtpXSA+PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBhW2ldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhW2kgLSAxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaSA9IGEubGVuZ3RoO1xuICAgICAgdmFsdWUgKz0gdGhyZXNob2xkO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGlmIChhW2ldIDw9IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGFbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYVswXTtcbiAgfSA6IGZ1bmN0aW9uICh2YWx1ZSwgZGlyZWN0aW9uLCB0aHJlc2hvbGQpIHtcbiAgICBpZiAodGhyZXNob2xkID09PSB2b2lkIDApIHtcbiAgICAgIHRocmVzaG9sZCA9IDFlLTM7XG4gICAgfVxuXG4gICAgdmFyIHNuYXBwZWQgPSBzbmFwKHZhbHVlKTtcbiAgICByZXR1cm4gIWRpcmVjdGlvbiB8fCBNYXRoLmFicyhzbmFwcGVkIC0gdmFsdWUpIDwgdGhyZXNob2xkIHx8IHNuYXBwZWQgLSB2YWx1ZSA8IDAgPT09IGRpcmVjdGlvbiA8IDAgPyBzbmFwcGVkIDogc25hcChkaXJlY3Rpb24gPCAwID8gdmFsdWUgLSBzbmFwSW5jcmVtZW50T3JBcnJheSA6IHZhbHVlICsgc25hcEluY3JlbWVudE9yQXJyYXkpO1xuICB9O1xufSxcbiAgICBfZ2V0TGFiZWxBdERpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRMYWJlbEF0RGlyZWN0aW9uKHRpbWVsaW5lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUsIHN0KSB7XG4gICAgcmV0dXJuIF9zbmFwRGlyZWN0aW9uYWwoX2dldExhYmVsUmF0aW9BcnJheSh0aW1lbGluZSkpKHZhbHVlLCBzdC5kaXJlY3Rpb24pO1xuICB9O1xufSxcbiAgICBfbXVsdGlMaXN0ZW5lciA9IGZ1bmN0aW9uIF9tdWx0aUxpc3RlbmVyKGZ1bmMsIGVsZW1lbnQsIHR5cGVzLCBjYWxsYmFjaykge1xuICByZXR1cm4gdHlwZXMuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICByZXR1cm4gZnVuYyhlbGVtZW50LCB0eXBlLCBjYWxsYmFjayk7XG4gIH0pO1xufSxcbiAgICBfYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBfYWRkTGlzdGVuZXIoZWxlbWVudCwgdHlwZSwgZnVuYywgbm9uUGFzc2l2ZSwgY2FwdHVyZSkge1xuICByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmMsIHtcbiAgICBwYXNzaXZlOiAhbm9uUGFzc2l2ZSxcbiAgICBjYXB0dXJlOiAhIWNhcHR1cmVcbiAgfSk7XG59LFxuICAgIF9yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIF9yZW1vdmVMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBmdW5jLCBjYXB0dXJlKSB7XG4gIHJldHVybiBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZnVuYywgISFjYXB0dXJlKTtcbn0sXG4gICAgX3doZWVsTGlzdGVuZXIgPSBmdW5jdGlvbiBfd2hlZWxMaXN0ZW5lcihmdW5jLCBlbCwgc2Nyb2xsRnVuYykge1xuICBzY3JvbGxGdW5jID0gc2Nyb2xsRnVuYyAmJiBzY3JvbGxGdW5jLndoZWVsSGFuZGxlcjtcblxuICBpZiAoc2Nyb2xsRnVuYykge1xuICAgIGZ1bmMoZWwsIFwid2hlZWxcIiwgc2Nyb2xsRnVuYyk7XG4gICAgZnVuYyhlbCwgXCJ0b3VjaG1vdmVcIiwgc2Nyb2xsRnVuYyk7XG4gIH1cbn0sXG4gICAgX21hcmtlckRlZmF1bHRzID0ge1xuICBzdGFydENvbG9yOiBcImdyZWVuXCIsXG4gIGVuZENvbG9yOiBcInJlZFwiLFxuICBpbmRlbnQ6IDAsXG4gIGZvbnRTaXplOiBcIjE2cHhcIixcbiAgZm9udFdlaWdodDogXCJub3JtYWxcIlxufSxcbiAgICBfZGVmYXVsdHMgPSB7XG4gIHRvZ2dsZUFjdGlvbnM6IFwicGxheVwiLFxuICBhbnRpY2lwYXRlUGluOiAwXG59LFxuICAgIF9rZXl3b3JkcyA9IHtcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICBjZW50ZXI6IDAuNSxcbiAgYm90dG9tOiAxLFxuICByaWdodDogMVxufSxcbiAgICBfb2Zmc2V0VG9QeCA9IGZ1bmN0aW9uIF9vZmZzZXRUb1B4KHZhbHVlLCBzaXplKSB7XG4gIGlmIChfaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIGVxSW5kZXggPSB2YWx1ZS5pbmRleE9mKFwiPVwiKSxcbiAgICAgICAgcmVsYXRpdmUgPSB+ZXFJbmRleCA/ICsodmFsdWUuY2hhckF0KGVxSW5kZXggLSAxKSArIDEpICogcGFyc2VGbG9hdCh2YWx1ZS5zdWJzdHIoZXFJbmRleCArIDEpKSA6IDA7XG5cbiAgICBpZiAofmVxSW5kZXgpIHtcbiAgICAgIHZhbHVlLmluZGV4T2YoXCIlXCIpID4gZXFJbmRleCAmJiAocmVsYXRpdmUgKj0gc2l6ZSAvIDEwMCk7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cigwLCBlcUluZGV4IC0gMSk7XG4gICAgfVxuXG4gICAgdmFsdWUgPSByZWxhdGl2ZSArICh2YWx1ZSBpbiBfa2V5d29yZHMgPyBfa2V5d29yZHNbdmFsdWVdICogc2l6ZSA6IH52YWx1ZS5pbmRleE9mKFwiJVwiKSA/IHBhcnNlRmxvYXQodmFsdWUpICogc2l6ZSAvIDEwMCA6IHBhcnNlRmxvYXQodmFsdWUpIHx8IDApO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufSxcbiAgICBfY3JlYXRlTWFya2VyID0gZnVuY3Rpb24gX2NyZWF0ZU1hcmtlcih0eXBlLCBuYW1lLCBjb250YWluZXIsIGRpcmVjdGlvbiwgX3JlZjQsIG9mZnNldCwgbWF0Y2hXaWR0aEVsLCBjb250YWluZXJBbmltYXRpb24pIHtcbiAgdmFyIHN0YXJ0Q29sb3IgPSBfcmVmNC5zdGFydENvbG9yLFxuICAgICAgZW5kQ29sb3IgPSBfcmVmNC5lbmRDb2xvcixcbiAgICAgIGZvbnRTaXplID0gX3JlZjQuZm9udFNpemUsXG4gICAgICBpbmRlbnQgPSBfcmVmNC5pbmRlbnQsXG4gICAgICBmb250V2VpZ2h0ID0gX3JlZjQuZm9udFdlaWdodDtcblxuICB2YXIgZSA9IF9kb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcbiAgICAgIHVzZUZpeGVkUG9zaXRpb24gPSBfaXNWaWV3cG9ydChjb250YWluZXIpIHx8IF9nZXRQcm94eVByb3AoY29udGFpbmVyLCBcInBpblR5cGVcIikgPT09IFwiZml4ZWRcIixcbiAgICAgIGlzU2Nyb2xsZXIgPSB0eXBlLmluZGV4T2YoXCJzY3JvbGxlclwiKSAhPT0gLTEsXG4gICAgICBwYXJlbnQgPSB1c2VGaXhlZFBvc2l0aW9uID8gX2JvZHkgOiBjb250YWluZXIsXG4gICAgICBpc1N0YXJ0ID0gdHlwZS5pbmRleE9mKFwic3RhcnRcIikgIT09IC0xLFxuICAgICAgY29sb3IgPSBpc1N0YXJ0ID8gc3RhcnRDb2xvciA6IGVuZENvbG9yLFxuICAgICAgY3NzID0gXCJib3JkZXItY29sb3I6XCIgKyBjb2xvciArIFwiO2ZvbnQtc2l6ZTpcIiArIGZvbnRTaXplICsgXCI7Y29sb3I6XCIgKyBjb2xvciArIFwiO2ZvbnQtd2VpZ2h0OlwiICsgZm9udFdlaWdodCArIFwiO3BvaW50ZXItZXZlbnRzOm5vbmU7d2hpdGUtc3BhY2U6bm93cmFwO2ZvbnQtZmFtaWx5OnNhbnMtc2VyaWYsQXJpYWw7ei1pbmRleDoxMDAwO3BhZGRpbmc6NHB4IDhweDtib3JkZXItd2lkdGg6MDtib3JkZXItc3R5bGU6c29saWQ7XCI7XG5cbiAgY3NzICs9IFwicG9zaXRpb246XCIgKyAoKGlzU2Nyb2xsZXIgfHwgY29udGFpbmVyQW5pbWF0aW9uKSAmJiB1c2VGaXhlZFBvc2l0aW9uID8gXCJmaXhlZDtcIiA6IFwiYWJzb2x1dGU7XCIpO1xuICAoaXNTY3JvbGxlciB8fCBjb250YWluZXJBbmltYXRpb24gfHwgIXVzZUZpeGVkUG9zaXRpb24pICYmIChjc3MgKz0gKGRpcmVjdGlvbiA9PT0gX3ZlcnRpY2FsID8gX3JpZ2h0IDogX2JvdHRvbSkgKyBcIjpcIiArIChvZmZzZXQgKyBwYXJzZUZsb2F0KGluZGVudCkpICsgXCJweDtcIik7XG4gIG1hdGNoV2lkdGhFbCAmJiAoY3NzICs9IFwiYm94LXNpemluZzpib3JkZXItYm94O3RleHQtYWxpZ246bGVmdDt3aWR0aDpcIiArIG1hdGNoV2lkdGhFbC5vZmZzZXRXaWR0aCArIFwicHg7XCIpO1xuICBlLl9pc1N0YXJ0ID0gaXNTdGFydDtcbiAgZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImdzYXAtbWFya2VyLVwiICsgdHlwZSArIChuYW1lID8gXCIgbWFya2VyLVwiICsgbmFtZSA6IFwiXCIpKTtcbiAgZS5zdHlsZS5jc3NUZXh0ID0gY3NzO1xuICBlLmlubmVyVGV4dCA9IG5hbWUgfHwgbmFtZSA9PT0gMCA/IHR5cGUgKyBcIi1cIiArIG5hbWUgOiB0eXBlO1xuICBwYXJlbnQuY2hpbGRyZW5bMF0gPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKGUsIHBhcmVudC5jaGlsZHJlblswXSkgOiBwYXJlbnQuYXBwZW5kQ2hpbGQoZSk7XG4gIGUuX29mZnNldCA9IGVbXCJvZmZzZXRcIiArIGRpcmVjdGlvbi5vcC5kMl07XG5cbiAgX3Bvc2l0aW9uTWFya2VyKGUsIDAsIGRpcmVjdGlvbiwgaXNTdGFydCk7XG5cbiAgcmV0dXJuIGU7XG59LFxuICAgIF9wb3NpdGlvbk1hcmtlciA9IGZ1bmN0aW9uIF9wb3NpdGlvbk1hcmtlcihtYXJrZXIsIHN0YXJ0LCBkaXJlY3Rpb24sIGZsaXBwZWQpIHtcbiAgdmFyIHZhcnMgPSB7XG4gICAgZGlzcGxheTogXCJibG9ja1wiXG4gIH0sXG4gICAgICBzaWRlID0gZGlyZWN0aW9uW2ZsaXBwZWQgPyBcIm9zMlwiIDogXCJwMlwiXSxcbiAgICAgIG9wcG9zaXRlU2lkZSA9IGRpcmVjdGlvbltmbGlwcGVkID8gXCJwMlwiIDogXCJvczJcIl07XG4gIG1hcmtlci5faXNGbGlwcGVkID0gZmxpcHBlZDtcbiAgdmFyc1tkaXJlY3Rpb24uYSArIFwiUGVyY2VudFwiXSA9IGZsaXBwZWQgPyAtMTAwIDogMDtcbiAgdmFyc1tkaXJlY3Rpb24uYV0gPSBmbGlwcGVkID8gXCIxcHhcIiA6IDA7XG4gIHZhcnNbXCJib3JkZXJcIiArIHNpZGUgKyBfV2lkdGhdID0gMTtcbiAgdmFyc1tcImJvcmRlclwiICsgb3Bwb3NpdGVTaWRlICsgX1dpZHRoXSA9IDA7XG4gIHZhcnNbZGlyZWN0aW9uLnBdID0gc3RhcnQgKyBcInB4XCI7XG4gIGdzYXAuc2V0KG1hcmtlciwgdmFycyk7XG59LFxuICAgIF90cmlnZ2VycyA9IFtdLFxuICAgIF9pZHMgPSB7fSxcbiAgICBfcmFmSUQsXG4gICAgX3N5bmMgPSBmdW5jdGlvbiBfc3luYygpIHtcbiAgcmV0dXJuIF9nZXRUaW1lKCkgLSBfbGFzdFNjcm9sbFRpbWUgPiAzNCAmJiAoX3JhZklEIHx8IChfcmFmSUQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3VwZGF0ZUFsbCkpKTtcbn0sXG4gICAgX29uU2Nyb2xsID0gZnVuY3Rpb24gX29uU2Nyb2xsKCkge1xuICAvLyBwcmV2aW91c2x5LCB3ZSB0cmllZCB0byBvcHRpbWl6ZSBwZXJmb3JtYW5jZSBieSBiYXRjaGluZy9kZWZlcnJpbmcgdG8gdGhlIG5leHQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCksIGJ1dCBkaXNjb3ZlcmVkIHRoYXQgU2FmYXJpIGhhcyBhIGZldyBidWdzIHRoYXQgbWFrZSB0aGlzIHVud29ya2FibGUgKGVzcGVjaWFsbHkgb24gaU9TKS4gU2VlIGh0dHBzOi8vY29kZXBlbi5pby9HcmVlblNvY2svcGVuLzE2YzQzNWIxMmVmMDljMzgxMjUyMDQ4MThlN2I0NWZjP2VkaXRvcnM9MDAxMCBhbmQgaHR0cHM6Ly9jb2RlcGVuLmlvL0dyZWVuU29jay9wZW4vSmpPeFlwUS8zZGQ2NWNjZWM1YTYwZjFkODYyYzM1NWQ4NGQxNDU2Mj9lZGl0b3JzPTAwMTAgYW5kIGh0dHBzOi8vY29kZXBlbi5pby9HcmVlblNvY2svcGVuL0V4YnJQTmEvMDg3Y2VmMTk3ZGMzNTQ0NWEwOTUxZTg5MzVjNDE1MDM/ZWRpdG9ycz0wMDEwXG4gIGlmICghX25vcm1hbGl6ZXIgfHwgIV9ub3JtYWxpemVyLmlzUHJlc3NlZCB8fCBfbm9ybWFsaXplci5zdGFydFggPiBfYm9keS5jbGllbnRXaWR0aCkge1xuICAgIC8vIGlmIHRoZSB1c2VyIGlzIGRyYWdnaW5nIHRoZSBzY3JvbGxiYXIsIGFsbG93IGl0LlxuICAgIF9zY3JvbGxlcnMuY2FjaGUrKztcblxuICAgIGlmIChfbm9ybWFsaXplcikge1xuICAgICAgX3JhZklEIHx8IChfcmFmSUQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3VwZGF0ZUFsbCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdXBkYXRlQWxsKCk7IC8vIFNhZmFyaSBpbiBwYXJ0aWN1bGFyIChvbiBkZXNrdG9wKSBORUVEUyB0aGUgaW1tZWRpYXRlIHVwZGF0ZSByYXRoZXIgdGhhbiB3YWl0aW5nIGZvciBhIHJlcXVlc3RBbmltYXRpb25GcmFtZSgpIHdoZXJlYXMgaU9TIHNlZW1zIHRvIGJlbmVmaXQgZnJvbSB3YWl0aW5nIGZvciB0aGUgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkgdGljaywgYXQgbGVhc3Qgd2hlbiBub3JtYWxpemluZy4gU2VlIGh0dHBzOi8vY29kZXBlbi5pby9HcmVlblNvY2svcGVuL3FCWW96cU8/ZWRpdG9ycz0wMTEwXG5cbiAgICB9XG5cbiAgICBfbGFzdFNjcm9sbFRpbWUgfHwgX2Rpc3BhdGNoKFwic2Nyb2xsU3RhcnRcIik7XG4gICAgX2xhc3RTY3JvbGxUaW1lID0gX2dldFRpbWUoKTtcbiAgfVxufSxcbiAgICBfc2V0QmFzZURpbWVuc2lvbnMgPSBmdW5jdGlvbiBfc2V0QmFzZURpbWVuc2lvbnMoKSB7XG4gIF9iYXNlU2NyZWVuV2lkdGggPSBfd2luLmlubmVyV2lkdGg7XG4gIF9iYXNlU2NyZWVuSGVpZ2h0ID0gX3dpbi5pbm5lckhlaWdodDtcbn0sXG4gICAgX29uUmVzaXplID0gZnVuY3Rpb24gX29uUmVzaXplKCkge1xuICBfc2Nyb2xsZXJzLmNhY2hlKys7XG4gICFfcmVmcmVzaGluZyAmJiAhX2lnbm9yZVJlc2l6ZSAmJiAhX2RvYy5mdWxsc2NyZWVuRWxlbWVudCAmJiAhX2RvYy53ZWJraXRGdWxsc2NyZWVuRWxlbWVudCAmJiAoIV9pZ25vcmVNb2JpbGVSZXNpemUgfHwgX2Jhc2VTY3JlZW5XaWR0aCAhPT0gX3dpbi5pbm5lcldpZHRoIHx8IE1hdGguYWJzKF93aW4uaW5uZXJIZWlnaHQgLSBfYmFzZVNjcmVlbkhlaWdodCkgPiBfd2luLmlubmVySGVpZ2h0ICogMC4yNSkgJiYgX3Jlc2l6ZURlbGF5LnJlc3RhcnQodHJ1ZSk7XG59LFxuICAgIC8vIGlnbm9yZSByZXNpemVzIHRyaWdnZXJlZCBieSByZWZyZXNoKClcbl9saXN0ZW5lcnMgPSB7fSxcbiAgICBfZW1wdHlBcnJheSA9IFtdLFxuICAgIF9zb2Z0UmVmcmVzaCA9IGZ1bmN0aW9uIF9zb2Z0UmVmcmVzaCgpIHtcbiAgcmV0dXJuIF9yZW1vdmVMaXN0ZW5lcihTY3JvbGxUcmlnZ2VyLCBcInNjcm9sbEVuZFwiLCBfc29mdFJlZnJlc2gpIHx8IF9yZWZyZXNoQWxsKHRydWUpO1xufSxcbiAgICBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBfZGlzcGF0Y2godHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVyc1t0eXBlXSAmJiBfbGlzdGVuZXJzW3R5cGVdLm1hcChmdW5jdGlvbiAoZikge1xuICAgIHJldHVybiBmKCk7XG4gIH0pIHx8IF9lbXB0eUFycmF5O1xufSxcbiAgICBfc2F2ZWRTdHlsZXMgPSBbXSxcbiAgICAvLyB3aGVuIFNjcm9sbFRyaWdnZXIuc2F2ZVN0eWxlcygpIGlzIGNhbGxlZCwgdGhlIGlubGluZSBzdHlsZXMgYXJlIHJlY29yZGVkIGluIHRoaXMgQXJyYXkgaW4gYSBzZXF1ZW50aWFsIGZvcm1hdCBsaWtlIFtlbGVtZW50LCBjc3NUZXh0LCBnc0NhY2hlLCBtZWRpYV0uIFRoaXMga2VlcHMgaXQgdmVyeSBtZW1vcnktZWZmaWNpZW50IGFuZCBmYXN0IHRvIGl0ZXJhdGUgdGhyb3VnaC5cbl9yZXZlcnRSZWNvcmRlZCA9IGZ1bmN0aW9uIF9yZXZlcnRSZWNvcmRlZChtZWRpYSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IF9zYXZlZFN0eWxlcy5sZW5ndGg7IGkgKz0gNSkge1xuICAgIGlmICghbWVkaWEgfHwgX3NhdmVkU3R5bGVzW2kgKyA0XSAmJiBfc2F2ZWRTdHlsZXNbaSArIDRdLnF1ZXJ5ID09PSBtZWRpYSkge1xuICAgICAgX3NhdmVkU3R5bGVzW2ldLnN0eWxlLmNzc1RleHQgPSBfc2F2ZWRTdHlsZXNbaSArIDFdO1xuICAgICAgX3NhdmVkU3R5bGVzW2ldLmdldEJCb3ggJiYgX3NhdmVkU3R5bGVzW2ldLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBfc2F2ZWRTdHlsZXNbaSArIDJdIHx8IFwiXCIpO1xuICAgICAgX3NhdmVkU3R5bGVzW2kgKyAzXS51bmNhY2hlID0gMTtcbiAgICB9XG4gIH1cbn0sXG4gICAgX3JldmVydEFsbCA9IGZ1bmN0aW9uIF9yZXZlcnRBbGwoa2lsbCwgbWVkaWEpIHtcbiAgdmFyIHRyaWdnZXI7XG5cbiAgZm9yIChfaSA9IDA7IF9pIDwgX3RyaWdnZXJzLmxlbmd0aDsgX2krKykge1xuICAgIHRyaWdnZXIgPSBfdHJpZ2dlcnNbX2ldO1xuXG4gICAgaWYgKHRyaWdnZXIgJiYgKCFtZWRpYSB8fCB0cmlnZ2VyLl9jdHggPT09IG1lZGlhKSkge1xuICAgICAgaWYgKGtpbGwpIHtcbiAgICAgICAgdHJpZ2dlci5raWxsKDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJpZ2dlci5yZXZlcnQodHJ1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2lzUmV2ZXJ0ZWQgPSB0cnVlO1xuICBtZWRpYSAmJiBfcmV2ZXJ0UmVjb3JkZWQobWVkaWEpO1xuICBtZWRpYSB8fCBfZGlzcGF0Y2goXCJyZXZlcnRcIik7XG59LFxuICAgIF9jbGVhclNjcm9sbE1lbW9yeSA9IGZ1bmN0aW9uIF9jbGVhclNjcm9sbE1lbW9yeShzY3JvbGxSZXN0b3JhdGlvbiwgZm9yY2UpIHtcbiAgLy8gemVyby1vdXQgYWxsIHRoZSByZWNvcmRlZCBzY3JvbGwgcG9zaXRpb25zLiBEb24ndCB1c2UgX3RyaWdnZXJzIGJlY2F1c2UgaWYsIGZvciBleGFtcGxlLCAubWF0Y2hNZWRpYSgpIGlzIHVzZWQgdG8gY3JlYXRlIHNvbWUgU2Nyb2xsVHJpZ2dlcnMgYW5kIHRoZW4gdGhlIHVzZXIgcmVzaXplcyBhbmQgaXQgcmVtb3ZlcyBBTEwgU2Nyb2xsVHJpZ2dlcnMsIGFuZCB0aGVuIGdvIGJhY2sgdG8gYSBzaXplIHdoZXJlIHRoZXJlIGFyZSBTY3JvbGxUcmlnZ2VycywgaXQgd291bGQgaGF2ZSBrZXB0IHRoZSBwb3NpdGlvbihzKSBzYXZlZCBmcm9tIHRoZSBpbml0aWFsIHN0YXRlLlxuICBfc2Nyb2xsZXJzLmNhY2hlKys7XG4gIChmb3JjZSB8fCAhX3JlZnJlc2hpbmdBbGwpICYmIF9zY3JvbGxlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIF9pc0Z1bmN0aW9uKG9iaikgJiYgb2JqLmNhY2hlSUQrKyAmJiAob2JqLnJlYyA9IDApO1xuICB9KTtcbiAgX2lzU3RyaW5nKHNjcm9sbFJlc3RvcmF0aW9uKSAmJiAoX3dpbi5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gX3Njcm9sbFJlc3RvcmF0aW9uID0gc2Nyb2xsUmVzdG9yYXRpb24pO1xufSxcbiAgICBfcmVmcmVzaGluZ0FsbCxcbiAgICBfcmVmcmVzaElEID0gMCxcbiAgICBfcXVldWVSZWZyZXNoSUQsXG4gICAgX3F1ZXVlUmVmcmVzaEFsbCA9IGZ1bmN0aW9uIF9xdWV1ZVJlZnJlc2hBbGwoKSB7XG4gIC8vIHdlIGRvbid0IHdhbnQgdG8gY2FsbCBfcmVmcmVzaEFsbCgpIGV2ZXJ5IHRpbWUgd2UgY3JlYXRlIGEgbmV3IFNjcm9sbFRyaWdnZXIgKGZvciBwZXJmb3JtYW5jZSByZWFzb25zKSAtIGl0J3MgYmV0dGVyIHRvIGJhdGNoIHRoZW0uIFNvbWUgZnJhbWV3b3JrcyBkeW5hbWljYWxseSBsb2FkIGNvbnRlbnQgYW5kIHdlIGNhbid0IHJlbHkgb24gdGhlIHdpbmRvdydzIFwibG9hZFwiIG9yIFwiRE9NQ29udGVudExvYWRlZFwiIGV2ZW50cyB0byB0cmlnZ2VyIGl0LlxuICBpZiAoX3F1ZXVlUmVmcmVzaElEICE9PSBfcmVmcmVzaElEKSB7XG4gICAgdmFyIGlkID0gX3F1ZXVlUmVmcmVzaElEID0gX3JlZnJlc2hJRDtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGlkID09PSBfcmVmcmVzaElEICYmIF9yZWZyZXNoQWxsKHRydWUpO1xuICAgIH0pO1xuICB9XG59LFxuICAgIF9yZWZyZXNoMTAwdmggPSBmdW5jdGlvbiBfcmVmcmVzaDEwMHZoKCkge1xuICBfYm9keS5hcHBlbmRDaGlsZChfZGl2MTAwdmgpO1xuXG4gIF8xMDB2aCA9ICFfbm9ybWFsaXplciAmJiBfZGl2MTAwdmgub2Zmc2V0SGVpZ2h0IHx8IF93aW4uaW5uZXJIZWlnaHQ7XG5cbiAgX2JvZHkucmVtb3ZlQ2hpbGQoX2RpdjEwMHZoKTtcbn0sXG4gICAgX2hpZGVBbGxNYXJrZXJzID0gZnVuY3Rpb24gX2hpZGVBbGxNYXJrZXJzKGhpZGUpIHtcbiAgcmV0dXJuIF90b0FycmF5KFwiLmdzYXAtbWFya2VyLXN0YXJ0LCAuZ3NhcC1tYXJrZXItZW5kLCAuZ3NhcC1tYXJrZXItc2Nyb2xsZXItc3RhcnQsIC5nc2FwLW1hcmtlci1zY3JvbGxlci1lbmRcIikuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICByZXR1cm4gZWwuc3R5bGUuZGlzcGxheSA9IGhpZGUgPyBcIm5vbmVcIiA6IFwiYmxvY2tcIjtcbiAgfSk7XG59LFxuICAgIF9yZWZyZXNoQWxsID0gZnVuY3Rpb24gX3JlZnJlc2hBbGwoZm9yY2UsIHNraXBSZXZlcnQpIHtcbiAgaWYgKF9sYXN0U2Nyb2xsVGltZSAmJiAhZm9yY2UgJiYgIV9pc1JldmVydGVkKSB7XG4gICAgX2FkZExpc3RlbmVyKFNjcm9sbFRyaWdnZXIsIFwic2Nyb2xsRW5kXCIsIF9zb2Z0UmVmcmVzaCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBfcmVmcmVzaDEwMHZoKCk7XG5cbiAgX3JlZnJlc2hpbmdBbGwgPSBTY3JvbGxUcmlnZ2VyLmlzUmVmcmVzaGluZyA9IHRydWU7XG5cbiAgX3Njcm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gX2lzRnVuY3Rpb24ob2JqKSAmJiArK29iai5jYWNoZUlEICYmIChvYmoucmVjID0gb2JqKCkpO1xuICB9KTsgLy8gZm9yY2UgdGhlIGNsZWFyaW5nIG9mIHRoZSBjYWNoZSBiZWNhdXNlIHNvbWUgYnJvd3NlcnMgdGFrZSBhIGxpdHRsZSB3aGlsZSB0byBkaXNwYXRjaCB0aGUgXCJzY3JvbGxcIiBldmVudCBhbmQgdGhlIHVzZXIgbWF5IGhhdmUgY2hhbmdlZCB0aGUgc2Nyb2xsIHBvc2l0aW9uIGFuZCB0aGVuIGNhbGxlZCBTY3JvbGxUcmlnZ2VyLnJlZnJlc2goKSByaWdodCBhd2F5XG5cblxuICB2YXIgcmVmcmVzaEluaXRzID0gX2Rpc3BhdGNoKFwicmVmcmVzaEluaXRcIik7XG5cbiAgX3NvcnQgJiYgU2Nyb2xsVHJpZ2dlci5zb3J0KCk7XG4gIHNraXBSZXZlcnQgfHwgX3JldmVydEFsbCgpO1xuXG4gIF9zY3JvbGxlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgaWYgKF9pc0Z1bmN0aW9uKG9iaikpIHtcbiAgICAgIG9iai5zbW9vdGggJiYgKG9iai50YXJnZXQuc3R5bGUuc2Nyb2xsQmVoYXZpb3IgPSBcImF1dG9cIik7IC8vIHNtb290aCBzY3JvbGxpbmcgaW50ZXJmZXJlc1xuXG4gICAgICBvYmooMCk7XG4gICAgfVxuICB9KTtcblxuICBfdHJpZ2dlcnMuc2xpY2UoMCkuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiB0LnJlZnJlc2goKTtcbiAgfSk7IC8vIGRvbid0IGxvb3Agd2l0aCBfaSBiZWNhdXNlIGR1cmluZyBhIHJlZnJlc2goKSBzb21lb25lIGNvdWxkIGNhbGwgU2Nyb2xsVHJpZ2dlci51cGRhdGUoKSB3aGljaCB3b3VsZCBpdGVyYXRlIHRocm91Z2ggX2kgcmVzdWx0aW5nIGluIGEgc2tpcC5cblxuXG4gIF9pc1JldmVydGVkID0gZmFsc2U7XG5cbiAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAvLyBuZXN0ZWQgcGlucyAocGlubmVkQ29udGFpbmVyKSB3aXRoIHBpblNwYWNpbmcgbWF5IGV4cGFuZCB0aGUgY29udGFpbmVyLCBzbyB3ZSBtdXN0IGFjY29tbW9kYXRlIHRoYXQgaGVyZS5cbiAgICBpZiAodC5fc3ViUGluT2Zmc2V0ICYmIHQucGluKSB7XG4gICAgICB2YXIgcHJvcCA9IHQudmFycy5ob3Jpem9udGFsID8gXCJvZmZzZXRXaWR0aFwiIDogXCJvZmZzZXRIZWlnaHRcIixcbiAgICAgICAgICBvcmlnaW5hbCA9IHQucGluW3Byb3BdO1xuICAgICAgdC5yZXZlcnQodHJ1ZSwgMSk7XG4gICAgICB0LmFkanVzdFBpblNwYWNpbmcodC5waW5bcHJvcF0gLSBvcmlnaW5hbCk7XG4gICAgICB0LnJlZnJlc2goKTtcbiAgICB9XG4gIH0pO1xuXG4gIF9jbGFtcGluZ01heCA9IDE7IC8vIHBpblNwYWNpbmcgbWlnaHQgYmUgcHJvcHBpbmcgYSBwYWdlIG9wZW4sIHRodXMgd2hlbiB3ZSAuc2V0UG9zaXRpb25zKCkgdG8gY2xhbXAgYSBTY3JvbGxUcmlnZ2VyJ3MgZW5kIHdlIHNob3VsZCBsZWF2ZSB0aGUgcGluU3BhY2luZyBhbG9uZS4gVGhhdCdzIHdoYXQgdGhpcyBmbGFnIGlzIGZvci5cblxuICBfaGlkZUFsbE1hcmtlcnModHJ1ZSk7XG5cbiAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAvLyB0aGUgc2Nyb2xsZXIncyBtYXggc2Nyb2xsIHBvc2l0aW9uIG1heSBjaGFuZ2UgYWZ0ZXIgYWxsIHRoZSBTY3JvbGxUcmlnZ2VycyByZWZyZXNoZWQgKGxpa2UgcGlubmluZyBjb3VsZCBwdXNoIGl0IGRvd24pLCBzbyB3ZSBuZWVkIHRvIGxvb3AgYmFjayBhbmQgY29ycmVjdCBhbnkgd2l0aCBlbmQ6IFwibWF4XCIuIFNhbWUgZm9yIGFueXRoaW5nIHdpdGggYSBjbGFtcGVkIGVuZFxuICAgIHZhciBtYXggPSBfbWF4U2Nyb2xsKHQuc2Nyb2xsZXIsIHQuX2RpciksXG4gICAgICAgIGVuZENsYW1wID0gdC52YXJzLmVuZCA9PT0gXCJtYXhcIiB8fCB0Ll9lbmRDbGFtcCAmJiB0LmVuZCA+IG1heCxcbiAgICAgICAgc3RhcnRDbGFtcCA9IHQuX3N0YXJ0Q2xhbXAgJiYgdC5zdGFydCA+PSBtYXg7XG5cbiAgICAoZW5kQ2xhbXAgfHwgc3RhcnRDbGFtcCkgJiYgdC5zZXRQb3NpdGlvbnMoc3RhcnRDbGFtcCA/IG1heCAtIDEgOiB0LnN0YXJ0LCBlbmRDbGFtcCA/IE1hdGgubWF4KHN0YXJ0Q2xhbXAgPyBtYXggOiB0LnN0YXJ0ICsgMSwgbWF4KSA6IHQuZW5kLCB0cnVlKTtcbiAgfSk7XG5cbiAgX2hpZGVBbGxNYXJrZXJzKGZhbHNlKTtcblxuICBfY2xhbXBpbmdNYXggPSAwO1xuICByZWZyZXNoSW5pdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgcmV0dXJuIHJlc3VsdCAmJiByZXN1bHQucmVuZGVyICYmIHJlc3VsdC5yZW5kZXIoLTEpO1xuICB9KTsgLy8gaWYgdGhlIG9uUmVmcmVzaEluaXQoKSByZXR1cm5zIGFuIGFuaW1hdGlvbiAodHlwaWNhbGx5IGEgZ3NhcC5zZXQoKSksIHJldmVydCBpdC4gVGhpcyBtYWtlcyBpdCBlYXN5IHRvIHB1dCB0aGluZ3MgaW4gYSBjZXJ0YWluIHNwb3QgYmVmb3JlIHJlZnJlc2hpbmcgZm9yIG1lYXN1cmVtZW50IHB1cnBvc2VzLCBhbmQgdGhlbiBwdXQgdGhpbmdzIGJhY2suXG5cbiAgX3Njcm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAoX2lzRnVuY3Rpb24ob2JqKSkge1xuICAgICAgb2JqLnNtb290aCAmJiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gb2JqLnRhcmdldC5zdHlsZS5zY3JvbGxCZWhhdmlvciA9IFwic21vb3RoXCI7XG4gICAgICB9KTtcbiAgICAgIG9iai5yZWMgJiYgb2JqKG9iai5yZWMpO1xuICAgIH1cbiAgfSk7XG5cbiAgX2NsZWFyU2Nyb2xsTWVtb3J5KF9zY3JvbGxSZXN0b3JhdGlvbiwgMSk7XG5cbiAgX3Jlc2l6ZURlbGF5LnBhdXNlKCk7XG5cbiAgX3JlZnJlc2hJRCsrO1xuICBfcmVmcmVzaGluZ0FsbCA9IDI7XG5cbiAgX3VwZGF0ZUFsbCgyKTtcblxuICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiBfaXNGdW5jdGlvbih0LnZhcnMub25SZWZyZXNoKSAmJiB0LnZhcnMub25SZWZyZXNoKHQpO1xuICB9KTtcblxuICBfcmVmcmVzaGluZ0FsbCA9IFNjcm9sbFRyaWdnZXIuaXNSZWZyZXNoaW5nID0gZmFsc2U7XG5cbiAgX2Rpc3BhdGNoKFwicmVmcmVzaFwiKTtcbn0sXG4gICAgX2xhc3RTY3JvbGwgPSAwLFxuICAgIF9kaXJlY3Rpb24gPSAxLFxuICAgIF9wcmltYXJ5LFxuICAgIF91cGRhdGVBbGwgPSBmdW5jdGlvbiBfdXBkYXRlQWxsKGZvcmNlKSB7XG4gIGlmIChmb3JjZSA9PT0gMiB8fCAhX3JlZnJlc2hpbmdBbGwgJiYgIV9pc1JldmVydGVkKSB7XG4gICAgLy8gX2lzUmV2ZXJ0ZWQgY291bGQgYmUgdHJ1ZSBpZiwgZm9yIGV4YW1wbGUsIGEgbWF0Y2hNZWRpYSgpIGlzIGluIHRoZSBwcm9jZXNzIG9mIGV4ZWN1dGluZy4gV2UgZG9uJ3Qgd2FudCB0byB1cGRhdGUgZHVyaW5nIHRoZSB0aW1lIGV2ZXJ5dGhpbmcgaXMgcmV2ZXJ0ZWQuXG4gICAgU2Nyb2xsVHJpZ2dlci5pc1VwZGF0aW5nID0gdHJ1ZTtcbiAgICBfcHJpbWFyeSAmJiBfcHJpbWFyeS51cGRhdGUoMCk7IC8vIFNjcm9sbFNtb290aGVyIHVzZXMgcmVmcmVzaFByaW9yaXR5IC05OTk5IHRvIGJlY29tZSB0aGUgcHJpbWFyeSB0aGF0IGdldHMgdXBkYXRlZCBiZWZvcmUgYWxsIG90aGVycyBiZWNhdXNlIGl0IGFmZmVjdHMgdGhlIHNjcm9sbCBwb3NpdGlvbi5cblxuICAgIHZhciBsID0gX3RyaWdnZXJzLmxlbmd0aCxcbiAgICAgICAgdGltZSA9IF9nZXRUaW1lKCksXG4gICAgICAgIHJlY29yZFZlbG9jaXR5ID0gdGltZSAtIF90aW1lMSA+PSA1MCxcbiAgICAgICAgc2Nyb2xsID0gbCAmJiBfdHJpZ2dlcnNbMF0uc2Nyb2xsKCk7XG5cbiAgICBfZGlyZWN0aW9uID0gX2xhc3RTY3JvbGwgPiBzY3JvbGwgPyAtMSA6IDE7XG4gICAgX3JlZnJlc2hpbmdBbGwgfHwgKF9sYXN0U2Nyb2xsID0gc2Nyb2xsKTtcblxuICAgIGlmIChyZWNvcmRWZWxvY2l0eSkge1xuICAgICAgaWYgKF9sYXN0U2Nyb2xsVGltZSAmJiAhX3BvaW50ZXJJc0Rvd24gJiYgdGltZSAtIF9sYXN0U2Nyb2xsVGltZSA+IDIwMCkge1xuICAgICAgICBfbGFzdFNjcm9sbFRpbWUgPSAwO1xuXG4gICAgICAgIF9kaXNwYXRjaChcInNjcm9sbEVuZFwiKTtcbiAgICAgIH1cblxuICAgICAgX3RpbWUyID0gX3RpbWUxO1xuICAgICAgX3RpbWUxID0gdGltZTtcbiAgICB9XG5cbiAgICBpZiAoX2RpcmVjdGlvbiA8IDApIHtcbiAgICAgIF9pID0gbDtcblxuICAgICAgd2hpbGUgKF9pLS0gPiAwKSB7XG4gICAgICAgIF90cmlnZ2Vyc1tfaV0gJiYgX3RyaWdnZXJzW19pXS51cGRhdGUoMCwgcmVjb3JkVmVsb2NpdHkpO1xuICAgICAgfVxuXG4gICAgICBfZGlyZWN0aW9uID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChfaSA9IDA7IF9pIDwgbDsgX2krKykge1xuICAgICAgICBfdHJpZ2dlcnNbX2ldICYmIF90cmlnZ2Vyc1tfaV0udXBkYXRlKDAsIHJlY29yZFZlbG9jaXR5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBTY3JvbGxUcmlnZ2VyLmlzVXBkYXRpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIF9yYWZJRCA9IDA7XG59LFxuICAgIF9wcm9wTmFtZXNUb0NvcHkgPSBbX2xlZnQsIF90b3AsIF9ib3R0b20sIF9yaWdodCwgX21hcmdpbiArIF9Cb3R0b20sIF9tYXJnaW4gKyBfUmlnaHQsIF9tYXJnaW4gKyBfVG9wLCBfbWFyZ2luICsgX0xlZnQsIFwiZGlzcGxheVwiLCBcImZsZXhTaHJpbmtcIiwgXCJmbG9hdFwiLCBcInpJbmRleFwiLCBcImdyaWRDb2x1bW5TdGFydFwiLCBcImdyaWRDb2x1bW5FbmRcIiwgXCJncmlkUm93U3RhcnRcIiwgXCJncmlkUm93RW5kXCIsIFwiZ3JpZEFyZWFcIiwgXCJqdXN0aWZ5U2VsZlwiLCBcImFsaWduU2VsZlwiLCBcInBsYWNlU2VsZlwiLCBcIm9yZGVyXCJdLFxuICAgIF9zdGF0ZVByb3BzID0gX3Byb3BOYW1lc1RvQ29weS5jb25jYXQoW193aWR0aCwgX2hlaWdodCwgXCJib3hTaXppbmdcIiwgXCJtYXhcIiArIF9XaWR0aCwgXCJtYXhcIiArIF9IZWlnaHQsIFwicG9zaXRpb25cIiwgX21hcmdpbiwgX3BhZGRpbmcsIF9wYWRkaW5nICsgX1RvcCwgX3BhZGRpbmcgKyBfUmlnaHQsIF9wYWRkaW5nICsgX0JvdHRvbSwgX3BhZGRpbmcgKyBfTGVmdF0pLFxuICAgIF9zd2FwUGluT3V0ID0gZnVuY3Rpb24gX3N3YXBQaW5PdXQocGluLCBzcGFjZXIsIHN0YXRlKSB7XG4gIF9zZXRTdGF0ZShzdGF0ZSk7XG5cbiAgdmFyIGNhY2hlID0gcGluLl9nc2FwO1xuXG4gIGlmIChjYWNoZS5zcGFjZXJJc05hdGl2ZSkge1xuICAgIF9zZXRTdGF0ZShjYWNoZS5zcGFjZXJTdGF0ZSk7XG4gIH0gZWxzZSBpZiAocGluLl9nc2FwLnN3YXBwZWRJbikge1xuICAgIHZhciBwYXJlbnQgPSBzcGFjZXIucGFyZW50Tm9kZTtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUocGluLCBzcGFjZXIpO1xuICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKHNwYWNlcik7XG4gICAgfVxuICB9XG5cbiAgcGluLl9nc2FwLnN3YXBwZWRJbiA9IGZhbHNlO1xufSxcbiAgICBfc3dhcFBpbkluID0gZnVuY3Rpb24gX3N3YXBQaW5JbihwaW4sIHNwYWNlciwgY3MsIHNwYWNlclN0YXRlKSB7XG4gIGlmICghcGluLl9nc2FwLnN3YXBwZWRJbikge1xuICAgIHZhciBpID0gX3Byb3BOYW1lc1RvQ29weS5sZW5ndGgsXG4gICAgICAgIHNwYWNlclN0eWxlID0gc3BhY2VyLnN0eWxlLFxuICAgICAgICBwaW5TdHlsZSA9IHBpbi5zdHlsZSxcbiAgICAgICAgcDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHAgPSBfcHJvcE5hbWVzVG9Db3B5W2ldO1xuICAgICAgc3BhY2VyU3R5bGVbcF0gPSBjc1twXTtcbiAgICB9XG5cbiAgICBzcGFjZXJTdHlsZS5wb3NpdGlvbiA9IGNzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIgPyBcImFic29sdXRlXCIgOiBcInJlbGF0aXZlXCI7XG4gICAgY3MuZGlzcGxheSA9PT0gXCJpbmxpbmVcIiAmJiAoc3BhY2VyU3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCIpO1xuICAgIHBpblN0eWxlW19ib3R0b21dID0gcGluU3R5bGVbX3JpZ2h0XSA9IFwiYXV0b1wiO1xuICAgIHNwYWNlclN0eWxlLmZsZXhCYXNpcyA9IGNzLmZsZXhCYXNpcyB8fCBcImF1dG9cIjtcbiAgICBzcGFjZXJTdHlsZS5vdmVyZmxvdyA9IFwidmlzaWJsZVwiO1xuICAgIHNwYWNlclN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuICAgIHNwYWNlclN0eWxlW193aWR0aF0gPSBfZ2V0U2l6ZShwaW4sIF9ob3Jpem9udGFsKSArIF9weDtcbiAgICBzcGFjZXJTdHlsZVtfaGVpZ2h0XSA9IF9nZXRTaXplKHBpbiwgX3ZlcnRpY2FsKSArIF9weDtcbiAgICBzcGFjZXJTdHlsZVtfcGFkZGluZ10gPSBwaW5TdHlsZVtfbWFyZ2luXSA9IHBpblN0eWxlW190b3BdID0gcGluU3R5bGVbX2xlZnRdID0gXCIwXCI7XG5cbiAgICBfc2V0U3RhdGUoc3BhY2VyU3RhdGUpO1xuXG4gICAgcGluU3R5bGVbX3dpZHRoXSA9IHBpblN0eWxlW1wibWF4XCIgKyBfV2lkdGhdID0gY3NbX3dpZHRoXTtcbiAgICBwaW5TdHlsZVtfaGVpZ2h0XSA9IHBpblN0eWxlW1wibWF4XCIgKyBfSGVpZ2h0XSA9IGNzW19oZWlnaHRdO1xuICAgIHBpblN0eWxlW19wYWRkaW5nXSA9IGNzW19wYWRkaW5nXTtcblxuICAgIGlmIChwaW4ucGFyZW50Tm9kZSAhPT0gc3BhY2VyKSB7XG4gICAgICBwaW4ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc3BhY2VyLCBwaW4pO1xuICAgICAgc3BhY2VyLmFwcGVuZENoaWxkKHBpbik7XG4gICAgfVxuXG4gICAgcGluLl9nc2FwLnN3YXBwZWRJbiA9IHRydWU7XG4gIH1cbn0sXG4gICAgX2NhcHNFeHAgPSAvKFtBLVpdKS9nLFxuICAgIF9zZXRTdGF0ZSA9IGZ1bmN0aW9uIF9zZXRTdGF0ZShzdGF0ZSkge1xuICBpZiAoc3RhdGUpIHtcbiAgICB2YXIgc3R5bGUgPSBzdGF0ZS50LnN0eWxlLFxuICAgICAgICBsID0gc3RhdGUubGVuZ3RoLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgcCxcbiAgICAgICAgdmFsdWU7XG4gICAgKHN0YXRlLnQuX2dzYXAgfHwgZ3NhcC5jb3JlLmdldENhY2hlKHN0YXRlLnQpKS51bmNhY2hlID0gMTsgLy8gb3RoZXJ3aXNlIHRyYW5zZm9ybXMgbWF5IGJlIG9mZlxuXG4gICAgZm9yICg7IGkgPCBsOyBpICs9IDIpIHtcbiAgICAgIHZhbHVlID0gc3RhdGVbaSArIDFdO1xuICAgICAgcCA9IHN0YXRlW2ldO1xuXG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgc3R5bGVbcF0gPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoc3R5bGVbcF0pIHtcbiAgICAgICAgc3R5bGUucmVtb3ZlUHJvcGVydHkocC5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgX2dldFN0YXRlID0gZnVuY3Rpb24gX2dldFN0YXRlKGVsZW1lbnQpIHtcbiAgLy8gcmV0dXJucyBhbiBBcnJheSB3aXRoIGFsdGVybmF0aW5nIHZhbHVlcyBsaWtlIFtwcm9wZXJ0eSwgdmFsdWUsIHByb3BlcnR5LCB2YWx1ZV0gYW5kIGEgXCJ0XCIgcHJvcGVydHkgcG9pbnRpbmcgdG8gdGhlIHRhcmdldCAoZWxlbWVudCkuIE1ha2VzIGl0IGZhc3QgYW5kIGNoZWFwLlxuICB2YXIgbCA9IF9zdGF0ZVByb3BzLmxlbmd0aCxcbiAgICAgIHN0eWxlID0gZWxlbWVudC5zdHlsZSxcbiAgICAgIHN0YXRlID0gW10sXG4gICAgICBpID0gMDtcblxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIHN0YXRlLnB1c2goX3N0YXRlUHJvcHNbaV0sIHN0eWxlW19zdGF0ZVByb3BzW2ldXSk7XG4gIH1cblxuICBzdGF0ZS50ID0gZWxlbWVudDtcbiAgcmV0dXJuIHN0YXRlO1xufSxcbiAgICBfY29weVN0YXRlID0gZnVuY3Rpb24gX2NvcHlTdGF0ZShzdGF0ZSwgb3ZlcnJpZGUsIG9taXRPZmZzZXRzKSB7XG4gIHZhciByZXN1bHQgPSBbXSxcbiAgICAgIGwgPSBzdGF0ZS5sZW5ndGgsXG4gICAgICBpID0gb21pdE9mZnNldHMgPyA4IDogMCxcbiAgICAgIC8vIHNraXAgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tIGlmIG9taXRPZmZzZXRzIGlzIHRydWVcbiAgcDtcblxuICBmb3IgKDsgaSA8IGw7IGkgKz0gMikge1xuICAgIHAgPSBzdGF0ZVtpXTtcbiAgICByZXN1bHQucHVzaChwLCBwIGluIG92ZXJyaWRlID8gb3ZlcnJpZGVbcF0gOiBzdGF0ZVtpICsgMV0pO1xuICB9XG5cbiAgcmVzdWx0LnQgPSBzdGF0ZS50O1xuICByZXR1cm4gcmVzdWx0O1xufSxcbiAgICBfd2luT2Zmc2V0cyA9IHtcbiAgbGVmdDogMCxcbiAgdG9wOiAwXG59LFxuICAgIC8vIC8vIHBvdGVudGlhbCBmdXR1cmUgZmVhdHVyZSAoPykgQWxsb3cgdXNlcnMgdG8gY2FsY3VsYXRlIHdoZXJlIGEgdHJpZ2dlciBoaXRzIChzY3JvbGwgcG9zaXRpb24pIGxpa2UgZ2V0U2Nyb2xsUG9zaXRpb24oXCIjaWRcIiwgXCJ0b3AgYm90dG9tXCIpXG4vLyBfZ2V0U2Nyb2xsUG9zaXRpb24gPSAodHJpZ2dlciwgcG9zaXRpb24sIHtzY3JvbGxlciwgY29udGFpbmVyQW5pbWF0aW9uLCBob3Jpem9udGFsfSkgPT4ge1xuLy8gXHRzY3JvbGxlciA9IF9nZXRUYXJnZXQoc2Nyb2xsZXIgfHwgX3dpbik7XG4vLyBcdGxldCBkaXJlY3Rpb24gPSBob3Jpem9udGFsID8gX2hvcml6b250YWwgOiBfdmVydGljYWwsXG4vLyBcdFx0aXNWaWV3cG9ydCA9IF9pc1ZpZXdwb3J0KHNjcm9sbGVyKTtcbi8vIFx0X2dldFNpemVGdW5jKHNjcm9sbGVyLCBpc1ZpZXdwb3J0LCBkaXJlY3Rpb24pO1xuLy8gXHRyZXR1cm4gX3BhcnNlUG9zaXRpb24ocG9zaXRpb24sIF9nZXRUYXJnZXQodHJpZ2dlciksIF9nZXRTaXplRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCwgZGlyZWN0aW9uKSgpLCBkaXJlY3Rpb24sIF9nZXRTY3JvbGxGdW5jKHNjcm9sbGVyLCBkaXJlY3Rpb24pKCksIDAsIDAsIDAsIF9nZXRPZmZzZXRzRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCkoKSwgaXNWaWV3cG9ydCA/IDAgOiBwYXJzZUZsb2F0KF9nZXRDb21wdXRlZFN0eWxlKHNjcm9sbGVyKVtcImJvcmRlclwiICsgZGlyZWN0aW9uLnAyICsgX1dpZHRoXSkgfHwgMCwgMCwgY29udGFpbmVyQW5pbWF0aW9uID8gY29udGFpbmVyQW5pbWF0aW9uLmR1cmF0aW9uKCkgOiBfbWF4U2Nyb2xsKHNjcm9sbGVyKSwgY29udGFpbmVyQW5pbWF0aW9uKTtcbi8vIH0sXG5fcGFyc2VQb3NpdGlvbiA9IGZ1bmN0aW9uIF9wYXJzZVBvc2l0aW9uKHZhbHVlLCB0cmlnZ2VyLCBzY3JvbGxlclNpemUsIGRpcmVjdGlvbiwgc2Nyb2xsLCBtYXJrZXIsIG1hcmtlclNjcm9sbGVyLCBzZWxmLCBzY3JvbGxlckJvdW5kcywgYm9yZGVyV2lkdGgsIHVzZUZpeGVkUG9zaXRpb24sIHNjcm9sbGVyTWF4LCBjb250YWluZXJBbmltYXRpb24sIGNsYW1wWmVyb1Byb3ApIHtcbiAgX2lzRnVuY3Rpb24odmFsdWUpICYmICh2YWx1ZSA9IHZhbHVlKHNlbGYpKTtcblxuICBpZiAoX2lzU3RyaW5nKHZhbHVlKSAmJiB2YWx1ZS5zdWJzdHIoMCwgMykgPT09IFwibWF4XCIpIHtcbiAgICB2YWx1ZSA9IHNjcm9sbGVyTWF4ICsgKHZhbHVlLmNoYXJBdCg0KSA9PT0gXCI9XCIgPyBfb2Zmc2V0VG9QeChcIjBcIiArIHZhbHVlLnN1YnN0cigzKSwgc2Nyb2xsZXJTaXplKSA6IDApO1xuICB9XG5cbiAgdmFyIHRpbWUgPSBjb250YWluZXJBbmltYXRpb24gPyBjb250YWluZXJBbmltYXRpb24udGltZSgpIDogMCxcbiAgICAgIHAxLFxuICAgICAgcDIsXG4gICAgICBlbGVtZW50O1xuICBjb250YWluZXJBbmltYXRpb24gJiYgY29udGFpbmVyQW5pbWF0aW9uLnNlZWsoMCk7XG4gIGlzTmFOKHZhbHVlKSB8fCAodmFsdWUgPSArdmFsdWUpOyAvLyBjb252ZXJ0IGEgc3RyaW5nIG51bWJlciBsaWtlIFwiNDVcIiB0byBhbiBhY3R1YWwgbnVtYmVyXG5cbiAgaWYgKCFfaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgX2lzRnVuY3Rpb24odHJpZ2dlcikgJiYgKHRyaWdnZXIgPSB0cmlnZ2VyKHNlbGYpKTtcbiAgICB2YXIgb2Zmc2V0cyA9ICh2YWx1ZSB8fCBcIjBcIikuc3BsaXQoXCIgXCIpLFxuICAgICAgICBib3VuZHMsXG4gICAgICAgIGxvY2FsT2Zmc2V0LFxuICAgICAgICBnbG9iYWxPZmZzZXQsXG4gICAgICAgIGRpc3BsYXk7XG4gICAgZWxlbWVudCA9IF9nZXRUYXJnZXQodHJpZ2dlciwgc2VsZikgfHwgX2JvZHk7XG4gICAgYm91bmRzID0gX2dldEJvdW5kcyhlbGVtZW50KSB8fCB7fTtcblxuICAgIGlmICgoIWJvdW5kcyB8fCAhYm91bmRzLmxlZnQgJiYgIWJvdW5kcy50b3ApICYmIF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLmRpc3BsYXkgPT09IFwibm9uZVwiKSB7XG4gICAgICAvLyBpZiBkaXNwbGF5IGlzIFwibm9uZVwiLCBpdCB3b24ndCByZXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgcHJvcGVybHlcbiAgICAgIGRpc3BsYXkgPSBlbGVtZW50LnN0eWxlLmRpc3BsYXk7XG4gICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICBib3VuZHMgPSBfZ2V0Qm91bmRzKGVsZW1lbnQpO1xuICAgICAgZGlzcGxheSA/IGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IGRpc3BsYXkgOiBlbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwiZGlzcGxheVwiKTtcbiAgICB9XG5cbiAgICBsb2NhbE9mZnNldCA9IF9vZmZzZXRUb1B4KG9mZnNldHNbMF0sIGJvdW5kc1tkaXJlY3Rpb24uZF0pO1xuICAgIGdsb2JhbE9mZnNldCA9IF9vZmZzZXRUb1B4KG9mZnNldHNbMV0gfHwgXCIwXCIsIHNjcm9sbGVyU2l6ZSk7XG4gICAgdmFsdWUgPSBib3VuZHNbZGlyZWN0aW9uLnBdIC0gc2Nyb2xsZXJCb3VuZHNbZGlyZWN0aW9uLnBdIC0gYm9yZGVyV2lkdGggKyBsb2NhbE9mZnNldCArIHNjcm9sbCAtIGdsb2JhbE9mZnNldDtcbiAgICBtYXJrZXJTY3JvbGxlciAmJiBfcG9zaXRpb25NYXJrZXIobWFya2VyU2Nyb2xsZXIsIGdsb2JhbE9mZnNldCwgZGlyZWN0aW9uLCBzY3JvbGxlclNpemUgLSBnbG9iYWxPZmZzZXQgPCAyMCB8fCBtYXJrZXJTY3JvbGxlci5faXNTdGFydCAmJiBnbG9iYWxPZmZzZXQgPiAyMCk7XG4gICAgc2Nyb2xsZXJTaXplIC09IHNjcm9sbGVyU2l6ZSAtIGdsb2JhbE9mZnNldDsgLy8gYWRqdXN0IGZvciB0aGUgbWFya2VyXG4gIH0gZWxzZSB7XG4gICAgY29udGFpbmVyQW5pbWF0aW9uICYmICh2YWx1ZSA9IGdzYXAudXRpbHMubWFwUmFuZ2UoY29udGFpbmVyQW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIuc3RhcnQsIGNvbnRhaW5lckFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyLmVuZCwgMCwgc2Nyb2xsZXJNYXgsIHZhbHVlKSk7XG4gICAgbWFya2VyU2Nyb2xsZXIgJiYgX3Bvc2l0aW9uTWFya2VyKG1hcmtlclNjcm9sbGVyLCBzY3JvbGxlclNpemUsIGRpcmVjdGlvbiwgdHJ1ZSk7XG4gIH1cblxuICBpZiAoY2xhbXBaZXJvUHJvcCkge1xuICAgIHNlbGZbY2xhbXBaZXJvUHJvcF0gPSB2YWx1ZSB8fCAtMC4wMDE7XG4gICAgdmFsdWUgPCAwICYmICh2YWx1ZSA9IDApO1xuICB9XG5cbiAgaWYgKG1hcmtlcikge1xuICAgIHZhciBwb3NpdGlvbiA9IHZhbHVlICsgc2Nyb2xsZXJTaXplLFxuICAgICAgICBpc1N0YXJ0ID0gbWFya2VyLl9pc1N0YXJ0O1xuICAgIHAxID0gXCJzY3JvbGxcIiArIGRpcmVjdGlvbi5kMjtcblxuICAgIF9wb3NpdGlvbk1hcmtlcihtYXJrZXIsIHBvc2l0aW9uLCBkaXJlY3Rpb24sIGlzU3RhcnQgJiYgcG9zaXRpb24gPiAyMCB8fCAhaXNTdGFydCAmJiAodXNlRml4ZWRQb3NpdGlvbiA/IE1hdGgubWF4KF9ib2R5W3AxXSwgX2RvY0VsW3AxXSkgOiBtYXJrZXIucGFyZW50Tm9kZVtwMV0pIDw9IHBvc2l0aW9uICsgMSk7XG5cbiAgICBpZiAodXNlRml4ZWRQb3NpdGlvbikge1xuICAgICAgc2Nyb2xsZXJCb3VuZHMgPSBfZ2V0Qm91bmRzKG1hcmtlclNjcm9sbGVyKTtcbiAgICAgIHVzZUZpeGVkUG9zaXRpb24gJiYgKG1hcmtlci5zdHlsZVtkaXJlY3Rpb24ub3AucF0gPSBzY3JvbGxlckJvdW5kc1tkaXJlY3Rpb24ub3AucF0gLSBkaXJlY3Rpb24ub3AubSAtIG1hcmtlci5fb2Zmc2V0ICsgX3B4KTtcbiAgICB9XG4gIH1cblxuICBpZiAoY29udGFpbmVyQW5pbWF0aW9uICYmIGVsZW1lbnQpIHtcbiAgICBwMSA9IF9nZXRCb3VuZHMoZWxlbWVudCk7XG4gICAgY29udGFpbmVyQW5pbWF0aW9uLnNlZWsoc2Nyb2xsZXJNYXgpO1xuICAgIHAyID0gX2dldEJvdW5kcyhlbGVtZW50KTtcbiAgICBjb250YWluZXJBbmltYXRpb24uX2NhU2Nyb2xsRGlzdCA9IHAxW2RpcmVjdGlvbi5wXSAtIHAyW2RpcmVjdGlvbi5wXTtcbiAgICB2YWx1ZSA9IHZhbHVlIC8gY29udGFpbmVyQW5pbWF0aW9uLl9jYVNjcm9sbERpc3QgKiBzY3JvbGxlck1heDtcbiAgfVxuXG4gIGNvbnRhaW5lckFuaW1hdGlvbiAmJiBjb250YWluZXJBbmltYXRpb24uc2Vlayh0aW1lKTtcbiAgcmV0dXJuIGNvbnRhaW5lckFuaW1hdGlvbiA/IHZhbHVlIDogTWF0aC5yb3VuZCh2YWx1ZSk7XG59LFxuICAgIF9wcmVmaXhFeHAgPSAvKHdlYmtpdHxtb3p8bGVuZ3RofGNzc1RleHR8aW5zZXQpL2ksXG4gICAgX3JlcGFyZW50ID0gZnVuY3Rpb24gX3JlcGFyZW50KGVsZW1lbnQsIHBhcmVudCwgdG9wLCBsZWZ0KSB7XG4gIGlmIChlbGVtZW50LnBhcmVudE5vZGUgIT09IHBhcmVudCkge1xuICAgIHZhciBzdHlsZSA9IGVsZW1lbnQuc3R5bGUsXG4gICAgICAgIHAsXG4gICAgICAgIGNzO1xuXG4gICAgaWYgKHBhcmVudCA9PT0gX2JvZHkpIHtcbiAgICAgIGVsZW1lbnQuX3N0T3JpZyA9IHN0eWxlLmNzc1RleHQ7IC8vIHJlY29yZCBvcmlnaW5hbCBpbmxpbmUgc3R5bGVzIHNvIHdlIGNhbiByZXZlcnQgdGhlbSBsYXRlclxuXG4gICAgICBjcyA9IF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgICBmb3IgKHAgaW4gY3MpIHtcbiAgICAgICAgLy8gbXVzdCBjb3B5IGFsbCByZWxldmFudCBzdHlsZXMgdG8gZW5zdXJlIHRoYXQgbm90aGluZyBjaGFuZ2VzIHZpc3VhbGx5IHdoZW4gd2UgcmVwYXJlbnQgdG8gdGhlIDxib2R5Pi4gU2tpcCB0aGUgdmVuZG9yIHByZWZpeGVkIG9uZXMuXG4gICAgICAgIGlmICghK3AgJiYgIV9wcmVmaXhFeHAudGVzdChwKSAmJiBjc1twXSAmJiB0eXBlb2Ygc3R5bGVbcF0gPT09IFwic3RyaW5nXCIgJiYgcCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICBzdHlsZVtwXSA9IGNzW3BdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0eWxlLnRvcCA9IHRvcDtcbiAgICAgIHN0eWxlLmxlZnQgPSBsZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5jc3NUZXh0ID0gZWxlbWVudC5fc3RPcmlnO1xuICAgIH1cblxuICAgIGdzYXAuY29yZS5nZXRDYWNoZShlbGVtZW50KS51bmNhY2hlID0gMTtcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gIH1cbn0sXG4gICAgX2ludGVycnVwdGlvblRyYWNrZXIgPSBmdW5jdGlvbiBfaW50ZXJydXB0aW9uVHJhY2tlcihnZXRWYWx1ZUZ1bmMsIGluaXRpYWxWYWx1ZSwgb25JbnRlcnJ1cHQpIHtcbiAgdmFyIGxhc3QxID0gaW5pdGlhbFZhbHVlLFxuICAgICAgbGFzdDIgPSBsYXN0MTtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciBjdXJyZW50ID0gTWF0aC5yb3VuZChnZXRWYWx1ZUZ1bmMoKSk7IC8vIHJvdW5kIGJlY2F1c2UgaW4gc29tZSBbdmVyeSB1bmNvbW1vbl0gV2luZG93cyBlbnZpcm9ubWVudHMsIHNjcm9sbCBjYW4gZ2V0IHJlcG9ydGVkIHdpdGggZGVjaW1hbHMgZXZlbiB0aG91Z2ggaXQgd2FzIHNldCB3aXRob3V0LlxuXG4gICAgaWYgKGN1cnJlbnQgIT09IGxhc3QxICYmIGN1cnJlbnQgIT09IGxhc3QyICYmIE1hdGguYWJzKGN1cnJlbnQgLSBsYXN0MSkgPiAzICYmIE1hdGguYWJzKGN1cnJlbnQgLSBsYXN0MikgPiAzKSB7XG4gICAgICAvLyBpZiB0aGUgdXNlciBzY3JvbGxzLCBraWxsIHRoZSB0d2Vlbi4gaU9TIFNhZmFyaSBpbnRlcm1pdHRlbnRseSBtaXNyZXBvcnRzIHRoZSBzY3JvbGwgcG9zaXRpb24sIGl0IG1heSBiZSB0aGUgbW9zdCByZWNlbnRseS1zZXQgb25lIG9yIHRoZSBvbmUgYmVmb3JlIHRoYXQhIFdoZW4gU2FmYXJpIGlzIHpvb21lZCAoQ01ELSspLCBpdCBvZnRlbiBtaXNyZXBvcnRzIGFzIDEgcGl4ZWwgb2ZmIHRvbyEgU28gaWYgd2Ugc2V0IHRoZSBzY3JvbGwgcG9zaXRpb24gdG8gMTI1LCBmb3IgZXhhbXBsZSwgaXQnbGwgYWN0dWFsbHkgcmVwb3J0IGl0IGFzIDEyNC5cbiAgICAgIHZhbHVlID0gY3VycmVudDtcbiAgICAgIG9uSW50ZXJydXB0ICYmIG9uSW50ZXJydXB0KCk7XG4gICAgfVxuXG4gICAgbGFzdDIgPSBsYXN0MTtcbiAgICBsYXN0MSA9IHZhbHVlO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn0sXG4gICAgX3NoaWZ0TWFya2VyID0gZnVuY3Rpb24gX3NoaWZ0TWFya2VyKG1hcmtlciwgZGlyZWN0aW9uLCB2YWx1ZSkge1xuICB2YXIgdmFycyA9IHt9O1xuICB2YXJzW2RpcmVjdGlvbi5wXSA9IFwiKz1cIiArIHZhbHVlO1xuICBnc2FwLnNldChtYXJrZXIsIHZhcnMpO1xufSxcbiAgICAvLyBfbWVyZ2VBbmltYXRpb25zID0gYW5pbWF0aW9ucyA9PiB7XG4vLyBcdGxldCB0bCA9IGdzYXAudGltZWxpbmUoe3Ntb290aENoaWxkVGltaW5nOiB0cnVlfSkuc3RhcnRUaW1lKE1hdGgubWluKC4uLmFuaW1hdGlvbnMubWFwKGEgPT4gYS5nbG9iYWxUaW1lKDApKSkpO1xuLy8gXHRhbmltYXRpb25zLmZvckVhY2goYSA9PiB7bGV0IHRpbWUgPSBhLnRvdGFsVGltZSgpOyB0bC5hZGQoYSk7IGEudG90YWxUaW1lKHRpbWUpOyB9KTtcbi8vIFx0dGwuc21vb3RoQ2hpbGRUaW1pbmcgPSBmYWxzZTtcbi8vIFx0cmV0dXJuIHRsO1xuLy8gfSxcbi8vIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIHR3ZWVuIHRoZSBzY3JvbGwgcG9zaXRpb24gaW4gdGhlIGRpcmVjdGlvbiBwcm92aWRlZCwgYW5kIHdoZW4gZG9pbmcgc28gaXQnbGwgYWRkIGEgLnR3ZWVuIHByb3BlcnR5IHRvIHRoZSBGVU5DVElPTiBpdHNlbGYsIGFuZCByZW1vdmUgaXQgd2hlbiB0aGUgdHdlZW4gY29tcGxldGVzIG9yIGdldHMga2lsbGVkLiBUaGlzIGdpdmVzIHVzIGEgd2F5IHRvIGhhdmUgbXVsdGlwbGUgU2Nyb2xsVHJpZ2dlcnMgdXNlIGEgY2VudHJhbCBmdW5jdGlvbiBmb3IgYW55IGdpdmVuIHNjcm9sbGVyIGFuZCBzZWUgaWYgdGhlcmUncyBhIHNjcm9sbCB0d2VlbiBydW5uaW5nICh3aGljaCB3b3VsZCBhZmZlY3QgaWYvaG93IHRoaW5ncyBnZXQgdXBkYXRlZClcbl9nZXRUd2VlbkNyZWF0b3IgPSBmdW5jdGlvbiBfZ2V0VHdlZW5DcmVhdG9yKHNjcm9sbGVyLCBkaXJlY3Rpb24pIHtcbiAgdmFyIGdldFNjcm9sbCA9IF9nZXRTY3JvbGxGdW5jKHNjcm9sbGVyLCBkaXJlY3Rpb24pLFxuICAgICAgcHJvcCA9IFwiX3Njcm9sbFwiICsgZGlyZWN0aW9uLnAyLFxuICAgICAgLy8gYWRkIGEgdHdlZW5hYmxlIHByb3BlcnR5IHRvIHRoZSBzY3JvbGxlciB0aGF0J3MgYSBnZXR0ZXIvc2V0dGVyIGZ1bmN0aW9uLCBsaWtlIF9zY3JvbGxUb3Agb3IgX3Njcm9sbExlZnQuIFRoaXMgd2F5LCBpZiBzb21lb25lIGRvZXMgZ3NhcC5raWxsVHdlZW5zT2Yoc2Nyb2xsZXIpIGl0J2xsIGtpbGwgdGhlIHNjcm9sbCB0d2Vlbi5cbiAgZ2V0VHdlZW4gPSBmdW5jdGlvbiBnZXRUd2VlbihzY3JvbGxUbywgdmFycywgaW5pdGlhbFZhbHVlLCBjaGFuZ2UxLCBjaGFuZ2UyKSB7XG4gICAgdmFyIHR3ZWVuID0gZ2V0VHdlZW4udHdlZW4sXG4gICAgICAgIG9uQ29tcGxldGUgPSB2YXJzLm9uQ29tcGxldGUsXG4gICAgICAgIG1vZGlmaWVycyA9IHt9O1xuICAgIGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZSB8fCBnZXRTY3JvbGwoKTtcblxuICAgIHZhciBjaGVja0ZvckludGVycnVwdGlvbiA9IF9pbnRlcnJ1cHRpb25UcmFja2VyKGdldFNjcm9sbCwgaW5pdGlhbFZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICB0d2Vlbi5raWxsKCk7XG4gICAgICBnZXRUd2Vlbi50d2VlbiA9IDA7XG4gICAgfSk7XG5cbiAgICBjaGFuZ2UyID0gY2hhbmdlMSAmJiBjaGFuZ2UyIHx8IDA7IC8vIGlmIGNoYW5nZTEgaXMgMCwgd2Ugc2V0IHRoYXQgdG8gdGhlIGRpZmZlcmVuY2UgYW5kIGlnbm9yZSBjaGFuZ2UyLiBPdGhlcndpc2UsIHRoZXJlIHdvdWxkIGJlIGEgY29tcG91bmQgZWZmZWN0LlxuXG4gICAgY2hhbmdlMSA9IGNoYW5nZTEgfHwgc2Nyb2xsVG8gLSBpbml0aWFsVmFsdWU7XG4gICAgdHdlZW4gJiYgdHdlZW4ua2lsbCgpO1xuICAgIHZhcnNbcHJvcF0gPSBzY3JvbGxUbztcbiAgICB2YXJzLmluaGVyaXQgPSBmYWxzZTtcbiAgICB2YXJzLm1vZGlmaWVycyA9IG1vZGlmaWVycztcblxuICAgIG1vZGlmaWVyc1twcm9wXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBjaGVja0ZvckludGVycnVwdGlvbihpbml0aWFsVmFsdWUgKyBjaGFuZ2UxICogdHdlZW4ucmF0aW8gKyBjaGFuZ2UyICogdHdlZW4ucmF0aW8gKiB0d2Vlbi5yYXRpbyk7XG4gICAgfTtcblxuICAgIHZhcnMub25VcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfc2Nyb2xsZXJzLmNhY2hlKys7XG4gICAgICBnZXRUd2Vlbi50d2VlbiAmJiBfdXBkYXRlQWxsKCk7IC8vIGlmIGl0IHdhcyBpbnRlcnJ1cHRlZC9raWxsZWQsIGxpa2UgaW4gYSBjb250ZXh0LnJldmVydCgpLCBkb24ndCBmb3JjZSBhbiB1cGRhdGVBbGwoKVxuICAgIH07XG5cbiAgICB2YXJzLm9uQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBnZXRUd2Vlbi50d2VlbiA9IDA7XG4gICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUuY2FsbCh0d2Vlbik7XG4gICAgfTtcblxuICAgIHR3ZWVuID0gZ2V0VHdlZW4udHdlZW4gPSBnc2FwLnRvKHNjcm9sbGVyLCB2YXJzKTtcbiAgICByZXR1cm4gdHdlZW47XG4gIH07XG5cbiAgc2Nyb2xsZXJbcHJvcF0gPSBnZXRTY3JvbGw7XG5cbiAgZ2V0U2Nyb2xsLndoZWVsSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0VHdlZW4udHdlZW4gJiYgZ2V0VHdlZW4udHdlZW4ua2lsbCgpICYmIChnZXRUd2Vlbi50d2VlbiA9IDApO1xuICB9O1xuXG4gIF9hZGRMaXN0ZW5lcihzY3JvbGxlciwgXCJ3aGVlbFwiLCBnZXRTY3JvbGwud2hlZWxIYW5kbGVyKTsgLy8gV2luZG93cyBtYWNoaW5lcyBoYW5kbGUgbW91c2V3aGVlbCBzY3JvbGxpbmcgaW4gY2h1bmtzIChsaWtlIFwiMyBsaW5lcyBwZXIgc2Nyb2xsXCIpIG1lYW5pbmcgdGhlIHR5cGljYWwgc3RyYXRlZ3kgZm9yIGNhbmNlbGxpbmcgdGhlIHNjcm9sbCBpc24ndCBhcyBzZW5zaXRpdmUuIEl0J3MgbXVjaCBtb3JlIGxpa2VseSB0byBtYXRjaCBvbmUgb2YgdGhlIHByZXZpb3VzIDIgc2Nyb2xsIGV2ZW50IHBvc2l0aW9ucy4gU28gd2Uga2lsbCBhbnkgc25hcHBpbmcgYXMgc29vbiBhcyB0aGVyZSdzIGEgd2hlZWwgZXZlbnQuXG5cblxuICBTY3JvbGxUcmlnZ2VyLmlzVG91Y2ggJiYgX2FkZExpc3RlbmVyKHNjcm9sbGVyLCBcInRvdWNobW92ZVwiLCBnZXRTY3JvbGwud2hlZWxIYW5kbGVyKTtcbiAgcmV0dXJuIGdldFR3ZWVuO1xufTtcblxuZXhwb3J0IHZhciBTY3JvbGxUcmlnZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2Nyb2xsVHJpZ2dlcih2YXJzLCBhbmltYXRpb24pIHtcbiAgICBfY29yZUluaXR0ZWQgfHwgU2Nyb2xsVHJpZ2dlci5yZWdpc3Rlcihnc2FwKSB8fCBjb25zb2xlLndhcm4oXCJQbGVhc2UgZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyKVwiKTtcblxuICAgIF9jb250ZXh0KHRoaXMpO1xuXG4gICAgdGhpcy5pbml0KHZhcnMsIGFuaW1hdGlvbik7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU2Nyb2xsVHJpZ2dlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmluaXQgPSBmdW5jdGlvbiBpbml0KHZhcnMsIGFuaW1hdGlvbikge1xuICAgIHRoaXMucHJvZ3Jlc3MgPSB0aGlzLnN0YXJ0ID0gMDtcbiAgICB0aGlzLnZhcnMgJiYgdGhpcy5raWxsKHRydWUsIHRydWUpOyAvLyBpbiBjYXNlIGl0J3MgYmVpbmcgaW5pdHRlZCBhZ2FpblxuXG4gICAgaWYgKCFfZW5hYmxlZCkge1xuICAgICAgdGhpcy51cGRhdGUgPSB0aGlzLnJlZnJlc2ggPSB0aGlzLmtpbGwgPSBfcGFzc1Rocm91Z2g7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFycyA9IF9zZXREZWZhdWx0cyhfaXNTdHJpbmcodmFycykgfHwgX2lzTnVtYmVyKHZhcnMpIHx8IHZhcnMubm9kZVR5cGUgPyB7XG4gICAgICB0cmlnZ2VyOiB2YXJzXG4gICAgfSA6IHZhcnMsIF9kZWZhdWx0cyk7XG5cbiAgICB2YXIgX3ZhcnMgPSB2YXJzLFxuICAgICAgICBvblVwZGF0ZSA9IF92YXJzLm9uVXBkYXRlLFxuICAgICAgICB0b2dnbGVDbGFzcyA9IF92YXJzLnRvZ2dsZUNsYXNzLFxuICAgICAgICBpZCA9IF92YXJzLmlkLFxuICAgICAgICBvblRvZ2dsZSA9IF92YXJzLm9uVG9nZ2xlLFxuICAgICAgICBvblJlZnJlc2ggPSBfdmFycy5vblJlZnJlc2gsXG4gICAgICAgIHNjcnViID0gX3ZhcnMuc2NydWIsXG4gICAgICAgIHRyaWdnZXIgPSBfdmFycy50cmlnZ2VyLFxuICAgICAgICBwaW4gPSBfdmFycy5waW4sXG4gICAgICAgIHBpblNwYWNpbmcgPSBfdmFycy5waW5TcGFjaW5nLFxuICAgICAgICBpbnZhbGlkYXRlT25SZWZyZXNoID0gX3ZhcnMuaW52YWxpZGF0ZU9uUmVmcmVzaCxcbiAgICAgICAgYW50aWNpcGF0ZVBpbiA9IF92YXJzLmFudGljaXBhdGVQaW4sXG4gICAgICAgIG9uU2NydWJDb21wbGV0ZSA9IF92YXJzLm9uU2NydWJDb21wbGV0ZSxcbiAgICAgICAgb25TbmFwQ29tcGxldGUgPSBfdmFycy5vblNuYXBDb21wbGV0ZSxcbiAgICAgICAgb25jZSA9IF92YXJzLm9uY2UsXG4gICAgICAgIHNuYXAgPSBfdmFycy5zbmFwLFxuICAgICAgICBwaW5SZXBhcmVudCA9IF92YXJzLnBpblJlcGFyZW50LFxuICAgICAgICBwaW5TcGFjZXIgPSBfdmFycy5waW5TcGFjZXIsXG4gICAgICAgIGNvbnRhaW5lckFuaW1hdGlvbiA9IF92YXJzLmNvbnRhaW5lckFuaW1hdGlvbixcbiAgICAgICAgZmFzdFNjcm9sbEVuZCA9IF92YXJzLmZhc3RTY3JvbGxFbmQsXG4gICAgICAgIHByZXZlbnRPdmVybGFwcyA9IF92YXJzLnByZXZlbnRPdmVybGFwcyxcbiAgICAgICAgZGlyZWN0aW9uID0gdmFycy5ob3Jpem9udGFsIHx8IHZhcnMuY29udGFpbmVyQW5pbWF0aW9uICYmIHZhcnMuaG9yaXpvbnRhbCAhPT0gZmFsc2UgPyBfaG9yaXpvbnRhbCA6IF92ZXJ0aWNhbCxcbiAgICAgICAgaXNUb2dnbGUgPSAhc2NydWIgJiYgc2NydWIgIT09IDAsXG4gICAgICAgIHNjcm9sbGVyID0gX2dldFRhcmdldCh2YXJzLnNjcm9sbGVyIHx8IF93aW4pLFxuICAgICAgICBzY3JvbGxlckNhY2hlID0gZ3NhcC5jb3JlLmdldENhY2hlKHNjcm9sbGVyKSxcbiAgICAgICAgaXNWaWV3cG9ydCA9IF9pc1ZpZXdwb3J0KHNjcm9sbGVyKSxcbiAgICAgICAgdXNlRml4ZWRQb3NpdGlvbiA9IChcInBpblR5cGVcIiBpbiB2YXJzID8gdmFycy5waW5UeXBlIDogX2dldFByb3h5UHJvcChzY3JvbGxlciwgXCJwaW5UeXBlXCIpIHx8IGlzVmlld3BvcnQgJiYgXCJmaXhlZFwiKSA9PT0gXCJmaXhlZFwiLFxuICAgICAgICBjYWxsYmFja3MgPSBbdmFycy5vbkVudGVyLCB2YXJzLm9uTGVhdmUsIHZhcnMub25FbnRlckJhY2ssIHZhcnMub25MZWF2ZUJhY2tdLFxuICAgICAgICB0b2dnbGVBY3Rpb25zID0gaXNUb2dnbGUgJiYgdmFycy50b2dnbGVBY3Rpb25zLnNwbGl0KFwiIFwiKSxcbiAgICAgICAgbWFya2VycyA9IFwibWFya2Vyc1wiIGluIHZhcnMgPyB2YXJzLm1hcmtlcnMgOiBfZGVmYXVsdHMubWFya2VycyxcbiAgICAgICAgYm9yZGVyV2lkdGggPSBpc1ZpZXdwb3J0ID8gMCA6IHBhcnNlRmxvYXQoX2dldENvbXB1dGVkU3R5bGUoc2Nyb2xsZXIpW1wiYm9yZGVyXCIgKyBkaXJlY3Rpb24ucDIgKyBfV2lkdGhdKSB8fCAwLFxuICAgICAgICBzZWxmID0gdGhpcyxcbiAgICAgICAgb25SZWZyZXNoSW5pdCA9IHZhcnMub25SZWZyZXNoSW5pdCAmJiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdmFycy5vblJlZnJlc2hJbml0KHNlbGYpO1xuICAgIH0sXG4gICAgICAgIGdldFNjcm9sbGVyU2l6ZSA9IF9nZXRTaXplRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCwgZGlyZWN0aW9uKSxcbiAgICAgICAgZ2V0U2Nyb2xsZXJPZmZzZXRzID0gX2dldE9mZnNldHNGdW5jKHNjcm9sbGVyLCBpc1ZpZXdwb3J0KSxcbiAgICAgICAgbGFzdFNuYXAgPSAwLFxuICAgICAgICBsYXN0UmVmcmVzaCA9IDAsXG4gICAgICAgIHByZXZQcm9ncmVzcyA9IDAsXG4gICAgICAgIHNjcm9sbEZ1bmMgPSBfZ2V0U2Nyb2xsRnVuYyhzY3JvbGxlciwgZGlyZWN0aW9uKSxcbiAgICAgICAgdHdlZW5UbyxcbiAgICAgICAgcGluQ2FjaGUsXG4gICAgICAgIHNuYXBGdW5jLFxuICAgICAgICBzY3JvbGwxLFxuICAgICAgICBzY3JvbGwyLFxuICAgICAgICBzdGFydCxcbiAgICAgICAgZW5kLFxuICAgICAgICBtYXJrZXJTdGFydCxcbiAgICAgICAgbWFya2VyRW5kLFxuICAgICAgICBtYXJrZXJTdGFydFRyaWdnZXIsXG4gICAgICAgIG1hcmtlckVuZFRyaWdnZXIsXG4gICAgICAgIG1hcmtlclZhcnMsXG4gICAgICAgIGV4ZWN1dGluZ09uUmVmcmVzaCxcbiAgICAgICAgY2hhbmdlLFxuICAgICAgICBwaW5PcmlnaW5hbFN0YXRlLFxuICAgICAgICBwaW5BY3RpdmVTdGF0ZSxcbiAgICAgICAgcGluU3RhdGUsXG4gICAgICAgIHNwYWNlcixcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICBwaW5HZXR0ZXIsXG4gICAgICAgIHBpblNldHRlcixcbiAgICAgICAgcGluU3RhcnQsXG4gICAgICAgIHBpbkNoYW5nZSxcbiAgICAgICAgc3BhY2luZ1N0YXJ0LFxuICAgICAgICBzcGFjZXJTdGF0ZSxcbiAgICAgICAgbWFya2VyU3RhcnRTZXR0ZXIsXG4gICAgICAgIHBpbk1vdmVzLFxuICAgICAgICBtYXJrZXJFbmRTZXR0ZXIsXG4gICAgICAgIGNzLFxuICAgICAgICBzbmFwMSxcbiAgICAgICAgc25hcDIsXG4gICAgICAgIHNjcnViVHdlZW4sXG4gICAgICAgIHNjcnViU21vb3RoLFxuICAgICAgICBzbmFwRHVyQ2xhbXAsXG4gICAgICAgIHNuYXBEZWxheWVkQ2FsbCxcbiAgICAgICAgcHJldlNjcm9sbCxcbiAgICAgICAgcHJldkFuaW1Qcm9ncmVzcyxcbiAgICAgICAgY2FNYXJrZXJTZXR0ZXIsXG4gICAgICAgIGN1c3RvbVJldmVydFJldHVybjsgLy8gZm9yIHRoZSBzYWtlIG9mIGVmZmljaWVuY3ksIF9zdGFydENsYW1wL19lbmRDbGFtcCBzZXJ2ZSBsaWtlIGEgdHJ1dGh5IHZhbHVlIGluZGljYXRpbmcgdGhhdCBjbGFtcGluZyB3YXMgZW5hYmxlZCBvbiB0aGUgc3RhcnQvZW5kLCBhbmQgQUxTTyBzdG9yZSB0aGUgYWN0dWFsIHByZS1jbGFtcGVkIG51bWVyaWMgdmFsdWUuIFdlIHRhcCBpbnRvIHRoYXQgaW4gU2Nyb2xsU21vb3RoZXIgZm9yIHNwZWVkIGVmZmVjdHMuIFNvIGZvciBleGFtcGxlLCBpZiBzdGFydD1cImNsYW1wKHRvcCBib3R0b20pXCIgcmVzdWx0cyBpbiBhIHN0YXJ0IG9mIC0xMDAgbmF0dXJhbGx5LCBpdCB3b3VsZCBnZXQgY2xhbXBlZCB0byAwIGJ1dCAtMTAwIHdvdWxkIGJlIHN0b3JlZCBpbiBfc3RhcnRDbGFtcC5cblxuXG4gICAgc2VsZi5fc3RhcnRDbGFtcCA9IHNlbGYuX2VuZENsYW1wID0gZmFsc2U7XG4gICAgc2VsZi5fZGlyID0gZGlyZWN0aW9uO1xuICAgIGFudGljaXBhdGVQaW4gKj0gNDU7XG4gICAgc2VsZi5zY3JvbGxlciA9IHNjcm9sbGVyO1xuICAgIHNlbGYuc2Nyb2xsID0gY29udGFpbmVyQW5pbWF0aW9uID8gY29udGFpbmVyQW5pbWF0aW9uLnRpbWUuYmluZChjb250YWluZXJBbmltYXRpb24pIDogc2Nyb2xsRnVuYztcbiAgICBzY3JvbGwxID0gc2Nyb2xsRnVuYygpO1xuICAgIHNlbGYudmFycyA9IHZhcnM7XG4gICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uIHx8IHZhcnMuYW5pbWF0aW9uO1xuXG4gICAgaWYgKFwicmVmcmVzaFByaW9yaXR5XCIgaW4gdmFycykge1xuICAgICAgX3NvcnQgPSAxO1xuICAgICAgdmFycy5yZWZyZXNoUHJpb3JpdHkgPT09IC05OTk5ICYmIChfcHJpbWFyeSA9IHNlbGYpOyAvLyB1c2VkIGJ5IFNjcm9sbFNtb290aGVyXG4gICAgfVxuXG4gICAgc2Nyb2xsZXJDYWNoZS50d2VlblNjcm9sbCA9IHNjcm9sbGVyQ2FjaGUudHdlZW5TY3JvbGwgfHwge1xuICAgICAgdG9wOiBfZ2V0VHdlZW5DcmVhdG9yKHNjcm9sbGVyLCBfdmVydGljYWwpLFxuICAgICAgbGVmdDogX2dldFR3ZWVuQ3JlYXRvcihzY3JvbGxlciwgX2hvcml6b250YWwpXG4gICAgfTtcbiAgICBzZWxmLnR3ZWVuVG8gPSB0d2VlblRvID0gc2Nyb2xsZXJDYWNoZS50d2VlblNjcm9sbFtkaXJlY3Rpb24ucF07XG5cbiAgICBzZWxmLnNjcnViRHVyYXRpb24gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHNjcnViU21vb3RoID0gX2lzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZTtcblxuICAgICAgaWYgKCFzY3J1YlNtb290aCkge1xuICAgICAgICBzY3J1YlR3ZWVuICYmIHNjcnViVHdlZW4ucHJvZ3Jlc3MoMSkua2lsbCgpO1xuICAgICAgICBzY3J1YlR3ZWVuID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjcnViVHdlZW4gPyBzY3J1YlR3ZWVuLmR1cmF0aW9uKHZhbHVlKSA6IHNjcnViVHdlZW4gPSBnc2FwLnRvKGFuaW1hdGlvbiwge1xuICAgICAgICAgIGVhc2U6IFwiZXhwb1wiLFxuICAgICAgICAgIHRvdGFsUHJvZ3Jlc3M6IFwiKz0wXCIsXG4gICAgICAgICAgaW5oZXJpdDogZmFsc2UsXG4gICAgICAgICAgZHVyYXRpb246IHNjcnViU21vb3RoLFxuICAgICAgICAgIHBhdXNlZDogdHJ1ZSxcbiAgICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiBvbkNvbXBsZXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIG9uU2NydWJDb21wbGV0ZSAmJiBvblNjcnViQ29tcGxldGUoc2VsZik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgYW5pbWF0aW9uLnZhcnMubGF6eSA9IGZhbHNlO1xuICAgICAgYW5pbWF0aW9uLl9pbml0dGVkICYmICFzZWxmLmlzUmV2ZXJ0ZWQgfHwgYW5pbWF0aW9uLnZhcnMuaW1tZWRpYXRlUmVuZGVyICE9PSBmYWxzZSAmJiB2YXJzLmltbWVkaWF0ZVJlbmRlciAhPT0gZmFsc2UgJiYgYW5pbWF0aW9uLmR1cmF0aW9uKCkgJiYgYW5pbWF0aW9uLnJlbmRlcigwLCB0cnVlLCB0cnVlKTsgLy8gc3BlY2lhbCBjYXNlOiBpZiB0aGlzIFNjcm9sbFRyaWdnZXIgZ2V0cyByZS1pbml0dGVkLCBhIGZyb20oKSB0d2VlbiB3aXRoIGEgc3RhZ2dlciBjb3VsZCBnZXQgaW5pdHRlZCBpbml0aWFsbHkgYW5kIHRoZW4gcmV2ZXJ0ZWQgb24gdGhlIHJlLWluaXQgd2hpY2ggbWVhbnMgaXQnbGwgbmVlZCB0byBnZXQgcmVuZGVyZWQgYWdhaW4gaGVyZSB0byBwcm9wZXJseSBkaXNwbGF5IHRoaW5ncy4gT3RoZXJ3aXNlLCBTZWUgaHR0cHM6Ly9nc2FwLmNvbS9mb3J1bXMvdG9waWMvMzY3Nzctc2Nyb2xsc21vb3RoZXItc3BsaXR0ZXh0LW5leHRqcy8gYW5kIGh0dHBzOi8vY29kZXBlbi5pby9HcmVlblNvY2svcGVuL2VZUHlQcGQ/ZWRpdG9ycz0wMDEwXG5cbiAgICAgIHNlbGYuYW5pbWF0aW9uID0gYW5pbWF0aW9uLnBhdXNlKCk7XG4gICAgICBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlciA9IHNlbGY7XG4gICAgICBzZWxmLnNjcnViRHVyYXRpb24oc2NydWIpO1xuICAgICAgc25hcDEgPSAwO1xuICAgICAgaWQgfHwgKGlkID0gYW5pbWF0aW9uLnZhcnMuaWQpO1xuICAgIH1cblxuICAgIGlmIChzbmFwKSB7XG4gICAgICAvLyBUT0RPOiBwb3RlbnRpYWwgaWRlYTogdXNlIGxlZ2l0aW1hdGUgQ1NTIHNjcm9sbCBzbmFwcGluZyBieSBwdXNoaW5nIGludmlzaWJsZSBlbGVtZW50cyBpbnRvIHRoZSBET00gdGhhdCBzZXJ2ZSBhcyBzbmFwIHBvc2l0aW9ucywgYW5kIHRvZ2dsZSB0aGUgZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudC5zdHlsZS5zY3JvbGxTbmFwVHlwZSBvblRvZ2dsZS4gU2VlIGh0dHBzOi8vY29kZXBlbi5pby9HcmVlblNvY2svcGVuL0pqTHJnV00gZm9yIGEgcXVpY2sgcHJvb2Ygb2YgY29uY2VwdC5cbiAgICAgIGlmICghX2lzT2JqZWN0KHNuYXApIHx8IHNuYXAucHVzaCkge1xuICAgICAgICBzbmFwID0ge1xuICAgICAgICAgIHNuYXBUbzogc25hcFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBcInNjcm9sbEJlaGF2aW9yXCIgaW4gX2JvZHkuc3R5bGUgJiYgZ3NhcC5zZXQoaXNWaWV3cG9ydCA/IFtfYm9keSwgX2RvY0VsXSA6IHNjcm9sbGVyLCB7XG4gICAgICAgIHNjcm9sbEJlaGF2aW9yOiBcImF1dG9cIlxuICAgICAgfSk7IC8vIHNtb290aCBzY3JvbGxpbmcgZG9lc24ndCB3b3JrIHdpdGggc25hcC5cblxuICAgICAgX3Njcm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIHJldHVybiBfaXNGdW5jdGlvbihvKSAmJiBvLnRhcmdldCA9PT0gKGlzVmlld3BvcnQgPyBfZG9jLnNjcm9sbGluZ0VsZW1lbnQgfHwgX2RvY0VsIDogc2Nyb2xsZXIpICYmIChvLnNtb290aCA9IGZhbHNlKTtcbiAgICAgIH0pOyAvLyBub3RlOiBzZXQgc21vb3RoIHRvIGZhbHNlIG9uIGJvdGggdGhlIHZlcnRpY2FsIGFuZCBob3Jpem9udGFsIHNjcm9sbCBnZXR0ZXJzL3NldHRlcnNcblxuXG4gICAgICBzbmFwRnVuYyA9IF9pc0Z1bmN0aW9uKHNuYXAuc25hcFRvKSA/IHNuYXAuc25hcFRvIDogc25hcC5zbmFwVG8gPT09IFwibGFiZWxzXCIgPyBfZ2V0Q2xvc2VzdExhYmVsKGFuaW1hdGlvbikgOiBzbmFwLnNuYXBUbyA9PT0gXCJsYWJlbHNEaXJlY3Rpb25hbFwiID8gX2dldExhYmVsQXREaXJlY3Rpb24oYW5pbWF0aW9uKSA6IHNuYXAuZGlyZWN0aW9uYWwgIT09IGZhbHNlID8gZnVuY3Rpb24gKHZhbHVlLCBzdCkge1xuICAgICAgICByZXR1cm4gX3NuYXBEaXJlY3Rpb25hbChzbmFwLnNuYXBUbykodmFsdWUsIF9nZXRUaW1lKCkgLSBsYXN0UmVmcmVzaCA8IDUwMCA/IDAgOiBzdC5kaXJlY3Rpb24pO1xuICAgICAgfSA6IGdzYXAudXRpbHMuc25hcChzbmFwLnNuYXBUbyk7XG4gICAgICBzbmFwRHVyQ2xhbXAgPSBzbmFwLmR1cmF0aW9uIHx8IHtcbiAgICAgICAgbWluOiAwLjEsXG4gICAgICAgIG1heDogMlxuICAgICAgfTtcbiAgICAgIHNuYXBEdXJDbGFtcCA9IF9pc09iamVjdChzbmFwRHVyQ2xhbXApID8gX2NsYW1wKHNuYXBEdXJDbGFtcC5taW4sIHNuYXBEdXJDbGFtcC5tYXgpIDogX2NsYW1wKHNuYXBEdXJDbGFtcCwgc25hcER1ckNsYW1wKTtcbiAgICAgIHNuYXBEZWxheWVkQ2FsbCA9IGdzYXAuZGVsYXllZENhbGwoc25hcC5kZWxheSB8fCBzY3J1YlNtb290aCAvIDIgfHwgMC4xLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzY3JvbGwgPSBzY3JvbGxGdW5jKCksXG4gICAgICAgICAgICByZWZyZXNoZWRSZWNlbnRseSA9IF9nZXRUaW1lKCkgLSBsYXN0UmVmcmVzaCA8IDUwMCxcbiAgICAgICAgICAgIHR3ZWVuID0gdHdlZW5Uby50d2VlbjtcblxuICAgICAgICBpZiAoKHJlZnJlc2hlZFJlY2VudGx5IHx8IE1hdGguYWJzKHNlbGYuZ2V0VmVsb2NpdHkoKSkgPCAxMCkgJiYgIXR3ZWVuICYmICFfcG9pbnRlcklzRG93biAmJiBsYXN0U25hcCAhPT0gc2Nyb2xsKSB7XG4gICAgICAgICAgdmFyIHByb2dyZXNzID0gKHNjcm9sbCAtIHN0YXJ0KSAvIGNoYW5nZSxcbiAgICAgICAgICAgICAgdG90YWxQcm9ncmVzcyA9IGFuaW1hdGlvbiAmJiAhaXNUb2dnbGUgPyBhbmltYXRpb24udG90YWxQcm9ncmVzcygpIDogcHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIHZlbG9jaXR5ID0gcmVmcmVzaGVkUmVjZW50bHkgPyAwIDogKHRvdGFsUHJvZ3Jlc3MgLSBzbmFwMikgLyAoX2dldFRpbWUoKSAtIF90aW1lMikgKiAxMDAwIHx8IDAsXG4gICAgICAgICAgICAgIGNoYW5nZTEgPSBnc2FwLnV0aWxzLmNsYW1wKC1wcm9ncmVzcywgMSAtIHByb2dyZXNzLCBfYWJzKHZlbG9jaXR5IC8gMikgKiB2ZWxvY2l0eSAvIDAuMTg1KSxcbiAgICAgICAgICAgICAgbmF0dXJhbEVuZCA9IHByb2dyZXNzICsgKHNuYXAuaW5lcnRpYSA9PT0gZmFsc2UgPyAwIDogY2hhbmdlMSksXG4gICAgICAgICAgICAgIGVuZFZhbHVlLFxuICAgICAgICAgICAgICBlbmRTY3JvbGwsXG4gICAgICAgICAgICAgIF9zbmFwID0gc25hcCxcbiAgICAgICAgICAgICAgb25TdGFydCA9IF9zbmFwLm9uU3RhcnQsXG4gICAgICAgICAgICAgIF9vbkludGVycnVwdCA9IF9zbmFwLm9uSW50ZXJydXB0LFxuICAgICAgICAgICAgICBfb25Db21wbGV0ZSA9IF9zbmFwLm9uQ29tcGxldGU7XG4gICAgICAgICAgZW5kVmFsdWUgPSBzbmFwRnVuYyhuYXR1cmFsRW5kLCBzZWxmKTtcbiAgICAgICAgICBfaXNOdW1iZXIoZW5kVmFsdWUpIHx8IChlbmRWYWx1ZSA9IG5hdHVyYWxFbmQpOyAvLyBpbiBjYXNlIHRoZSBmdW5jdGlvbiBkaWRuJ3QgcmV0dXJuIGEgbnVtYmVyLCBmYWxsIGJhY2sgdG8gdXNpbmcgdGhlIG5hdHVyYWxFbmRcblxuICAgICAgICAgIGVuZFNjcm9sbCA9IE1hdGgucm91bmQoc3RhcnQgKyBlbmRWYWx1ZSAqIGNoYW5nZSk7XG5cbiAgICAgICAgICBpZiAoc2Nyb2xsIDw9IGVuZCAmJiBzY3JvbGwgPj0gc3RhcnQgJiYgZW5kU2Nyb2xsICE9PSBzY3JvbGwpIHtcbiAgICAgICAgICAgIGlmICh0d2VlbiAmJiAhdHdlZW4uX2luaXR0ZWQgJiYgdHdlZW4uZGF0YSA8PSBfYWJzKGVuZFNjcm9sbCAtIHNjcm9sbCkpIHtcbiAgICAgICAgICAgICAgLy8gdGhlcmUncyBhbiBvdmVybGFwcGluZyBzbmFwISBTbyB3ZSBtdXN0IGZpZ3VyZSBvdXQgd2hpY2ggb25lIGlzIGNsb3NlciBhbmQgbGV0IHRoYXQgdHdlZW4gbGl2ZS5cbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc25hcC5pbmVydGlhID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICBjaGFuZ2UxID0gZW5kVmFsdWUgLSBwcm9ncmVzcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHdlZW5UbyhlbmRTY3JvbGwsIHtcbiAgICAgICAgICAgICAgZHVyYXRpb246IHNuYXBEdXJDbGFtcChfYWJzKE1hdGgubWF4KF9hYnMobmF0dXJhbEVuZCAtIHRvdGFsUHJvZ3Jlc3MpLCBfYWJzKGVuZFZhbHVlIC0gdG90YWxQcm9ncmVzcykpICogMC4xODUgLyB2ZWxvY2l0eSAvIDAuMDUgfHwgMCkpLFxuICAgICAgICAgICAgICBlYXNlOiBzbmFwLmVhc2UgfHwgXCJwb3dlcjNcIixcbiAgICAgICAgICAgICAgZGF0YTogX2FicyhlbmRTY3JvbGwgLSBzY3JvbGwpLFxuICAgICAgICAgICAgICAvLyByZWNvcmQgdGhlIGRpc3RhbmNlIHNvIHRoYXQgaWYgYW5vdGhlciBzbmFwIHR3ZWVuIG9jY3VycyAoY29uZmxpY3QpIHdlIGNhbiBwcmlvcml0aXplIHRoZSBjbG9zZXN0IHNuYXAuXG4gICAgICAgICAgICAgIG9uSW50ZXJydXB0OiBmdW5jdGlvbiBvbkludGVycnVwdCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc25hcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSkgJiYgX29uSW50ZXJydXB0ICYmIF9vbkludGVycnVwdChzZWxmKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24gb25Db21wbGV0ZSgpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIGxhc3RTbmFwID0gc2Nyb2xsRnVuYygpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgICAgLy8gdGhlIHJlc29sdXRpb24gb2YgdGhlIHNjcm9sbGJhciBpcyBsaW1pdGVkLCBzbyB3ZSBzaG91bGQgY29ycmVjdCB0aGUgc2NydWJiZWQgYW5pbWF0aW9uJ3MgcGxheWhlYWQgYXQgdGhlIGVuZCB0byBtYXRjaCBFWEFDVExZIHdoZXJlIGl0IHdhcyBzdXBwb3NlZCB0byBzbmFwXG4gICAgICAgICAgICAgICAgICBzY3J1YlR3ZWVuID8gc2NydWJUd2Vlbi5yZXNldFRvKFwidG90YWxQcm9ncmVzc1wiLCBlbmRWYWx1ZSwgYW5pbWF0aW9uLl90VGltZSAvIGFuaW1hdGlvbi5fdER1cikgOiBhbmltYXRpb24ucHJvZ3Jlc3MoZW5kVmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNuYXAxID0gc25hcDIgPSBhbmltYXRpb24gJiYgIWlzVG9nZ2xlID8gYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MoKSA6IHNlbGYucHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgb25TbmFwQ29tcGxldGUgJiYgb25TbmFwQ29tcGxldGUoc2VsZik7XG4gICAgICAgICAgICAgICAgX29uQ29tcGxldGUgJiYgX29uQ29tcGxldGUoc2VsZik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHNjcm9sbCwgY2hhbmdlMSAqIGNoYW5nZSwgZW5kU2Nyb2xsIC0gc2Nyb2xsIC0gY2hhbmdlMSAqIGNoYW5nZSk7XG4gICAgICAgICAgICBvblN0YXJ0ICYmIG9uU3RhcnQoc2VsZiwgdHdlZW5Uby50d2Vlbik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNlbGYuaXNBY3RpdmUgJiYgbGFzdFNuYXAgIT09IHNjcm9sbCkge1xuICAgICAgICAgIHNuYXBEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgICB9XG4gICAgICB9KS5wYXVzZSgpO1xuICAgIH1cblxuICAgIGlkICYmIChfaWRzW2lkXSA9IHNlbGYpO1xuICAgIHRyaWdnZXIgPSBzZWxmLnRyaWdnZXIgPSBfZ2V0VGFyZ2V0KHRyaWdnZXIgfHwgcGluICE9PSB0cnVlICYmIHBpbik7IC8vIGlmIGEgdHJpZ2dlciBoYXMgc29tZSBraW5kIG9mIHNjcm9sbC1yZWxhdGVkIGVmZmVjdCBhcHBsaWVkIHRoYXQgY291bGQgY29udGFtaW5hdGUgdGhlIFwieVwiIG9yIFwieFwiIHBvc2l0aW9uIChsaWtlIGEgU2Nyb2xsU21vb3RoZXIgZWZmZWN0KSwgd2UgbmVlZGVkIGEgd2F5IHRvIHRlbXBvcmFyaWx5IHJldmVydCBpdCwgc28gd2UgdXNlIHRoZSBzdFJldmVydCBwcm9wZXJ0eSBvZiB0aGUgZ3NDYWNoZS4gSXQgY2FuIHJldHVybiBhbm90aGVyIGZ1bmN0aW9uIHRoYXQgd2UnbGwgY2FsbCBhdCB0aGUgZW5kIHNvIGl0IGNhbiByZXR1cm4gdG8gaXRzIG5vcm1hbCBzdGF0ZS5cblxuICAgIGN1c3RvbVJldmVydFJldHVybiA9IHRyaWdnZXIgJiYgdHJpZ2dlci5fZ3NhcCAmJiB0cmlnZ2VyLl9nc2FwLnN0UmV2ZXJ0O1xuICAgIGN1c3RvbVJldmVydFJldHVybiAmJiAoY3VzdG9tUmV2ZXJ0UmV0dXJuID0gY3VzdG9tUmV2ZXJ0UmV0dXJuKHNlbGYpKTtcbiAgICBwaW4gPSBwaW4gPT09IHRydWUgPyB0cmlnZ2VyIDogX2dldFRhcmdldChwaW4pO1xuICAgIF9pc1N0cmluZyh0b2dnbGVDbGFzcykgJiYgKHRvZ2dsZUNsYXNzID0ge1xuICAgICAgdGFyZ2V0czogdHJpZ2dlcixcbiAgICAgIGNsYXNzTmFtZTogdG9nZ2xlQ2xhc3NcbiAgICB9KTtcblxuICAgIGlmIChwaW4pIHtcbiAgICAgIHBpblNwYWNpbmcgPT09IGZhbHNlIHx8IHBpblNwYWNpbmcgPT09IF9tYXJnaW4gfHwgKHBpblNwYWNpbmcgPSAhcGluU3BhY2luZyAmJiBwaW4ucGFyZW50Tm9kZSAmJiBwaW4ucGFyZW50Tm9kZS5zdHlsZSAmJiBfZ2V0Q29tcHV0ZWRTdHlsZShwaW4ucGFyZW50Tm9kZSkuZGlzcGxheSA9PT0gXCJmbGV4XCIgPyBmYWxzZSA6IF9wYWRkaW5nKTsgLy8gaWYgdGhlIHBhcmVudCBpcyBkaXNwbGF5OiBmbGV4LCBkb24ndCBhcHBseSBwaW5TcGFjaW5nIGJ5IGRlZmF1bHQuIFdlIHNob3VsZCBjaGVjayB0aGF0IHBpbi5wYXJlbnROb2RlIGlzIGFuIGVsZW1lbnQgKG5vdCBzaGFkb3cgZG9tIHdpbmRvdylcblxuICAgICAgc2VsZi5waW4gPSBwaW47XG4gICAgICBwaW5DYWNoZSA9IGdzYXAuY29yZS5nZXRDYWNoZShwaW4pO1xuXG4gICAgICBpZiAoIXBpbkNhY2hlLnNwYWNlcikge1xuICAgICAgICAvLyByZWNvcmQgdGhlIHNwYWNlciBhbmQgcGluT3JpZ2luYWxTdGF0ZSBvbiB0aGUgY2FjaGUgaW4gY2FzZSBzb21lb25lIHRyaWVzIHBpbm5pbmcgdGhlIHNhbWUgZWxlbWVudCB3aXRoIE1VTFRJUExFIFNjcm9sbFRyaWdnZXJzIC0gd2UgZG9uJ3Qgd2FudCB0byBoYXZlIG11bHRpcGxlIHNwYWNlcnMgb3IgcmVjb3JkIHRoZSBcIm9yaWdpbmFsXCIgcGluIHN0YXRlIGFmdGVyIGl0IGhhcyBhbHJlYWR5IGJlZW4gYWZmZWN0ZWQgYnkgYW5vdGhlciBTY3JvbGxUcmlnZ2VyLlxuICAgICAgICBpZiAocGluU3BhY2VyKSB7XG4gICAgICAgICAgcGluU3BhY2VyID0gX2dldFRhcmdldChwaW5TcGFjZXIpO1xuICAgICAgICAgIHBpblNwYWNlciAmJiAhcGluU3BhY2VyLm5vZGVUeXBlICYmIChwaW5TcGFjZXIgPSBwaW5TcGFjZXIuY3VycmVudCB8fCBwaW5TcGFjZXIubmF0aXZlRWxlbWVudCk7IC8vIGZvciBSZWFjdCAmIEFuZ3VsYXJcblxuICAgICAgICAgIHBpbkNhY2hlLnNwYWNlcklzTmF0aXZlID0gISFwaW5TcGFjZXI7XG4gICAgICAgICAgcGluU3BhY2VyICYmIChwaW5DYWNoZS5zcGFjZXJTdGF0ZSA9IF9nZXRTdGF0ZShwaW5TcGFjZXIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBpbkNhY2hlLnNwYWNlciA9IHNwYWNlciA9IHBpblNwYWNlciB8fCBfZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHNwYWNlci5jbGFzc0xpc3QuYWRkKFwicGluLXNwYWNlclwiKTtcbiAgICAgICAgaWQgJiYgc3BhY2VyLmNsYXNzTGlzdC5hZGQoXCJwaW4tc3BhY2VyLVwiICsgaWQpO1xuICAgICAgICBwaW5DYWNoZS5waW5TdGF0ZSA9IHBpbk9yaWdpbmFsU3RhdGUgPSBfZ2V0U3RhdGUocGluKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBpbk9yaWdpbmFsU3RhdGUgPSBwaW5DYWNoZS5waW5TdGF0ZTtcbiAgICAgIH1cblxuICAgICAgdmFycy5mb3JjZTNEICE9PSBmYWxzZSAmJiBnc2FwLnNldChwaW4sIHtcbiAgICAgICAgZm9yY2UzRDogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBzZWxmLnNwYWNlciA9IHNwYWNlciA9IHBpbkNhY2hlLnNwYWNlcjtcbiAgICAgIGNzID0gX2dldENvbXB1dGVkU3R5bGUocGluKTtcbiAgICAgIHNwYWNpbmdTdGFydCA9IGNzW3BpblNwYWNpbmcgKyBkaXJlY3Rpb24ub3MyXTtcbiAgICAgIHBpbkdldHRlciA9IGdzYXAuZ2V0UHJvcGVydHkocGluKTtcbiAgICAgIHBpblNldHRlciA9IGdzYXAucXVpY2tTZXR0ZXIocGluLCBkaXJlY3Rpb24uYSwgX3B4KTsgLy8gcGluLmZpcnN0Q2hpbGQgJiYgIV9tYXhTY3JvbGwocGluLCBkaXJlY3Rpb24pICYmIChwaW4uc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiKTsgLy8gcHJvdGVjdHMgZnJvbSBjb2xsYXBzaW5nIG1hcmdpbnMsIGJ1dCBjYW4gaGF2ZSB1bmludGVuZGVkIGNvbnNlcXVlbmNlcyBhcyBkZW1vbnN0cmF0ZWQgaGVyZTogaHR0cHM6Ly9jb2RlcGVuLmlvL0dyZWVuU29jay9wZW4vMWU0MmM3YTczYmZhNDA5ZDJjZjFlMTg0ZTdhNDI0OGQgc28gaXQgd2FzIHJlbW92ZWQgaW4gZmF2b3Igb2YganVzdCB0ZWxsaW5nIHBlb3BsZSB0byBzZXQgdXAgdGhlaXIgQ1NTIHRvIGF2b2lkIHRoZSBjb2xsYXBzaW5nIG1hcmdpbnMgKG92ZXJmbG93OiBoaWRkZW4gfCBhdXRvIGlzIGp1c3Qgb25lIG9wdGlvbi4gQW5vdGhlciBpcyBib3JkZXItdG9wOiAxcHggc29saWQgdHJhbnNwYXJlbnQpLlxuXG4gICAgICBfc3dhcFBpbkluKHBpbiwgc3BhY2VyLCBjcyk7XG5cbiAgICAgIHBpblN0YXRlID0gX2dldFN0YXRlKHBpbik7XG4gICAgfVxuXG4gICAgaWYgKG1hcmtlcnMpIHtcbiAgICAgIG1hcmtlclZhcnMgPSBfaXNPYmplY3QobWFya2VycykgPyBfc2V0RGVmYXVsdHMobWFya2VycywgX21hcmtlckRlZmF1bHRzKSA6IF9tYXJrZXJEZWZhdWx0cztcbiAgICAgIG1hcmtlclN0YXJ0VHJpZ2dlciA9IF9jcmVhdGVNYXJrZXIoXCJzY3JvbGxlci1zdGFydFwiLCBpZCwgc2Nyb2xsZXIsIGRpcmVjdGlvbiwgbWFya2VyVmFycywgMCk7XG4gICAgICBtYXJrZXJFbmRUcmlnZ2VyID0gX2NyZWF0ZU1hcmtlcihcInNjcm9sbGVyLWVuZFwiLCBpZCwgc2Nyb2xsZXIsIGRpcmVjdGlvbiwgbWFya2VyVmFycywgMCwgbWFya2VyU3RhcnRUcmlnZ2VyKTtcbiAgICAgIG9mZnNldCA9IG1hcmtlclN0YXJ0VHJpZ2dlcltcIm9mZnNldFwiICsgZGlyZWN0aW9uLm9wLmQyXTtcblxuICAgICAgdmFyIGNvbnRlbnQgPSBfZ2V0VGFyZ2V0KF9nZXRQcm94eVByb3Aoc2Nyb2xsZXIsIFwiY29udGVudFwiKSB8fCBzY3JvbGxlcik7XG5cbiAgICAgIG1hcmtlclN0YXJ0ID0gdGhpcy5tYXJrZXJTdGFydCA9IF9jcmVhdGVNYXJrZXIoXCJzdGFydFwiLCBpZCwgY29udGVudCwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCBvZmZzZXQsIDAsIGNvbnRhaW5lckFuaW1hdGlvbik7XG4gICAgICBtYXJrZXJFbmQgPSB0aGlzLm1hcmtlckVuZCA9IF9jcmVhdGVNYXJrZXIoXCJlbmRcIiwgaWQsIGNvbnRlbnQsIGRpcmVjdGlvbiwgbWFya2VyVmFycywgb2Zmc2V0LCAwLCBjb250YWluZXJBbmltYXRpb24pO1xuICAgICAgY29udGFpbmVyQW5pbWF0aW9uICYmIChjYU1hcmtlclNldHRlciA9IGdzYXAucXVpY2tTZXR0ZXIoW21hcmtlclN0YXJ0LCBtYXJrZXJFbmRdLCBkaXJlY3Rpb24uYSwgX3B4KSk7XG5cbiAgICAgIGlmICghdXNlRml4ZWRQb3NpdGlvbiAmJiAhKF9wcm94aWVzLmxlbmd0aCAmJiBfZ2V0UHJveHlQcm9wKHNjcm9sbGVyLCBcImZpeGVkTWFya2Vyc1wiKSA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgX21ha2VQb3NpdGlvbmFibGUoaXNWaWV3cG9ydCA/IF9ib2R5IDogc2Nyb2xsZXIpO1xuXG4gICAgICAgIGdzYXAuc2V0KFttYXJrZXJTdGFydFRyaWdnZXIsIG1hcmtlckVuZFRyaWdnZXJdLCB7XG4gICAgICAgICAgZm9yY2UzRDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgbWFya2VyU3RhcnRTZXR0ZXIgPSBnc2FwLnF1aWNrU2V0dGVyKG1hcmtlclN0YXJ0VHJpZ2dlciwgZGlyZWN0aW9uLmEsIF9weCk7XG4gICAgICAgIG1hcmtlckVuZFNldHRlciA9IGdzYXAucXVpY2tTZXR0ZXIobWFya2VyRW5kVHJpZ2dlciwgZGlyZWN0aW9uLmEsIF9weCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvbnRhaW5lckFuaW1hdGlvbikge1xuICAgICAgdmFyIG9sZE9uVXBkYXRlID0gY29udGFpbmVyQW5pbWF0aW9uLnZhcnMub25VcGRhdGUsXG4gICAgICAgICAgb2xkUGFyYW1zID0gY29udGFpbmVyQW5pbWF0aW9uLnZhcnMub25VcGRhdGVQYXJhbXM7XG4gICAgICBjb250YWluZXJBbmltYXRpb24uZXZlbnRDYWxsYmFjayhcIm9uVXBkYXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi51cGRhdGUoMCwgMCwgMSk7XG4gICAgICAgIG9sZE9uVXBkYXRlICYmIG9sZE9uVXBkYXRlLmFwcGx5KGNvbnRhaW5lckFuaW1hdGlvbiwgb2xkUGFyYW1zIHx8IFtdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHNlbGYucHJldmlvdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RyaWdnZXJzW190cmlnZ2Vycy5pbmRleE9mKHNlbGYpIC0gMV07XG4gICAgfTtcblxuICAgIHNlbGYubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdHJpZ2dlcnNbX3RyaWdnZXJzLmluZGV4T2Yoc2VsZikgKyAxXTtcbiAgICB9O1xuXG4gICAgc2VsZi5yZXZlcnQgPSBmdW5jdGlvbiAocmV2ZXJ0LCB0ZW1wKSB7XG4gICAgICBpZiAoIXRlbXApIHtcbiAgICAgICAgcmV0dXJuIHNlbGYua2lsbCh0cnVlKTtcbiAgICAgIH0gLy8gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBnc2FwLmNvbnRleHQoKSBhbmQgZ3NhcC5tYXRjaE1lZGlhKCkgd2hpY2ggY2FsbCByZXZlcnQoKVxuXG5cbiAgICAgIHZhciByID0gcmV2ZXJ0ICE9PSBmYWxzZSB8fCAhc2VsZi5lbmFibGVkLFxuICAgICAgICAgIHByZXZSZWZyZXNoaW5nID0gX3JlZnJlc2hpbmc7XG5cbiAgICAgIGlmIChyICE9PSBzZWxmLmlzUmV2ZXJ0ZWQpIHtcbiAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICBwcmV2U2Nyb2xsID0gTWF0aC5tYXgoc2Nyb2xsRnVuYygpLCBzZWxmLnNjcm9sbC5yZWMgfHwgMCk7IC8vIHJlY29yZCB0aGUgc2Nyb2xsIHNvIHdlIGNhbiByZXZlcnQgbGF0ZXIgKHJlcG9zaXRpb25pbmcvcGlubmluZyB0aGluZ3MgY2FuIGFmZmVjdCBzY3JvbGwgcG9zaXRpb24pLiBJbiB0aGUgc3RhdGljIHJlZnJlc2goKSBtZXRob2QsIHdlIGZpcnN0IHJlY29yZCBhbGwgdGhlIHNjcm9sbCBwb3NpdGlvbnMgYXMgYSByZWZlcmVuY2UuXG5cbiAgICAgICAgICBwcmV2UHJvZ3Jlc3MgPSBzZWxmLnByb2dyZXNzO1xuICAgICAgICAgIHByZXZBbmltUHJvZ3Jlc3MgPSBhbmltYXRpb24gJiYgYW5pbWF0aW9uLnByb2dyZXNzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBtYXJrZXJTdGFydCAmJiBbbWFya2VyU3RhcnQsIG1hcmtlckVuZCwgbWFya2VyU3RhcnRUcmlnZ2VyLCBtYXJrZXJFbmRUcmlnZ2VyXS5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgcmV0dXJuIG0uc3R5bGUuZGlzcGxheSA9IHIgPyBcIm5vbmVcIiA6IFwiYmxvY2tcIjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICBfcmVmcmVzaGluZyA9IHNlbGY7XG4gICAgICAgICAgc2VsZi51cGRhdGUocik7IC8vIG1ha2Ugc3VyZSB0aGUgcGluIGlzIGJhY2sgaW4gaXRzIG9yaWdpbmFsIHBvc2l0aW9uIHNvIHRoYXQgYWxsIHRoZSBtZWFzdXJlbWVudHMgYXJlIGNvcnJlY3QuIGRvIHRoaXMgQkVGT1JFIHN3YXBwaW5nIHRoZSBwaW4gb3V0XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGluICYmICghcGluUmVwYXJlbnQgfHwgIXNlbGYuaXNBY3RpdmUpKSB7XG4gICAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICAgIF9zd2FwUGluT3V0KHBpbiwgc3BhY2VyLCBwaW5PcmlnaW5hbFN0YXRlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3N3YXBQaW5JbihwaW4sIHNwYWNlciwgX2dldENvbXB1dGVkU3R5bGUocGluKSwgc3BhY2VyU3RhdGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHIgfHwgc2VsZi51cGRhdGUocik7IC8vIHdoZW4gd2UncmUgcmVzdG9yaW5nLCB0aGUgdXBkYXRlIHNob3VsZCBydW4gQUZURVIgc3dhcHBpbmcgdGhlIHBpbiBpbnRvIGl0cyBwaW4tc3BhY2VyLlxuXG4gICAgICAgIF9yZWZyZXNoaW5nID0gcHJldlJlZnJlc2hpbmc7IC8vIHJlc3RvcmUuIFdlIHNldCBpdCB0byB0cnVlIGR1cmluZyB0aGUgdXBkYXRlKCkgc28gdGhhdCB0aGluZ3MgZmlyZSBwcm9wZXJseSBpbiB0aGVyZS5cblxuICAgICAgICBzZWxmLmlzUmV2ZXJ0ZWQgPSByO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWxmLnJlZnJlc2ggPSBmdW5jdGlvbiAoc29mdCwgZm9yY2UsIHBvc2l0aW9uLCBwaW5PZmZzZXQpIHtcbiAgICAgIC8vIHBvc2l0aW9uIGlzIHR5cGljYWxseSBvbmx5IGRlZmluZWQgaWYgaXQncyBjb21pbmcgZnJvbSBzZXRQb3NpdGlvbnMoKSAtIGl0J3MgYSB3YXkgdG8gc2tpcCB0aGUgbm9ybWFsIHBhcnNpbmcuIHBpbk9mZnNldCBpcyBhbHNvIG9ubHkgZnJvbSBzZXRQb3NpdGlvbnMoKSBhbmQgaXMgbW9zdGx5IHJlbGF0ZWQgdG8gZmFuY3kgc3R1ZmYgd2UgbmVlZCB0byBkbyBpbiBTY3JvbGxTbW9vdGhlciB3aXRoIGVmZmVjdHNcbiAgICAgIGlmICgoX3JlZnJlc2hpbmcgfHwgIXNlbGYuZW5hYmxlZCkgJiYgIWZvcmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHBpbiAmJiBzb2Z0ICYmIF9sYXN0U2Nyb2xsVGltZSkge1xuICAgICAgICBfYWRkTGlzdGVuZXIoU2Nyb2xsVHJpZ2dlciwgXCJzY3JvbGxFbmRcIiwgX3NvZnRSZWZyZXNoKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICFfcmVmcmVzaGluZ0FsbCAmJiBvblJlZnJlc2hJbml0ICYmIG9uUmVmcmVzaEluaXQoc2VsZik7XG4gICAgICBfcmVmcmVzaGluZyA9IHNlbGY7XG5cbiAgICAgIGlmICh0d2VlblRvLnR3ZWVuICYmICFwb3NpdGlvbikge1xuICAgICAgICAvLyB3ZSBza2lwIHRoaXMgaWYgYSBwb3NpdGlvbiBpcyBwYXNzZWQgaW4gYmVjYXVzZSB0eXBpY2FsbHkgdGhhdCdzIGZyb20gLnNldFBvc2l0aW9ucygpIGFuZCBpdCdzIGJlc3QgdG8gYWxsb3cgaW4tcHJvZ3Jlc3Mgc25hcHBpbmcgdG8gY29udGludWUuXG4gICAgICAgIHR3ZWVuVG8udHdlZW4ua2lsbCgpO1xuICAgICAgICB0d2VlblRvLnR3ZWVuID0gMDtcbiAgICAgIH1cblxuICAgICAgc2NydWJUd2VlbiAmJiBzY3J1YlR3ZWVuLnBhdXNlKCk7XG4gICAgICBpbnZhbGlkYXRlT25SZWZyZXNoICYmIGFuaW1hdGlvbiAmJiBhbmltYXRpb24ucmV2ZXJ0KHtcbiAgICAgICAga2lsbDogZmFsc2VcbiAgICAgIH0pLmludmFsaWRhdGUoKTtcbiAgICAgIHNlbGYuaXNSZXZlcnRlZCB8fCBzZWxmLnJldmVydCh0cnVlLCB0cnVlKTtcbiAgICAgIHNlbGYuX3N1YlBpbk9mZnNldCA9IGZhbHNlOyAvLyB3ZSdsbCBzZXQgdGhpcyB0byB0cnVlIGluIHRoZSBzdWItcGlucyBpZiB3ZSBmaW5kIGFueVxuXG4gICAgICB2YXIgc2l6ZSA9IGdldFNjcm9sbGVyU2l6ZSgpLFxuICAgICAgICAgIHNjcm9sbGVyQm91bmRzID0gZ2V0U2Nyb2xsZXJPZmZzZXRzKCksXG4gICAgICAgICAgbWF4ID0gY29udGFpbmVyQW5pbWF0aW9uID8gY29udGFpbmVyQW5pbWF0aW9uLmR1cmF0aW9uKCkgOiBfbWF4U2Nyb2xsKHNjcm9sbGVyLCBkaXJlY3Rpb24pLFxuICAgICAgICAgIGlzRmlyc3RSZWZyZXNoID0gY2hhbmdlIDw9IDAuMDEsXG4gICAgICAgICAgb2Zmc2V0ID0gMCxcbiAgICAgICAgICBvdGhlclBpbk9mZnNldCA9IHBpbk9mZnNldCB8fCAwLFxuICAgICAgICAgIHBhcnNlZEVuZCA9IF9pc09iamVjdChwb3NpdGlvbikgPyBwb3NpdGlvbi5lbmQgOiB2YXJzLmVuZCxcbiAgICAgICAgICBwYXJzZWRFbmRUcmlnZ2VyID0gdmFycy5lbmRUcmlnZ2VyIHx8IHRyaWdnZXIsXG4gICAgICAgICAgcGFyc2VkU3RhcnQgPSBfaXNPYmplY3QocG9zaXRpb24pID8gcG9zaXRpb24uc3RhcnQgOiB2YXJzLnN0YXJ0IHx8ICh2YXJzLnN0YXJ0ID09PSAwIHx8ICF0cmlnZ2VyID8gMCA6IHBpbiA/IFwiMCAwXCIgOiBcIjAgMTAwJVwiKSxcbiAgICAgICAgICBwaW5uZWRDb250YWluZXIgPSBzZWxmLnBpbm5lZENvbnRhaW5lciA9IHZhcnMucGlubmVkQ29udGFpbmVyICYmIF9nZXRUYXJnZXQodmFycy5waW5uZWRDb250YWluZXIsIHNlbGYpLFxuICAgICAgICAgIHRyaWdnZXJJbmRleCA9IHRyaWdnZXIgJiYgTWF0aC5tYXgoMCwgX3RyaWdnZXJzLmluZGV4T2Yoc2VsZikpIHx8IDAsXG4gICAgICAgICAgaSA9IHRyaWdnZXJJbmRleCxcbiAgICAgICAgICBjcyxcbiAgICAgICAgICBib3VuZHMsXG4gICAgICAgICAgc2Nyb2xsLFxuICAgICAgICAgIGlzVmVydGljYWwsXG4gICAgICAgICAgb3ZlcnJpZGUsXG4gICAgICAgICAgY3VyVHJpZ2dlcixcbiAgICAgICAgICBjdXJQaW4sXG4gICAgICAgICAgb3Bwb3NpdGVTY3JvbGwsXG4gICAgICAgICAgaW5pdHRlZCxcbiAgICAgICAgICByZXZlcnRlZFBpbnMsXG4gICAgICAgICAgZm9yY2VkT3ZlcmZsb3csXG4gICAgICAgICAgbWFya2VyU3RhcnRPZmZzZXQsXG4gICAgICAgICAgbWFya2VyRW5kT2Zmc2V0O1xuXG4gICAgICBpZiAobWFya2VycyAmJiBfaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgIC8vIGlmIHdlIGFsdGVyIHRoZSBzdGFydC9lbmQgcG9zaXRpb25zIHdpdGggLnNldFBvc2l0aW9ucygpLCBpdCBnZW5lcmFsbHkgZmVlZHMgaW4gYWJzb2x1dGUgTlVNQkVSUyB3aGljaCBkb24ndCBjb252ZXkgaW5mb3JtYXRpb24gYWJvdXQgd2hlcmUgdG8gbGluZSB1cCB0aGUgbWFya2Vycywgc28gdG8ga2VlcCBpdCBpbnR1aXRpdmUsIHdlIHJlY29yZCBob3cgZmFyIHRoZSB0cmlnZ2VyIHBvc2l0aW9ucyBzaGlmdCBhZnRlciBhcHBseWluZyB0aGUgbmV3IG51bWJlcnMgYW5kIHRoZW4gb2Zmc2V0IGJ5IHRoYXQgbXVjaCBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLiBXZSBkbyB0aGUgc2FtZSB0byB0aGUgYXNzb2NpYXRlZCB0cmlnZ2VyIG1hcmtlcnMgdG9vIG9mIGNvdXJzZS5cbiAgICAgICAgbWFya2VyU3RhcnRPZmZzZXQgPSBnc2FwLmdldFByb3BlcnR5KG1hcmtlclN0YXJ0VHJpZ2dlciwgZGlyZWN0aW9uLnApO1xuICAgICAgICBtYXJrZXJFbmRPZmZzZXQgPSBnc2FwLmdldFByb3BlcnR5KG1hcmtlckVuZFRyaWdnZXIsIGRpcmVjdGlvbi5wKTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAvLyB1c2VyIG1pZ2h0IHRyeSB0byBwaW4gdGhlIHNhbWUgZWxlbWVudCBtb3JlIHRoYW4gb25jZSwgc28gd2UgbXVzdCBmaW5kIGFueSBwcmlvciB0cmlnZ2VycyB3aXRoIHRoZSBzYW1lIHBpbiwgcmV2ZXJ0IHRoZW0sIGFuZCBkZXRlcm1pbmUgaG93IGxvbmcgdGhleSdyZSBwaW5uaW5nIHNvIHRoYXQgd2UgY2FuIG9mZnNldCB0aGluZ3MgYXBwcm9wcmlhdGVseS4gTWFrZSBzdXJlIHdlIHJldmVydCBmcm9tIGxhc3QgdG8gZmlyc3Qgc28gdGhhdCB0aGluZ3MgXCJyZXdpbmRcIiBwcm9wZXJseS5cbiAgICAgICAgY3VyVHJpZ2dlciA9IF90cmlnZ2Vyc1tpXTtcbiAgICAgICAgY3VyVHJpZ2dlci5lbmQgfHwgY3VyVHJpZ2dlci5yZWZyZXNoKDAsIDEpIHx8IChfcmVmcmVzaGluZyA9IHNlbGYpOyAvLyBpZiBpdCdzIGEgdGltZWxpbmUtYmFzZWQgdHJpZ2dlciB0aGF0IGhhc24ndCBiZWVuIGZ1bGx5IGluaXRpYWxpemVkIHlldCBiZWNhdXNlIGl0J3Mgd2FpdGluZyBmb3IgMSB0aWNrLCBqdXN0IGZvcmNlIHRoZSByZWZyZXNoKCkgaGVyZSwgb3RoZXJ3aXNlIGlmIGl0IGNvbnRhaW5zIGEgcGluIHRoYXQncyBzdXBwb3NlZCB0byBhZmZlY3Qgb3RoZXIgU2Nyb2xsVHJpZ2dlcnMgZnVydGhlciBkb3duIHRoZSBwYWdlLCB0aGV5IHdvbid0IGJlIGFkanVzdGVkIHByb3Blcmx5LlxuXG4gICAgICAgIGN1clBpbiA9IGN1clRyaWdnZXIucGluO1xuXG4gICAgICAgIGlmIChjdXJQaW4gJiYgKGN1clBpbiA9PT0gdHJpZ2dlciB8fCBjdXJQaW4gPT09IHBpbiB8fCBjdXJQaW4gPT09IHBpbm5lZENvbnRhaW5lcikgJiYgIWN1clRyaWdnZXIuaXNSZXZlcnRlZCkge1xuICAgICAgICAgIHJldmVydGVkUGlucyB8fCAocmV2ZXJ0ZWRQaW5zID0gW10pO1xuICAgICAgICAgIHJldmVydGVkUGlucy51bnNoaWZ0KGN1clRyaWdnZXIpOyAvLyB3ZSdsbCByZXZlcnQgZnJvbSBmaXJzdCB0byBsYXN0IHRvIG1ha2Ugc3VyZSB0aGluZ3MgcmVhY2ggdGhlaXIgZW5kIHN0YXRlIHByb3Blcmx5XG5cbiAgICAgICAgICBjdXJUcmlnZ2VyLnJldmVydCh0cnVlLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjdXJUcmlnZ2VyICE9PSBfdHJpZ2dlcnNbaV0pIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIGl0IGdvdCByZW1vdmVkLlxuICAgICAgICAgIHRyaWdnZXJJbmRleC0tO1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfaXNGdW5jdGlvbihwYXJzZWRTdGFydCkgJiYgKHBhcnNlZFN0YXJ0ID0gcGFyc2VkU3RhcnQoc2VsZikpO1xuICAgICAgcGFyc2VkU3RhcnQgPSBfcGFyc2VDbGFtcChwYXJzZWRTdGFydCwgXCJzdGFydFwiLCBzZWxmKTtcbiAgICAgIHN0YXJ0ID0gX3BhcnNlUG9zaXRpb24ocGFyc2VkU3RhcnQsIHRyaWdnZXIsIHNpemUsIGRpcmVjdGlvbiwgc2Nyb2xsRnVuYygpLCBtYXJrZXJTdGFydCwgbWFya2VyU3RhcnRUcmlnZ2VyLCBzZWxmLCBzY3JvbGxlckJvdW5kcywgYm9yZGVyV2lkdGgsIHVzZUZpeGVkUG9zaXRpb24sIG1heCwgY29udGFpbmVyQW5pbWF0aW9uLCBzZWxmLl9zdGFydENsYW1wICYmIFwiX3N0YXJ0Q2xhbXBcIikgfHwgKHBpbiA/IC0wLjAwMSA6IDApO1xuICAgICAgX2lzRnVuY3Rpb24ocGFyc2VkRW5kKSAmJiAocGFyc2VkRW5kID0gcGFyc2VkRW5kKHNlbGYpKTtcblxuICAgICAgaWYgKF9pc1N0cmluZyhwYXJzZWRFbmQpICYmICFwYXJzZWRFbmQuaW5kZXhPZihcIis9XCIpKSB7XG4gICAgICAgIGlmICh+cGFyc2VkRW5kLmluZGV4T2YoXCIgXCIpKSB7XG4gICAgICAgICAgcGFyc2VkRW5kID0gKF9pc1N0cmluZyhwYXJzZWRTdGFydCkgPyBwYXJzZWRTdGFydC5zcGxpdChcIiBcIilbMF0gOiBcIlwiKSArIHBhcnNlZEVuZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvZmZzZXQgPSBfb2Zmc2V0VG9QeChwYXJzZWRFbmQuc3Vic3RyKDIpLCBzaXplKTtcbiAgICAgICAgICBwYXJzZWRFbmQgPSBfaXNTdHJpbmcocGFyc2VkU3RhcnQpID8gcGFyc2VkU3RhcnQgOiAoY29udGFpbmVyQW5pbWF0aW9uID8gZ3NhcC51dGlscy5tYXBSYW5nZSgwLCBjb250YWluZXJBbmltYXRpb24uZHVyYXRpb24oKSwgY29udGFpbmVyQW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIuc3RhcnQsIGNvbnRhaW5lckFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyLmVuZCwgc3RhcnQpIDogc3RhcnQpICsgb2Zmc2V0OyAvLyBfcGFyc2VQb3NpdGlvbiB3b24ndCBmYWN0b3IgaW4gdGhlIG9mZnNldCBpZiB0aGUgc3RhcnQgaXMgYSBudW1iZXIsIHNvIGRvIGl0IGhlcmUuXG5cbiAgICAgICAgICBwYXJzZWRFbmRUcmlnZ2VyID0gdHJpZ2dlcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwYXJzZWRFbmQgPSBfcGFyc2VDbGFtcChwYXJzZWRFbmQsIFwiZW5kXCIsIHNlbGYpO1xuICAgICAgZW5kID0gTWF0aC5tYXgoc3RhcnQsIF9wYXJzZVBvc2l0aW9uKHBhcnNlZEVuZCB8fCAocGFyc2VkRW5kVHJpZ2dlciA/IFwiMTAwJSAwXCIgOiBtYXgpLCBwYXJzZWRFbmRUcmlnZ2VyLCBzaXplLCBkaXJlY3Rpb24sIHNjcm9sbEZ1bmMoKSArIG9mZnNldCwgbWFya2VyRW5kLCBtYXJrZXJFbmRUcmlnZ2VyLCBzZWxmLCBzY3JvbGxlckJvdW5kcywgYm9yZGVyV2lkdGgsIHVzZUZpeGVkUG9zaXRpb24sIG1heCwgY29udGFpbmVyQW5pbWF0aW9uLCBzZWxmLl9lbmRDbGFtcCAmJiBcIl9lbmRDbGFtcFwiKSkgfHwgLTAuMDAxO1xuICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgIGkgPSB0cmlnZ2VySW5kZXg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY3VyVHJpZ2dlciA9IF90cmlnZ2Vyc1tpXTtcbiAgICAgICAgY3VyUGluID0gY3VyVHJpZ2dlci5waW47XG5cbiAgICAgICAgaWYgKGN1clBpbiAmJiBjdXJUcmlnZ2VyLnN0YXJ0IC0gY3VyVHJpZ2dlci5fcGluUHVzaCA8PSBzdGFydCAmJiAhY29udGFpbmVyQW5pbWF0aW9uICYmIGN1clRyaWdnZXIuZW5kID4gMCkge1xuICAgICAgICAgIGNzID0gY3VyVHJpZ2dlci5lbmQgLSAoc2VsZi5fc3RhcnRDbGFtcCA/IE1hdGgubWF4KDAsIGN1clRyaWdnZXIuc3RhcnQpIDogY3VyVHJpZ2dlci5zdGFydCk7XG5cbiAgICAgICAgICBpZiAoKGN1clBpbiA9PT0gdHJpZ2dlciAmJiBjdXJUcmlnZ2VyLnN0YXJ0IC0gY3VyVHJpZ2dlci5fcGluUHVzaCA8IHN0YXJ0IHx8IGN1clBpbiA9PT0gcGlubmVkQ29udGFpbmVyKSAmJiBpc05hTihwYXJzZWRTdGFydCkpIHtcbiAgICAgICAgICAgIC8vIG51bWVyaWMgc3RhcnQgdmFsdWVzIHNob3VsZG4ndCBiZSBvZmZzZXQgYXQgYWxsIC0gdHJlYXQgdGhlbSBhcyBhYnNvbHV0ZVxuICAgICAgICAgICAgb2Zmc2V0ICs9IGNzICogKDEgLSBjdXJUcmlnZ2VyLnByb2dyZXNzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJQaW4gPT09IHBpbiAmJiAob3RoZXJQaW5PZmZzZXQgKz0gY3MpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0YXJ0ICs9IG9mZnNldDtcbiAgICAgIGVuZCArPSBvZmZzZXQ7XG4gICAgICBzZWxmLl9zdGFydENsYW1wICYmIChzZWxmLl9zdGFydENsYW1wICs9IG9mZnNldCk7XG5cbiAgICAgIGlmIChzZWxmLl9lbmRDbGFtcCAmJiAhX3JlZnJlc2hpbmdBbGwpIHtcbiAgICAgICAgc2VsZi5fZW5kQ2xhbXAgPSBlbmQgfHwgLTAuMDAxO1xuICAgICAgICBlbmQgPSBNYXRoLm1pbihlbmQsIF9tYXhTY3JvbGwoc2Nyb2xsZXIsIGRpcmVjdGlvbikpO1xuICAgICAgfVxuXG4gICAgICBjaGFuZ2UgPSBlbmQgLSBzdGFydCB8fCAoc3RhcnQgLT0gMC4wMSkgJiYgMC4wMDE7XG5cbiAgICAgIGlmIChpc0ZpcnN0UmVmcmVzaCkge1xuICAgICAgICAvLyBvbiB0aGUgdmVyeSBmaXJzdCByZWZyZXNoKCksIHRoZSBwcmV2UHJvZ3Jlc3MgY291bGRuJ3QgaGF2ZSBiZWVuIGFjY3VyYXRlIHlldCBiZWNhdXNlIHRoZSBzdGFydC9lbmQgd2VyZSBuZXZlciBjYWxjdWxhdGVkLCBzbyB3ZSBzZXQgaXQgaGVyZS4gQmVmb3JlIDMuMTEuNSwgaXQgY291bGQgbGVhZCB0byBhbiBpbmFjY3VyYXRlIHNjcm9sbCBwb3NpdGlvbiByZXN0b3JhdGlvbiB3aXRoIHNuYXBwaW5nLlxuICAgICAgICBwcmV2UHJvZ3Jlc3MgPSBnc2FwLnV0aWxzLmNsYW1wKDAsIDEsIGdzYXAudXRpbHMubm9ybWFsaXplKHN0YXJ0LCBlbmQsIHByZXZTY3JvbGwpKTtcbiAgICAgIH1cblxuICAgICAgc2VsZi5fcGluUHVzaCA9IG90aGVyUGluT2Zmc2V0O1xuXG4gICAgICBpZiAobWFya2VyU3RhcnQgJiYgb2Zmc2V0KSB7XG4gICAgICAgIC8vIG9mZnNldCB0aGUgbWFya2VycyBpZiBuZWNlc3NhcnlcbiAgICAgICAgY3MgPSB7fTtcbiAgICAgICAgY3NbZGlyZWN0aW9uLmFdID0gXCIrPVwiICsgb2Zmc2V0O1xuICAgICAgICBwaW5uZWRDb250YWluZXIgJiYgKGNzW2RpcmVjdGlvbi5wXSA9IFwiLT1cIiArIHNjcm9sbEZ1bmMoKSk7XG4gICAgICAgIGdzYXAuc2V0KFttYXJrZXJTdGFydCwgbWFya2VyRW5kXSwgY3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAocGluICYmICEoX2NsYW1waW5nTWF4ICYmIHNlbGYuZW5kID49IF9tYXhTY3JvbGwoc2Nyb2xsZXIsIGRpcmVjdGlvbikpKSB7XG4gICAgICAgIGNzID0gX2dldENvbXB1dGVkU3R5bGUocGluKTtcbiAgICAgICAgaXNWZXJ0aWNhbCA9IGRpcmVjdGlvbiA9PT0gX3ZlcnRpY2FsO1xuICAgICAgICBzY3JvbGwgPSBzY3JvbGxGdW5jKCk7IC8vIHJlY2FsY3VsYXRlIGJlY2F1c2UgdGhlIHRyaWdnZXJzIGNhbiBhZmZlY3QgdGhlIHNjcm9sbFxuXG4gICAgICAgIHBpblN0YXJ0ID0gcGFyc2VGbG9hdChwaW5HZXR0ZXIoZGlyZWN0aW9uLmEpKSArIG90aGVyUGluT2Zmc2V0O1xuXG4gICAgICAgIGlmICghbWF4ICYmIGVuZCA+IDEpIHtcbiAgICAgICAgICAvLyBtYWtlcyBzdXJlIHRoZSBzY3JvbGxlciBoYXMgYSBzY3JvbGxiYXIsIG90aGVyd2lzZSBpZiBzb21ldGhpbmcgaGFzIHdpZHRoOiAxMDAlLCBmb3IgZXhhbXBsZSwgaXQgd291bGQgYmUgdG9vIGJpZyAoZXhjbHVkZSB0aGUgc2Nyb2xsYmFyKS4gU2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzI1MTgyLXNjcm9sbHRyaWdnZXItd2lkdGgtb2YtcGFnZS1pbmNyZWFzZS13aGVyZS1tYXJrZXJzLWFyZS1zZXQtdG8tZmFsc2UvXG4gICAgICAgICAgZm9yY2VkT3ZlcmZsb3cgPSAoaXNWaWV3cG9ydCA/IF9kb2Muc2Nyb2xsaW5nRWxlbWVudCB8fCBfZG9jRWwgOiBzY3JvbGxlcikuc3R5bGU7XG4gICAgICAgICAgZm9yY2VkT3ZlcmZsb3cgPSB7XG4gICAgICAgICAgICBzdHlsZTogZm9yY2VkT3ZlcmZsb3csXG4gICAgICAgICAgICB2YWx1ZTogZm9yY2VkT3ZlcmZsb3dbXCJvdmVyZmxvd1wiICsgZGlyZWN0aW9uLmEudG9VcHBlckNhc2UoKV1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKGlzVmlld3BvcnQgJiYgX2dldENvbXB1dGVkU3R5bGUoX2JvZHkpW1wib3ZlcmZsb3dcIiArIGRpcmVjdGlvbi5hLnRvVXBwZXJDYXNlKCldICE9PSBcInNjcm9sbFwiKSB7XG4gICAgICAgICAgICAvLyBhdm9pZCBhbiBleHRyYSBzY3JvbGxiYXIgaWYgQk9USCA8aHRtbD4gYW5kIDxib2R5PiBoYXZlIG92ZXJmbG93IHNldCB0byBcInNjcm9sbFwiXG4gICAgICAgICAgICBmb3JjZWRPdmVyZmxvdy5zdHlsZVtcIm92ZXJmbG93XCIgKyBkaXJlY3Rpb24uYS50b1VwcGVyQ2FzZSgpXSA9IFwic2Nyb2xsXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX3N3YXBQaW5JbihwaW4sIHNwYWNlciwgY3MpO1xuXG4gICAgICAgIHBpblN0YXRlID0gX2dldFN0YXRlKHBpbik7IC8vIHRyYW5zZm9ybXMgd2lsbCBpbnRlcmZlcmUgd2l0aCB0aGUgdG9wL2xlZnQvcmlnaHQvYm90dG9tIHBsYWNlbWVudCwgc28gcmVtb3ZlIHRoZW0gdGVtcG9yYXJpbHkuIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIGZhY3RvcnMgaW4gdHJhbnNmb3Jtcy5cblxuICAgICAgICBib3VuZHMgPSBfZ2V0Qm91bmRzKHBpbiwgdHJ1ZSk7XG4gICAgICAgIG9wcG9zaXRlU2Nyb2xsID0gdXNlRml4ZWRQb3NpdGlvbiAmJiBfZ2V0U2Nyb2xsRnVuYyhzY3JvbGxlciwgaXNWZXJ0aWNhbCA/IF9ob3Jpem9udGFsIDogX3ZlcnRpY2FsKSgpO1xuXG4gICAgICAgIGlmIChwaW5TcGFjaW5nKSB7XG4gICAgICAgICAgc3BhY2VyU3RhdGUgPSBbcGluU3BhY2luZyArIGRpcmVjdGlvbi5vczIsIGNoYW5nZSArIG90aGVyUGluT2Zmc2V0ICsgX3B4XTtcbiAgICAgICAgICBzcGFjZXJTdGF0ZS50ID0gc3BhY2VyO1xuICAgICAgICAgIGkgPSBwaW5TcGFjaW5nID09PSBfcGFkZGluZyA/IF9nZXRTaXplKHBpbiwgZGlyZWN0aW9uKSArIGNoYW5nZSArIG90aGVyUGluT2Zmc2V0IDogMDtcblxuICAgICAgICAgIGlmIChpKSB7XG4gICAgICAgICAgICBzcGFjZXJTdGF0ZS5wdXNoKGRpcmVjdGlvbi5kLCBpICsgX3B4KTsgLy8gZm9yIGJveC1zaXppbmc6IGJvcmRlci1ib3ggKG11c3QgaW5jbHVkZSBwYWRkaW5nKS5cblxuICAgICAgICAgICAgc3BhY2VyLnN0eWxlLmZsZXhCYXNpcyAhPT0gXCJhdXRvXCIgJiYgKHNwYWNlci5zdHlsZS5mbGV4QmFzaXMgPSBpICsgX3B4KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfc2V0U3RhdGUoc3BhY2VyU3RhdGUpO1xuXG4gICAgICAgICAgaWYgKHBpbm5lZENvbnRhaW5lcikge1xuICAgICAgICAgICAgLy8gaW4gU2Nyb2xsVHJpZ2dlci5yZWZyZXNoKCksIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgdGhlIHBpbkNvbnRhaW5lcidzIHNpemUgYmVjYXVzZSB0aGlzIHBpblNwYWNpbmcgbWF5IHN0cmV0Y2ggaXQgb3V0LCBidXQgd2UgY2FuJ3QganVzdCBhZGQgdGhlIGV4YWN0IGRpc3RhbmNlIGJlY2F1c2UgZGVwZW5kaW5nIG9uIGxheW91dCwgaXQgbWF5IG5vdCBwdXNoIHRoaW5ncyBkb3duIG9yIGl0IG1heSBvbmx5IGRvIHNvIHBhcnRpYWxseS5cbiAgICAgICAgICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIGlmICh0LnBpbiA9PT0gcGlubmVkQ29udGFpbmVyICYmIHQudmFycy5waW5TcGFjaW5nICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHQuX3N1YlBpbk9mZnNldCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHVzZUZpeGVkUG9zaXRpb24gJiYgc2Nyb2xsRnVuYyhwcmV2U2Nyb2xsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpID0gX2dldFNpemUocGluLCBkaXJlY3Rpb24pO1xuICAgICAgICAgIGkgJiYgc3BhY2VyLnN0eWxlLmZsZXhCYXNpcyAhPT0gXCJhdXRvXCIgJiYgKHNwYWNlci5zdHlsZS5mbGV4QmFzaXMgPSBpICsgX3B4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VGaXhlZFBvc2l0aW9uKSB7XG4gICAgICAgICAgb3ZlcnJpZGUgPSB7XG4gICAgICAgICAgICB0b3A6IGJvdW5kcy50b3AgKyAoaXNWZXJ0aWNhbCA/IHNjcm9sbCAtIHN0YXJ0IDogb3Bwb3NpdGVTY3JvbGwpICsgX3B4LFxuICAgICAgICAgICAgbGVmdDogYm91bmRzLmxlZnQgKyAoaXNWZXJ0aWNhbCA/IG9wcG9zaXRlU2Nyb2xsIDogc2Nyb2xsIC0gc3RhcnQpICsgX3B4LFxuICAgICAgICAgICAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgICAgICAgICAgIHBvc2l0aW9uOiBcImZpeGVkXCJcbiAgICAgICAgICB9O1xuICAgICAgICAgIG92ZXJyaWRlW193aWR0aF0gPSBvdmVycmlkZVtcIm1heFwiICsgX1dpZHRoXSA9IE1hdGguY2VpbChib3VuZHMud2lkdGgpICsgX3B4O1xuICAgICAgICAgIG92ZXJyaWRlW19oZWlnaHRdID0gb3ZlcnJpZGVbXCJtYXhcIiArIF9IZWlnaHRdID0gTWF0aC5jZWlsKGJvdW5kcy5oZWlnaHQpICsgX3B4O1xuICAgICAgICAgIG92ZXJyaWRlW19tYXJnaW5dID0gb3ZlcnJpZGVbX21hcmdpbiArIF9Ub3BdID0gb3ZlcnJpZGVbX21hcmdpbiArIF9SaWdodF0gPSBvdmVycmlkZVtfbWFyZ2luICsgX0JvdHRvbV0gPSBvdmVycmlkZVtfbWFyZ2luICsgX0xlZnRdID0gXCIwXCI7XG4gICAgICAgICAgb3ZlcnJpZGVbX3BhZGRpbmddID0gY3NbX3BhZGRpbmddO1xuICAgICAgICAgIG92ZXJyaWRlW19wYWRkaW5nICsgX1RvcF0gPSBjc1tfcGFkZGluZyArIF9Ub3BdO1xuICAgICAgICAgIG92ZXJyaWRlW19wYWRkaW5nICsgX1JpZ2h0XSA9IGNzW19wYWRkaW5nICsgX1JpZ2h0XTtcbiAgICAgICAgICBvdmVycmlkZVtfcGFkZGluZyArIF9Cb3R0b21dID0gY3NbX3BhZGRpbmcgKyBfQm90dG9tXTtcbiAgICAgICAgICBvdmVycmlkZVtfcGFkZGluZyArIF9MZWZ0XSA9IGNzW19wYWRkaW5nICsgX0xlZnRdO1xuICAgICAgICAgIHBpbkFjdGl2ZVN0YXRlID0gX2NvcHlTdGF0ZShwaW5PcmlnaW5hbFN0YXRlLCBvdmVycmlkZSwgcGluUmVwYXJlbnQpO1xuICAgICAgICAgIF9yZWZyZXNoaW5nQWxsICYmIHNjcm9sbEZ1bmMoMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYW5pbWF0aW9uKSB7XG4gICAgICAgICAgLy8gdGhlIGFuaW1hdGlvbiBtaWdodCBiZSBhZmZlY3RpbmcgdGhlIHRyYW5zZm9ybSwgc28gd2UgbXVzdCBqdW1wIHRvIHRoZSBlbmQsIGNoZWNrIHRoZSB2YWx1ZSwgYW5kIGNvbXBlbnNhdGUgYWNjb3JkaW5nbHkuIE90aGVyd2lzZSwgd2hlbiBpdCBiZWNvbWVzIHVucGlubmVkLCB0aGUgcGluU2V0dGVyKCkgd2lsbCBnZXQgc2V0IHRvIGEgdmFsdWUgdGhhdCBkb2Vzbid0IGluY2x1ZGUgd2hhdGV2ZXIgdGhlIGFuaW1hdGlvbiBkaWQuXG4gICAgICAgICAgaW5pdHRlZCA9IGFuaW1hdGlvbi5faW5pdHRlZDsgLy8gaWYgbm90LCB3ZSBtdXN0IGludmFsaWRhdGUoKSBhZnRlciB0aGlzIHN0ZXAsIG90aGVyd2lzZSBpdCBjb3VsZCBsb2NrIGluIHN0YXJ0aW5nIHZhbHVlcyBwcmVtYXR1cmVseS5cblxuICAgICAgICAgIF9zdXBwcmVzc092ZXJ3cml0ZXMoMSk7XG5cbiAgICAgICAgICBhbmltYXRpb24ucmVuZGVyKGFuaW1hdGlvbi5kdXJhdGlvbigpLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBwaW5DaGFuZ2UgPSBwaW5HZXR0ZXIoZGlyZWN0aW9uLmEpIC0gcGluU3RhcnQgKyBjaGFuZ2UgKyBvdGhlclBpbk9mZnNldDtcbiAgICAgICAgICBwaW5Nb3ZlcyA9IE1hdGguYWJzKGNoYW5nZSAtIHBpbkNoYW5nZSkgPiAxO1xuICAgICAgICAgIHVzZUZpeGVkUG9zaXRpb24gJiYgcGluTW92ZXMgJiYgcGluQWN0aXZlU3RhdGUuc3BsaWNlKHBpbkFjdGl2ZVN0YXRlLmxlbmd0aCAtIDIsIDIpOyAvLyB0cmFuc2Zvcm0gaXMgdGhlIGxhc3QgcHJvcGVydHkvdmFsdWUgc2V0IGluIHRoZSBzdGF0ZSBBcnJheS4gU2luY2UgdGhlIGFuaW1hdGlvbiBpcyBjb250cm9sbGluZyB0aGF0LCB3ZSBzaG91bGQgb21pdCBpdC5cblxuICAgICAgICAgIGFuaW1hdGlvbi5yZW5kZXIoMCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgaW5pdHRlZCB8fCBhbmltYXRpb24uaW52YWxpZGF0ZSh0cnVlKTtcbiAgICAgICAgICBhbmltYXRpb24ucGFyZW50IHx8IGFuaW1hdGlvbi50b3RhbFRpbWUoYW5pbWF0aW9uLnRvdGFsVGltZSgpKTsgLy8gaWYsIGZvciBleGFtcGxlLCBhIHRvZ2dsZUFjdGlvbiBjYWxsZWQgcGxheSgpIGFuZCB0aGVuIHJlZnJlc2goKSBoYXBwZW5zIGFuZCB3aGVuIHdlIHJlbmRlcigxKSBhYm92ZSwgaXQgd291bGQgY2F1c2UgdGhlIGFuaW1hdGlvbiB0byBjb21wbGV0ZSBhbmQgZ2V0IHJlbW92ZWQgZnJvbSBpdHMgcGFyZW50LCBzbyB0aGlzIG1ha2VzIHN1cmUgaXQgZ2V0cyBwdXQgYmFjayBpbi5cblxuICAgICAgICAgIF9zdXBwcmVzc092ZXJ3cml0ZXMoMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGluQ2hhbmdlID0gY2hhbmdlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yY2VkT3ZlcmZsb3cgJiYgKGZvcmNlZE92ZXJmbG93LnZhbHVlID8gZm9yY2VkT3ZlcmZsb3cuc3R5bGVbXCJvdmVyZmxvd1wiICsgZGlyZWN0aW9uLmEudG9VcHBlckNhc2UoKV0gPSBmb3JjZWRPdmVyZmxvdy52YWx1ZSA6IGZvcmNlZE92ZXJmbG93LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwib3ZlcmZsb3ctXCIgKyBkaXJlY3Rpb24uYSkpO1xuICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyICYmIHNjcm9sbEZ1bmMoKSAmJiAhY29udGFpbmVyQW5pbWF0aW9uKSB7XG4gICAgICAgIC8vIGl0IG1heSBiZSBJTlNJREUgYSBwaW5uZWQgZWxlbWVudCwgc28gd2FsayB1cCB0aGUgdHJlZSBhbmQgbG9vayBmb3IgYW55IGVsZW1lbnRzIHdpdGggX3Bpbk9mZnNldCB0byBjb21wZW5zYXRlIGJlY2F1c2UgYW55dGhpbmcgd2l0aCBwaW5TcGFjaW5nIHRoYXQncyBhbHJlYWR5IHNjcm9sbGVkIHdvdWxkIHRocm93IG9mZiB0aGUgbWVhc3VyZW1lbnRzIGluIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgIGJvdW5kcyA9IHRyaWdnZXIucGFyZW50Tm9kZTtcblxuICAgICAgICB3aGlsZSAoYm91bmRzICYmIGJvdW5kcyAhPT0gX2JvZHkpIHtcbiAgICAgICAgICBpZiAoYm91bmRzLl9waW5PZmZzZXQpIHtcbiAgICAgICAgICAgIHN0YXJ0IC09IGJvdW5kcy5fcGluT2Zmc2V0O1xuICAgICAgICAgICAgZW5kIC09IGJvdW5kcy5fcGluT2Zmc2V0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJvdW5kcyA9IGJvdW5kcy5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldmVydGVkUGlucyAmJiByZXZlcnRlZFBpbnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdC5yZXZlcnQoZmFsc2UsIHRydWUpO1xuICAgICAgfSk7XG4gICAgICBzZWxmLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICBzZWxmLmVuZCA9IGVuZDtcbiAgICAgIHNjcm9sbDEgPSBzY3JvbGwyID0gX3JlZnJlc2hpbmdBbGwgPyBwcmV2U2Nyb2xsIDogc2Nyb2xsRnVuYygpOyAvLyByZXNldCB2ZWxvY2l0eVxuXG4gICAgICBpZiAoIWNvbnRhaW5lckFuaW1hdGlvbiAmJiAhX3JlZnJlc2hpbmdBbGwpIHtcbiAgICAgICAgc2Nyb2xsMSA8IHByZXZTY3JvbGwgJiYgc2Nyb2xsRnVuYyhwcmV2U2Nyb2xsKTtcbiAgICAgICAgc2VsZi5zY3JvbGwucmVjID0gMDtcbiAgICAgIH1cblxuICAgICAgc2VsZi5yZXZlcnQoZmFsc2UsIHRydWUpO1xuICAgICAgbGFzdFJlZnJlc2ggPSBfZ2V0VGltZSgpO1xuXG4gICAgICBpZiAoc25hcERlbGF5ZWRDYWxsKSB7XG4gICAgICAgIGxhc3RTbmFwID0gLTE7IC8vIGp1c3Qgc28gc25hcHBpbmcgZ2V0cyByZS1lbmFibGVkLCBjbGVhciBvdXQgYW55IHJlY29yZGVkIGxhc3QgdmFsdWVcbiAgICAgICAgLy8gc2VsZi5pc0FjdGl2ZSAmJiBzY3JvbGxGdW5jKHN0YXJ0ICsgY2hhbmdlICogcHJldlByb2dyZXNzKTsgLy8gcHJldmlvdXNseSB0aGlzIGxpbmUgd2FzIGhlcmUgdG8gZW5zdXJlIHRoYXQgd2hlbiBzbmFwcGluZyBraWNrcyBpbiwgaXQncyBmcm9tIHRoZSBwcmV2aW91cyBwcm9ncmVzcyBidXQgaW4gc29tZSBjYXNlcyB0aGF0J3Mgbm90IGRlc2lyYWJsZSwgbGlrZSBhbiBhbGwtcGFnZSBTY3JvbGxUcmlnZ2VyIHdoZW4gbmV3IGNvbnRlbnQgZ2V0cyBhZGRlZCB0byB0aGUgcGFnZSwgdGhhdCdkIHRvdGFsbHkgY2hhbmdlIHRoZSBwcm9ncmVzcy5cblxuICAgICAgICBzbmFwRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgX3JlZnJlc2hpbmcgPSAwO1xuICAgICAgYW5pbWF0aW9uICYmIGlzVG9nZ2xlICYmIChhbmltYXRpb24uX2luaXR0ZWQgfHwgcHJldkFuaW1Qcm9ncmVzcykgJiYgYW5pbWF0aW9uLnByb2dyZXNzKCkgIT09IHByZXZBbmltUHJvZ3Jlc3MgJiYgYW5pbWF0aW9uLnByb2dyZXNzKHByZXZBbmltUHJvZ3Jlc3MgfHwgMCwgdHJ1ZSkucmVuZGVyKGFuaW1hdGlvbi50aW1lKCksIHRydWUsIHRydWUpOyAvLyBtdXN0IGZvcmNlIGEgcmUtcmVuZGVyIGJlY2F1c2UgaWYgc2F2ZVN0eWxlcygpIHdhcyB1c2VkIG9uIHRoZSB0YXJnZXQocyksIHRoZSBzdHlsZXMgY291bGQgaGF2ZSBiZWVuIHdpcGVkIG91dCBkdXJpbmcgdGhlIHJlZnJlc2goKS5cblxuICAgICAgaWYgKGlzRmlyc3RSZWZyZXNoIHx8IHByZXZQcm9ncmVzcyAhPT0gc2VsZi5wcm9ncmVzcyB8fCBjb250YWluZXJBbmltYXRpb24gfHwgaW52YWxpZGF0ZU9uUmVmcmVzaCkge1xuICAgICAgICAvLyBlbnN1cmVzIHRoYXQgdGhlIGRpcmVjdGlvbiBpcyBzZXQgcHJvcGVybHkgKHdoZW4gcmVmcmVzaGluZywgcHJvZ3Jlc3MgaXMgc2V0IGJhY2sgdG8gMCBpbml0aWFsbHksIHRoZW4gYmFjayBhZ2FpbiB0byB3aGVyZXZlciBpdCBuZWVkcyB0byBiZSkgYW5kIHRoYXQgY2FsbGJhY2tzIGFyZSB0cmlnZ2VyZWQuXG4gICAgICAgIGFuaW1hdGlvbiAmJiAhaXNUb2dnbGUgJiYgYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MoY29udGFpbmVyQW5pbWF0aW9uICYmIHN0YXJ0IDwgLTAuMDAxICYmICFwcmV2UHJvZ3Jlc3MgPyBnc2FwLnV0aWxzLm5vcm1hbGl6ZShzdGFydCwgZW5kLCAwKSA6IHByZXZQcm9ncmVzcywgdHJ1ZSk7IC8vIHRvIGF2b2lkIGlzc3VlcyB3aGVyZSBhbmltYXRpb24gY2FsbGJhY2tzIGxpa2Ugb25TdGFydCBhcmVuJ3QgdHJpZ2dlcmVkLlxuXG4gICAgICAgIHNlbGYucHJvZ3Jlc3MgPSBpc0ZpcnN0UmVmcmVzaCB8fCAoc2Nyb2xsMSAtIHN0YXJ0KSAvIGNoYW5nZSA9PT0gcHJldlByb2dyZXNzID8gMCA6IHByZXZQcm9ncmVzcztcbiAgICAgIH1cblxuICAgICAgcGluICYmIHBpblNwYWNpbmcgJiYgKHNwYWNlci5fcGluT2Zmc2V0ID0gTWF0aC5yb3VuZChzZWxmLnByb2dyZXNzICogcGluQ2hhbmdlKSk7XG4gICAgICBzY3J1YlR3ZWVuICYmIHNjcnViVHdlZW4uaW52YWxpZGF0ZSgpO1xuXG4gICAgICBpZiAoIWlzTmFOKG1hcmtlclN0YXJ0T2Zmc2V0KSkge1xuICAgICAgICAvLyBudW1iZXJzIHdlcmUgcGFzc2VkIGluIGZvciB0aGUgcG9zaXRpb24gd2hpY2ggYXJlIGFic29sdXRlLCBzbyBpbnN0ZWFkIG9mIGp1c3QgcHV0dGluZyB0aGUgbWFya2VycyBhdCB0aGUgdmVyeSBib3R0b20gb2YgdGhlIHZpZXdwb3J0LCB3ZSBmaWd1cmUgb3V0IGhvdyBmYXIgdGhleSBzaGlmdGVkIGRvd24gKGl0J3Mgc2FmZSB0byBhc3N1bWUgdGhleSB3ZXJlIG9yaWdpbmFsbHkgcG9zaXRpb25lZCBpbiBjbG9zZXIgcmVsYXRpb24gdG8gdGhlIHRyaWdnZXIgZWxlbWVudCB3aXRoIHZhbHVlcyBsaWtlIFwidG9wXCIsIFwiY2VudGVyXCIsIGEgcGVyY2VudGFnZSBvciB3aGF0ZXZlciwgc28gd2Ugb2Zmc2V0IHRoYXQgbXVjaCBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uIHRvIGJhc2ljYWxseSByZXZlcnQgdGhlbSB0byB0aGUgcmVsYXRpdmUgcG9zaXRpb24gdGh5IHdlcmUgYXQgcHJldmlvdXNseS5cbiAgICAgICAgbWFya2VyU3RhcnRPZmZzZXQgLT0gZ3NhcC5nZXRQcm9wZXJ0eShtYXJrZXJTdGFydFRyaWdnZXIsIGRpcmVjdGlvbi5wKTtcbiAgICAgICAgbWFya2VyRW5kT2Zmc2V0IC09IGdzYXAuZ2V0UHJvcGVydHkobWFya2VyRW5kVHJpZ2dlciwgZGlyZWN0aW9uLnApO1xuXG4gICAgICAgIF9zaGlmdE1hcmtlcihtYXJrZXJTdGFydFRyaWdnZXIsIGRpcmVjdGlvbiwgbWFya2VyU3RhcnRPZmZzZXQpO1xuXG4gICAgICAgIF9zaGlmdE1hcmtlcihtYXJrZXJTdGFydCwgZGlyZWN0aW9uLCBtYXJrZXJTdGFydE9mZnNldCAtIChwaW5PZmZzZXQgfHwgMCkpO1xuXG4gICAgICAgIF9zaGlmdE1hcmtlcihtYXJrZXJFbmRUcmlnZ2VyLCBkaXJlY3Rpb24sIG1hcmtlckVuZE9mZnNldCk7XG5cbiAgICAgICAgX3NoaWZ0TWFya2VyKG1hcmtlckVuZCwgZGlyZWN0aW9uLCBtYXJrZXJFbmRPZmZzZXQgLSAocGluT2Zmc2V0IHx8IDApKTtcbiAgICAgIH1cblxuICAgICAgaXNGaXJzdFJlZnJlc2ggJiYgIV9yZWZyZXNoaW5nQWxsICYmIHNlbGYudXBkYXRlKCk7IC8vIGVkZ2UgY2FzZSAtIHdoZW4geW91IHJlbG9hZCBhIHBhZ2Ugd2hlbiBpdCdzIGFscmVhZHkgc2Nyb2xsZWQgZG93biwgc29tZSBicm93c2VycyBmaXJlIGEgXCJzY3JvbGxcIiBldmVudCBiZWZvcmUgRE9NQ29udGVudExvYWRlZCwgdHJpZ2dlcmluZyBhbiB1cGRhdGVBbGwoKS4gSWYgd2UgZG9uJ3QgdXBkYXRlIHRoZSBzZWxmLnByb2dyZXNzIGFzIHBhcnQgb2YgcmVmcmVzaCgpLCB0aGVuIHdoZW4gaXQgaGFwcGVucyBuZXh0LCBpdCBtYXkgcmVjb3JkIHByZXZQcm9ncmVzcyBhcyAwIHdoZW4gaXQgcmVhbGx5IHNob3VsZG4ndCwgcG90ZW50aWFsbHkgY2F1c2luZyBhIGNhbGxiYWNrIGluIGFuIGFuaW1hdGlvbiB0byBmaXJlIGFnYWluLlxuXG4gICAgICBpZiAob25SZWZyZXNoICYmICFfcmVmcmVzaGluZ0FsbCAmJiAhZXhlY3V0aW5nT25SZWZyZXNoKSB7XG4gICAgICAgIC8vIHdoZW4gcmVmcmVzaGluZyBhbGwsIHdlIGRvIGV4dHJhIHdvcmsgdG8gY29ycmVjdCBwaW5uZWRDb250YWluZXIgc2l6ZXMgYW5kIGVuc3VyZSB0aGluZ3MgZG9uJ3QgZXhjZWVkIHRoZSBtYXhTY3JvbGwsIHNvIHdlIHNob3VsZCBkbyBhbGwgdGhlIHJlZnJlc2hlcyBhdCB0aGUgZW5kIGFmdGVyIGFsbCB0aGF0IHdvcmsgc28gdGhhdCB0aGUgc3RhcnQvZW5kIHZhbHVlcyBhcmUgY29ycmVjdGVkLlxuICAgICAgICBleGVjdXRpbmdPblJlZnJlc2ggPSB0cnVlO1xuICAgICAgICBvblJlZnJlc2goc2VsZik7XG4gICAgICAgIGV4ZWN1dGluZ09uUmVmcmVzaCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWxmLmdldFZlbG9jaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIChzY3JvbGxGdW5jKCkgLSBzY3JvbGwyKSAvIChfZ2V0VGltZSgpIC0gX3RpbWUyKSAqIDEwMDAgfHwgMDtcbiAgICB9O1xuXG4gICAgc2VsZi5lbmRBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfZW5kQW5pbWF0aW9uKHNlbGYuY2FsbGJhY2tBbmltYXRpb24pO1xuXG4gICAgICBpZiAoYW5pbWF0aW9uKSB7XG4gICAgICAgIHNjcnViVHdlZW4gPyBzY3J1YlR3ZWVuLnByb2dyZXNzKDEpIDogIWFuaW1hdGlvbi5wYXVzZWQoKSA/IF9lbmRBbmltYXRpb24oYW5pbWF0aW9uLCBhbmltYXRpb24ucmV2ZXJzZWQoKSkgOiBpc1RvZ2dsZSB8fCBfZW5kQW5pbWF0aW9uKGFuaW1hdGlvbiwgc2VsZi5kaXJlY3Rpb24gPCAwLCAxKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZi5sYWJlbFRvU2Nyb2xsID0gZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICByZXR1cm4gYW5pbWF0aW9uICYmIGFuaW1hdGlvbi5sYWJlbHMgJiYgKHN0YXJ0IHx8IHNlbGYucmVmcmVzaCgpIHx8IHN0YXJ0KSArIGFuaW1hdGlvbi5sYWJlbHNbbGFiZWxdIC8gYW5pbWF0aW9uLmR1cmF0aW9uKCkgKiBjaGFuZ2UgfHwgMDtcbiAgICB9O1xuXG4gICAgc2VsZi5nZXRUcmFpbGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgaSA9IF90cmlnZ2Vycy5pbmRleE9mKHNlbGYpLFxuICAgICAgICAgIGEgPSBzZWxmLmRpcmVjdGlvbiA+IDAgPyBfdHJpZ2dlcnMuc2xpY2UoMCwgaSkucmV2ZXJzZSgpIDogX3RyaWdnZXJzLnNsaWNlKGkgKyAxKTtcblxuICAgICAgcmV0dXJuIChfaXNTdHJpbmcobmFtZSkgPyBhLmZpbHRlcihmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdC52YXJzLnByZXZlbnRPdmVybGFwcyA9PT0gbmFtZTtcbiAgICAgIH0pIDogYSkuZmlsdGVyKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiBzZWxmLmRpcmVjdGlvbiA+IDAgPyB0LmVuZCA8PSBzdGFydCA6IHQuc3RhcnQgPj0gZW5kO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHNlbGYudXBkYXRlID0gZnVuY3Rpb24gKHJlc2V0LCByZWNvcmRWZWxvY2l0eSwgZm9yY2VGYWtlKSB7XG4gICAgICBpZiAoY29udGFpbmVyQW5pbWF0aW9uICYmICFmb3JjZUZha2UgJiYgIXJlc2V0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNjcm9sbCA9IF9yZWZyZXNoaW5nQWxsID09PSB0cnVlID8gcHJldlNjcm9sbCA6IHNlbGYuc2Nyb2xsKCksXG4gICAgICAgICAgcCA9IHJlc2V0ID8gMCA6IChzY3JvbGwgLSBzdGFydCkgLyBjaGFuZ2UsXG4gICAgICAgICAgY2xpcHBlZCA9IHAgPCAwID8gMCA6IHAgPiAxID8gMSA6IHAgfHwgMCxcbiAgICAgICAgICBwcmV2UHJvZ3Jlc3MgPSBzZWxmLnByb2dyZXNzLFxuICAgICAgICAgIGlzQWN0aXZlLFxuICAgICAgICAgIHdhc0FjdGl2ZSxcbiAgICAgICAgICB0b2dnbGVTdGF0ZSxcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgc3RhdGVDaGFuZ2VkLFxuICAgICAgICAgIHRvZ2dsZWQsXG4gICAgICAgICAgaXNBdE1heCxcbiAgICAgICAgICBpc1Rha2luZ0FjdGlvbjtcblxuICAgICAgaWYgKHJlY29yZFZlbG9jaXR5KSB7XG4gICAgICAgIHNjcm9sbDIgPSBzY3JvbGwxO1xuICAgICAgICBzY3JvbGwxID0gY29udGFpbmVyQW5pbWF0aW9uID8gc2Nyb2xsRnVuYygpIDogc2Nyb2xsO1xuXG4gICAgICAgIGlmIChzbmFwKSB7XG4gICAgICAgICAgc25hcDIgPSBzbmFwMTtcbiAgICAgICAgICBzbmFwMSA9IGFuaW1hdGlvbiAmJiAhaXNUb2dnbGUgPyBhbmltYXRpb24udG90YWxQcm9ncmVzcygpIDogY2xpcHBlZDtcbiAgICAgICAgfVxuICAgICAgfSAvLyBhbnRpY2lwYXRlIHRoZSBwaW5uaW5nIGEgZmV3IHRpY2tzIGFoZWFkIG9mIHRpbWUgYmFzZWQgb24gdmVsb2NpdHkgdG8gYXZvaWQgYSB2aXN1YWwgZ2xpdGNoIGR1ZSB0byB0aGUgZmFjdCB0aGF0IG1vc3QgYnJvd3NlcnMgZG8gc2Nyb2xsaW5nIG9uIGEgc2VwYXJhdGUgdGhyZWFkIChub3Qgc3luY2VkIHdpdGggcmVxdWVzdEFuaW1hdGlvbkZyYW1lKS5cblxuXG4gICAgICBpZiAoYW50aWNpcGF0ZVBpbiAmJiBwaW4gJiYgIV9yZWZyZXNoaW5nICYmICFfc3RhcnR1cCAmJiBfbGFzdFNjcm9sbFRpbWUpIHtcbiAgICAgICAgaWYgKCFjbGlwcGVkICYmIHN0YXJ0IDwgc2Nyb2xsICsgKHNjcm9sbCAtIHNjcm9sbDIpIC8gKF9nZXRUaW1lKCkgLSBfdGltZTIpICogYW50aWNpcGF0ZVBpbikge1xuICAgICAgICAgIGNsaXBwZWQgPSAwLjAwMDE7XG4gICAgICAgIH0gZWxzZSBpZiAoY2xpcHBlZCA9PT0gMSAmJiBlbmQgPiBzY3JvbGwgKyAoc2Nyb2xsIC0gc2Nyb2xsMikgLyAoX2dldFRpbWUoKSAtIF90aW1lMikgKiBhbnRpY2lwYXRlUGluKSB7XG4gICAgICAgICAgY2xpcHBlZCA9IDAuOTk5OTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY2xpcHBlZCAhPT0gcHJldlByb2dyZXNzICYmIHNlbGYuZW5hYmxlZCkge1xuICAgICAgICBpc0FjdGl2ZSA9IHNlbGYuaXNBY3RpdmUgPSAhIWNsaXBwZWQgJiYgY2xpcHBlZCA8IDE7XG4gICAgICAgIHdhc0FjdGl2ZSA9ICEhcHJldlByb2dyZXNzICYmIHByZXZQcm9ncmVzcyA8IDE7XG4gICAgICAgIHRvZ2dsZWQgPSBpc0FjdGl2ZSAhPT0gd2FzQWN0aXZlO1xuICAgICAgICBzdGF0ZUNoYW5nZWQgPSB0b2dnbGVkIHx8ICEhY2xpcHBlZCAhPT0gISFwcmV2UHJvZ3Jlc3M7IC8vIGNvdWxkIGdvIGZyb20gc3RhcnQgYWxsIHRoZSB3YXkgdG8gZW5kLCB0aHVzIGl0IGRpZG4ndCB0b2dnbGUgYnV0IGl0IGRpZCBjaGFuZ2Ugc3RhdGUgaW4gYSBzZW5zZSAobWF5IG5lZWQgdG8gZmlyZSBhIGNhbGxiYWNrKVxuXG4gICAgICAgIHNlbGYuZGlyZWN0aW9uID0gY2xpcHBlZCA+IHByZXZQcm9ncmVzcyA/IDEgOiAtMTtcbiAgICAgICAgc2VsZi5wcm9ncmVzcyA9IGNsaXBwZWQ7XG5cbiAgICAgICAgaWYgKHN0YXRlQ2hhbmdlZCAmJiAhX3JlZnJlc2hpbmcpIHtcbiAgICAgICAgICB0b2dnbGVTdGF0ZSA9IGNsaXBwZWQgJiYgIXByZXZQcm9ncmVzcyA/IDAgOiBjbGlwcGVkID09PSAxID8gMSA6IHByZXZQcm9ncmVzcyA9PT0gMSA/IDIgOiAzOyAvLyAwID0gZW50ZXIsIDEgPSBsZWF2ZSwgMiA9IGVudGVyQmFjaywgMyA9IGxlYXZlQmFjayAod2UgcHJpb3JpdGl6ZSB0aGUgRklSU1QgZW5jb3VudGVyLCB0aHVzIGlmIHlvdSBzY3JvbGwgcmVhbGx5IGZhc3QgcGFzdCB0aGUgb25FbnRlciBhbmQgb25MZWF2ZSBpbiBvbmUgdGljaywgaXQnZCBwcmlvcml0aXplIG9uRW50ZXIuXG5cbiAgICAgICAgICBpZiAoaXNUb2dnbGUpIHtcbiAgICAgICAgICAgIGFjdGlvbiA9ICF0b2dnbGVkICYmIHRvZ2dsZUFjdGlvbnNbdG9nZ2xlU3RhdGUgKyAxXSAhPT0gXCJub25lXCIgJiYgdG9nZ2xlQWN0aW9uc1t0b2dnbGVTdGF0ZSArIDFdIHx8IHRvZ2dsZUFjdGlvbnNbdG9nZ2xlU3RhdGVdOyAvLyBpZiBpdCBkaWRuJ3QgdG9nZ2xlLCB0aGF0IG1lYW5zIGl0IHNob3QgcmlnaHQgcGFzdCBhbmQgc2luY2Ugd2UgcHJpb3JpdGl6ZSB0aGUgXCJlbnRlclwiIGFjdGlvbiwgd2Ugc2hvdWxkIHN3aXRjaCB0byB0aGUgXCJsZWF2ZVwiIGluIHRoaXMgY2FzZSAoYnV0IG9ubHkgaWYgb25lIGlzIGRlZmluZWQpXG5cbiAgICAgICAgICAgIGlzVGFraW5nQWN0aW9uID0gYW5pbWF0aW9uICYmIChhY3Rpb24gPT09IFwiY29tcGxldGVcIiB8fCBhY3Rpb24gPT09IFwicmVzZXRcIiB8fCBhY3Rpb24gaW4gYW5pbWF0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2ZW50T3ZlcmxhcHMgJiYgKHRvZ2dsZWQgfHwgaXNUYWtpbmdBY3Rpb24pICYmIChpc1Rha2luZ0FjdGlvbiB8fCBzY3J1YiB8fCAhYW5pbWF0aW9uKSAmJiAoX2lzRnVuY3Rpb24ocHJldmVudE92ZXJsYXBzKSA/IHByZXZlbnRPdmVybGFwcyhzZWxmKSA6IHNlbGYuZ2V0VHJhaWxpbmcocHJldmVudE92ZXJsYXBzKS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQuZW5kQW5pbWF0aW9uKCk7XG4gICAgICAgIH0pKTtcblxuICAgICAgICBpZiAoIWlzVG9nZ2xlKSB7XG4gICAgICAgICAgaWYgKHNjcnViVHdlZW4gJiYgIV9yZWZyZXNoaW5nICYmICFfc3RhcnR1cCkge1xuICAgICAgICAgICAgc2NydWJUd2Vlbi5fZHAuX3RpbWUgLSBzY3J1YlR3ZWVuLl9zdGFydCAhPT0gc2NydWJUd2Vlbi5fdGltZSAmJiBzY3J1YlR3ZWVuLnJlbmRlcihzY3J1YlR3ZWVuLl9kcC5fdGltZSAtIHNjcnViVHdlZW4uX3N0YXJ0KTsgLy8gaWYgdGhlcmUncyBhIHNjcnViIG9uIGJvdGggdGhlIGNvbnRhaW5lciBhbmltYXRpb24gYW5kIHRoaXMgb25lIChvciBhIFNjcm9sbFNtb290aGVyKSwgdGhlIHVwZGF0ZSBvcmRlciB3b3VsZCBjYXVzZSB0aGlzIG9uZSBub3QgdG8gaGF2ZSByZW5kZXJlZCB5ZXQsIHNvIGl0IHdvdWxkbid0IG1ha2UgYW55IHByb2dyZXNzIGJlZm9yZSB3ZSAucmVzdGFydCgpIGl0IGhlYWRpbmcgdG93YXJkIHRoZSBuZXcgcHJvZ3Jlc3Mgc28gaXQnZCBhcHBlYXIgc3R1Y2sgdGh1cyB3ZSBmb3JjZSBhIHJlbmRlciBoZXJlLlxuXG4gICAgICAgICAgICBpZiAoc2NydWJUd2Vlbi5yZXNldFRvKSB7XG4gICAgICAgICAgICAgIHNjcnViVHdlZW4ucmVzZXRUbyhcInRvdGFsUHJvZ3Jlc3NcIiwgY2xpcHBlZCwgYW5pbWF0aW9uLl90VGltZSAvIGFuaW1hdGlvbi5fdER1cik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBsZWdhY3kgc3VwcG9ydCAoY291cnRlc3kpLCBiZWZvcmUgMy4xMC4wXG4gICAgICAgICAgICAgIHNjcnViVHdlZW4udmFycy50b3RhbFByb2dyZXNzID0gY2xpcHBlZDtcbiAgICAgICAgICAgICAgc2NydWJUd2Vlbi5pbnZhbGlkYXRlKCkucmVzdGFydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICBhbmltYXRpb24udG90YWxQcm9ncmVzcyhjbGlwcGVkLCAhIShfcmVmcmVzaGluZyAmJiAobGFzdFJlZnJlc2ggfHwgcmVzZXQpKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBpbikge1xuICAgICAgICAgIHJlc2V0ICYmIHBpblNwYWNpbmcgJiYgKHNwYWNlci5zdHlsZVtwaW5TcGFjaW5nICsgZGlyZWN0aW9uLm9zMl0gPSBzcGFjaW5nU3RhcnQpO1xuXG4gICAgICAgICAgaWYgKCF1c2VGaXhlZFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBwaW5TZXR0ZXIoX3JvdW5kKHBpblN0YXJ0ICsgcGluQ2hhbmdlICogY2xpcHBlZCkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGVDaGFuZ2VkKSB7XG4gICAgICAgICAgICBpc0F0TWF4ID0gIXJlc2V0ICYmIGNsaXBwZWQgPiBwcmV2UHJvZ3Jlc3MgJiYgZW5kICsgMSA+IHNjcm9sbCAmJiBzY3JvbGwgKyAxID49IF9tYXhTY3JvbGwoc2Nyb2xsZXIsIGRpcmVjdGlvbik7IC8vIGlmIGl0J3MgYXQgdGhlIFZFUlkgZW5kIG9mIHRoZSBwYWdlLCBkb24ndCBzd2l0Y2ggYXdheSBmcm9tIHBvc2l0aW9uOiBmaXhlZCBiZWNhdXNlIGl0J3MgcG9pbnRsZXNzIGFuZCBpdCBjb3VsZCBjYXVzZSBhIGJyaWVmIGZsYXNoIHdoZW4gdGhlIHVzZXIgc2Nyb2xscyBiYWNrIHVwICh3aGVuIGl0IGdldHMgcGlubmVkIGFnYWluKVxuXG4gICAgICAgICAgICBpZiAocGluUmVwYXJlbnQpIHtcbiAgICAgICAgICAgICAgaWYgKCFyZXNldCAmJiAoaXNBY3RpdmUgfHwgaXNBdE1heCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgYm91bmRzID0gX2dldEJvdW5kcyhwaW4sIHRydWUpLFxuICAgICAgICAgICAgICAgICAgICBfb2Zmc2V0ID0gc2Nyb2xsIC0gc3RhcnQ7XG5cbiAgICAgICAgICAgICAgICBfcmVwYXJlbnQocGluLCBfYm9keSwgYm91bmRzLnRvcCArIChkaXJlY3Rpb24gPT09IF92ZXJ0aWNhbCA/IF9vZmZzZXQgOiAwKSArIF9weCwgYm91bmRzLmxlZnQgKyAoZGlyZWN0aW9uID09PSBfdmVydGljYWwgPyAwIDogX29mZnNldCkgKyBfcHgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF9yZXBhcmVudChwaW4sIHNwYWNlcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3NldFN0YXRlKGlzQWN0aXZlIHx8IGlzQXRNYXggPyBwaW5BY3RpdmVTdGF0ZSA6IHBpblN0YXRlKTtcblxuICAgICAgICAgICAgcGluTW92ZXMgJiYgY2xpcHBlZCA8IDEgJiYgaXNBY3RpdmUgfHwgcGluU2V0dGVyKHBpblN0YXJ0ICsgKGNsaXBwZWQgPT09IDEgJiYgIWlzQXRNYXggPyBwaW5DaGFuZ2UgOiAwKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc25hcCAmJiAhdHdlZW5Uby50d2VlbiAmJiAhX3JlZnJlc2hpbmcgJiYgIV9zdGFydHVwICYmIHNuYXBEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgICB0b2dnbGVDbGFzcyAmJiAodG9nZ2xlZCB8fCBvbmNlICYmIGNsaXBwZWQgJiYgKGNsaXBwZWQgPCAxIHx8ICFfbGltaXRDYWxsYmFja3MpKSAmJiBfdG9BcnJheSh0b2dnbGVDbGFzcy50YXJnZXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgIHJldHVybiBlbC5jbGFzc0xpc3RbaXNBY3RpdmUgfHwgb25jZSA/IFwiYWRkXCIgOiBcInJlbW92ZVwiXSh0b2dnbGVDbGFzcy5jbGFzc05hbWUpO1xuICAgICAgICB9KTsgLy8gY2xhc3NlcyBjb3VsZCBhZmZlY3QgcG9zaXRpb25pbmcsIHNvIGRvIGl0IGV2ZW4gaWYgcmVzZXQgb3IgcmVmcmVzaGluZyBpcyB0cnVlLlxuXG4gICAgICAgIG9uVXBkYXRlICYmICFpc1RvZ2dsZSAmJiAhcmVzZXQgJiYgb25VcGRhdGUoc2VsZik7XG5cbiAgICAgICAgaWYgKHN0YXRlQ2hhbmdlZCAmJiAhX3JlZnJlc2hpbmcpIHtcbiAgICAgICAgICBpZiAoaXNUb2dnbGUpIHtcbiAgICAgICAgICAgIGlmIChpc1Rha2luZ0FjdGlvbikge1xuICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb24ucGF1c2UoKS50b3RhbFByb2dyZXNzKDEpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gXCJyZXNldFwiKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLnJlc3RhcnQodHJ1ZSkucGF1c2UoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IFwicmVzdGFydFwiKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLnJlc3RhcnQodHJ1ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uW2FjdGlvbl0oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvblVwZGF0ZSAmJiBvblVwZGF0ZShzZWxmKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodG9nZ2xlZCB8fCAhX2xpbWl0Q2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAvLyBvbiBzdGFydHVwLCB0aGUgcGFnZSBjb3VsZCBiZSBzY3JvbGxlZCBhbmQgd2UgZG9uJ3Qgd2FudCB0byBmaXJlIGNhbGxiYWNrcyB0aGF0IGRpZG4ndCB0b2dnbGUuIEZvciBleGFtcGxlIG9uRW50ZXIgc2hvdWxkbid0IGZpcmUgaWYgdGhlIFNjcm9sbFRyaWdnZXIgaXNuJ3QgYWN0dWFsbHkgZW50ZXJlZC5cbiAgICAgICAgICAgIG9uVG9nZ2xlICYmIHRvZ2dsZWQgJiYgX2NhbGxiYWNrKHNlbGYsIG9uVG9nZ2xlKTtcbiAgICAgICAgICAgIGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0gJiYgX2NhbGxiYWNrKHNlbGYsIGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0pO1xuICAgICAgICAgICAgb25jZSAmJiAoY2xpcHBlZCA9PT0gMSA/IHNlbGYua2lsbChmYWxzZSwgMSkgOiBjYWxsYmFja3NbdG9nZ2xlU3RhdGVdID0gMCk7IC8vIGEgY2FsbGJhY2sgc2hvdWxkbid0IGJlIGNhbGxlZCBhZ2FpbiBpZiBvbmNlIGlzIHRydWUuXG5cbiAgICAgICAgICAgIGlmICghdG9nZ2xlZCkge1xuICAgICAgICAgICAgICAvLyBpdCdzIHBvc3NpYmxlIHRvIGdvIGNvbXBsZXRlbHkgcGFzdCwgbGlrZSBmcm9tIGJlZm9yZSB0aGUgc3RhcnQgdG8gYWZ0ZXIgdGhlIGVuZCAob3IgdmljZS12ZXJzYSkgaW4gd2hpY2ggY2FzZSBCT1RIIGNhbGxiYWNrcyBzaG91bGQgYmUgZmlyZWQgaW4gdGhhdCBvcmRlclxuICAgICAgICAgICAgICB0b2dnbGVTdGF0ZSA9IGNsaXBwZWQgPT09IDEgPyAxIDogMztcbiAgICAgICAgICAgICAgY2FsbGJhY2tzW3RvZ2dsZVN0YXRlXSAmJiBfY2FsbGJhY2soc2VsZiwgY2FsbGJhY2tzW3RvZ2dsZVN0YXRlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGZhc3RTY3JvbGxFbmQgJiYgIWlzQWN0aXZlICYmIE1hdGguYWJzKHNlbGYuZ2V0VmVsb2NpdHkoKSkgPiAoX2lzTnVtYmVyKGZhc3RTY3JvbGxFbmQpID8gZmFzdFNjcm9sbEVuZCA6IDI1MDApKSB7XG4gICAgICAgICAgICBfZW5kQW5pbWF0aW9uKHNlbGYuY2FsbGJhY2tBbmltYXRpb24pO1xuXG4gICAgICAgICAgICBzY3J1YlR3ZWVuID8gc2NydWJUd2Vlbi5wcm9ncmVzcygxKSA6IF9lbmRBbmltYXRpb24oYW5pbWF0aW9uLCBhY3Rpb24gPT09IFwicmV2ZXJzZVwiID8gMSA6ICFjbGlwcGVkLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaXNUb2dnbGUgJiYgb25VcGRhdGUgJiYgIV9yZWZyZXNoaW5nKSB7XG4gICAgICAgICAgb25VcGRhdGUoc2VsZik7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gdXBkYXRlIGFic29sdXRlbHktcG9zaXRpb25lZCBtYXJrZXJzIChvbmx5IGlmIHRoZSBzY3JvbGxlciBpc24ndCB0aGUgdmlld3BvcnQpXG5cblxuICAgICAgaWYgKG1hcmtlckVuZFNldHRlcikge1xuICAgICAgICB2YXIgbiA9IGNvbnRhaW5lckFuaW1hdGlvbiA/IHNjcm9sbCAvIGNvbnRhaW5lckFuaW1hdGlvbi5kdXJhdGlvbigpICogKGNvbnRhaW5lckFuaW1hdGlvbi5fY2FTY3JvbGxEaXN0IHx8IDApIDogc2Nyb2xsO1xuICAgICAgICBtYXJrZXJTdGFydFNldHRlcihuICsgKG1hcmtlclN0YXJ0VHJpZ2dlci5faXNGbGlwcGVkID8gMSA6IDApKTtcbiAgICAgICAgbWFya2VyRW5kU2V0dGVyKG4pO1xuICAgICAgfVxuXG4gICAgICBjYU1hcmtlclNldHRlciAmJiBjYU1hcmtlclNldHRlcigtc2Nyb2xsIC8gY29udGFpbmVyQW5pbWF0aW9uLmR1cmF0aW9uKCkgKiAoY29udGFpbmVyQW5pbWF0aW9uLl9jYVNjcm9sbERpc3QgfHwgMCkpO1xuICAgIH07XG5cbiAgICBzZWxmLmVuYWJsZSA9IGZ1bmN0aW9uIChyZXNldCwgcmVmcmVzaCkge1xuICAgICAgaWYgKCFzZWxmLmVuYWJsZWQpIHtcbiAgICAgICAgc2VsZi5lbmFibGVkID0gdHJ1ZTtcblxuICAgICAgICBfYWRkTGlzdGVuZXIoc2Nyb2xsZXIsIFwicmVzaXplXCIsIF9vblJlc2l6ZSk7XG5cbiAgICAgICAgaXNWaWV3cG9ydCB8fCBfYWRkTGlzdGVuZXIoc2Nyb2xsZXIsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCk7XG4gICAgICAgIG9uUmVmcmVzaEluaXQgJiYgX2FkZExpc3RlbmVyKFNjcm9sbFRyaWdnZXIsIFwicmVmcmVzaEluaXRcIiwgb25SZWZyZXNoSW5pdCk7XG5cbiAgICAgICAgaWYgKHJlc2V0ICE9PSBmYWxzZSkge1xuICAgICAgICAgIHNlbGYucHJvZ3Jlc3MgPSBwcmV2UHJvZ3Jlc3MgPSAwO1xuICAgICAgICAgIHNjcm9sbDEgPSBzY3JvbGwyID0gbGFzdFNuYXAgPSBzY3JvbGxGdW5jKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZWZyZXNoICE9PSBmYWxzZSAmJiBzZWxmLnJlZnJlc2goKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZi5nZXRUd2VlbiA9IGZ1bmN0aW9uIChzbmFwKSB7XG4gICAgICByZXR1cm4gc25hcCAmJiB0d2VlblRvID8gdHdlZW5Uby50d2VlbiA6IHNjcnViVHdlZW47XG4gICAgfTtcblxuICAgIHNlbGYuc2V0UG9zaXRpb25zID0gZnVuY3Rpb24gKG5ld1N0YXJ0LCBuZXdFbmQsIGtlZXBDbGFtcCwgcGluT2Zmc2V0KSB7XG4gICAgICAvLyBkb2Vzbid0IHBlcnNpc3QgYWZ0ZXIgcmVmcmVzaCgpISBJbnRlbmRlZCB0byBiZSBhIHdheSB0byBvdmVycmlkZSB2YWx1ZXMgdGhhdCB3ZXJlIHNldCBkdXJpbmcgcmVmcmVzaCgpLCBsaWtlIHlvdSBjb3VsZCBzZXQgaXQgaW4gb25SZWZyZXNoKClcbiAgICAgIGlmIChjb250YWluZXJBbmltYXRpb24pIHtcbiAgICAgICAgLy8gY29udmVydCByYXRpb3MgaW50byBzY3JvbGwgcG9zaXRpb25zLiBSZW1lbWJlciwgc3RhcnQvZW5kIHZhbHVlcyBvbiBTY3JvbGxUcmlnZ2VycyB0aGF0IGhhdmUgYSBjb250YWluZXJBbmltYXRpb24gcmVmZXIgdG8gdGhlIHRpbWUgKGluIHNlY29uZHMpLCBOT1Qgc2Nyb2xsIHBvc2l0aW9ucy5cbiAgICAgICAgdmFyIHN0ID0gY29udGFpbmVyQW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIsXG4gICAgICAgICAgICBkdXJhdGlvbiA9IGNvbnRhaW5lckFuaW1hdGlvbi5kdXJhdGlvbigpLFxuICAgICAgICAgICAgX2NoYW5nZSA9IHN0LmVuZCAtIHN0LnN0YXJ0O1xuXG4gICAgICAgIG5ld1N0YXJ0ID0gc3Quc3RhcnQgKyBfY2hhbmdlICogbmV3U3RhcnQgLyBkdXJhdGlvbjtcbiAgICAgICAgbmV3RW5kID0gc3Quc3RhcnQgKyBfY2hhbmdlICogbmV3RW5kIC8gZHVyYXRpb247XG4gICAgICB9XG5cbiAgICAgIHNlbGYucmVmcmVzaChmYWxzZSwgZmFsc2UsIHtcbiAgICAgICAgc3RhcnQ6IF9rZWVwQ2xhbXAobmV3U3RhcnQsIGtlZXBDbGFtcCAmJiAhIXNlbGYuX3N0YXJ0Q2xhbXApLFxuICAgICAgICBlbmQ6IF9rZWVwQ2xhbXAobmV3RW5kLCBrZWVwQ2xhbXAgJiYgISFzZWxmLl9lbmRDbGFtcClcbiAgICAgIH0sIHBpbk9mZnNldCk7XG4gICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgIH07XG5cbiAgICBzZWxmLmFkanVzdFBpblNwYWNpbmcgPSBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICBpZiAoc3BhY2VyU3RhdGUgJiYgYW1vdW50KSB7XG4gICAgICAgIHZhciBpID0gc3BhY2VyU3RhdGUuaW5kZXhPZihkaXJlY3Rpb24uZCkgKyAxO1xuICAgICAgICBzcGFjZXJTdGF0ZVtpXSA9IHBhcnNlRmxvYXQoc3BhY2VyU3RhdGVbaV0pICsgYW1vdW50ICsgX3B4O1xuICAgICAgICBzcGFjZXJTdGF0ZVsxXSA9IHBhcnNlRmxvYXQoc3BhY2VyU3RhdGVbMV0pICsgYW1vdW50ICsgX3B4O1xuXG4gICAgICAgIF9zZXRTdGF0ZShzcGFjZXJTdGF0ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYuZGlzYWJsZSA9IGZ1bmN0aW9uIChyZXNldCwgYWxsb3dBbmltYXRpb24pIHtcbiAgICAgIGlmIChzZWxmLmVuYWJsZWQpIHtcbiAgICAgICAgcmVzZXQgIT09IGZhbHNlICYmIHNlbGYucmV2ZXJ0KHRydWUsIHRydWUpO1xuICAgICAgICBzZWxmLmVuYWJsZWQgPSBzZWxmLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIGFsbG93QW5pbWF0aW9uIHx8IHNjcnViVHdlZW4gJiYgc2NydWJUd2Vlbi5wYXVzZSgpO1xuICAgICAgICBwcmV2U2Nyb2xsID0gMDtcbiAgICAgICAgcGluQ2FjaGUgJiYgKHBpbkNhY2hlLnVuY2FjaGUgPSAxKTtcbiAgICAgICAgb25SZWZyZXNoSW5pdCAmJiBfcmVtb3ZlTGlzdGVuZXIoU2Nyb2xsVHJpZ2dlciwgXCJyZWZyZXNoSW5pdFwiLCBvblJlZnJlc2hJbml0KTtcblxuICAgICAgICBpZiAoc25hcERlbGF5ZWRDYWxsKSB7XG4gICAgICAgICAgc25hcERlbGF5ZWRDYWxsLnBhdXNlKCk7XG4gICAgICAgICAgdHdlZW5Uby50d2VlbiAmJiB0d2VlblRvLnR3ZWVuLmtpbGwoKSAmJiAodHdlZW5Uby50d2VlbiA9IDApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc1ZpZXdwb3J0KSB7XG4gICAgICAgICAgdmFyIGkgPSBfdHJpZ2dlcnMubGVuZ3RoO1xuXG4gICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgaWYgKF90cmlnZ2Vyc1tpXS5zY3JvbGxlciA9PT0gc2Nyb2xsZXIgJiYgX3RyaWdnZXJzW2ldICE9PSBzZWxmKSB7XG4gICAgICAgICAgICAgIHJldHVybjsgLy9kb24ndCByZW1vdmUgdGhlIGxpc3RlbmVycyBpZiB0aGVyZSBhcmUgc3RpbGwgb3RoZXIgdHJpZ2dlcnMgcmVmZXJlbmNpbmcgaXQuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHNjcm9sbGVyLCBcInJlc2l6ZVwiLCBfb25SZXNpemUpO1xuXG4gICAgICAgICAgaXNWaWV3cG9ydCB8fCBfcmVtb3ZlTGlzdGVuZXIoc2Nyb2xsZXIsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZi5raWxsID0gZnVuY3Rpb24gKHJldmVydCwgYWxsb3dBbmltYXRpb24pIHtcbiAgICAgIHNlbGYuZGlzYWJsZShyZXZlcnQsIGFsbG93QW5pbWF0aW9uKTtcbiAgICAgIHNjcnViVHdlZW4gJiYgIWFsbG93QW5pbWF0aW9uICYmIHNjcnViVHdlZW4ua2lsbCgpO1xuICAgICAgaWQgJiYgZGVsZXRlIF9pZHNbaWRdO1xuXG4gICAgICB2YXIgaSA9IF90cmlnZ2Vycy5pbmRleE9mKHNlbGYpO1xuXG4gICAgICBpID49IDAgJiYgX3RyaWdnZXJzLnNwbGljZShpLCAxKTtcbiAgICAgIGkgPT09IF9pICYmIF9kaXJlY3Rpb24gPiAwICYmIF9pLS07IC8vIGlmIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYSByZWZyZXNoKCkgb3IgdXBkYXRlKCksIHNwbGljaW5nIHdvdWxkIGNhdXNlIHNraXBzIGluIHRoZSBpbmRleCwgc28gYWRqdXN0Li4uXG4gICAgICAvLyBpZiBubyBvdGhlciBTY3JvbGxUcmlnZ2VyIGluc3RhbmNlcyBvZiB0aGUgc2FtZSBzY3JvbGxlciBhcmUgZm91bmQsIHdpcGUgb3V0IGFueSByZWNvcmRlZCBzY3JvbGwgcG9zaXRpb24uIE90aGVyd2lzZSwgaW4gYSBzaW5nbGUgcGFnZSBhcHBsaWNhdGlvbiwgZm9yIGV4YW1wbGUsIGl0IGNvdWxkIG1haW50YWluIHNjcm9sbCBwb3NpdGlvbiB3aGVuIGl0IHJlYWxseSBzaG91bGRuJ3QuXG5cbiAgICAgIGkgPSAwO1xuXG4gICAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdC5zY3JvbGxlciA9PT0gc2VsZi5zY3JvbGxlciAmJiAoaSA9IDEpO1xuICAgICAgfSk7XG5cbiAgICAgIGkgfHwgX3JlZnJlc2hpbmdBbGwgfHwgKHNlbGYuc2Nyb2xsLnJlYyA9IDApO1xuXG4gICAgICBpZiAoYW5pbWF0aW9uKSB7XG4gICAgICAgIGFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyID0gbnVsbDtcbiAgICAgICAgcmV2ZXJ0ICYmIGFuaW1hdGlvbi5yZXZlcnQoe1xuICAgICAgICAgIGtpbGw6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBhbGxvd0FuaW1hdGlvbiB8fCBhbmltYXRpb24ua2lsbCgpO1xuICAgICAgfVxuXG4gICAgICBtYXJrZXJTdGFydCAmJiBbbWFya2VyU3RhcnQsIG1hcmtlckVuZCwgbWFya2VyU3RhcnRUcmlnZ2VyLCBtYXJrZXJFbmRUcmlnZ2VyXS5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIHJldHVybiBtLnBhcmVudE5vZGUgJiYgbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG0pO1xuICAgICAgfSk7XG4gICAgICBfcHJpbWFyeSA9PT0gc2VsZiAmJiAoX3ByaW1hcnkgPSAwKTtcblxuICAgICAgaWYgKHBpbikge1xuICAgICAgICBwaW5DYWNoZSAmJiAocGluQ2FjaGUudW5jYWNoZSA9IDEpO1xuICAgICAgICBpID0gMDtcblxuICAgICAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0LnBpbiA9PT0gcGluICYmIGkrKztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaSB8fCAocGluQ2FjaGUuc3BhY2VyID0gMCk7IC8vIGlmIHRoZXJlIGFyZW4ndCBhbnkgbW9yZSBTY3JvbGxUcmlnZ2VycyB3aXRoIHRoZSBzYW1lIHBpbiwgcmVtb3ZlIHRoZSBzcGFjZXIsIG90aGVyd2lzZSBpdCBjb3VsZCBiZSBjb250YW1pbmF0ZWQgd2l0aCBvbGQvc3RhbGUgdmFsdWVzIGlmIHRoZSB1c2VyIHJlLWNyZWF0ZXMgYSBTY3JvbGxUcmlnZ2VyIGZvciB0aGUgc2FtZSBlbGVtZW50LlxuICAgICAgfVxuXG4gICAgICB2YXJzLm9uS2lsbCAmJiB2YXJzLm9uS2lsbChzZWxmKTtcbiAgICB9O1xuXG4gICAgX3RyaWdnZXJzLnB1c2goc2VsZik7XG5cbiAgICBzZWxmLmVuYWJsZShmYWxzZSwgZmFsc2UpO1xuICAgIGN1c3RvbVJldmVydFJldHVybiAmJiBjdXN0b21SZXZlcnRSZXR1cm4oc2VsZik7XG5cbiAgICBpZiAoYW5pbWF0aW9uICYmIGFuaW1hdGlvbi5hZGQgJiYgIWNoYW5nZSkge1xuICAgICAgLy8gaWYgdGhlIGFuaW1hdGlvbiBpcyBhIHRpbWVsaW5lLCBpdCBtYXkgbm90IGhhdmUgYmVlbiBwb3B1bGF0ZWQgeWV0LCBzbyBpdCB3b3VsZG4ndCByZW5kZXIgYXQgdGhlIHByb3BlciBwbGFjZSBvbiB0aGUgZmlyc3QgcmVmcmVzaCgpLCB0aHVzIHdlIHNob3VsZCBzY2hlZHVsZSBvbmUgZm9yIHRoZSBuZXh0IHRpY2suIElmIFwiY2hhbmdlXCIgaXMgZGVmaW5lZCwgd2Uga25vdyBpdCBtdXN0IGJlIHJlLWVuYWJsaW5nLCB0aHVzIHdlIGNhbiByZWZyZXNoKCkgcmlnaHQgYXdheS5cbiAgICAgIHZhciB1cGRhdGVGdW5jID0gc2VsZi51cGRhdGU7IC8vIHNvbWUgYnJvd3NlcnMgbWF5IGZpcmUgYSBzY3JvbGwgZXZlbnQgQkVGT1JFIGEgdGljayBlbGFwc2VzIGFuZC9vciB0aGUgRE9NQ29udGVudExvYWRlZCBmaXJlcy4gU28gdGhlcmUncyBhIGNoYW5jZSB1cGRhdGUoKSB3aWxsIGJlIGNhbGxlZCBCRUZPUkUgYSByZWZyZXNoKCkgaGFzIGhhcHBlbmVkIG9uIGEgVGltZWxpbmUtYXR0YWNoZWQgU2Nyb2xsVHJpZ2dlciB3aGljaCBtZWFucyB0aGUgc3RhcnQvZW5kIHdvbid0IGJlIGNhbGN1bGF0ZWQgeWV0LiBXZSBkb24ndCB3YW50IHRvIGFkZCBjb25kaXRpb25hbCBsb2dpYyBpbnNpZGUgdGhlIHVwZGF0ZSgpIG1ldGhvZCAobGlrZSBjaGVjayB0byBzZWUgaWYgZW5kIGlzIGRlZmluZWQgYW5kIGlmIG5vdCwgZm9yY2UgYSByZWZyZXNoKCkpIGJlY2F1c2UgdGhhdCdzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIGhpdCBhIExPVCAocGVyZm9ybWFuY2UpLiBTbyB3ZSBzd2FwIG91dCB0aGUgcmVhbCB1cGRhdGUoKSBtZXRob2QgZm9yIHRoaXMgb25lIHRoYXQnbGwgcmUtYXR0YWNoIGl0IHRoZSBmaXJzdCB0aW1lIGl0IGdldHMgY2FsbGVkIGFuZCBvZiBjb3Vyc2UgZm9yY2VzIGEgcmVmcmVzaCgpLlxuXG4gICAgICBzZWxmLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi51cGRhdGUgPSB1cGRhdGVGdW5jO1xuICAgICAgICBzdGFydCB8fCBlbmQgfHwgc2VsZi5yZWZyZXNoKCk7XG4gICAgICB9O1xuXG4gICAgICBnc2FwLmRlbGF5ZWRDYWxsKDAuMDEsIHNlbGYudXBkYXRlKTtcbiAgICAgIGNoYW5nZSA9IDAuMDE7XG4gICAgICBzdGFydCA9IGVuZCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYucmVmcmVzaCgpO1xuICAgIH1cblxuICAgIHBpbiAmJiBfcXVldWVSZWZyZXNoQWxsKCk7IC8vIHBpbm5pbmcgY291bGQgYWZmZWN0IHRoZSBwb3NpdGlvbnMgb2Ygb3RoZXIgdGhpbmdzLCBzbyBtYWtlIHN1cmUgd2UgcXVldWUgYSBmdWxsIHJlZnJlc2goKVxuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3Rlcihjb3JlKSB7XG4gICAgaWYgKCFfY29yZUluaXR0ZWQpIHtcbiAgICAgIGdzYXAgPSBjb3JlIHx8IF9nZXRHU0FQKCk7XG4gICAgICBfd2luZG93RXhpc3RzKCkgJiYgd2luZG93LmRvY3VtZW50ICYmIFNjcm9sbFRyaWdnZXIuZW5hYmxlKCk7XG4gICAgICBfY29yZUluaXR0ZWQgPSBfZW5hYmxlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gX2NvcmVJbml0dGVkO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIuZGVmYXVsdHMgPSBmdW5jdGlvbiBkZWZhdWx0cyhjb25maWcpIHtcbiAgICBpZiAoY29uZmlnKSB7XG4gICAgICBmb3IgKHZhciBwIGluIGNvbmZpZykge1xuICAgICAgICBfZGVmYXVsdHNbcF0gPSBjb25maWdbcF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF9kZWZhdWx0cztcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLmRpc2FibGUgPSBmdW5jdGlvbiBkaXNhYmxlKHJlc2V0LCBraWxsKSB7XG4gICAgX2VuYWJsZWQgPSAwO1xuXG4gICAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXIpIHtcbiAgICAgIHJldHVybiB0cmlnZ2VyW2tpbGwgPyBcImtpbGxcIiA6IFwiZGlzYWJsZVwiXShyZXNldCk7XG4gICAgfSk7XG5cbiAgICBfcmVtb3ZlTGlzdGVuZXIoX3dpbiwgXCJ3aGVlbFwiLCBfb25TY3JvbGwpO1xuXG4gICAgX3JlbW92ZUxpc3RlbmVyKF9kb2MsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCk7XG5cbiAgICBjbGVhckludGVydmFsKF9zeW5jSW50ZXJ2YWwpO1xuXG4gICAgX3JlbW92ZUxpc3RlbmVyKF9kb2MsIFwidG91Y2hjYW5jZWxcIiwgX3Bhc3NUaHJvdWdoKTtcblxuICAgIF9yZW1vdmVMaXN0ZW5lcihfYm9keSwgXCJ0b3VjaHN0YXJ0XCIsIF9wYXNzVGhyb3VnaCk7XG5cbiAgICBfbXVsdGlMaXN0ZW5lcihfcmVtb3ZlTGlzdGVuZXIsIF9kb2MsIFwicG9pbnRlcmRvd24sdG91Y2hzdGFydCxtb3VzZWRvd25cIiwgX3BvaW50ZXJEb3duSGFuZGxlcik7XG5cbiAgICBfbXVsdGlMaXN0ZW5lcihfcmVtb3ZlTGlzdGVuZXIsIF9kb2MsIFwicG9pbnRlcnVwLHRvdWNoZW5kLG1vdXNldXBcIiwgX3BvaW50ZXJVcEhhbmRsZXIpO1xuXG4gICAgX3Jlc2l6ZURlbGF5LmtpbGwoKTtcblxuICAgIF9pdGVyYXRlQXV0b1JlZnJlc2goX3JlbW92ZUxpc3RlbmVyKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3Njcm9sbGVycy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgX3doZWVsTGlzdGVuZXIoX3JlbW92ZUxpc3RlbmVyLCBfc2Nyb2xsZXJzW2ldLCBfc2Nyb2xsZXJzW2kgKyAxXSk7XG5cbiAgICAgIF93aGVlbExpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciwgX3Njcm9sbGVyc1tpXSwgX3Njcm9sbGVyc1tpICsgMl0pO1xuICAgIH1cbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICBfd2luID0gd2luZG93O1xuICAgIF9kb2MgPSBkb2N1bWVudDtcbiAgICBfZG9jRWwgPSBfZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICBfYm9keSA9IF9kb2MuYm9keTtcblxuICAgIGlmIChnc2FwKSB7XG4gICAgICBfdG9BcnJheSA9IGdzYXAudXRpbHMudG9BcnJheTtcbiAgICAgIF9jbGFtcCA9IGdzYXAudXRpbHMuY2xhbXA7XG4gICAgICBfY29udGV4dCA9IGdzYXAuY29yZS5jb250ZXh0IHx8IF9wYXNzVGhyb3VnaDtcbiAgICAgIF9zdXBwcmVzc092ZXJ3cml0ZXMgPSBnc2FwLmNvcmUuc3VwcHJlc3NPdmVyd3JpdGVzIHx8IF9wYXNzVGhyb3VnaDtcbiAgICAgIF9zY3JvbGxSZXN0b3JhdGlvbiA9IF93aW4uaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiB8fCBcImF1dG9cIjtcbiAgICAgIF9sYXN0U2Nyb2xsID0gX3dpbi5wYWdlWU9mZnNldDtcbiAgICAgIGdzYXAuY29yZS5nbG9iYWxzKFwiU2Nyb2xsVHJpZ2dlclwiLCBTY3JvbGxUcmlnZ2VyKTsgLy8gbXVzdCByZWdpc3RlciB0aGUgZ2xvYmFsIG1hbnVhbGx5IGJlY2F1c2UgaW4gSW50ZXJuZXQgRXhwbG9yZXIsIGZ1bmN0aW9ucyAoY2xhc3NlcykgZG9uJ3QgaGF2ZSBhIFwibmFtZVwiIHByb3BlcnR5LlxuXG4gICAgICBpZiAoX2JvZHkpIHtcbiAgICAgICAgX2VuYWJsZWQgPSAxO1xuICAgICAgICBfZGl2MTAwdmggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpOyAvLyB0byBzb2x2ZSBtb2JpbGUgYnJvd3NlciBhZGRyZXNzIGJhciBzaG93L2hpZGUgcmVzaXppbmcsIHdlIHNob3VsZG4ndCByZWx5IG9uIHdpbmRvdy5pbm5lckhlaWdodC4gSW5zdGVhZCwgdXNlIGEgPGRpdj4gd2l0aCBpdHMgaGVpZ2h0IHNldCB0byAxMDB2aCBhbmQgbWVhc3VyZSB0aGF0IHNpbmNlIHRoYXQncyB3aGF0IHRoZSBzY3JvbGxpbmcgaXMgYmFzZWQgb24gYW55d2F5IGFuZCBpdCdzIG5vdCBhZmZlY3RlZCBieSBhZGRyZXNzIGJhciBzaG93aW5nL2hpZGluZy5cblxuICAgICAgICBfZGl2MTAwdmguc3R5bGUuaGVpZ2h0ID0gXCIxMDB2aFwiO1xuICAgICAgICBfZGl2MTAwdmguc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cbiAgICAgICAgX3JlZnJlc2gxMDB2aCgpO1xuXG4gICAgICAgIF9yYWZCdWdGaXgoKTtcblxuICAgICAgICBPYnNlcnZlci5yZWdpc3Rlcihnc2FwKTsgLy8gaXNUb3VjaCBpcyAwIGlmIG5vIHRvdWNoLCAxIGlmIE9OTFkgdG91Y2gsIGFuZCAyIGlmIGl0IGNhbiBhY2NvbW1vZGF0ZSB0b3VjaCBidXQgYWxzbyBvdGhlciB0eXBlcyBsaWtlIG1vdXNlL3BvaW50ZXIuXG5cbiAgICAgICAgU2Nyb2xsVHJpZ2dlci5pc1RvdWNoID0gT2JzZXJ2ZXIuaXNUb3VjaDtcbiAgICAgICAgX2ZpeElPU0J1ZyA9IE9ic2VydmVyLmlzVG91Y2ggJiYgLyhpUGFkfGlQaG9uZXxpUG9kfE1hYykvZy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOyAvLyBzaW5jZSAyMDE3LCBpT1MgaGFzIGhhZCBhIGJ1ZyB0aGF0IGNhdXNlcyBldmVudC5jbGllbnRYL1kgdG8gYmUgaW5hY2N1cmF0ZSB3aGVuIGEgc2Nyb2xsIG9jY3VycywgdGh1cyB3ZSBtdXN0IGFsdGVybmF0ZSBpZ25vcmluZyBldmVyeSBvdGhlciB0b3VjaG1vdmUgZXZlbnQgdG8gd29yayBhcm91bmQgaXQuIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTgxOTU0IGFuZCBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi9FeGJyUE5hLzA4N2NlZjE5N2RjMzU0NDVhMDk1MWU4OTM1YzQxNTAzXG5cbiAgICAgICAgX2lnbm9yZU1vYmlsZVJlc2l6ZSA9IE9ic2VydmVyLmlzVG91Y2ggPT09IDE7XG5cbiAgICAgICAgX2FkZExpc3RlbmVyKF93aW4sIFwid2hlZWxcIiwgX29uU2Nyb2xsKTsgLy8gbW9zdGx5IGZvciAzcmQgcGFydHkgc21vb3RoIHNjcm9sbGluZyBsaWJyYXJpZXMuXG5cblxuICAgICAgICBfcm9vdCA9IFtfd2luLCBfZG9jLCBfZG9jRWwsIF9ib2R5XTtcblxuICAgICAgICBpZiAoZ3NhcC5tYXRjaE1lZGlhKSB7XG4gICAgICAgICAgU2Nyb2xsVHJpZ2dlci5tYXRjaE1lZGlhID0gZnVuY3Rpb24gKHZhcnMpIHtcbiAgICAgICAgICAgIHZhciBtbSA9IGdzYXAubWF0Y2hNZWRpYSgpLFxuICAgICAgICAgICAgICAgIHA7XG5cbiAgICAgICAgICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICAgICAgICAgIG1tLmFkZChwLCB2YXJzW3BdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG1tO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBnc2FwLmFkZEV2ZW50TGlzdGVuZXIoXCJtYXRjaE1lZGlhSW5pdFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3JldmVydEFsbCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGdzYXAuYWRkRXZlbnRMaXN0ZW5lcihcIm1hdGNoTWVkaWFSZXZlcnRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9yZXZlcnRSZWNvcmRlZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGdzYXAuYWRkRXZlbnRMaXN0ZW5lcihcIm1hdGNoTWVkaWFcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3JlZnJlc2hBbGwoMCwgMSk7XG5cbiAgICAgICAgICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFcIik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZ3NhcC5tYXRjaE1lZGlhKFwiKG9yaWVudGF0aW9uOiBwb3J0cmFpdClcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gd2hlbiBvcmllbnRhdGlvbiBjaGFuZ2VzLCB3ZSBzaG91bGQgdGFrZSBuZXcgYmFzZSBtZWFzdXJlbWVudHMgZm9yIHRoZSBpZ25vcmVNb2JpbGVSZXNpemUgZmVhdHVyZS5cbiAgICAgICAgICAgIF9zZXRCYXNlRGltZW5zaW9ucygpO1xuXG4gICAgICAgICAgICByZXR1cm4gX3NldEJhc2VEaW1lbnNpb25zO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlJlcXVpcmVzIEdTQVAgMy4xMS4wIG9yIGxhdGVyXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3NldEJhc2VEaW1lbnNpb25zKCk7XG5cbiAgICAgICAgX2FkZExpc3RlbmVyKF9kb2MsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCk7IC8vIHNvbWUgYnJvd3NlcnMgKGxpa2UgQ2hyb21lKSwgdGhlIHdpbmRvdyBzdG9wcyBkaXNwYXRjaGluZyBzY3JvbGwgZXZlbnRzIG9uIHRoZSB3aW5kb3cgaWYgeW91IHNjcm9sbCByZWFsbHkgZmFzdCwgYnV0IGl0J3MgY29uc2lzdGVudCBvbiB0aGUgZG9jdW1lbnQhXG5cblxuICAgICAgICB2YXIgYm9keVN0eWxlID0gX2JvZHkuc3R5bGUsXG4gICAgICAgICAgICBib3JkZXIgPSBib2R5U3R5bGUuYm9yZGVyVG9wU3R5bGUsXG4gICAgICAgICAgICBBbmltYXRpb25Qcm90byA9IGdzYXAuY29yZS5BbmltYXRpb24ucHJvdG90eXBlLFxuICAgICAgICAgICAgYm91bmRzLFxuICAgICAgICAgICAgaTtcbiAgICAgICAgQW5pbWF0aW9uUHJvdG8ucmV2ZXJ0IHx8IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBbmltYXRpb25Qcm90bywgXCJyZXZlcnRcIiwge1xuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRpbWUoLTAuMDEsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7IC8vIG9ubHkgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IChBbmltYXRpb24ucmV2ZXJ0KCkgd2FzIGFkZGVkIGFmdGVyIDMuMTAuNClcblxuICAgICAgICBib2R5U3R5bGUuYm9yZGVyVG9wU3R5bGUgPSBcInNvbGlkXCI7IC8vIHdvcmtzIGFyb3VuZCBhbiBpc3N1ZSB3aGVyZSBhIG1hcmdpbiBvZiBhIGNoaWxkIGVsZW1lbnQgY291bGQgdGhyb3cgb2ZmIHRoZSBib3VuZHMgb2YgdGhlIF9ib2R5LCBtYWtpbmcgaXQgc2VlbSBsaWtlIHRoZXJlJ3MgYSBtYXJnaW4gd2hlbiB0aGVyZSBhY3R1YWxseSBpc24ndC4gVGhlIGJvcmRlciBlbnN1cmVzIHRoYXQgdGhlIGJvdW5kcyBhcmUgYWNjdXJhdGUuXG5cbiAgICAgICAgYm91bmRzID0gX2dldEJvdW5kcyhfYm9keSk7XG4gICAgICAgIF92ZXJ0aWNhbC5tID0gTWF0aC5yb3VuZChib3VuZHMudG9wICsgX3ZlcnRpY2FsLnNjKCkpIHx8IDA7IC8vIGFjY29tbW9kYXRlIHRoZSBvZmZzZXQgb2YgdGhlIDxib2R5PiBjYXVzZWQgYnkgbWFyZ2lucyBhbmQvb3IgcGFkZGluZ1xuXG4gICAgICAgIF9ob3Jpem9udGFsLm0gPSBNYXRoLnJvdW5kKGJvdW5kcy5sZWZ0ICsgX2hvcml6b250YWwuc2MoKSkgfHwgMDtcbiAgICAgICAgYm9yZGVyID8gYm9keVN0eWxlLmJvcmRlclRvcFN0eWxlID0gYm9yZGVyIDogYm9keVN0eWxlLnJlbW92ZVByb3BlcnR5KFwiYm9yZGVyLXRvcC1zdHlsZVwiKTsgLy8gVE9ETzogKD8pIG1heWJlIG1vdmUgdG8gbGV2ZXJhZ2luZyB0aGUgdmVsb2NpdHkgbWVjaGFuaXNtIGluIE9ic2VydmVyIGFuZCBza2lwIGludGVydmFscy5cblxuICAgICAgICBfc3luY0ludGVydmFsID0gc2V0SW50ZXJ2YWwoX3N5bmMsIDI1MCk7XG4gICAgICAgIGdzYXAuZGVsYXllZENhbGwoMC41LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF9zdGFydHVwID0gMDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX2FkZExpc3RlbmVyKF9kb2MsIFwidG91Y2hjYW5jZWxcIiwgX3Bhc3NUaHJvdWdoKTsgLy8gc29tZSBvbGRlciBBbmRyb2lkIGRldmljZXMgaW50ZXJtaXR0ZW50bHkgc3RvcCBkaXNwYXRjaGluZyBcInRvdWNobW92ZVwiIGV2ZW50cyBpZiB3ZSBkb24ndCBsaXN0ZW4gZm9yIFwidG91Y2hjYW5jZWxcIiBvbiB0aGUgZG9jdW1lbnQuXG5cblxuICAgICAgICBfYWRkTGlzdGVuZXIoX2JvZHksIFwidG91Y2hzdGFydFwiLCBfcGFzc1Rocm91Z2gpOyAvL3dvcmtzIGFyb3VuZCBTYWZhcmkgYnVnOiBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8yMTQ1MC1kcmFnZ2FibGUtaW4taWZyYW1lLW9uLW1vYmlsZS1pcy1idWdneS9cblxuXG4gICAgICAgIF9tdWx0aUxpc3RlbmVyKF9hZGRMaXN0ZW5lciwgX2RvYywgXCJwb2ludGVyZG93bix0b3VjaHN0YXJ0LG1vdXNlZG93blwiLCBfcG9pbnRlckRvd25IYW5kbGVyKTtcblxuICAgICAgICBfbXVsdGlMaXN0ZW5lcihfYWRkTGlzdGVuZXIsIF9kb2MsIFwicG9pbnRlcnVwLHRvdWNoZW5kLG1vdXNldXBcIiwgX3BvaW50ZXJVcEhhbmRsZXIpO1xuXG4gICAgICAgIF90cmFuc2Zvcm1Qcm9wID0gZ3NhcC51dGlscy5jaGVja1ByZWZpeChcInRyYW5zZm9ybVwiKTtcblxuICAgICAgICBfc3RhdGVQcm9wcy5wdXNoKF90cmFuc2Zvcm1Qcm9wKTtcblxuICAgICAgICBfY29yZUluaXR0ZWQgPSBfZ2V0VGltZSgpO1xuICAgICAgICBfcmVzaXplRGVsYXkgPSBnc2FwLmRlbGF5ZWRDYWxsKDAuMiwgX3JlZnJlc2hBbGwpLnBhdXNlKCk7XG4gICAgICAgIF9hdXRvUmVmcmVzaCA9IFtfZG9jLCBcInZpc2liaWxpdHljaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciB3ID0gX3dpbi5pbm5lcldpZHRoLFxuICAgICAgICAgICAgICBoID0gX3dpbi5pbm5lckhlaWdodDtcblxuICAgICAgICAgIGlmIChfZG9jLmhpZGRlbikge1xuICAgICAgICAgICAgX3ByZXZXaWR0aCA9IHc7XG4gICAgICAgICAgICBfcHJldkhlaWdodCA9IGg7XG4gICAgICAgICAgfSBlbHNlIGlmIChfcHJldldpZHRoICE9PSB3IHx8IF9wcmV2SGVpZ2h0ICE9PSBoKSB7XG4gICAgICAgICAgICBfb25SZXNpemUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9kb2MsIFwiRE9NQ29udGVudExvYWRlZFwiLCBfcmVmcmVzaEFsbCwgX3dpbiwgXCJsb2FkXCIsIF9yZWZyZXNoQWxsLCBfd2luLCBcInJlc2l6ZVwiLCBfb25SZXNpemVdO1xuXG4gICAgICAgIF9pdGVyYXRlQXV0b1JlZnJlc2goX2FkZExpc3RlbmVyKTtcblxuICAgICAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikge1xuICAgICAgICAgIHJldHVybiB0cmlnZ2VyLmVuYWJsZSgwLCAxKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IF9zY3JvbGxlcnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgICBfd2hlZWxMaXN0ZW5lcihfcmVtb3ZlTGlzdGVuZXIsIF9zY3JvbGxlcnNbaV0sIF9zY3JvbGxlcnNbaSArIDFdKTtcblxuICAgICAgICAgIF93aGVlbExpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciwgX3Njcm9sbGVyc1tpXSwgX3Njcm9sbGVyc1tpICsgMl0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIuY29uZmlnID0gZnVuY3Rpb24gY29uZmlnKHZhcnMpIHtcbiAgICBcImxpbWl0Q2FsbGJhY2tzXCIgaW4gdmFycyAmJiAoX2xpbWl0Q2FsbGJhY2tzID0gISF2YXJzLmxpbWl0Q2FsbGJhY2tzKTtcbiAgICB2YXIgbXMgPSB2YXJzLnN5bmNJbnRlcnZhbDtcbiAgICBtcyAmJiBjbGVhckludGVydmFsKF9zeW5jSW50ZXJ2YWwpIHx8IChfc3luY0ludGVydmFsID0gbXMpICYmIHNldEludGVydmFsKF9zeW5jLCBtcyk7XG4gICAgXCJpZ25vcmVNb2JpbGVSZXNpemVcIiBpbiB2YXJzICYmIChfaWdub3JlTW9iaWxlUmVzaXplID0gU2Nyb2xsVHJpZ2dlci5pc1RvdWNoID09PSAxICYmIHZhcnMuaWdub3JlTW9iaWxlUmVzaXplKTtcblxuICAgIGlmIChcImF1dG9SZWZyZXNoRXZlbnRzXCIgaW4gdmFycykge1xuICAgICAgX2l0ZXJhdGVBdXRvUmVmcmVzaChfcmVtb3ZlTGlzdGVuZXIpIHx8IF9pdGVyYXRlQXV0b1JlZnJlc2goX2FkZExpc3RlbmVyLCB2YXJzLmF1dG9SZWZyZXNoRXZlbnRzIHx8IFwibm9uZVwiKTtcbiAgICAgIF9pZ25vcmVSZXNpemUgPSAodmFycy5hdXRvUmVmcmVzaEV2ZW50cyArIFwiXCIpLmluZGV4T2YoXCJyZXNpemVcIikgPT09IC0xO1xuICAgIH1cbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLnNjcm9sbGVyUHJveHkgPSBmdW5jdGlvbiBzY3JvbGxlclByb3h5KHRhcmdldCwgdmFycykge1xuICAgIHZhciB0ID0gX2dldFRhcmdldCh0YXJnZXQpLFxuICAgICAgICBpID0gX3Njcm9sbGVycy5pbmRleE9mKHQpLFxuICAgICAgICBpc1ZpZXdwb3J0ID0gX2lzVmlld3BvcnQodCk7XG5cbiAgICBpZiAofmkpIHtcbiAgICAgIF9zY3JvbGxlcnMuc3BsaWNlKGksIGlzVmlld3BvcnQgPyA2IDogMik7XG4gICAgfVxuXG4gICAgaWYgKHZhcnMpIHtcbiAgICAgIGlzVmlld3BvcnQgPyBfcHJveGllcy51bnNoaWZ0KF93aW4sIHZhcnMsIF9ib2R5LCB2YXJzLCBfZG9jRWwsIHZhcnMpIDogX3Byb3hpZXMudW5zaGlmdCh0LCB2YXJzKTtcbiAgICB9XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5jbGVhck1hdGNoTWVkaWEgPSBmdW5jdGlvbiBjbGVhck1hdGNoTWVkaWEocXVlcnkpIHtcbiAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIHQuX2N0eCAmJiB0Ll9jdHgucXVlcnkgPT09IHF1ZXJ5ICYmIHQuX2N0eC5raWxsKHRydWUsIHRydWUpO1xuICAgIH0pO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIuaXNJblZpZXdwb3J0ID0gZnVuY3Rpb24gaXNJblZpZXdwb3J0KGVsZW1lbnQsIHJhdGlvLCBob3Jpem9udGFsKSB7XG4gICAgdmFyIGJvdW5kcyA9IChfaXNTdHJpbmcoZWxlbWVudCkgPyBfZ2V0VGFyZ2V0KGVsZW1lbnQpIDogZWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgIG9mZnNldCA9IGJvdW5kc1tob3Jpem9udGFsID8gX3dpZHRoIDogX2hlaWdodF0gKiByYXRpbyB8fCAwO1xuICAgIHJldHVybiBob3Jpem9udGFsID8gYm91bmRzLnJpZ2h0IC0gb2Zmc2V0ID4gMCAmJiBib3VuZHMubGVmdCArIG9mZnNldCA8IF93aW4uaW5uZXJXaWR0aCA6IGJvdW5kcy5ib3R0b20gLSBvZmZzZXQgPiAwICYmIGJvdW5kcy50b3AgKyBvZmZzZXQgPCBfd2luLmlubmVySGVpZ2h0O1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIucG9zaXRpb25JblZpZXdwb3J0ID0gZnVuY3Rpb24gcG9zaXRpb25JblZpZXdwb3J0KGVsZW1lbnQsIHJlZmVyZW5jZVBvaW50LCBob3Jpem9udGFsKSB7XG4gICAgX2lzU3RyaW5nKGVsZW1lbnQpICYmIChlbGVtZW50ID0gX2dldFRhcmdldChlbGVtZW50KSk7XG4gICAgdmFyIGJvdW5kcyA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgIHNpemUgPSBib3VuZHNbaG9yaXpvbnRhbCA/IF93aWR0aCA6IF9oZWlnaHRdLFxuICAgICAgICBvZmZzZXQgPSByZWZlcmVuY2VQb2ludCA9PSBudWxsID8gc2l6ZSAvIDIgOiByZWZlcmVuY2VQb2ludCBpbiBfa2V5d29yZHMgPyBfa2V5d29yZHNbcmVmZXJlbmNlUG9pbnRdICogc2l6ZSA6IH5yZWZlcmVuY2VQb2ludC5pbmRleE9mKFwiJVwiKSA/IHBhcnNlRmxvYXQocmVmZXJlbmNlUG9pbnQpICogc2l6ZSAvIDEwMCA6IHBhcnNlRmxvYXQocmVmZXJlbmNlUG9pbnQpIHx8IDA7XG4gICAgcmV0dXJuIGhvcml6b250YWwgPyAoYm91bmRzLmxlZnQgKyBvZmZzZXQpIC8gX3dpbi5pbm5lcldpZHRoIDogKGJvdW5kcy50b3AgKyBvZmZzZXQpIC8gX3dpbi5pbm5lckhlaWdodDtcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLmtpbGxBbGwgPSBmdW5jdGlvbiBraWxsQWxsKGFsbG93TGlzdGVuZXJzKSB7XG4gICAgX3RyaWdnZXJzLnNsaWNlKDApLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiB0LnZhcnMuaWQgIT09IFwiU2Nyb2xsU21vb3RoZXJcIiAmJiB0LmtpbGwoKTtcbiAgICB9KTtcblxuICAgIGlmIChhbGxvd0xpc3RlbmVycyAhPT0gdHJ1ZSkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IF9saXN0ZW5lcnMua2lsbEFsbCB8fCBbXTtcbiAgICAgIF9saXN0ZW5lcnMgPSB7fTtcbiAgICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgIHJldHVybiBmKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFNjcm9sbFRyaWdnZXI7XG59KCk7XG5TY3JvbGxUcmlnZ2VyLnZlcnNpb24gPSBcIjMuMTIuNVwiO1xuXG5TY3JvbGxUcmlnZ2VyLnNhdmVTdHlsZXMgPSBmdW5jdGlvbiAodGFyZ2V0cykge1xuICByZXR1cm4gdGFyZ2V0cyA/IF90b0FycmF5KHRhcmdldHMpLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIC8vIHNhdmVkIHN0eWxlcyBhcmUgcmVjb3JkZWQgaW4gYSBjb25zZWN1dGl2ZSBhbHRlcm5hdGluZyBBcnJheSwgbGlrZSBbZWxlbWVudCwgY3NzVGV4dCwgdHJhbnNmb3JtIGF0dHJpYnV0ZSwgY2FjaGUsIG1hdGNoTWVkaWEsIC4uLl1cbiAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5zdHlsZSkge1xuICAgICAgdmFyIGkgPSBfc2F2ZWRTdHlsZXMuaW5kZXhPZih0YXJnZXQpO1xuXG4gICAgICBpID49IDAgJiYgX3NhdmVkU3R5bGVzLnNwbGljZShpLCA1KTtcblxuICAgICAgX3NhdmVkU3R5bGVzLnB1c2godGFyZ2V0LCB0YXJnZXQuc3R5bGUuY3NzVGV4dCwgdGFyZ2V0LmdldEJCb3ggJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKSwgZ3NhcC5jb3JlLmdldENhY2hlKHRhcmdldCksIF9jb250ZXh0KCkpO1xuICAgIH1cbiAgfSkgOiBfc2F2ZWRTdHlsZXM7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLnJldmVydCA9IGZ1bmN0aW9uIChzb2Z0LCBtZWRpYSkge1xuICByZXR1cm4gX3JldmVydEFsbCghc29mdCwgbWVkaWEpO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5jcmVhdGUgPSBmdW5jdGlvbiAodmFycywgYW5pbWF0aW9uKSB7XG4gIHJldHVybiBuZXcgU2Nyb2xsVHJpZ2dlcih2YXJzLCBhbmltYXRpb24pO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5yZWZyZXNoID0gZnVuY3Rpb24gKHNhZmUpIHtcbiAgcmV0dXJuIHNhZmUgPyBfb25SZXNpemUoKSA6IChfY29yZUluaXR0ZWQgfHwgU2Nyb2xsVHJpZ2dlci5yZWdpc3RlcigpKSAmJiBfcmVmcmVzaEFsbCh0cnVlKTtcbn07XG5cblNjcm9sbFRyaWdnZXIudXBkYXRlID0gZnVuY3Rpb24gKGZvcmNlKSB7XG4gIHJldHVybiArK19zY3JvbGxlcnMuY2FjaGUgJiYgX3VwZGF0ZUFsbChmb3JjZSA9PT0gdHJ1ZSA/IDIgOiAwKTtcbn07XG5cblNjcm9sbFRyaWdnZXIuY2xlYXJTY3JvbGxNZW1vcnkgPSBfY2xlYXJTY3JvbGxNZW1vcnk7XG5cblNjcm9sbFRyaWdnZXIubWF4U2Nyb2xsID0gZnVuY3Rpb24gKGVsZW1lbnQsIGhvcml6b250YWwpIHtcbiAgcmV0dXJuIF9tYXhTY3JvbGwoZWxlbWVudCwgaG9yaXpvbnRhbCA/IF9ob3Jpem9udGFsIDogX3ZlcnRpY2FsKTtcbn07XG5cblNjcm9sbFRyaWdnZXIuZ2V0U2Nyb2xsRnVuYyA9IGZ1bmN0aW9uIChlbGVtZW50LCBob3Jpem9udGFsKSB7XG4gIHJldHVybiBfZ2V0U2Nyb2xsRnVuYyhfZ2V0VGFyZ2V0KGVsZW1lbnQpLCBob3Jpem9udGFsID8gX2hvcml6b250YWwgOiBfdmVydGljYWwpO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5nZXRCeUlkID0gZnVuY3Rpb24gKGlkKSB7XG4gIHJldHVybiBfaWRzW2lkXTtcbn07XG5cblNjcm9sbFRyaWdnZXIuZ2V0QWxsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX3RyaWdnZXJzLmZpbHRlcihmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiB0LnZhcnMuaWQgIT09IFwiU2Nyb2xsU21vb3RoZXJcIjtcbiAgfSk7XG59OyAvLyBpdCdzIGNvbW1vbiBmb3IgcGVvcGxlIHRvIFNjcm9sbFRyaWdnZXIuZ2V0QWxsKHQgPT4gdC5raWxsKCkpIG9uIHBhZ2Ugcm91dGVzLCBmb3IgZXhhbXBsZSwgYW5kIHdlIGRvbid0IHdhbnQgaXQgdG8gcnVpbiBzbW9vdGggc2Nyb2xsaW5nIGJ5IGtpbGxpbmcgdGhlIG1haW4gU2Nyb2xsU21vb3RoZXIgb25lLlxuXG5cblNjcm9sbFRyaWdnZXIuaXNTY3JvbGxpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhIV9sYXN0U2Nyb2xsVGltZTtcbn07XG5cblNjcm9sbFRyaWdnZXIuc25hcERpcmVjdGlvbmFsID0gX3NuYXBEaXJlY3Rpb25hbDtcblxuU2Nyb2xsVHJpZ2dlci5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrKSB7XG4gIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSB8fCAoX2xpc3RlbmVyc1t0eXBlXSA9IFtdKTtcbiAgfmEuaW5kZXhPZihjYWxsYmFjaykgfHwgYS5wdXNoKGNhbGxiYWNrKTtcbn07XG5cblNjcm9sbFRyaWdnZXIucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICh0eXBlLCBjYWxsYmFjaykge1xuICB2YXIgYSA9IF9saXN0ZW5lcnNbdHlwZV0sXG4gICAgICBpID0gYSAmJiBhLmluZGV4T2YoY2FsbGJhY2spO1xuICBpID49IDAgJiYgYS5zcGxpY2UoaSwgMSk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmJhdGNoID0gZnVuY3Rpb24gKHRhcmdldHMsIHZhcnMpIHtcbiAgdmFyIHJlc3VsdCA9IFtdLFxuICAgICAgdmFyc0NvcHkgPSB7fSxcbiAgICAgIGludGVydmFsID0gdmFycy5pbnRlcnZhbCB8fCAwLjAxNixcbiAgICAgIGJhdGNoTWF4ID0gdmFycy5iYXRjaE1heCB8fCAxZTksXG4gICAgICBwcm94eUNhbGxiYWNrID0gZnVuY3Rpb24gcHJveHlDYWxsYmFjayh0eXBlLCBjYWxsYmFjaykge1xuICAgIHZhciBlbGVtZW50cyA9IFtdLFxuICAgICAgICB0cmlnZ2VycyA9IFtdLFxuICAgICAgICBkZWxheSA9IGdzYXAuZGVsYXllZENhbGwoaW50ZXJ2YWwsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrKGVsZW1lbnRzLCB0cmlnZ2Vycyk7XG4gICAgICBlbGVtZW50cyA9IFtdO1xuICAgICAgdHJpZ2dlcnMgPSBbXTtcbiAgICB9KS5wYXVzZSgpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc2VsZikge1xuICAgICAgZWxlbWVudHMubGVuZ3RoIHx8IGRlbGF5LnJlc3RhcnQodHJ1ZSk7XG4gICAgICBlbGVtZW50cy5wdXNoKHNlbGYudHJpZ2dlcik7XG4gICAgICB0cmlnZ2Vycy5wdXNoKHNlbGYpO1xuICAgICAgYmF0Y2hNYXggPD0gZWxlbWVudHMubGVuZ3RoICYmIGRlbGF5LnByb2dyZXNzKDEpO1xuICAgIH07XG4gIH0sXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiB2YXJzKSB7XG4gICAgdmFyc0NvcHlbcF0gPSBwLnN1YnN0cigwLCAyKSA9PT0gXCJvblwiICYmIF9pc0Z1bmN0aW9uKHZhcnNbcF0pICYmIHAgIT09IFwib25SZWZyZXNoSW5pdFwiID8gcHJveHlDYWxsYmFjayhwLCB2YXJzW3BdKSA6IHZhcnNbcF07XG4gIH1cblxuICBpZiAoX2lzRnVuY3Rpb24oYmF0Y2hNYXgpKSB7XG4gICAgYmF0Y2hNYXggPSBiYXRjaE1heCgpO1xuXG4gICAgX2FkZExpc3RlbmVyKFNjcm9sbFRyaWdnZXIsIFwicmVmcmVzaFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYmF0Y2hNYXggPSB2YXJzLmJhdGNoTWF4KCk7XG4gICAgfSk7XG4gIH1cblxuICBfdG9BcnJheSh0YXJnZXRzKS5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB2YXIgY29uZmlnID0ge307XG5cbiAgICBmb3IgKHAgaW4gdmFyc0NvcHkpIHtcbiAgICAgIGNvbmZpZ1twXSA9IHZhcnNDb3B5W3BdO1xuICAgIH1cblxuICAgIGNvbmZpZy50cmlnZ2VyID0gdGFyZ2V0O1xuICAgIHJlc3VsdC5wdXNoKFNjcm9sbFRyaWdnZXIuY3JlYXRlKGNvbmZpZykpO1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufTsgLy8gdG8gcmVkdWNlIGZpbGUgc2l6ZS4gY2xhbXBzIHRoZSBzY3JvbGwgYW5kIGFsc28gcmV0dXJucyBhIGR1cmF0aW9uIG11bHRpcGxpZXIgc28gdGhhdCBpZiB0aGUgc2Nyb2xsIGdldHMgY2hvcHBlZCBzaG9ydGVyLCB0aGUgZHVyYXRpb24gZ2V0cyBjdXJ0YWlsZWQgYXMgd2VsbCAob3RoZXJ3aXNlIGlmIHlvdSdyZSB2ZXJ5IGNsb3NlIHRvIHRoZSB0b3Agb2YgdGhlIHBhZ2UsIGZvciBleGFtcGxlLCBhbmQgc3dpcGUgdXAgcmVhbGx5IGZhc3QsIGl0J2xsIHN1ZGRlbmx5IHNsb3cgZG93biBhbmQgdGFrZSBhIGxvbmcgdGltZSB0byByZWFjaCB0aGUgdG9wKS5cblxuXG52YXIgX2NsYW1wU2Nyb2xsQW5kR2V0RHVyYXRpb25NdWx0aXBsaWVyID0gZnVuY3Rpb24gX2NsYW1wU2Nyb2xsQW5kR2V0RHVyYXRpb25NdWx0aXBsaWVyKHNjcm9sbEZ1bmMsIGN1cnJlbnQsIGVuZCwgbWF4KSB7XG4gIGN1cnJlbnQgPiBtYXggPyBzY3JvbGxGdW5jKG1heCkgOiBjdXJyZW50IDwgMCAmJiBzY3JvbGxGdW5jKDApO1xuICByZXR1cm4gZW5kID4gbWF4ID8gKG1heCAtIGN1cnJlbnQpIC8gKGVuZCAtIGN1cnJlbnQpIDogZW5kIDwgMCA/IGN1cnJlbnQgLyAoY3VycmVudCAtIGVuZCkgOiAxO1xufSxcbiAgICBfYWxsb3dOYXRpdmVQYW5uaW5nID0gZnVuY3Rpb24gX2FsbG93TmF0aXZlUGFubmluZyh0YXJnZXQsIGRpcmVjdGlvbikge1xuICBpZiAoZGlyZWN0aW9uID09PSB0cnVlKSB7XG4gICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwidG91Y2gtYWN0aW9uXCIpO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldC5zdHlsZS50b3VjaEFjdGlvbiA9IGRpcmVjdGlvbiA9PT0gdHJ1ZSA/IFwiYXV0b1wiIDogZGlyZWN0aW9uID8gXCJwYW4tXCIgKyBkaXJlY3Rpb24gKyAoT2JzZXJ2ZXIuaXNUb3VjaCA/IFwiIHBpbmNoLXpvb21cIiA6IFwiXCIpIDogXCJub25lXCI7IC8vIG5vdGU6IEZpcmVmb3ggZG9lc24ndCBzdXBwb3J0IGl0IHBpbmNoLXpvb20gcHJvcGVybHksIGF0IGxlYXN0IGluIGFkZGl0aW9uIHRvIGEgcGFuLXggb3IgcGFuLXkuXG4gIH1cblxuICB0YXJnZXQgPT09IF9kb2NFbCAmJiBfYWxsb3dOYXRpdmVQYW5uaW5nKF9ib2R5LCBkaXJlY3Rpb24pO1xufSxcbiAgICBfb3ZlcmZsb3cgPSB7XG4gIGF1dG86IDEsXG4gIHNjcm9sbDogMVxufSxcbiAgICBfbmVzdGVkU2Nyb2xsID0gZnVuY3Rpb24gX25lc3RlZFNjcm9sbChfcmVmNSkge1xuICB2YXIgZXZlbnQgPSBfcmVmNS5ldmVudCxcbiAgICAgIHRhcmdldCA9IF9yZWY1LnRhcmdldCxcbiAgICAgIGF4aXMgPSBfcmVmNS5heGlzO1xuXG4gIHZhciBub2RlID0gKGV2ZW50LmNoYW5nZWRUb3VjaGVzID8gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gOiBldmVudCkudGFyZ2V0LFxuICAgICAgY2FjaGUgPSBub2RlLl9nc2FwIHx8IGdzYXAuY29yZS5nZXRDYWNoZShub2RlKSxcbiAgICAgIHRpbWUgPSBfZ2V0VGltZSgpLFxuICAgICAgY3M7XG5cbiAgaWYgKCFjYWNoZS5faXNTY3JvbGxUIHx8IHRpbWUgLSBjYWNoZS5faXNTY3JvbGxUID4gMjAwMCkge1xuICAgIC8vIGNhY2hlIGZvciAyIHNlY29uZHMgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZS5cbiAgICB3aGlsZSAobm9kZSAmJiBub2RlICE9PSBfYm9keSAmJiAobm9kZS5zY3JvbGxIZWlnaHQgPD0gbm9kZS5jbGllbnRIZWlnaHQgJiYgbm9kZS5zY3JvbGxXaWR0aCA8PSBub2RlLmNsaWVudFdpZHRoIHx8ICEoX292ZXJmbG93WyhjcyA9IF9nZXRDb21wdXRlZFN0eWxlKG5vZGUpKS5vdmVyZmxvd1ldIHx8IF9vdmVyZmxvd1tjcy5vdmVyZmxvd1hdKSkpIHtcbiAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgY2FjaGUuX2lzU2Nyb2xsID0gbm9kZSAmJiBub2RlICE9PSB0YXJnZXQgJiYgIV9pc1ZpZXdwb3J0KG5vZGUpICYmIChfb3ZlcmZsb3dbKGNzID0gX2dldENvbXB1dGVkU3R5bGUobm9kZSkpLm92ZXJmbG93WV0gfHwgX292ZXJmbG93W2NzLm92ZXJmbG93WF0pO1xuICAgIGNhY2hlLl9pc1Njcm9sbFQgPSB0aW1lO1xuICB9XG5cbiAgaWYgKGNhY2hlLl9pc1Njcm9sbCB8fCBheGlzID09PSBcInhcIikge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGV2ZW50Ll9nc2FwQWxsb3cgPSB0cnVlO1xuICB9XG59LFxuICAgIC8vIGNhcHR1cmUgZXZlbnRzIG9uIHNjcm9sbGFibGUgZWxlbWVudHMgSU5TSURFIHRoZSA8Ym9keT4gYW5kIGFsbG93IHRob3NlIGJ5IGNhbGxpbmcgc3RvcFByb3BhZ2F0aW9uKCkgd2hlbiB3ZSBmaW5kIGEgc2Nyb2xsYWJsZSBhbmNlc3RvclxuX2lucHV0T2JzZXJ2ZXIgPSBmdW5jdGlvbiBfaW5wdXRPYnNlcnZlcih0YXJnZXQsIHR5cGUsIGlucHV0cywgbmVzdGVkKSB7XG4gIHJldHVybiBPYnNlcnZlci5jcmVhdGUoe1xuICAgIHRhcmdldDogdGFyZ2V0LFxuICAgIGNhcHR1cmU6IHRydWUsXG4gICAgZGVib3VuY2U6IGZhbHNlLFxuICAgIGxvY2tBeGlzOiB0cnVlLFxuICAgIHR5cGU6IHR5cGUsXG4gICAgb25XaGVlbDogbmVzdGVkID0gbmVzdGVkICYmIF9uZXN0ZWRTY3JvbGwsXG4gICAgb25QcmVzczogbmVzdGVkLFxuICAgIG9uRHJhZzogbmVzdGVkLFxuICAgIG9uU2Nyb2xsOiBuZXN0ZWQsXG4gICAgb25FbmFibGU6IGZ1bmN0aW9uIG9uRW5hYmxlKCkge1xuICAgICAgcmV0dXJuIGlucHV0cyAmJiBfYWRkTGlzdGVuZXIoX2RvYywgT2JzZXJ2ZXIuZXZlbnRUeXBlc1swXSwgX2NhcHR1cmVJbnB1dHMsIGZhbHNlLCB0cnVlKTtcbiAgICB9LFxuICAgIG9uRGlzYWJsZTogZnVuY3Rpb24gb25EaXNhYmxlKCkge1xuICAgICAgcmV0dXJuIF9yZW1vdmVMaXN0ZW5lcihfZG9jLCBPYnNlcnZlci5ldmVudFR5cGVzWzBdLCBfY2FwdHVyZUlucHV0cywgdHJ1ZSk7XG4gICAgfVxuICB9KTtcbn0sXG4gICAgX2lucHV0RXhwID0gLyhpbnB1dHxsYWJlbHxzZWxlY3R8dGV4dGFyZWEpL2ksXG4gICAgX2lucHV0SXNGb2N1c2VkLFxuICAgIF9jYXB0dXJlSW5wdXRzID0gZnVuY3Rpb24gX2NhcHR1cmVJbnB1dHMoZSkge1xuICB2YXIgaXNJbnB1dCA9IF9pbnB1dEV4cC50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpO1xuXG4gIGlmIChpc0lucHV0IHx8IF9pbnB1dElzRm9jdXNlZCkge1xuICAgIGUuX2dzYXBBbGxvdyA9IHRydWU7XG4gICAgX2lucHV0SXNGb2N1c2VkID0gaXNJbnB1dDtcbiAgfVxufSxcbiAgICBfZ2V0U2Nyb2xsTm9ybWFsaXplciA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxOb3JtYWxpemVyKHZhcnMpIHtcbiAgX2lzT2JqZWN0KHZhcnMpIHx8ICh2YXJzID0ge30pO1xuICB2YXJzLnByZXZlbnREZWZhdWx0ID0gdmFycy5pc05vcm1hbGl6ZXIgPSB2YXJzLmFsbG93Q2xpY2tzID0gdHJ1ZTtcbiAgdmFycy50eXBlIHx8ICh2YXJzLnR5cGUgPSBcIndoZWVsLHRvdWNoXCIpO1xuICB2YXJzLmRlYm91bmNlID0gISF2YXJzLmRlYm91bmNlO1xuICB2YXJzLmlkID0gdmFycy5pZCB8fCBcIm5vcm1hbGl6ZXJcIjtcblxuICB2YXIgX3ZhcnMyID0gdmFycyxcbiAgICAgIG5vcm1hbGl6ZVNjcm9sbFggPSBfdmFyczIubm9ybWFsaXplU2Nyb2xsWCxcbiAgICAgIG1vbWVudHVtID0gX3ZhcnMyLm1vbWVudHVtLFxuICAgICAgYWxsb3dOZXN0ZWRTY3JvbGwgPSBfdmFyczIuYWxsb3dOZXN0ZWRTY3JvbGwsXG4gICAgICBvblJlbGVhc2UgPSBfdmFyczIub25SZWxlYXNlLFxuICAgICAgc2VsZixcbiAgICAgIG1heFksXG4gICAgICB0YXJnZXQgPSBfZ2V0VGFyZ2V0KHZhcnMudGFyZ2V0KSB8fCBfZG9jRWwsXG4gICAgICBzbW9vdGhlciA9IGdzYXAuY29yZS5nbG9iYWxzKCkuU2Nyb2xsU21vb3RoZXIsXG4gICAgICBzbW9vdGhlckluc3RhbmNlID0gc21vb3RoZXIgJiYgc21vb3RoZXIuZ2V0KCksXG4gICAgICBjb250ZW50ID0gX2ZpeElPU0J1ZyAmJiAodmFycy5jb250ZW50ICYmIF9nZXRUYXJnZXQodmFycy5jb250ZW50KSB8fCBzbW9vdGhlckluc3RhbmNlICYmIHZhcnMuY29udGVudCAhPT0gZmFsc2UgJiYgIXNtb290aGVySW5zdGFuY2Uuc21vb3RoKCkgJiYgc21vb3RoZXJJbnN0YW5jZS5jb250ZW50KCkpLFxuICAgICAgc2Nyb2xsRnVuY1kgPSBfZ2V0U2Nyb2xsRnVuYyh0YXJnZXQsIF92ZXJ0aWNhbCksXG4gICAgICBzY3JvbGxGdW5jWCA9IF9nZXRTY3JvbGxGdW5jKHRhcmdldCwgX2hvcml6b250YWwpLFxuICAgICAgc2NhbGUgPSAxLFxuICAgICAgaW5pdGlhbFNjYWxlID0gKE9ic2VydmVyLmlzVG91Y2ggJiYgX3dpbi52aXN1YWxWaWV3cG9ydCA/IF93aW4udmlzdWFsVmlld3BvcnQuc2NhbGUgKiBfd2luLnZpc3VhbFZpZXdwb3J0LndpZHRoIDogX3dpbi5vdXRlcldpZHRoKSAvIF93aW4uaW5uZXJXaWR0aCxcbiAgICAgIHdoZWVsUmVmcmVzaCA9IDAsXG4gICAgICByZXNvbHZlTW9tZW50dW1EdXJhdGlvbiA9IF9pc0Z1bmN0aW9uKG1vbWVudHVtKSA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbW9tZW50dW0oc2VsZik7XG4gIH0gOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG1vbWVudHVtIHx8IDIuODtcbiAgfSxcbiAgICAgIGxhc3RSZWZyZXNoSUQsXG4gICAgICBza2lwVG91Y2hNb3ZlLFxuICAgICAgaW5wdXRPYnNlcnZlciA9IF9pbnB1dE9ic2VydmVyKHRhcmdldCwgdmFycy50eXBlLCB0cnVlLCBhbGxvd05lc3RlZFNjcm9sbCksXG4gICAgICByZXN1bWVUb3VjaE1vdmUgPSBmdW5jdGlvbiByZXN1bWVUb3VjaE1vdmUoKSB7XG4gICAgcmV0dXJuIHNraXBUb3VjaE1vdmUgPSBmYWxzZTtcbiAgfSxcbiAgICAgIHNjcm9sbENsYW1wWCA9IF9wYXNzVGhyb3VnaCxcbiAgICAgIHNjcm9sbENsYW1wWSA9IF9wYXNzVGhyb3VnaCxcbiAgICAgIHVwZGF0ZUNsYW1wcyA9IGZ1bmN0aW9uIHVwZGF0ZUNsYW1wcygpIHtcbiAgICBtYXhZID0gX21heFNjcm9sbCh0YXJnZXQsIF92ZXJ0aWNhbCk7XG4gICAgc2Nyb2xsQ2xhbXBZID0gX2NsYW1wKF9maXhJT1NCdWcgPyAxIDogMCwgbWF4WSk7XG4gICAgbm9ybWFsaXplU2Nyb2xsWCAmJiAoc2Nyb2xsQ2xhbXBYID0gX2NsYW1wKDAsIF9tYXhTY3JvbGwodGFyZ2V0LCBfaG9yaXpvbnRhbCkpKTtcbiAgICBsYXN0UmVmcmVzaElEID0gX3JlZnJlc2hJRDtcbiAgfSxcbiAgICAgIHJlbW92ZUNvbnRlbnRPZmZzZXQgPSBmdW5jdGlvbiByZW1vdmVDb250ZW50T2Zmc2V0KCkge1xuICAgIGNvbnRlbnQuX2dzYXAueSA9IF9yb3VuZChwYXJzZUZsb2F0KGNvbnRlbnQuX2dzYXAueSkgKyBzY3JvbGxGdW5jWS5vZmZzZXQpICsgXCJweFwiO1xuICAgIGNvbnRlbnQuc3R5bGUudHJhbnNmb3JtID0gXCJtYXRyaXgzZCgxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCBcIiArIHBhcnNlRmxvYXQoY29udGVudC5fZ3NhcC55KSArIFwiLCAwLCAxKVwiO1xuICAgIHNjcm9sbEZ1bmNZLm9mZnNldCA9IHNjcm9sbEZ1bmNZLmNhY2hlSUQgPSAwO1xuICB9LFxuICAgICAgaWdub3JlRHJhZyA9IGZ1bmN0aW9uIGlnbm9yZURyYWcoKSB7XG4gICAgaWYgKHNraXBUb3VjaE1vdmUpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZXN1bWVUb3VjaE1vdmUpO1xuXG4gICAgICB2YXIgb2Zmc2V0ID0gX3JvdW5kKHNlbGYuZGVsdGFZIC8gMiksXG4gICAgICAgICAgc2Nyb2xsID0gc2Nyb2xsQ2xhbXBZKHNjcm9sbEZ1bmNZLnYgLSBvZmZzZXQpO1xuXG4gICAgICBpZiAoY29udGVudCAmJiBzY3JvbGwgIT09IHNjcm9sbEZ1bmNZLnYgKyBzY3JvbGxGdW5jWS5vZmZzZXQpIHtcbiAgICAgICAgc2Nyb2xsRnVuY1kub2Zmc2V0ID0gc2Nyb2xsIC0gc2Nyb2xsRnVuY1kudjtcblxuICAgICAgICB2YXIgeSA9IF9yb3VuZCgocGFyc2VGbG9hdChjb250ZW50ICYmIGNvbnRlbnQuX2dzYXAueSkgfHwgMCkgLSBzY3JvbGxGdW5jWS5vZmZzZXQpO1xuXG4gICAgICAgIGNvbnRlbnQuc3R5bGUudHJhbnNmb3JtID0gXCJtYXRyaXgzZCgxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCBcIiArIHkgKyBcIiwgMCwgMSlcIjtcbiAgICAgICAgY29udGVudC5fZ3NhcC55ID0geSArIFwicHhcIjtcbiAgICAgICAgc2Nyb2xsRnVuY1kuY2FjaGVJRCA9IF9zY3JvbGxlcnMuY2FjaGU7XG5cbiAgICAgICAgX3VwZGF0ZUFsbCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBzY3JvbGxGdW5jWS5vZmZzZXQgJiYgcmVtb3ZlQ29udGVudE9mZnNldCgpO1xuICAgIHNraXBUb3VjaE1vdmUgPSB0cnVlO1xuICB9LFxuICAgICAgdHdlZW4sXG4gICAgICBzdGFydFNjcm9sbFgsXG4gICAgICBzdGFydFNjcm9sbFksXG4gICAgICBvblN0b3BEZWxheWVkQ2FsbCxcbiAgICAgIG9uUmVzaXplID0gZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gICAgLy8gaWYgdGhlIHdpbmRvdyByZXNpemVzLCBsaWtlIG9uIGFuIGlQaG9uZSB3aGljaCBBcHBsZSBGT1JDRVMgdGhlIGFkZHJlc3MgYmFyIHRvIHNob3cvaGlkZSBldmVuIGlmIHdlIGV2ZW50LnByZXZlbnREZWZhdWx0KCksIGl0IG1heSBiZSBzY3JvbGxpbmcgdG9vIGZhciBub3cgdGhhdCB0aGUgYWRkcmVzcyBiYXIgaXMgc2hvd2luZywgc28gd2UgbXVzdCBkeW5hbWljYWxseSBhZGp1c3QgdGhlIG1vbWVudHVtIHR3ZWVuLlxuICAgIHVwZGF0ZUNsYW1wcygpO1xuXG4gICAgaWYgKHR3ZWVuLmlzQWN0aXZlKCkgJiYgdHdlZW4udmFycy5zY3JvbGxZID4gbWF4WSkge1xuICAgICAgc2Nyb2xsRnVuY1koKSA+IG1heFkgPyB0d2Vlbi5wcm9ncmVzcygxKSAmJiBzY3JvbGxGdW5jWShtYXhZKSA6IHR3ZWVuLnJlc2V0VG8oXCJzY3JvbGxZXCIsIG1heFkpO1xuICAgIH1cbiAgfTtcblxuICBjb250ZW50ICYmIGdzYXAuc2V0KGNvbnRlbnQsIHtcbiAgICB5OiBcIis9MFwiXG4gIH0pOyAvLyB0byBlbnN1cmUgdGhlcmUncyBhIGNhY2hlIChlbGVtZW50Ll9nc2FwKVxuXG4gIHZhcnMuaWdub3JlQ2hlY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgIHJldHVybiBfZml4SU9TQnVnICYmIGUudHlwZSA9PT0gXCJ0b3VjaG1vdmVcIiAmJiBpZ25vcmVEcmFnKGUpIHx8IHNjYWxlID4gMS4wNSAmJiBlLnR5cGUgIT09IFwidG91Y2hzdGFydFwiIHx8IHNlbGYuaXNHZXN0dXJpbmcgfHwgZS50b3VjaGVzICYmIGUudG91Y2hlcy5sZW5ndGggPiAxO1xuICB9O1xuXG4gIHZhcnMub25QcmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBza2lwVG91Y2hNb3ZlID0gZmFsc2U7XG4gICAgdmFyIHByZXZTY2FsZSA9IHNjYWxlO1xuICAgIHNjYWxlID0gX3JvdW5kKChfd2luLnZpc3VhbFZpZXdwb3J0ICYmIF93aW4udmlzdWFsVmlld3BvcnQuc2NhbGUgfHwgMSkgLyBpbml0aWFsU2NhbGUpO1xuICAgIHR3ZWVuLnBhdXNlKCk7XG4gICAgcHJldlNjYWxlICE9PSBzY2FsZSAmJiBfYWxsb3dOYXRpdmVQYW5uaW5nKHRhcmdldCwgc2NhbGUgPiAxLjAxID8gdHJ1ZSA6IG5vcm1hbGl6ZVNjcm9sbFggPyBmYWxzZSA6IFwieFwiKTtcbiAgICBzdGFydFNjcm9sbFggPSBzY3JvbGxGdW5jWCgpO1xuICAgIHN0YXJ0U2Nyb2xsWSA9IHNjcm9sbEZ1bmNZKCk7XG4gICAgdXBkYXRlQ2xhbXBzKCk7XG4gICAgbGFzdFJlZnJlc2hJRCA9IF9yZWZyZXNoSUQ7XG4gIH07XG5cbiAgdmFycy5vblJlbGVhc2UgPSB2YXJzLm9uR2VzdHVyZVN0YXJ0ID0gZnVuY3Rpb24gKHNlbGYsIHdhc0RyYWdnaW5nKSB7XG4gICAgc2Nyb2xsRnVuY1kub2Zmc2V0ICYmIHJlbW92ZUNvbnRlbnRPZmZzZXQoKTtcblxuICAgIGlmICghd2FzRHJhZ2dpbmcpIHtcbiAgICAgIG9uU3RvcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9zY3JvbGxlcnMuY2FjaGUrKzsgLy8gbWFrZSBzdXJlIHdlJ3JlIHB1bGxpbmcgdGhlIG5vbi1jYWNoZWQgdmFsdWVcbiAgICAgIC8vIGFsdGVybmF0ZSBhbGdvcml0aG06IGR1clggPSBNYXRoLm1pbig2LCBNYXRoLmFicyhzZWxmLnZlbG9jaXR5WCAvIDgwMCkpLFx0ZHVyID0gTWF0aC5tYXgoZHVyWCwgTWF0aC5taW4oNiwgTWF0aC5hYnMoc2VsZi52ZWxvY2l0eVkgLyA4MDApKSk7IGR1ciA9IGR1ciAqICgwLjQgKyAoMSAtIF9wb3dlcjRJbihkdXIgLyA2KSkgKiAwLjYpKSAqIChtb21lbnR1bVNwZWVkIHx8IDEpXG5cbiAgICAgIHZhciBkdXIgPSByZXNvbHZlTW9tZW50dW1EdXJhdGlvbigpLFxuICAgICAgICAgIGN1cnJlbnRTY3JvbGwsXG4gICAgICAgICAgZW5kU2Nyb2xsO1xuXG4gICAgICBpZiAobm9ybWFsaXplU2Nyb2xsWCkge1xuICAgICAgICBjdXJyZW50U2Nyb2xsID0gc2Nyb2xsRnVuY1goKTtcbiAgICAgICAgZW5kU2Nyb2xsID0gY3VycmVudFNjcm9sbCArIGR1ciAqIDAuMDUgKiAtc2VsZi52ZWxvY2l0eVggLyAwLjIyNzsgLy8gdGhlIGNvbnN0YW50IC4yMjcgaXMgZnJvbSBwb3dlcjQoMC4wNSkuIHZlbG9jaXR5IGlzIGludmVydGVkIGJlY2F1c2Ugc2Nyb2xsaW5nIGdvZXMgaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbi5cblxuICAgICAgICBkdXIgKj0gX2NsYW1wU2Nyb2xsQW5kR2V0RHVyYXRpb25NdWx0aXBsaWVyKHNjcm9sbEZ1bmNYLCBjdXJyZW50U2Nyb2xsLCBlbmRTY3JvbGwsIF9tYXhTY3JvbGwodGFyZ2V0LCBfaG9yaXpvbnRhbCkpO1xuICAgICAgICB0d2Vlbi52YXJzLnNjcm9sbFggPSBzY3JvbGxDbGFtcFgoZW5kU2Nyb2xsKTtcbiAgICAgIH1cblxuICAgICAgY3VycmVudFNjcm9sbCA9IHNjcm9sbEZ1bmNZKCk7XG4gICAgICBlbmRTY3JvbGwgPSBjdXJyZW50U2Nyb2xsICsgZHVyICogMC4wNSAqIC1zZWxmLnZlbG9jaXR5WSAvIDAuMjI3OyAvLyB0aGUgY29uc3RhbnQgLjIyNyBpcyBmcm9tIHBvd2VyNCgwLjA1KVxuXG4gICAgICBkdXIgKj0gX2NsYW1wU2Nyb2xsQW5kR2V0RHVyYXRpb25NdWx0aXBsaWVyKHNjcm9sbEZ1bmNZLCBjdXJyZW50U2Nyb2xsLCBlbmRTY3JvbGwsIF9tYXhTY3JvbGwodGFyZ2V0LCBfdmVydGljYWwpKTtcbiAgICAgIHR3ZWVuLnZhcnMuc2Nyb2xsWSA9IHNjcm9sbENsYW1wWShlbmRTY3JvbGwpO1xuICAgICAgdHdlZW4uaW52YWxpZGF0ZSgpLmR1cmF0aW9uKGR1cikucGxheSgwLjAxKTtcblxuICAgICAgaWYgKF9maXhJT1NCdWcgJiYgdHdlZW4udmFycy5zY3JvbGxZID49IG1heFkgfHwgY3VycmVudFNjcm9sbCA+PSBtYXhZIC0gMSkge1xuICAgICAgICAvLyBpT1MgYnVnOiBpdCdsbCBzaG93IHRoZSBhZGRyZXNzIGJhciBidXQgTk9UIGZpcmUgdGhlIHdpbmRvdyBcInJlc2l6ZVwiIGV2ZW50IHVudGlsIHRoZSBhbmltYXRpb24gaXMgZG9uZSBidXQgd2UgbXVzdCBwcm90ZWN0IGFnYWluc3Qgb3ZlcnNob290IHNvIHdlIGxldmVyYWdlIGFuIG9uVXBkYXRlIHRvIGRvIHNvLlxuICAgICAgICBnc2FwLnRvKHt9LCB7XG4gICAgICAgICAgb25VcGRhdGU6IG9uUmVzaXplLFxuICAgICAgICAgIGR1cmF0aW9uOiBkdXJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgb25SZWxlYXNlICYmIG9uUmVsZWFzZShzZWxmKTtcbiAgfTtcblxuICB2YXJzLm9uV2hlZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdHdlZW4uX3RzICYmIHR3ZWVuLnBhdXNlKCk7XG5cbiAgICBpZiAoX2dldFRpbWUoKSAtIHdoZWVsUmVmcmVzaCA+IDEwMDApIHtcbiAgICAgIC8vIGFmdGVyIDEgc2Vjb25kLCByZWZyZXNoIHRoZSBjbGFtcHMgb3RoZXJ3aXNlIHRoYXQnbGwgb25seSBoYXBwZW4gd2hlbiBTY3JvbGxUcmlnZ2VyLnJlZnJlc2goKSBpcyBjYWxsZWQgb3IgZm9yIHRvdWNoLXNjcm9sbGluZy5cbiAgICAgIGxhc3RSZWZyZXNoSUQgPSAwO1xuICAgICAgd2hlZWxSZWZyZXNoID0gX2dldFRpbWUoKTtcbiAgICB9XG4gIH07XG5cbiAgdmFycy5vbkNoYW5nZSA9IGZ1bmN0aW9uIChzZWxmLCBkeCwgZHksIHhBcnJheSwgeUFycmF5KSB7XG4gICAgX3JlZnJlc2hJRCAhPT0gbGFzdFJlZnJlc2hJRCAmJiB1cGRhdGVDbGFtcHMoKTtcbiAgICBkeCAmJiBub3JtYWxpemVTY3JvbGxYICYmIHNjcm9sbEZ1bmNYKHNjcm9sbENsYW1wWCh4QXJyYXlbMl0gPT09IGR4ID8gc3RhcnRTY3JvbGxYICsgKHNlbGYuc3RhcnRYIC0gc2VsZi54KSA6IHNjcm9sbEZ1bmNYKCkgKyBkeCAtIHhBcnJheVsxXSkpOyAvLyBmb3IgbW9yZSBwcmVjaXNpb24sIHdlIHRyYWNrIHBvaW50ZXIvdG91Y2ggbW92ZW1lbnQgZnJvbSB0aGUgc3RhcnQsIG90aGVyd2lzZSBpdCdsbCBkcmlmdC5cblxuICAgIGlmIChkeSkge1xuICAgICAgc2Nyb2xsRnVuY1kub2Zmc2V0ICYmIHJlbW92ZUNvbnRlbnRPZmZzZXQoKTtcbiAgICAgIHZhciBpc1RvdWNoID0geUFycmF5WzJdID09PSBkeSxcbiAgICAgICAgICB5ID0gaXNUb3VjaCA/IHN0YXJ0U2Nyb2xsWSArIHNlbGYuc3RhcnRZIC0gc2VsZi55IDogc2Nyb2xsRnVuY1koKSArIGR5IC0geUFycmF5WzFdLFxuICAgICAgICAgIHlDbGFtcGVkID0gc2Nyb2xsQ2xhbXBZKHkpO1xuICAgICAgaXNUb3VjaCAmJiB5ICE9PSB5Q2xhbXBlZCAmJiAoc3RhcnRTY3JvbGxZICs9IHlDbGFtcGVkIC0geSk7XG4gICAgICBzY3JvbGxGdW5jWSh5Q2xhbXBlZCk7XG4gICAgfVxuXG4gICAgKGR5IHx8IGR4KSAmJiBfdXBkYXRlQWxsKCk7XG4gIH07XG5cbiAgdmFycy5vbkVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBfYWxsb3dOYXRpdmVQYW5uaW5nKHRhcmdldCwgbm9ybWFsaXplU2Nyb2xsWCA/IGZhbHNlIDogXCJ4XCIpO1xuXG4gICAgU2Nyb2xsVHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKFwicmVmcmVzaFwiLCBvblJlc2l6ZSk7XG5cbiAgICBfYWRkTGlzdGVuZXIoX3dpbiwgXCJyZXNpemVcIiwgb25SZXNpemUpO1xuXG4gICAgaWYgKHNjcm9sbEZ1bmNZLnNtb290aCkge1xuICAgICAgc2Nyb2xsRnVuY1kudGFyZ2V0LnN0eWxlLnNjcm9sbEJlaGF2aW9yID0gXCJhdXRvXCI7XG4gICAgICBzY3JvbGxGdW5jWS5zbW9vdGggPSBzY3JvbGxGdW5jWC5zbW9vdGggPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpbnB1dE9ic2VydmVyLmVuYWJsZSgpO1xuICB9O1xuXG4gIHZhcnMub25EaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIF9hbGxvd05hdGl2ZVBhbm5pbmcodGFyZ2V0LCB0cnVlKTtcblxuICAgIF9yZW1vdmVMaXN0ZW5lcihfd2luLCBcInJlc2l6ZVwiLCBvblJlc2l6ZSk7XG5cbiAgICBTY3JvbGxUcmlnZ2VyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZWZyZXNoXCIsIG9uUmVzaXplKTtcbiAgICBpbnB1dE9ic2VydmVyLmtpbGwoKTtcbiAgfTtcblxuICB2YXJzLmxvY2tBeGlzID0gdmFycy5sb2NrQXhpcyAhPT0gZmFsc2U7XG4gIHNlbGYgPSBuZXcgT2JzZXJ2ZXIodmFycyk7XG4gIHNlbGYuaU9TID0gX2ZpeElPU0J1ZzsgLy8gdXNlZCBpbiB0aGUgT2JzZXJ2ZXIgZ2V0Q2FjaGVkU2Nyb2xsKCkgZnVuY3Rpb24gdG8gd29yayBhcm91bmQgYW4gaU9TIGJ1ZyB0aGF0IHdyZWFrcyBoYXZvYyB3aXRoIFRvdWNoRXZlbnQuY2xpZW50WSBpZiB3ZSBhbGxvdyBzY3JvbGwgdG8gZ28gYWxsIHRoZSB3YXkgYmFjayB0byAwLlxuXG4gIF9maXhJT1NCdWcgJiYgIXNjcm9sbEZ1bmNZKCkgJiYgc2Nyb2xsRnVuY1koMSk7IC8vIGlPUyBidWcgY2F1c2VzIGV2ZW50LmNsaWVudFkgdmFsdWVzIHRvIGZyZWFrIG91dCAod2lsZGx5IGluYWNjdXJhdGUpIGlmIHRoZSBzY3JvbGwgcG9zaXRpb24gaXMgZXhhY3RseSAwLlxuXG4gIF9maXhJT1NCdWcgJiYgZ3NhcC50aWNrZXIuYWRkKF9wYXNzVGhyb3VnaCk7IC8vIHByZXZlbnQgdGhlIHRpY2tlciBmcm9tIHNsZWVwaW5nXG5cbiAgb25TdG9wRGVsYXllZENhbGwgPSBzZWxmLl9kYztcbiAgdHdlZW4gPSBnc2FwLnRvKHNlbGYsIHtcbiAgICBlYXNlOiBcInBvd2VyNFwiLFxuICAgIHBhdXNlZDogdHJ1ZSxcbiAgICBpbmhlcml0OiBmYWxzZSxcbiAgICBzY3JvbGxYOiBub3JtYWxpemVTY3JvbGxYID8gXCIrPTAuMVwiIDogXCIrPTBcIixcbiAgICBzY3JvbGxZOiBcIis9MC4xXCIsXG4gICAgbW9kaWZpZXJzOiB7XG4gICAgICBzY3JvbGxZOiBfaW50ZXJydXB0aW9uVHJhY2tlcihzY3JvbGxGdW5jWSwgc2Nyb2xsRnVuY1koKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHdlZW4ucGF1c2UoKTtcbiAgICAgIH0pXG4gICAgfSxcbiAgICBvblVwZGF0ZTogX3VwZGF0ZUFsbCxcbiAgICBvbkNvbXBsZXRlOiBvblN0b3BEZWxheWVkQ2FsbC52YXJzLm9uQ29tcGxldGVcbiAgfSk7IC8vIHdlIG5lZWQgdGhlIG1vZGlmaWVyIHRvIHNlbnNlIGlmIHRoZSBzY3JvbGwgcG9zaXRpb24gaXMgYWx0ZXJlZCBvdXRzaWRlIG9mIHRoZSBtb21lbnR1bSB0d2VlbiAobGlrZSB3aXRoIGEgc2Nyb2xsVG8gdHdlZW4pIHNvIHdlIGNhbiBwYXVzZSgpIGl0IHRvIHByZXZlbnQgY29uZmxpY3RzLlxuXG4gIHJldHVybiBzZWxmO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5zb3J0ID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgcmV0dXJuIF90cmlnZ2Vycy5zb3J0KGZ1bmMgfHwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gKGEudmFycy5yZWZyZXNoUHJpb3JpdHkgfHwgMCkgKiAtMWU2ICsgYS5zdGFydCAtIChiLnN0YXJ0ICsgKGIudmFycy5yZWZyZXNoUHJpb3JpdHkgfHwgMCkgKiAtMWU2KTtcbiAgfSk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLm9ic2VydmUgPSBmdW5jdGlvbiAodmFycykge1xuICByZXR1cm4gbmV3IE9ic2VydmVyKHZhcnMpO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5ub3JtYWxpemVTY3JvbGwgPSBmdW5jdGlvbiAodmFycykge1xuICBpZiAodHlwZW9mIHZhcnMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gX25vcm1hbGl6ZXI7XG4gIH1cblxuICBpZiAodmFycyA9PT0gdHJ1ZSAmJiBfbm9ybWFsaXplcikge1xuICAgIHJldHVybiBfbm9ybWFsaXplci5lbmFibGUoKTtcbiAgfVxuXG4gIGlmICh2YXJzID09PSBmYWxzZSkge1xuICAgIF9ub3JtYWxpemVyICYmIF9ub3JtYWxpemVyLmtpbGwoKTtcbiAgICBfbm9ybWFsaXplciA9IHZhcnM7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG5vcm1hbGl6ZXIgPSB2YXJzIGluc3RhbmNlb2YgT2JzZXJ2ZXIgPyB2YXJzIDogX2dldFNjcm9sbE5vcm1hbGl6ZXIodmFycyk7XG4gIF9ub3JtYWxpemVyICYmIF9ub3JtYWxpemVyLnRhcmdldCA9PT0gbm9ybWFsaXplci50YXJnZXQgJiYgX25vcm1hbGl6ZXIua2lsbCgpO1xuICBfaXNWaWV3cG9ydChub3JtYWxpemVyLnRhcmdldCkgJiYgKF9ub3JtYWxpemVyID0gbm9ybWFsaXplcik7XG4gIHJldHVybiBub3JtYWxpemVyO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5jb3JlID0ge1xuICAvLyBzbWFsbGVyIGZpbGUgc2l6ZSB3YXkgdG8gbGV2ZXJhZ2UgaW4gU2Nyb2xsU21vb3RoZXIgYW5kIE9ic2VydmVyXG4gIF9nZXRWZWxvY2l0eVByb3A6IF9nZXRWZWxvY2l0eVByb3AsXG4gIF9pbnB1dE9ic2VydmVyOiBfaW5wdXRPYnNlcnZlcixcbiAgX3Njcm9sbGVyczogX3Njcm9sbGVycyxcbiAgX3Byb3hpZXM6IF9wcm94aWVzLFxuICBicmlkZ2U6IHtcbiAgICAvLyB3aGVuIG5vcm1hbGl6ZVNjcm9sbCBzZXRzIHRoZSBzY3JvbGwgcG9zaXRpb24gKHNzID0gc2V0U2Nyb2xsKVxuICAgIHNzOiBmdW5jdGlvbiBzcygpIHtcbiAgICAgIF9sYXN0U2Nyb2xsVGltZSB8fCBfZGlzcGF0Y2goXCJzY3JvbGxTdGFydFwiKTtcbiAgICAgIF9sYXN0U2Nyb2xsVGltZSA9IF9nZXRUaW1lKCk7XG4gICAgfSxcbiAgICAvLyBhIHdheSB0byBnZXQgdGhlIF9yZWZyZXNoaW5nIHZhbHVlIGluIE9ic2VydmVyXG4gICAgcmVmOiBmdW5jdGlvbiByZWYoKSB7XG4gICAgICByZXR1cm4gX3JlZnJlc2hpbmc7XG4gICAgfVxuICB9XG59O1xuX2dldEdTQVAoKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIpO1xuZXhwb3J0IHsgU2Nyb2xsVHJpZ2dlciBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IHsgZ3NhcCB9IGZyb20gJ2dzYXAnO1xyXG5pbXBvcnQgTGVuaXMgZnJvbSAnbGVuaXMnO1xyXG5pbXBvcnQgU2Nyb2xsVHJpZ2dlciBmcm9tICdnc2FwL1Njcm9sbFRyaWdnZXInO1xyXG5nc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIpO1xyXG5cclxuY29uc3QgbGVuaXMgPSBuZXcgTGVuaXMoe1xyXG4gIGxlcnA6IDAuMSxcclxuICBzbW9vdGg6IHRydWUsXHJcbn0pO1xyXG5cclxubGVuaXMub24oJ3Njcm9sbCcsIChlKSA9PiB7fSk7XHJcblxyXG5sZW5pcy5vbignc2Nyb2xsJywgU2Nyb2xsVHJpZ2dlci51cGRhdGUpO1xyXG5cclxuZ3NhcC50aWNrZXIuYWRkKCh0aW1lKSA9PiB7XHJcbiAgbGVuaXMucmFmKHRpbWUgKiAxMDAwKTtcclxufSk7XHJcblxyXG5nc2FwLnRpY2tlci5sYWdTbW9vdGhpbmcoMCk7XHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuZ3NhcC50bygnLmhlcm8taW1nJywge1xyXG4gIHk6IC0zMDAsXHJcbiAgb3BhY2l0eTogMCxcclxuICBzY3JvbGxUcmlnZ2VyOiB7XHJcbiAgICB0cmlnZ2VyOiAnI05vc290cm9zJyxcclxuICAgIHNjcnViOiAxLFxyXG4gICAgc3RhcnQ6ICd0b3AgODAlJyxcclxuICAgIGVuZDogJ3RvcCAxMCUnLFxyXG4gIH0sXHJcbn0pO1xyXG5nc2FwLnRvKCcuaG9tZS1oZWFkZXInLCB7XHJcbiAgeTogLTIwMCxcclxuICBvcGFjaXR5OiAwLFxyXG4gIHNjcm9sbFRyaWdnZXI6IHtcclxuICAgIHRyaWdnZXI6ICcjTm9zb3Ryb3MnLFxyXG4gICAgc2NydWI6IDEsXHJcbiAgICBzdGFydDogJ3RvcCA4MCUnLFxyXG4gICAgZW5kOiAndG9wIDEwJScsXHJcbiAgfSxcclxufSk7XHJcbmdzYXAudG8oJy5ob21lLWJ0bicsIHtcclxuICB5OiAtMTAwLFxyXG4gIG9wYWNpdHk6IDAsXHJcbiAgc2Nyb2xsVHJpZ2dlcjoge1xyXG4gICAgdHJpZ2dlcjogJyNOb3NvdHJvcycsXHJcbiAgICBzY3J1YjogMSxcclxuICAgIHN0YXJ0OiAndG9wIDgwJScsXHJcbiAgICBlbmQ6ICd0b3AgMTAlJyxcclxuICB9LFxyXG59KTtcclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuZ3NhcC5mcm9tKCcuYmlvJywge1xyXG4gIG9wYWNpdHk6IDAsXHJcbiAgc2Nyb2xsVHJpZ2dlcjoge1xyXG4gICAgdHJpZ2dlcjogJyNOb3NvdHJvcycsXHJcbiAgICBzY3J1YjogMSxcclxuICAgIHN0YXJ0OiAndG9wIDUwJScsXHJcbiAgICBlbmQ6ICd0b3AgMTAlJyxcclxuICB9LFxyXG59KTtcclxuZ3NhcC5mcm9tKCcuYmlvLXAnLCB7XHJcbiAgeTogMzAwLFxyXG4gIHN0YWdnZXI6IDAuNSxcclxuICBkdXJhdGlvbjogMSxcclxuICBzY3JvbGxUcmlnZ2VyOiB7XHJcbiAgICB0cmlnZ2VyOiAnI05vc290cm9zJyxcclxuICAgIHNjcnViOiAxLFxyXG4gICAgc3RhcnQ6ICd0b3AgNDAlJyxcclxuICAgIGVuZDogJ3RvcCAxMCUnLFxyXG4gIH0sXHJcbn0pO1xyXG5nc2FwLmZyb20oJy5yZWZlcmVuY2VzJywge1xyXG4gIHk6IDMwMCxcclxuICBzY3JvbGxUcmlnZ2VyOiB7XHJcbiAgICB0cmlnZ2VyOiAnI05vc290cm9zJyxcclxuICAgIHNjcnViOiAxLFxyXG4gICAgc3RhcnQ6ICd0b3AgNDAlJyxcclxuICAgIGVuZDogJ3RvcCAxMCUnLFxyXG4gIH0sXHJcbn0pO1xyXG5nc2FwLmZyb20oJy5yZWYtaWNvbicsIHtcclxuICB5OiAzMDAsXHJcbiAgc3RhZ2dlcjogMC41LFxyXG4gIGR1cmF0aW9uOiAxLFxyXG4gIHNjcm9sbFRyaWdnZXI6IHtcclxuICAgIHRyaWdnZXI6ICcjTm9zb3Ryb3MnLFxyXG4gICAgc2NydWI6IDEsXHJcbiAgICBzdGFydDogJ3RvcCAxNSUnLFxyXG4gICAgZW5kOiAndG9wIDUlJyxcclxuICB9LFxyXG59KTtcclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbmdzYXAuZnJvbSgnLnNlcnZpY2lvcy1oZWFkZXInLCB7XHJcbiAgeTogMjAwLFxyXG4gIG9wYWNpdHk6IDAsXHJcbiAgc3RhZ2dlcjogMC41LFxyXG4gIGR1cmF0aW9uOiAxLFxyXG4gIHNjcm9sbFRyaWdnZXI6IHtcclxuICAgIHRyaWdnZXI6ICcjU2VydmljaW9zJyxcclxuICAgIHNjcnViOiAxLFxyXG4gICAgc3RhcnQ6ICd0b3AgNzUlJyxcclxuICAgIGVuZDogJ3RvcCA1JScsXHJcbiAgfSxcclxufSk7XHJcbmdzYXAuZnJvbSgnLmNhcmRzJywge1xyXG4gIHk6IDcwMCxcclxuICBzY3JvbGxUcmlnZ2VyOiB7XHJcbiAgICB0cmlnZ2VyOiAnI1NlcnZpY2lvcycsXHJcbiAgICBzY3J1YjogMSxcclxuICAgIHN0YXJ0OiAndG9wIDYwJScsXHJcbiAgICBlbmQ6ICd0b3AgNSUnLFxyXG4gIH0sXHJcbn0pO1xyXG5cclxuZ3NhcC5mcm9tKCcuY2FyZCcsIHtcclxuICBzY2FsZTogMCxcclxuICBvcGFjaXR5OiAwLFxyXG4gIGVhc2U6ICdleHBvU2NhbGUnLFxyXG4gIHN0YWdnZXI6IHtcclxuICAgIGFtb3VudDogMixcclxuICB9LFxyXG4gIHNjcm9sbFRyaWdnZXI6IHtcclxuICAgIHRyaWdnZXI6ICcjU2VydmljaW9zJyxcclxuICAgIHNjcnViOiAxLFxyXG4gICAgc3RhcnQ6ICd0b3AgMzAlJyxcclxuICAgIGVuZDogJ3RvcCA1JScsXHJcbiAgfSxcclxufSk7XHJcbmdzYXAuZnJvbVRvKFxyXG4gICcuY2FyZCcsXHJcbiAge1xyXG4gICAgc2NhbGU6IDEsXHJcbiAgICBvcGFjaXR5OiAxLFxyXG4gICAgeTogMCxcclxuICB9LFxyXG4gIHtcclxuICAgIHk6IC0yMDAsXHJcbiAgICBzY2FsZTogMCxcclxuICAgIG9wYWNpdHk6IDAsXHJcbiAgICBlYXNlOiAnZXhwb1NjYWxlJyxcclxuICAgIHN0YWdnZXI6IHsgZWFjaDogMiB9LFxyXG4gICAgc2Nyb2xsVHJpZ2dlcjoge1xyXG4gICAgICB0cmlnZ2VyOiAnI0NvbnRhY3RvJyxcclxuICAgICAgc2NydWI6IDEsXHJcbiAgICAgIHN0YXJ0OiAndG9wIDgwJScsXHJcbiAgICAgIGVuZDogJ3RvcCAyMCUnLFxyXG4gICAgfSxcclxuICB9XHJcbik7XHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbmdzYXAuZnJvbSgnLml0ZW1zLWNvbnRhY3RvJywge1xyXG4gIHk6IDMwMCxcclxuICBvcGFjaXR5OiAwLFxyXG4gIGVhc2U6ICdleHBvU2NhbGUnLFxyXG4gIHNjcm9sbFRyaWdnZXI6IHtcclxuICAgIHRyaWdnZXI6ICcjQ29udGFjdG8nLFxyXG4gICAgc2NydWI6IDEsXHJcbiAgICBzdGFydDogJ3RvcCA4MCUnLFxyXG4gICAgZW5kOiAndG9wIDIwJScsXHJcbiAgfSxcclxufSk7XHJcbmdzYXAuZnJvbSgnLm1hcCcsIHtcclxuICBzY2FsZTogMCxcclxuICB5OiA0MDAsXHJcbiAgb3BhY2l0eTogMCxcclxuICBlYXNlOiAnZXhwb1NjYWxlJyxcclxuICBzY3JvbGxUcmlnZ2VyOiB7XHJcbiAgICB0cmlnZ2VyOiAnI0NvbnRhY3RvJyxcclxuICAgIHNjcnViOiAxLFxyXG4gICAgc3RhcnQ6ICd0b3AgNTAlJyxcclxuICAgIGVuZDogJ3RvcCAyMCUnLFxyXG4gIH0sXHJcbn0pO1xyXG4iLCJpbXBvcnQgZ3NhcCBmcm9tICdnc2FwJztcclxuXHJcbmNvbnN0IFRMID0gZ3NhcC50aW1lbGluZSh7IGRlZmF1bHRzOiB7IGR1cmF0aW9uOiAxIH0gfSk7XHJcblxyXG5UTC5mcm9tKCcuaGVyby1pbWcnLCB7IG9wYWNpdHk6IDAsIHNjYWxlOiAyIH0sIHsgZWFzZTogJ2V4cG9TY2FsZScgfSlcclxuICAuZnJvbSgnLmhvbWUtaGVhZGVyJywgeyBvcGFjaXR5OiAwLCB5OiAzMDAgfSwgeyBlYXNlOiAnZXhwb1NjYWxlJyB9KVxyXG4gIC5mcm9tKCcuaG9tZS1idG4nLCB7IG9wYWNpdHk6IDAsIHk6IDUwMCB9LCB7IGRlbGF5OiAxLCBlYXNlOiAnZXhwb1NjYWxlJyB9KTtcclxuIl0sIm5hbWVzIjpbImZvcm0iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJpbnB1dCIsImdldEVsZW1lbnRCeUlkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImVtYWlsYWRkcmVzcyIsInZhbHVlIiwiRW1haWwiLCJzZW5kIiwiSG9zdCIsIlVzZXJuYW1lIiwiUGFzc3dvcmQiLCJUbyIsIkZyb20iLCJTdWJqZWN0IiwiQm9keSIsInRoZW4iLCJhbGVydCIsInNlbmRFbWFpbCIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm5jIiwibG9jYWxzIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJfX3Byb3RvX18iLCJfc3VwcHJlc3NPdmVyd3JpdGVzIiwiX3JldmVydGluZyIsIl9jb250ZXh0IiwiX2dsb2JhbFRpbWVsaW5lIiwiX3dpbiIsIl9jb3JlSW5pdHRlZCIsIl9kb2MiLCJfY29yZVJlYWR5IiwiX2xhc3RSZW5kZXJlZEZyYW1lIiwiX3F1aWNrVHdlZW4iLCJfdGlja2VyQWN0aXZlIiwiYyIsIm4xIiwibjIiLCJuMyIsImVhc2VPdXQiLCJfY29uZmlnIiwiYXV0b1NsZWVwIiwiZm9yY2UzRCIsIm51bGxUYXJnZXRXYXJuIiwidW5pdHMiLCJsaW5lSGVpZ2h0IiwiX2RlZmF1bHRzIiwiZHVyYXRpb24iLCJvdmVyd3JpdGUiLCJkZWxheSIsIl9iaWdOdW0iLCJfdGlueU51bSIsIl8yUEkiLCJNYXRoIiwiUEkiLCJfSEFMRl9QSSIsIl9nc0lEIiwiX3NxcnQiLCJzcXJ0IiwiX2NvcyIsImNvcyIsIl9zaW4iLCJzaW4iLCJfaXNTdHJpbmciLCJfaXNGdW5jdGlvbiIsIl9pc051bWJlciIsIl9pc1VuZGVmaW5lZCIsIl9pc09iamVjdCIsIl9pc05vdEZhbHNlIiwiX3dpbmRvd0V4aXN0cyIsIl9pc0Z1bmNPclN0cmluZyIsIl9pc1R5cGVkQXJyYXkiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIl9pc0FycmF5IiwiQXJyYXkiLCJpc0FycmF5IiwiX3N0cmljdE51bUV4cCIsIl9udW1FeHAiLCJfbnVtV2l0aFVuaXRFeHAiLCJfY29tcGxleFN0cmluZ051bUV4cCIsIl9yZWxFeHAiLCJfZGVsaW1pdGVkVmFsdWVFeHAiLCJfdW5pdEV4cCIsIl9nbG9iYWxzIiwiX2luc3RhbGxTY29wZSIsIl9pbnN0YWxsIiwic2NvcGUiLCJfbWVyZ2UiLCJnc2FwIiwiX21pc3NpbmdQbHVnaW4iLCJwcm9wZXJ0eSIsImNvbnNvbGUiLCJ3YXJuIiwiX3dhcm4iLCJtZXNzYWdlIiwic3VwcHJlc3MiLCJfYWRkR2xvYmFsIiwibmFtZSIsIl9lbXB0eUZ1bmMiLCJfc3RhcnRBdFJldmVydENvbmZpZyIsInN1cHByZXNzRXZlbnRzIiwiaXNTdGFydCIsImtpbGwiLCJfcmV2ZXJ0Q29uZmlnTm9LaWxsIiwiX3JldmVydENvbmZpZyIsIl9yZXNlcnZlZFByb3BzIiwiX2xhenlUd2VlbnMiLCJfbGF6eUxvb2t1cCIsIl9wbHVnaW5zIiwiX2VmZmVjdHMiLCJfbmV4dEdDRnJhbWUiLCJfaGFybmVzc1BsdWdpbnMiLCJfY2FsbGJhY2tOYW1lcyIsIl9oYXJuZXNzIiwidGFyZ2V0cyIsImhhcm5lc3NQbHVnaW4iLCJfZ3NhcCIsImhhcm5lc3MiLCJ0YXJnZXRUZXN0IiwiR1NDYWNoZSIsIl9nZXRDYWNoZSIsInRvQXJyYXkiLCJfZ2V0UHJvcGVydHkiLCJ2IiwiZ2V0QXR0cmlidXRlIiwiX2ZvckVhY2hOYW1lIiwibmFtZXMiLCJmdW5jIiwic3BsaXQiLCJmb3JFYWNoIiwiX3JvdW5kIiwicm91bmQiLCJfcm91bmRQcmVjaXNlIiwiX3BhcnNlUmVsYXRpdmUiLCJzdGFydCIsIm9wZXJhdG9yIiwiY2hhckF0IiwiZW5kIiwicGFyc2VGbG9hdCIsInN1YnN0ciIsIl9hcnJheUNvbnRhaW5zQW55IiwidG9TZWFyY2giLCJ0b0ZpbmQiLCJsIiwiaW5kZXhPZiIsIl9sYXp5UmVuZGVyIiwidHdlZW4iLCJzbGljZSIsIl9sYXp5IiwicmVuZGVyIiwiX2xhenlTYWZlUmVuZGVyIiwiYW5pbWF0aW9uIiwidGltZSIsImZvcmNlIiwiX2luaXR0ZWQiLCJfc3RhcnRBdCIsIl9udW1lcmljSWZQb3NzaWJsZSIsIm1hdGNoIiwidHJpbSIsIl9wYXNzVGhyb3VnaCIsInAiLCJfc2V0RGVmYXVsdHMiLCJkZWZhdWx0cyIsInRvTWVyZ2UiLCJfbWVyZ2VEZWVwIiwiX2NvcHlFeGNsdWRpbmciLCJleGNsdWRpbmciLCJjb3B5IiwiX2luaGVyaXREZWZhdWx0cyIsInZhcnMiLCJleGNsdWRlRHVyYXRpb24iLCJwYXJlbnQiLCJrZXlmcmFtZXMiLCJpbmhlcml0IiwiX2RwIiwiX2FkZExpbmtlZExpc3RJdGVtIiwiY2hpbGQiLCJmaXJzdFByb3AiLCJsYXN0UHJvcCIsInNvcnRCeSIsInQiLCJwcmV2IiwiX3ByZXYiLCJfbmV4dCIsIl9yZW1vdmVMaW5rZWRMaXN0SXRlbSIsIm5leHQiLCJfcmVtb3ZlRnJvbVBhcmVudCIsIm9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUiLCJhdXRvUmVtb3ZlQ2hpbGRyZW4iLCJfYWN0IiwiX3VuY2FjaGUiLCJfZW5kIiwiX2R1ciIsIl9zdGFydCIsIl9kaXJ0eSIsIl9yZXdpbmRTdGFydEF0IiwidG90YWxUaW1lIiwicmV2ZXJ0IiwiaW1tZWRpYXRlUmVuZGVyIiwiYXV0b1JldmVydCIsIl9oYXNOb1BhdXNlZEFuY2VzdG9ycyIsIl90cyIsIl9lbGFwc2VkQ3ljbGVEdXJhdGlvbiIsIl9yZXBlYXQiLCJfYW5pbWF0aW9uQ3ljbGUiLCJfdFRpbWUiLCJfckRlbGF5IiwidFRpbWUiLCJjeWNsZUR1cmF0aW9uIiwid2hvbGUiLCJmbG9vciIsIl9wYXJlbnRUb0NoaWxkVG90YWxUaW1lIiwicGFyZW50VGltZSIsInRvdGFsRHVyYXRpb24iLCJfdER1ciIsIl9zZXRFbmQiLCJhYnMiLCJfcnRzIiwiX2FsaWduUGxheWhlYWQiLCJzbW9vdGhDaGlsZFRpbWluZyIsIl90aW1lIiwiX3Bvc3RBZGRDaGVja3MiLCJ0aW1lbGluZSIsImFkZCIsInJhd1RpbWUiLCJfY2xhbXAiLCJfelRpbWUiLCJfYWRkVG9UaW1lbGluZSIsInBvc2l0aW9uIiwic2tpcENoZWNrcyIsIl9wYXJzZVBvc2l0aW9uIiwiX2RlbGF5IiwidGltZVNjYWxlIiwiX3NvcnQiLCJfaXNGcm9tT3JGcm9tU3RhcnQiLCJfcmVjZW50IiwiX3Njcm9sbFRyaWdnZXIiLCJ0cmlnZ2VyIiwiU2Nyb2xsVHJpZ2dlciIsIl9hdHRlbXB0SW5pdFR3ZWVuIiwiX2luaXRUd2VlbiIsIl9wdCIsImxhenkiLCJfdGlja2VyIiwiZnJhbWUiLCJfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0IiwiX3JlZiIsIl9sb2NrIiwiX3JlZjIiLCJfc2V0RHVyYXRpb24iLCJza2lwVW5jYWNoZSIsImxlYXZlUGxheWhlYWQiLCJyZXBlYXQiLCJkdXIiLCJ0b3RhbFByb2dyZXNzIiwiX29uVXBkYXRlVG90YWxEdXJhdGlvbiIsIlRpbWVsaW5lIiwiX3plcm9Qb3NpdGlvbiIsImVuZFRpbWUiLCJwZXJjZW50QW5pbWF0aW9uIiwib2Zmc2V0IiwiaXNQZXJjZW50IiwibGFiZWxzIiwicmVjZW50IiwiY2xpcHBlZER1cmF0aW9uIiwiaXNOYU4iLCJyZXBsYWNlIiwiX2NyZWF0ZVR3ZWVuVHlwZSIsInR5cGUiLCJwYXJhbXMiLCJpclZhcnMiLCJpc0xlZ2FjeSIsInZhcnNJbmRleCIsInJ1bkJhY2t3YXJkcyIsInN0YXJ0QXQiLCJUd2VlbiIsIl9jb25kaXRpb25hbFJldHVybiIsIm1pbiIsIm1heCIsImdldFVuaXQiLCJleGVjIiwiX3NsaWNlIiwiX2lzQXJyYXlMaWtlIiwibm9uRW1wdHkiLCJub2RlVHlwZSIsIl9mbGF0dGVuIiwiYXIiLCJsZWF2ZVN0cmluZ3MiLCJhY2N1bXVsYXRvciIsIl9hY2N1bXVsYXRvciIsInNlbGVjdG9yIiwiX3dha2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWwiLCJjdXJyZW50IiwibmF0aXZlRWxlbWVudCIsInNodWZmbGUiLCJzb3J0IiwicmFuZG9tIiwiZGlzdHJpYnV0ZSIsImVhY2giLCJlYXNlIiwiX3BhcnNlRWFzZSIsImZyb20iLCJjYWNoZSIsImlzRGVjaW1hbCIsInJhdGlvcyIsImF4aXMiLCJyYXRpb1giLCJyYXRpb1kiLCJjZW50ZXIiLCJlZGdlcyIsIm9yaWdpblgiLCJvcmlnaW5ZIiwieCIsInkiLCJqIiwid3JhcEF0IiwiZGlzdGFuY2VzIiwiZ3JpZCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJhbW91bnQiLCJiIiwidSIsIl9pbnZlcnRFYXNlIiwiX3JvdW5kTW9kaWZpZXIiLCJwb3ciLCJyYXciLCJzbmFwIiwic25hcFRvIiwicmFkaXVzIiwiaXMyRCIsInZhbHVlcyIsImluY3JlbWVudCIsImR4IiwiZHkiLCJjbG9zZXN0Iiwicm91bmRpbmdJbmNyZW1lbnQiLCJyZXR1cm5GdW5jdGlvbiIsIl93cmFwQXJyYXkiLCJ3cmFwcGVyIiwiX3JlcGxhY2VSYW5kb20iLCJudW1zIiwicyIsIm1hcFJhbmdlIiwiaW5NaW4iLCJpbk1heCIsIm91dE1pbiIsIm91dE1heCIsImluUmFuZ2UiLCJvdXRSYW5nZSIsIl9nZXRMYWJlbEluRGlyZWN0aW9uIiwiZnJvbVRpbWUiLCJiYWNrd2FyZCIsImRpc3RhbmNlIiwibGFiZWwiLCJfY2FsbGJhY2siLCJleGVjdXRlTGF6eUZpcnN0IiwiY2FsbGJhY2siLCJwcmV2Q29udGV4dCIsImNvbnRleHQiLCJfY3R4IiwiY2FsbGJhY2tTY29wZSIsIl9pbnRlcnJ1cHQiLCJzY3JvbGxUcmlnZ2VyIiwicHJvZ3Jlc3MiLCJfcmVnaXN0ZXJQbHVnaW5RdWV1ZSIsIl9jcmVhdGVQbHVnaW4iLCJjb25maWciLCJoZWFkbGVzcyIsImlzRnVuYyIsIlBsdWdpbiIsImluaXQiLCJfcHJvcHMiLCJpbnN0YW5jZURlZmF1bHRzIiwiX3JlbmRlclByb3BUd2VlbnMiLCJfYWRkUHJvcFR3ZWVuIiwiX2tpbGxQcm9wVHdlZW5zT2YiLCJtb2RpZmllciIsIl9hZGRQbHVnaW5Nb2RpZmllciIsInJhd1ZhcnMiLCJzdGF0aWNzIiwiZ2V0U2V0dGVyIiwiX2dldFNldHRlciIsImFsaWFzZXMiLCJyZWdpc3RlciIsInRvVXBwZXJDYXNlIiwiUHJvcFR3ZWVuIiwiXzI1NSIsIl9jb2xvckxvb2t1cCIsImFxdWEiLCJsaW1lIiwic2lsdmVyIiwiYmxhY2siLCJtYXJvb24iLCJ0ZWFsIiwiYmx1ZSIsIm5hdnkiLCJ3aGl0ZSIsIm9saXZlIiwieWVsbG93Iiwib3JhbmdlIiwiZ3JheSIsInB1cnBsZSIsImdyZWVuIiwicmVkIiwicGluayIsImN5YW4iLCJ0cmFuc3BhcmVudCIsIl9odWUiLCJoIiwibTEiLCJtMiIsInNwbGl0Q29sb3IiLCJ0b0hTTCIsImZvcmNlQWxwaGEiLCJyIiwiZyIsIndhc0hTTCIsInBhcnNlSW50IiwiTnVtYmVyIiwiX2NvbG9yT3JkZXJEYXRhIiwiX2NvbG9yRXhwIiwiX2Zvcm1hdENvbG9ycyIsIm9yZGVyTWF0Y2hEYXRhIiwic2hlbGwiLCJjb2xvcnMiLCJjb2xvciIsInNoaWZ0IiwiUmVnRXhwIiwiX2hzbEV4cCIsIl9jb2xvclN0cmluZ0ZpbHRlciIsImNvbWJpbmVkIiwibGFzdEluZGV4IiwidGVzdCIsIl9pZCIsIl9yZXEiLCJfcmFmIiwiX3NlbGYiLCJfZGVsdGEiLCJfZ2V0VGltZSIsIkRhdGUiLCJub3ciLCJfbGFnVGhyZXNob2xkIiwiX2FkanVzdGVkTGFnIiwiX3N0YXJ0VGltZSIsIl9sYXN0VXBkYXRlIiwiX2dhcCIsIl9uZXh0VGltZSIsIl9saXN0ZW5lcnMiLCJfdGljayIsIm92ZXJsYXAiLCJkaXNwYXRjaCIsImVsYXBzZWQiLCJtYW51YWwiLCJ0aWNrIiwiZGVsdGFSYXRpbyIsImZwcyIsIndha2UiLCJnc2FwVmVyc2lvbnMiLCJ2ZXJzaW9uIiwiR3JlZW5Tb2NrR2xvYmFscyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNsZWVwIiwiZiIsInNldFRpbWVvdXQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNsZWFyVGltZW91dCIsImxhZ1Ntb290aGluZyIsInRocmVzaG9sZCIsImFkanVzdGVkTGFnIiwiSW5maW5pdHkiLCJfZnBzIiwib25jZSIsInByaW9yaXRpemUiLCJfZWFzZU1hcCIsIl9jdXN0b21FYXNlRXhwIiwiX3F1b3Rlc0V4cCIsIl9wYXJzZU9iamVjdEluU3RyaW5nIiwidmFsIiwicGFyc2VkVmFsIiwibGFzdEluZGV4T2YiLCJfcHJvcGFnYXRlWW95b0Vhc2UiLCJpc1lveW8iLCJfZmlyc3QiLCJ5b3lvRWFzZSIsIl95b3lvIiwiX2Vhc2UiLCJfeUVhc2UiLCJkZWZhdWx0RWFzZSIsIm9wZW4iLCJjbG9zZSIsIm5lc3RlZCIsInN1YnN0cmluZyIsIl9DRSIsIl9jb25maWdFYXNlRnJvbVN0cmluZyIsIl9pbnNlcnRFYXNlIiwiZWFzZUluIiwiZWFzZUluT3V0IiwibG93ZXJjYXNlTmFtZSIsInRvTG93ZXJDYXNlIiwiX2Vhc2VJbk91dEZyb21PdXQiLCJfY29uZmlnRWxhc3RpYyIsImFtcGxpdHVkZSIsInBlcmlvZCIsInAxIiwicDIiLCJwMyIsImFzaW4iLCJfY29uZmlnQmFjayIsIm92ZXJzaG9vdCIsInBvd2VyIiwiTGluZWFyIiwiZWFzZU5vbmUiLCJub25lIiwiU3RlcHBlZEVhc2UiLCJzdGVwcyIsImltbWVkaWF0ZVN0YXJ0Iiwic2V0IiwiQW5pbWF0aW9uIiwicmVwZWF0RGVsYXkiLCJ5b3lvIiwiX3Byb3RvIiwic3RhcnRUaW1lIiwiYXJndW1lbnRzIiwiX3RvdGFsVGltZSIsIl9wdExvb2t1cCIsIl9wVGltZSIsIml0ZXJhdGlvbiIsIl9wcyIsIl9yZWNhY2hlQW5jZXN0b3JzIiwicGF1c2VkIiwiaW5jbHVkZVJlcGVhdHMiLCJ3cmFwUmVwZWF0cyIsInByZXZJc1JldmVydGluZyIsImdsb2JhbFRpbWUiLCJfc2F0Iiwic2VlayIsInJlc3RhcnQiLCJpbmNsdWRlRGVsYXkiLCJwbGF5IiwicmV2ZXJzZWQiLCJyZXZlcnNlIiwicGF1c2UiLCJhdFRpbWUiLCJyZXN1bWUiLCJpbnZhbGlkYXRlIiwiaXNBY3RpdmUiLCJldmVudENhbGxiYWNrIiwiX29uVXBkYXRlIiwib25GdWxmaWxsZWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsIl9yZXNvbHZlIiwiX3RoZW4iLCJfcHJvbSIsInJhdGlvIiwiX0FuaW1hdGlvbiIsIl90aGlzIiwic29ydENoaWxkcmVuIiwiX3Byb3RvMiIsInRvIiwiZnJvbVRvIiwiZnJvbVZhcnMiLCJ0b1ZhcnMiLCJkZWxheWVkQ2FsbCIsInN0YWdnZXJUbyIsInN0YWdnZXIiLCJvbkNvbXBsZXRlQWxsIiwib25Db21wbGV0ZUFsbFBhcmFtcyIsIm9uQ29tcGxldGUiLCJvbkNvbXBsZXRlUGFyYW1zIiwic3RhZ2dlckZyb20iLCJzdGFnZ2VyRnJvbVRvIiwicHJldlBhdXNlZCIsInBhdXNlVHdlZW4iLCJwcmV2U3RhcnQiLCJwcmV2SXRlcmF0aW9uIiwicHJldlRpbWUiLCJ0RHVyIiwiY3Jvc3NpbmdTdGFydCIsInJld2luZGluZyIsImRvZXNXcmFwIiwicmVwZWF0UmVmcmVzaCIsIm9uUmVwZWF0IiwiX2hhc1BhdXNlIiwiX2ZvcmNpbmciLCJfbGFzdCIsIl9maW5kTmV4dFBhdXNlVHdlZW4iLCJvblVwZGF0ZSIsImFkanVzdGVkVGltZSIsIl90aGlzMiIsImFkZExhYmVsIiwiZ2V0Q2hpbGRyZW4iLCJ0d2VlbnMiLCJ0aW1lbGluZXMiLCJpZ25vcmVCZWZvcmVUaW1lIiwiZ2V0QnlJZCIsImFuaW1hdGlvbnMiLCJyZW1vdmVMYWJlbCIsImtpbGxUd2VlbnNPZiIsIl90b3RhbFRpbWUyIiwiYWRkUGF1c2UiLCJyZW1vdmVQYXVzZSIsInByb3BzIiwib25seUFjdGl2ZSIsImdldFR3ZWVuc09mIiwiX292ZXJ3cml0aW5nVHdlZW4iLCJjaGlsZHJlbiIsInBhcnNlZFRhcmdldHMiLCJpc0dsb2JhbFRpbWUiLCJfdGFyZ2V0cyIsInR3ZWVuVG8iLCJpbml0dGVkIiwidGwiLCJfdmFycyIsIl9vblN0YXJ0Iiwib25TdGFydCIsIm9uU3RhcnRQYXJhbXMiLCJ0d2VlbkZyb21UbyIsImZyb21Qb3NpdGlvbiIsInRvUG9zaXRpb24iLCJuZXh0TGFiZWwiLCJhZnRlclRpbWUiLCJwcmV2aW91c0xhYmVsIiwiYmVmb3JlVGltZSIsImN1cnJlbnRMYWJlbCIsInNoaWZ0Q2hpbGRyZW4iLCJhZGp1c3RMYWJlbHMiLCJzb2Z0IiwiY2xlYXIiLCJpbmNsdWRlTGFiZWxzIiwidXBkYXRlUm9vdCIsIl9mb3JjZUFsbFByb3BUd2VlbnMiLCJfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2VlbiIsInNldHRlciIsInN0cmluZ0ZpbHRlciIsImZ1bmNQYXJhbSIsInN0YXJ0TnVtcyIsImVuZE51bSIsImNodW5rIiwic3RhcnROdW0iLCJoYXNSYW5kb20iLCJwdCIsIl9yZW5kZXJDb21wbGV4U3RyaW5nIiwibWF0Y2hJbmRleCIsIm0iLCJmcCIsIm9wdGlvbmFsIiwiY3VycmVudFZhbHVlIiwicGFyc2VkU3RhcnQiLCJfc2V0dGVyRnVuY1dpdGhQYXJhbSIsIl9zZXR0ZXJGdW5jIiwiX3NldHRlclBsYWluIiwiX3JlbmRlckJvb2xlYW4iLCJfcmVuZGVyUGxhaW4iLCJfY2hlY2tQbHVnaW4iLCJwbHVnaW4iLCJwdExvb2t1cCIsIl9wYXJzZUZ1bmNPclN0cmluZyIsIl9wcm9jZXNzVmFycyIsInByaW9yaXR5IiwiY2xlYW5WYXJzIiwiaGFzUHJpb3JpdHkiLCJnc0RhdGEiLCJoYXJuZXNzVmFycyIsIm92ZXJ3cml0dGVuIiwicHJldlN0YXJ0QXQiLCJmdWxsVGFyZ2V0cyIsImF1dG9PdmVyd3JpdGUiLCJfb3ZlcndyaXRlIiwiX2Zyb20iLCJfcHRDYWNoZSIsIl9vcCIsIl9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkiLCJfb25Jbml0IiwiX3BhcnNlS2V5ZnJhbWUiLCJhbGxQcm9wcyIsImVhc2VFYWNoIiwiX3N0YWdnZXJUd2VlblByb3BzIiwiX3N0YWdnZXJQcm9wc1RvU2tpcCIsIl9BbmltYXRpb24yIiwic2tpcEluaGVyaXQiLCJfdGhpczMiLCJjdXJUYXJnZXQiLCJzdGFnZ2VyRnVuYyIsInN0YWdnZXJWYXJzVG9NZXJnZSIsIl90aGlzMyR2YXJzIiwia2YiLCJfcHJvdG8zIiwiaXNOZWdhdGl2ZSIsInByZXZSYXRpbyIsIl9yZW5kZXJaZXJvRHVyYXRpb25Ud2VlbiIsInJlc2V0VG8iLCJzdGFydElzUmVsYXRpdmUiLCJza2lwUmVjdXJzaW9uIiwicm9vdFBUIiwibG9va3VwIiwicHRDYWNoZSIsIl91cGRhdGVQcm9wVHdlZW5zIiwib3ZlcndyaXR0ZW5Qcm9wcyIsImN1ckxvb2t1cCIsImN1ck92ZXJ3cml0ZVByb3BzIiwia2lsbGluZ1RhcmdldHMiLCJwcm9wVHdlZW5Mb29rdXAiLCJmaXJzdFBUIiwiYTEiLCJhMiIsIl9hcnJheXNNYXRjaCIsInByb3BlcnR5QWxpYXNlcyIsIl9hZGRBbGlhc2VzVG9WYXJzIiwib25SZXZlcnNlQ29tcGxldGUiLCJvblJldmVyc2VDb21wbGV0ZVBhcmFtcyIsIl9zZXR0ZXJBdHRyaWJ1dGUiLCJoYXNOb25EZXBlbmRlbnRSZW1haW5pbmciLCJvcCIsImRlcCIsIl9zZXR0ZXJXaXRoTW9kaWZpZXIiLCJtU2V0IiwibXQiLCJwdDIiLCJmaXJzdCIsImxhc3QiLCJwciIsImNoYW5nZSIsInJlbmRlcmVyIiwiVHdlZW5NYXgiLCJUd2VlbkxpdGUiLCJUaW1lbGluZUxpdGUiLCJUaW1lbGluZU1heCIsIl9tZWRpYSIsIl9lbXB0eUFycmF5IiwiX2xhc3RNZWRpYVRpbWUiLCJfY29udGV4dElEIiwiX2Rpc3BhdGNoIiwiX29uTWVkaWFDaGFuZ2UiLCJtYXRjaGVzIiwiYW55TWF0Y2giLCJ0b2dnbGVkIiwicXVlcmllcyIsImNvbmRpdGlvbnMiLCJtYXRjaE1lZGlhIiwib25NYXRjaCIsIkNvbnRleHQiLCJfciIsImlzUmV2ZXJ0ZWQiLCJfcHJvdG81IiwicHJldlNlbGVjdG9yIiwiaWdub3JlIiwiZ2V0VHdlZW5zIiwiX3RoaXM0IiwiTWF0Y2hNZWRpYSIsImNvbnRleHRzIiwiX3Byb3RvNiIsIm1xIiwiYWN0aXZlIiwiY29uZCIsImFkZExpc3RlbmVyIiwicmVnaXN0ZXJQbHVnaW4iLCJfbGVuMiIsImFyZ3MiLCJfa2V5MiIsImdldFByb3BlcnR5IiwidW5pdCIsInVuY2FjaGUiLCJmb3JtYXQiLCJxdWlja1NldHRlciIsInNldHRlcnMiLCJxdWlja1RvIiwiX21lcmdlMiIsImlzVHdlZW5pbmciLCJyZWdpc3RlckVmZmVjdCIsIl9yZWYzIiwiZWZmZWN0IiwicGx1Z2lucyIsImV4dGVuZFRpbWVsaW5lIiwicGx1Z2luTmFtZSIsInJlZ2lzdGVyRWFzZSIsInBhcnNlRWFzZSIsImV4cG9ydFJvb3QiLCJpbmNsdWRlRGVsYXllZENhbGxzIiwibWF0Y2hNZWRpYVJlZnJlc2giLCJmb3VuZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1dGlscyIsIndyYXAiLCJyYW5nZSIsIndyYXBZb3lvIiwidG90YWwiLCJub3JtYWxpemUiLCJjbGFtcCIsInBpcGUiLCJfbGVuIiwiZnVuY3Rpb25zIiwiX2tleSIsInJlZHVjZSIsInVuaXRpemUiLCJpbnRlcnBvbGF0ZSIsIm11dGF0ZSIsImludGVycG9sYXRvcnMiLCJpbCIsImlzU3RyaW5nIiwibWFzdGVyIiwiaW5zdGFsbCIsImVmZmVjdHMiLCJ0aWNrZXIiLCJnbG9iYWxUaW1lbGluZSIsImNvcmUiLCJnbG9iYWxzIiwiZ2V0Q2FjaGUiLCJyZXZlcnRpbmciLCJ0b0FkZCIsInN1cHByZXNzT3ZlcndyaXRlcyIsIl9nZXRQbHVnaW5Qcm9wVHdlZW4iLCJfYnVpbGRNb2RpZmllclBsdWdpbiIsInRlbXAiLCJtb2RpZmllcnMiLCJfYWRkTW9kaWZpZXJzIiwiUG93ZXIwIiwiUG93ZXIxIiwiUG93ZXIyIiwiUG93ZXIzIiwiUG93ZXI0IiwiUXVhZCIsIkN1YmljIiwiUXVhcnQiLCJRdWludCIsIlN0cm9uZyIsIkVsYXN0aWMiLCJCYWNrIiwiQm91bmNlIiwiU2luZSIsIkV4cG8iLCJDaXJjIiwiX2RvY0VsZW1lbnQiLCJfcGx1Z2luSW5pdHRlZCIsIl90ZW1wRGl2IiwiX3JlY2VudFNldHRlclBsdWdpbiIsIl9zdXBwb3J0czNEIiwiX3RyYW5zZm9ybVByb3BzIiwiX1JBRDJERUciLCJfREVHMlJBRCIsIl9hdGFuMiIsImF0YW4yIiwiX2NhcHNFeHAiLCJfaG9yaXpvbnRhbEV4cCIsIl9jb21wbGV4RXhwIiwiX3Byb3BlcnR5QWxpYXNlcyIsImF1dG9BbHBoYSIsInNjYWxlIiwiYWxwaGEiLCJfcmVuZGVyQ1NTUHJvcCIsIl9yZW5kZXJQcm9wV2l0aEVuZCIsIl9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyIsIl9yZW5kZXJSb3VuZGVkQ1NTUHJvcCIsIl9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlIiwiX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQiLCJfc2V0dGVyQ1NTU3R5bGUiLCJfc2V0dGVyQ1NTUHJvcCIsInNldFByb3BlcnR5IiwiX3NldHRlclRyYW5zZm9ybSIsIl9zZXR0ZXJTY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsIl9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIiLCJyZW5kZXJUcmFuc2Zvcm0iLCJfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlciIsIl90cmFuc2Zvcm1Qcm9wIiwiX3RyYW5zZm9ybU9yaWdpblByb3AiLCJfc2F2ZVN0eWxlIiwiaXNOb3RDU1MiLCJ0Zm0iLCJ0cmFuc2Zvcm0iLCJfZ2V0Iiwiek9yaWdpbiIsInN2ZyIsInN2Z28iLCJfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zIiwidHJhbnNsYXRlIiwicmVtb3ZlUHJvcGVydHkiLCJfcmV2ZXJ0U3R5bGUiLCJfZ2V0U3R5bGVTYXZlciIsInByb3BlcnRpZXMiLCJzYXZlciIsInNhdmUiLCJfY3JlYXRlRWxlbWVudCIsIm5zIiwiY3JlYXRlRWxlbWVudE5TIiwiX2dldENvbXB1dGVkUHJvcGVydHkiLCJza2lwUHJlZml4RmFsbGJhY2siLCJjcyIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiX2NoZWNrUHJvcFByZWZpeCIsIl9wcmVmaXhlcyIsInByZWZlclByZWZpeCIsIl9pbml0Q29yZSIsImRvY3VtZW50RWxlbWVudCIsIl9nZXRCQm94SGFjayIsInN3YXBJZlBvc3NpYmxlIiwiYmJveCIsIm93bmVyU1ZHRWxlbWVudCIsIm9sZFBhcmVudCIsIm9sZFNpYmxpbmciLCJuZXh0U2libGluZyIsIm9sZENTUyIsImRpc3BsYXkiLCJnZXRCQm94IiwiX2dzYXBCQm94IiwiaW5zZXJ0QmVmb3JlIiwiX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyIsImF0dHJpYnV0ZXNBcnJheSIsImhhc0F0dHJpYnV0ZSIsIl9nZXRCQm94IiwiYm91bmRzIiwiZXJyb3IiLCJ3aWR0aCIsImhlaWdodCIsIl9pc1NWRyIsImdldENUTSIsIl9yZW1vdmVQcm9wZXJ0eSIsImZpcnN0MkNoYXJzIiwicmVtb3ZlQXR0cmlidXRlIiwiX2FkZE5vblR3ZWVuaW5nUFQiLCJiZWdpbm5pbmciLCJvbmx5U2V0QXRFbmQiLCJfbm9uQ29udmVydGlibGVVbml0cyIsImRlZyIsInJhZCIsInR1cm4iLCJfbm9uU3RhbmRhcmRMYXlvdXRzIiwiZmxleCIsIl9jb252ZXJ0VG9Vbml0IiwicHgiLCJpc1NWRyIsImN1clZhbHVlIiwiY3VyVW5pdCIsImhvcml6b250YWwiLCJpc1Jvb3RTVkciLCJ0YWdOYW1lIiwibWVhc3VyZVByb3BlcnR5IiwidG9QaXhlbHMiLCJ0b1BlcmNlbnQiLCJib2R5IiwiX3BhcnNlVHJhbnNmb3JtIiwib3JpZ2luIiwiX2ZpcnN0VHdvT25seSIsIl9zcGVjaWFsUHJvcHMiLCJfdHdlZW5Db21wbGV4Q1NTU3RyaW5nIiwic3RhcnRWYWx1ZXMiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJlbmRVbml0Iiwic3RhcnRVbml0IiwiX2tleXdvcmRUb1BlcmNlbnQiLCJ0b3AiLCJib3R0b20iLCJyaWdodCIsIl9yZW5kZXJDbGVhclByb3BzIiwiY2xlYXJUcmFuc2Zvcm1zIiwiY2xlYXJQcm9wcyIsIl9pZGVudGl0eTJETWF0cml4IiwiX3JvdGF0aW9uYWxQcm9wZXJ0aWVzIiwiX2lzTnVsbFRyYW5zZm9ybSIsIl9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkiLCJtYXRyaXhTdHJpbmciLCJfZ2V0TWF0cml4IiwiZm9yY2UyRCIsImFkZGVkVG9ET00iLCJtYXRyaXgiLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJvZmZzZXRQYXJlbnQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJfYXBwbHlTVkdPcmlnaW4iLCJvcmlnaW5Jc0Fic29sdXRlIiwic21vb3RoIiwibWF0cml4QXJyYXkiLCJwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbyIsImRldGVybWluYW50IiwieE9yaWdpbk9sZCIsInhPcmlnaW4iLCJ5T3JpZ2luT2xkIiwieU9yaWdpbiIsInhPZmZzZXRPbGQiLCJ4T2Zmc2V0IiwieU9mZnNldE9sZCIsInlPZmZzZXQiLCJ0eCIsInR5Iiwib3JpZ2luU3BsaXQiLCJ6Iiwicm90YXRpb24iLCJyb3RhdGlvblgiLCJyb3RhdGlvblkiLCJza2V3WCIsInNrZXdZIiwicGVyc3BlY3RpdmUiLCJhbmdsZSIsImExMiIsImEyMiIsInQxIiwidDIiLCJ0MyIsImExMyIsImEyMyIsImEzMyIsImE0MiIsImE0MyIsImEzMiIsImludmVydGVkU2NhbGVYIiwicm90YXRlIiwiZm9yY2VDU1MiLCJ4UGVyY2VudCIsIm9mZnNldFdpZHRoIiwieVBlcmNlbnQiLCJvZmZzZXRIZWlnaHQiLCJ0cmFuc2Zvcm1QZXJzcGVjdGl2ZSIsIl9yZW5kZXJTVkdUcmFuc2Zvcm1zIiwiX3JlbmRlckNTU1RyYW5zZm9ybXMiLCJfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zIiwiX2FkZFB4VHJhbnNsYXRlIiwiX3plcm9EZWciLCJfemVyb1B4IiwiX2VuZFBhcmVudGhlc2lzIiwidHJhbnNmb3JtcyIsInVzZTNEIiwiYTExIiwiYTIxIiwidGFuIiwiX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4iLCJkaXJlY3Rpb24iLCJjYXAiLCJmaW5hbFZhbHVlIiwiX2Fzc2lnbiIsInNvdXJjZSIsIl9hZGRSYXdUcmFuc2Zvcm1QVHMiLCJlbmRDYWNoZSIsInN0YXJ0Q2FjaGUiLCJzaWRlIiwicG9zaXRpb25BbmRTY2FsZSIsImFsbCIsIkNTU1BsdWdpbiIsInNwZWNpYWxQcm9wIiwicmVsYXRpdmUiLCJpc1RyYW5zZm9ybVJlbGF0ZWQiLCJ0cmFuc2Zvcm1Qcm9wVHdlZW4iLCJpbmxpbmVQcm9wcyIsInN0eWxlcyIsInZpc2liaWxpdHkiLCJwYXJzZVRyYW5zZm9ybSIsInNtb290aE9yaWdpbiIsImF1dG9Sb3VuZCIsImNoZWNrUHJlZml4IiwiZ2V0U3R5bGVTYXZlciIsImdzYXBXaXRoQ1NTIiwic21hbGxEZXZpY2UiLCJkcm9wRG93bk1lbnUiLCJiYXJzIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJiYXIiLCJjbGFzc05hbWUiLCJvcGFjaXR5IiwidHJhbnNsYXRlWSIsInRpbWVyIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiX19hc3NpZ24iLCJhc3NpZ24iLCJTdXBwcmVzc2VkRXJyb3IiLCJBbmltYXRlIiwiYWR2YW5jZSIsImlzUnVubmluZyIsImxlcnAiLCJleHAiLCJjdXJyZW50VGltZSIsImVhc2luZyIsInN0b3AiLCJEaW1lbnNpb25zIiwiYXV0b1Jlc2l6ZSIsImRlYm91bmNlIiwiZGVib3VuY2VkUmVzaXplIiwicmVzaXplIiwid3JhcHBlclJlc2l6ZU9ic2VydmVyIiwiUmVzaXplT2JzZXJ2ZXIiLCJvYnNlcnZlIiwiY29udGVudFJlc2l6ZU9ic2VydmVyIiwiZGVzdHJveSIsImRpc2Nvbm5lY3QiLCJvbldyYXBwZXJSZXNpemUiLCJvbkNvbnRlbnRSZXNpemUiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsInNjcm9sbEhlaWdodCIsInNjcm9sbFdpZHRoIiwibGltaXQiLCJFbWl0dGVyIiwiZXZlbnRzIiwiZW1pdCIsIm9uIiwiZmlsdGVyIiwib2ZmIiwiVmlydHVhbFNjcm9sbCIsIndoZWVsTXVsdGlwbGllciIsInRvdWNoTXVsdGlwbGllciIsInRvdWNoU3RhcnQiLCJlbWl0dGVyIiwib25XaW5kb3dSZXNpemUiLCJvbldoZWVsIiwicGFzc2l2ZSIsIm9uVG91Y2hTdGFydCIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaEVuZCIsImNsaWVudFgiLCJjbGllbnRZIiwidGFyZ2V0VG91Y2hlcyIsImxhc3REZWx0YSIsImRlbHRhWCIsImRlbHRhWSIsImV2ZW50IiwiZGVsdGFNb2RlIiwid2luZG93V2lkdGgiLCJ3aW5kb3dIZWlnaHQiLCJMZW5pcyIsIndoZWVsRXZlbnRzVGFyZ2V0IiwiZXZlbnRzVGFyZ2V0Iiwic21vb3RoV2hlZWwiLCJzeW5jVG91Y2giLCJzeW5jVG91Y2hMZXJwIiwidG91Y2hJbmVydGlhTXVsdGlwbGllciIsIlMiLCJ3IiwiTCIsIl8iLCJpbmZpbml0ZSIsIkUiLCJvcmllbnRhdGlvbiIsIlQiLCJNIiwiZ2VzdHVyZU9yaWVudGF0aW9uIiwiUiIsIk8iLCJXIiwiSCIsIk4iLCJDIiwiX19leHBlcmltZW50YWxfX25haXZlRGltZW5zaW9ucyIsIlAiLCJfX2lzU21vb3RoIiwiX19pc1Njcm9sbGluZyIsIl9faXNTdG9wcGVkIiwiX19pc0xvY2tlZCIsIm9uVmlydHVhbFNjcm9sbCIsImN0cmxLZXkiLCJpbmNsdWRlcyIsImlzU3RvcHBlZCIsImlzTG9ja2VkIiwicmVzZXQiLCJjb21wb3NlZFBhdGgiLCJyb290RWxlbWVudCIsImZpbmQiLCJpc1Ntb290aCIsImlzU2Nyb2xsaW5nIiwiYW5pbWF0ZSIsInZlbG9jaXR5Iiwic2Nyb2xsVG8iLCJ0YXJnZXRTY3JvbGwiLCJwcm9ncmFtbWF0aWMiLCJvbk5hdGl2ZVNjcm9sbCIsIl9fcHJldmVudE5leHRTY3JvbGxFdmVudCIsImFuaW1hdGVkU2Nyb2xsIiwiYWN0dWFsU2Nyb2xsIiwic2lnbiIsImxlbmlzVmVyc2lvbiIsImRpbWVuc2lvbnMiLCJ0b2dnbGVDbGFzc05hbWUiLCJ2aXJ0dWFsU2Nyb2xsIiwic2V0U2Nyb2xsIiwiaXNIb3Jpem9udGFsIiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvcCIsInJhZiIsImltbWVkaWF0ZSIsImxvY2siLCJzY3JvbGwiLCJjb25maWd1cmFibGUiLCJ0b2dnbGUiLCJfZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJ3cml0YWJsZSIsIl9kb2NFbCIsIl9ib2R5IiwiX2lzVG91Y2giLCJfcG9pbnRlclR5cGUiLCJfcm9vdCIsIl9ub3JtYWxpemVyIiwiX2V2ZW50VHlwZXMiLCJfZ2V0R1NBUCIsIl9zdGFydHVwIiwiX29ic2VydmVycyIsIl9zY3JvbGxlcnMiLCJfcHJveGllcyIsIl9icmlkZ2UiLCJfZ2V0UHJveHlQcm9wIiwiX2lzVmlld3BvcnQiLCJfYWRkTGlzdGVuZXIiLCJjYXB0dXJlIiwiX3JlbW92ZUxpc3RlbmVyIiwiX3Njcm9sbExlZnQiLCJfc2Nyb2xsVG9wIiwiX29uU2Nyb2xsIiwiaXNQcmVzc2VkIiwiX3Njcm9sbENhY2hlRnVuYyIsImRvTm90Q2FjaGUiLCJjYWNoaW5nRnVuYyIsImhpc3RvcnkiLCJzY3JvbGxSZXN0b3JhdGlvbiIsImlzTm9ybWFsaXppbmciLCJpT1MiLCJjYWNoZUlEIiwiX2hvcml6b250YWwiLCJvcyIsIm9zMiIsImQyIiwic2MiLCJfdmVydGljYWwiLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0IiwiX2dldFRhcmdldCIsIl9nZXRTY3JvbGxGdW5jIiwic2Nyb2xsaW5nRWxlbWVudCIsIl9nZXRWZWxvY2l0eVByb3AiLCJtaW5UaW1lUmVmcmVzaCIsInVzZURlbHRhIiwidjEiLCJ2MiIsImRyb3BUb1plcm9UaW1lIiwiZ2V0VmVsb2NpdHkiLCJsYXRlc3RWYWx1ZSIsInRPbGQiLCJ2T2xkIiwiX2dldEV2ZW50IiwiX2dzYXBBbGxvdyIsImNoYW5nZWRUb3VjaGVzIiwiX2dldEFic29sdXRlTWF4IiwiX3NldFNjcm9sbFRyaWdnZXIiLCJzY3JvbGxlcnMiLCJwcm94aWVzIiwiYnJpZGdlIiwiT2JzZXJ2ZXIiLCJpc1RvdWNoIiwibmF2aWdhdG9yIiwibWF4VG91Y2hQb2ludHMiLCJtc01heFRvdWNoUG9pbnRzIiwiZXZlbnRUeXBlcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwidG9sZXJhbmNlIiwiZHJhZ01pbmltdW0iLCJvblN0b3AiLCJvblN0b3BEZWxheSIsIndoZWVsU3BlZWQiLCJvbkRyYWdTdGFydCIsIm9uRHJhZ0VuZCIsIm9uRHJhZyIsIm9uUHJlc3MiLCJvblJlbGVhc2UiLCJvblJpZ2h0Iiwib25MZWZ0Iiwib25VcCIsIm9uRG93biIsIm9uQ2hhbmdlWCIsIm9uQ2hhbmdlWSIsIm9uQ2hhbmdlIiwib25Ub2dnbGVYIiwib25Ub2dnbGVZIiwib25Ib3ZlciIsIm9uSG92ZXJFbmQiLCJvbk1vdmUiLCJpZ25vcmVDaGVjayIsImlzTm9ybWFsaXplciIsIm9uR2VzdHVyZVN0YXJ0Iiwib25HZXN0dXJlRW5kIiwib25FbmFibGUiLCJvbkRpc2FibGUiLCJvbkNsaWNrIiwic2Nyb2xsU3BlZWQiLCJhbGxvd0NsaWNrcyIsImxvY2tBeGlzIiwib25Mb2NrQXhpcyIsIm9uU3RvcERlbGF5ZWRDYWxsIiwiZHJhZ2dlZCIsIm1vdmVkIiwid2hlZWxlZCIsImxvY2tlZCIsInByZXZEZWx0YVgiLCJwcmV2RGVsdGFZIiwic2Nyb2xsRnVuY1giLCJzY3JvbGxGdW5jWSIsInNjcm9sbFgiLCJzY3JvbGxZIiwibGltaXRUb1RvdWNoIiwiaXNWaWV3cG9ydCIsIm93bmVyRG9jIiwib3duZXJEb2N1bWVudCIsIm9uQ2xpY2tUaW1lIiwiY2xpY2tDYXB0dXJlIiwiX2lnbm9yZUNoZWNrIiwiaXNQb2ludGVyT3JUb3VjaCIsInBvaW50ZXJUeXBlIiwiY2hhbmdlZFgiLCJjaGFuZ2VkWSIsIm9uRGVsdGEiLCJfdngiLCJfdnkiLCJvblRvdWNoT3JQb2ludGVyRGVsdGEiLCJfb25EcmFnIiwiaXNEcmFnZ2luZyIsInN0YXJ0WCIsInN0YXJ0WSIsIl9vblByZXNzIiwiYnV0dG9uIiwiX29uUmVsZWFzZSIsImlzVHJhY2tpbmdEcmFnIiwid2FzRHJhZ2dpbmciLCJpc0RyYWdOb3RDbGljayIsImV2ZW50RGF0YSIsImRlZmF1bHRQcmV2ZW50ZWQiLCJjbGljayIsImNyZWF0ZUV2ZW50Iiwic3ludGhldGljRXZlbnQiLCJpbml0TW91c2VFdmVudCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiZGlzcGF0Y2hFdmVudCIsImlzR2VzdHVyaW5nIiwiX29uR2VzdHVyZVN0YXJ0IiwidG91Y2hlcyIsIl9vbkdlc3R1cmVFbmQiLCJvblNjcm9sbCIsIl9vbldoZWVsIiwibXVsdGlwbGllciIsIl9vbk1vdmUiLCJfb25Ib3ZlciIsIl9vbkhvdmVyRW5kIiwiX29uQ2xpY2siLCJfZGMiLCJlbmFibGUiLCJpc0VuYWJsZWQiLCJkaXNhYmxlIiwiZ2V0QWxsIiwiX3Jlc2l6ZURlbGF5IiwiX3RvQXJyYXkiLCJfdGltZTIiLCJfc3luY0ludGVydmFsIiwiX3JlZnJlc2hpbmciLCJfcG9pbnRlcklzRG93biIsIl9wcmV2V2lkdGgiLCJfcHJldkhlaWdodCIsIl9hdXRvUmVmcmVzaCIsIl9pZ25vcmVSZXNpemUiLCJfaWdub3JlTW9iaWxlUmVzaXplIiwiX2Jhc2VTY3JlZW5IZWlnaHQiLCJfYmFzZVNjcmVlbldpZHRoIiwiX2ZpeElPU0J1ZyIsIl9zY3JvbGxSZXN0b3JhdGlvbiIsIl9kaXYxMDB2aCIsIl8xMDB2aCIsIl9pc1JldmVydGVkIiwiX2NsYW1waW5nTWF4IiwiX2xpbWl0Q2FsbGJhY2tzIiwiX3JhZklEIiwiX3JlZnJlc2hpbmdBbGwiLCJfcXVldWVSZWZyZXNoSUQiLCJfcHJpbWFyeSIsIl90aW1lMSIsIl9sYXN0U2Nyb2xsVGltZSIsIl9lbmFibGVkIiwiX3BhcnNlQ2xhbXAiLCJfa2VlcENsYW1wIiwiX3JhZkJ1Z0ZpeCIsIl9wb2ludGVyRG93bkhhbmRsZXIiLCJfcG9pbnRlclVwSGFuZGxlciIsIl9nZXRWaWV3cG9ydERpbWVuc2lvbiIsImRpbWVuc2lvblByb3BlcnR5IiwiX2dldEJvdW5kc0Z1bmMiLCJfd2luT2Zmc2V0cyIsIl9nZXRCb3VuZHMiLCJfbWF4U2Nyb2xsIiwiX2l0ZXJhdGVBdXRvUmVmcmVzaCIsIl9lbmRBbmltYXRpb24iLCJlbmFibGVkIiwiY2FsbGJhY2tBbmltYXRpb24iLCJfYWJzIiwiX2xlZnQiLCJfcmlnaHQiLCJfYm90dG9tIiwiX3dpZHRoIiwiX2hlaWdodCIsIl9SaWdodCIsIl9MZWZ0IiwiX1RvcCIsIl9Cb3R0b20iLCJfcGFkZGluZyIsIl9tYXJnaW4iLCJfV2lkdGgiLCJfSGVpZ2h0IiwiX3B4IiwiX2dldENvbXB1dGVkU3R5bGUiLCJ3aXRob3V0VHJhbnNmb3JtcyIsIl9nZXRTaXplIiwiX2dldExhYmVsUmF0aW9BcnJheSIsIl9zbmFwRGlyZWN0aW9uYWwiLCJzbmFwSW5jcmVtZW50T3JBcnJheSIsInNuYXBwZWQiLCJfbXVsdGlMaXN0ZW5lciIsInR5cGVzIiwibm9uUGFzc2l2ZSIsIl93aGVlbExpc3RlbmVyIiwic2Nyb2xsRnVuYyIsIndoZWVsSGFuZGxlciIsIl9tYXJrZXJEZWZhdWx0cyIsInN0YXJ0Q29sb3IiLCJlbmRDb2xvciIsImluZGVudCIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsInRvZ2dsZUFjdGlvbnMiLCJhbnRpY2lwYXRlUGluIiwiX2tleXdvcmRzIiwiX29mZnNldFRvUHgiLCJzaXplIiwiZXFJbmRleCIsIl9jcmVhdGVNYXJrZXIiLCJjb250YWluZXIiLCJfcmVmNCIsIm1hdGNoV2lkdGhFbCIsImNvbnRhaW5lckFuaW1hdGlvbiIsInVzZUZpeGVkUG9zaXRpb24iLCJpc1Njcm9sbGVyIiwiX2lzU3RhcnQiLCJpbm5lclRleHQiLCJfb2Zmc2V0IiwiX3Bvc2l0aW9uTWFya2VyIiwibWFya2VyIiwiZmxpcHBlZCIsIm9wcG9zaXRlU2lkZSIsIl9pc0ZsaXBwZWQiLCJfdHJpZ2dlcnMiLCJfaWRzIiwiX3N5bmMiLCJfdXBkYXRlQWxsIiwiX3NldEJhc2VEaW1lbnNpb25zIiwiX29uUmVzaXplIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJ3ZWJraXRGdWxsc2NyZWVuRWxlbWVudCIsIl9zb2Z0UmVmcmVzaCIsIl9yZWZyZXNoQWxsIiwiX3NhdmVkU3R5bGVzIiwiX3JldmVydFJlY29yZGVkIiwicXVlcnkiLCJfcmV2ZXJ0QWxsIiwiX2NsZWFyU2Nyb2xsTWVtb3J5IiwicmVjIiwiX3JlZnJlc2hJRCIsIl9yZWZyZXNoMTAwdmgiLCJfaGlkZUFsbE1hcmtlcnMiLCJoaWRlIiwic2tpcFJldmVydCIsImlzUmVmcmVzaGluZyIsInJlZnJlc2hJbml0cyIsInNjcm9sbEJlaGF2aW9yIiwicmVmcmVzaCIsIl9zdWJQaW5PZmZzZXQiLCJwaW4iLCJvcmlnaW5hbCIsImFkanVzdFBpblNwYWNpbmciLCJzY3JvbGxlciIsIl9kaXIiLCJlbmRDbGFtcCIsIl9lbmRDbGFtcCIsInN0YXJ0Q2xhbXAiLCJfc3RhcnRDbGFtcCIsInNldFBvc2l0aW9ucyIsIm9uUmVmcmVzaCIsIl9sYXN0U2Nyb2xsIiwiX2RpcmVjdGlvbiIsImlzVXBkYXRpbmciLCJyZWNvcmRWZWxvY2l0eSIsIl9wcm9wTmFtZXNUb0NvcHkiLCJfc3RhdGVQcm9wcyIsIl9zd2FwUGluSW4iLCJzcGFjZXIiLCJzcGFjZXJTdGF0ZSIsInN3YXBwZWRJbiIsInNwYWNlclN0eWxlIiwicGluU3R5bGUiLCJmbGV4QmFzaXMiLCJvdmVyZmxvdyIsImJveFNpemluZyIsIl9zZXRTdGF0ZSIsInN0YXRlIiwiX2dldFN0YXRlIiwic2Nyb2xsZXJTaXplIiwibWFya2VyU2Nyb2xsZXIiLCJzY3JvbGxlckJvdW5kcyIsImJvcmRlcldpZHRoIiwic2Nyb2xsZXJNYXgiLCJjbGFtcFplcm9Qcm9wIiwibG9jYWxPZmZzZXQiLCJnbG9iYWxPZmZzZXQiLCJvZmZzZXRzIiwiX2NhU2Nyb2xsRGlzdCIsIl9wcmVmaXhFeHAiLCJfcmVwYXJlbnQiLCJfc3RPcmlnIiwiX2ludGVycnVwdGlvblRyYWNrZXIiLCJnZXRWYWx1ZUZ1bmMiLCJpbml0aWFsVmFsdWUiLCJvbkludGVycnVwdCIsImxhc3QxIiwibGFzdDIiLCJfc2hpZnRNYXJrZXIiLCJfZ2V0VHdlZW5DcmVhdG9yIiwiZ2V0U2Nyb2xsIiwiZ2V0VHdlZW4iLCJjaGFuZ2UxIiwiY2hhbmdlMiIsImNoZWNrRm9ySW50ZXJydXB0aW9uIiwicGluQ2FjaGUiLCJzbmFwRnVuYyIsInNjcm9sbDEiLCJzY3JvbGwyIiwibWFya2VyU3RhcnQiLCJtYXJrZXJFbmQiLCJtYXJrZXJTdGFydFRyaWdnZXIiLCJtYXJrZXJFbmRUcmlnZ2VyIiwibWFya2VyVmFycyIsImV4ZWN1dGluZ09uUmVmcmVzaCIsInBpbk9yaWdpbmFsU3RhdGUiLCJwaW5BY3RpdmVTdGF0ZSIsInBpblN0YXRlIiwicGluR2V0dGVyIiwicGluU2V0dGVyIiwicGluU3RhcnQiLCJwaW5DaGFuZ2UiLCJzcGFjaW5nU3RhcnQiLCJtYXJrZXJTdGFydFNldHRlciIsInBpbk1vdmVzIiwibWFya2VyRW5kU2V0dGVyIiwic25hcDEiLCJzbmFwMiIsInNjcnViVHdlZW4iLCJzY3J1YlNtb290aCIsInNuYXBEdXJDbGFtcCIsInNuYXBEZWxheWVkQ2FsbCIsInByZXZTY3JvbGwiLCJwcmV2QW5pbVByb2dyZXNzIiwiY2FNYXJrZXJTZXR0ZXIiLCJjdXN0b21SZXZlcnRSZXR1cm4iLCJ0b2dnbGVDbGFzcyIsIm9uVG9nZ2xlIiwic2NydWIiLCJwaW5TcGFjaW5nIiwiaW52YWxpZGF0ZU9uUmVmcmVzaCIsIm9uU2NydWJDb21wbGV0ZSIsIm9uU25hcENvbXBsZXRlIiwicGluUmVwYXJlbnQiLCJwaW5TcGFjZXIiLCJmYXN0U2Nyb2xsRW5kIiwicHJldmVudE92ZXJsYXBzIiwiaXNUb2dnbGUiLCJzY3JvbGxlckNhY2hlIiwicGluVHlwZSIsImNhbGxiYWNrcyIsIm9uRW50ZXIiLCJvbkxlYXZlIiwib25FbnRlckJhY2siLCJvbkxlYXZlQmFjayIsIm1hcmtlcnMiLCJvblJlZnJlc2hJbml0IiwiZ2V0U2Nyb2xsZXJTaXplIiwiX2dldFNpemVGdW5jIiwiZ2V0U2Nyb2xsZXJPZmZzZXRzIiwiX2dldE9mZnNldHNGdW5jIiwibGFzdFNuYXAiLCJsYXN0UmVmcmVzaCIsInByZXZQcm9ncmVzcyIsImJpbmQiLCJyZWZyZXNoUHJpb3JpdHkiLCJ0d2VlblNjcm9sbCIsInNjcnViRHVyYXRpb24iLCJfZ2V0Q2xvc2VzdExhYmVsIiwic3QiLCJkaXJlY3Rpb25hbCIsInJlZnJlc2hlZFJlY2VudGx5IiwiZW5kU2Nyb2xsIiwibmF0dXJhbEVuZCIsImluZXJ0aWEiLCJfc25hcCIsIl9vbkludGVycnVwdCIsIl9vbkNvbXBsZXRlIiwic3RSZXZlcnQiLCJzcGFjZXJJc05hdGl2ZSIsIm9sZE9uVXBkYXRlIiwib2xkUGFyYW1zIiwib25VcGRhdGVQYXJhbXMiLCJwcmV2aW91cyIsInByZXZSZWZyZXNoaW5nIiwiX3N3YXBQaW5PdXQiLCJwaW5PZmZzZXQiLCJpc1ZlcnRpY2FsIiwib3ZlcnJpZGUiLCJjdXJUcmlnZ2VyIiwiY3VyUGluIiwib3Bwb3NpdGVTY3JvbGwiLCJyZXZlcnRlZFBpbnMiLCJmb3JjZWRPdmVyZmxvdyIsIm1hcmtlclN0YXJ0T2Zmc2V0IiwibWFya2VyRW5kT2Zmc2V0IiwiaXNGaXJzdFJlZnJlc2giLCJvdGhlclBpbk9mZnNldCIsInBhcnNlZEVuZCIsInBhcnNlZEVuZFRyaWdnZXIiLCJlbmRUcmlnZ2VyIiwicGlubmVkQ29udGFpbmVyIiwidHJpZ2dlckluZGV4IiwidW5zaGlmdCIsIl9waW5QdXNoIiwiX3Bpbk9mZnNldCIsImNlaWwiLCJvbWl0T2Zmc2V0cyIsIl9jb3B5U3RhdGUiLCJlbmRBbmltYXRpb24iLCJsYWJlbFRvU2Nyb2xsIiwiZ2V0VHJhaWxpbmciLCJmb3JjZUZha2UiLCJ0b2dnbGVTdGF0ZSIsImFjdGlvbiIsInN0YXRlQ2hhbmdlZCIsImlzQXRNYXgiLCJpc1Rha2luZ0FjdGlvbiIsImNsaXBwZWQiLCJuZXdTdGFydCIsIm5ld0VuZCIsImtlZXBDbGFtcCIsIl9jaGFuZ2UiLCJhbGxvd0FuaW1hdGlvbiIsIm9uS2lsbCIsInVwZGF0ZUZ1bmMiLCJfcXVldWVSZWZyZXNoQWxsIiwidXNlckFnZW50IiwibW0iLCJib2R5U3R5bGUiLCJib3JkZXIiLCJib3JkZXJUb3BTdHlsZSIsIkFuaW1hdGlvblByb3RvIiwiaGlkZGVuIiwibGltaXRDYWxsYmFja3MiLCJtcyIsInN5bmNJbnRlcnZhbCIsImlnbm9yZU1vYmlsZVJlc2l6ZSIsImF1dG9SZWZyZXNoRXZlbnRzIiwic2Nyb2xsZXJQcm94eSIsImNsZWFyTWF0Y2hNZWRpYSIsImlzSW5WaWV3cG9ydCIsInBvc2l0aW9uSW5WaWV3cG9ydCIsInJlZmVyZW5jZVBvaW50Iiwia2lsbEFsbCIsImFsbG93TGlzdGVuZXJzIiwibGlzdGVuZXJzIiwic2F2ZVN0eWxlcyIsInNhZmUiLCJjbGVhclNjcm9sbE1lbW9yeSIsIm1heFNjcm9sbCIsImdldFNjcm9sbEZ1bmMiLCJzbmFwRGlyZWN0aW9uYWwiLCJiYXRjaCIsInZhcnNDb3B5IiwiaW50ZXJ2YWwiLCJiYXRjaE1heCIsInByb3h5Q2FsbGJhY2siLCJlbGVtZW50cyIsInRyaWdnZXJzIiwiX2lucHV0SXNGb2N1c2VkIiwiX2NsYW1wU2Nyb2xsQW5kR2V0RHVyYXRpb25NdWx0aXBsaWVyIiwiX2FsbG93TmF0aXZlUGFubmluZyIsInRvdWNoQWN0aW9uIiwiX292ZXJmbG93IiwiYXV0byIsIl9uZXN0ZWRTY3JvbGwiLCJfcmVmNSIsIm5vZGUiLCJfaXNTY3JvbGxUIiwib3ZlcmZsb3dZIiwib3ZlcmZsb3dYIiwiX2lzU2Nyb2xsIiwic3RvcFByb3BhZ2F0aW9uIiwiX2lucHV0T2JzZXJ2ZXIiLCJpbnB1dHMiLCJfY2FwdHVyZUlucHV0cyIsIl9pbnB1dEV4cCIsImlzSW5wdXQiLCJfZ2V0U2Nyb2xsTm9ybWFsaXplciIsIm1heFkiLCJsYXN0UmVmcmVzaElEIiwic2tpcFRvdWNoTW92ZSIsInN0YXJ0U2Nyb2xsWCIsInN0YXJ0U2Nyb2xsWSIsIl92YXJzMiIsIm5vcm1hbGl6ZVNjcm9sbFgiLCJtb21lbnR1bSIsImFsbG93TmVzdGVkU2Nyb2xsIiwic21vb3RoZXIiLCJTY3JvbGxTbW9vdGhlciIsInNtb290aGVySW5zdGFuY2UiLCJpbml0aWFsU2NhbGUiLCJ2aXN1YWxWaWV3cG9ydCIsIm91dGVyV2lkdGgiLCJ3aGVlbFJlZnJlc2giLCJyZXNvbHZlTW9tZW50dW1EdXJhdGlvbiIsImlucHV0T2JzZXJ2ZXIiLCJyZXN1bWVUb3VjaE1vdmUiLCJzY3JvbGxDbGFtcFgiLCJzY3JvbGxDbGFtcFkiLCJ1cGRhdGVDbGFtcHMiLCJyZW1vdmVDb250ZW50T2Zmc2V0Iiwib25SZXNpemUiLCJpZ25vcmVEcmFnIiwicHJldlNjYWxlIiwiY3VycmVudFNjcm9sbCIsInZlbG9jaXR5WCIsInZlbG9jaXR5WSIsInhBcnJheSIsInlBcnJheSIsInlDbGFtcGVkIiwibm9ybWFsaXplU2Nyb2xsIiwibm9ybWFsaXplciIsInNzIiwicmVmIiwibGVuaXMiXSwic291cmNlUm9vdCI6IiJ9